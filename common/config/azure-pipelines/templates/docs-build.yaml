# The template defines the primary steps for creating the TypeDoc API files, gathering other md files,
# and running a step to combine everything.

parameters:
  - name: workingDir
    type: string
    default: $(Pipeline.Workspace)/appui
  - name: stagingDir
    type: string
    default: $(System.ArtifactsDirectory)/staging
  - name: outputDir
    type: string
    default: $(Agent.BuildDirectory)/tempDocsBuild/public_build
  - name: downloadCurrentBuildArtifacts
    type: boolean
    default: false

steps:
  - script: node common/scripts/install-run-rush.js install
    displayName: rush install
    workingDirectory: ${{ parameters.workingDir }}

  - script: node common/scripts/install-run-rush.js build --to-version-policy prerelease-monorepo-lockStep
    displayName: rush build
    workingDirectory: ${{ parameters.workingDir }}

  - script: node common/scripts/install-run-rush.js docs
    displayName: rush docs
    workingDirectory: ${{ parameters.workingDir }}

  # Gathers all the pieces to run BeMetalsmith
  - script: |
      mkdir ${{ parameters.stagingDir }}/reference/
      echo Copying all reference files to staging
      robocopy /E generated-docs/ui/ ${{ parameters.stagingDir }}/reference/
      echo Copying extracted code to staging
      mkdir ${{ parameters.stagingDir }}/extract/
      robocopy /E generated-docs/extract/ ${{ parameters.stagingDir }}/extract/
      echo Copying all files from \docs folder
      robocopy /E docs/ ${{ parameters.stagingDir }}/
    workingDirectory: ${{ parameters.workingDir }}
    displayName: Copy Reference files to Staging
    failOnStderr: false
    continueOnError: true

  - script: dir /S
    workingDirectory: ${{ parameters.stagingDir }}
    displayName: Log files

  # Currently BeMetalsmith is an internal only tool
  - script: npm install @bentley/bemetalsmith@4.x
    displayName: Install BeMetalsmith
    workingDirectory: ${{ parameters.workingDir }}

  - script: "./node_modules/.bin/bmsBuild --strictLinkChecking --topicsMustHaveDesc --source ${{ parameters.stagingDir }} --destination ${{ parameters.outputDir }} --siteTitle iTwin.js"
    displayName: Run bmsBuild
    workingDirectory: ${{ parameters.workingDir }}

  # Update the .updated.json file after the bmsBuild
  - publish: ${{ parameters.stagingDir }}/config/.updated.json
    artifact: .updated.json
    displayName: Publish Pipeline Artifact - .updated.json
    condition: and(succeeded(), eq('${{ parameters.downloadCurrentBuildArtifacts }}', false))

  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: AppUi Docs"
    inputs:
      PathtoPublish: ${{ parameters.workingDir }}
      ArtifactName: "AppUi Docs"
