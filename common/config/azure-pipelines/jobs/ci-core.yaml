parameters:
  name: ""
  pool: ""
  nodeVersion: ""

jobs:
  - job:
    strategy:
      matrix:
        "Windows_${{ parameters.name }}":
          OS: windows-latest
          platform: Windows_NT
          name: $(win_pool)
        "Linux_${{ parameters.name }}":
          OS: ubuntu-latest
          platform: Linux
          name: $(linux_pool)
        "MacOS_${{ parameters.name }}":
          OS: macOS-latest
          platform: Darwin
          name: $(mac_pool)
        "Windows_${{ parameters.name }}_core_3x":
          OS: windows-latest
          platform: Windows_NT
          name: $(win_pool)
          variant: core-3x
        "Linux_${{ parameters.name }}_core_3x":
          OS: ubuntu-latest
          platform: Linux
          name: $(linux_pool)
          variant: core-3x
        "MacOS_${{ parameters.name }}_core_3x":
          OS: macOS-latest
          platform: Darwin
          name: $(mac_pool)
          variant: core-3x

    timeoutInMinutes: 30

    pool: ${{ parameters.pool }}

    workspace:
      clean: all

    steps:
      - checkout: self
        clean: true
        persistCredentials: true
      - task: NodeTool@0
        displayName: "Use Node ${{ parameters.nodeVersion }}"
        inputs:
          versionSpec: ${{ parameters.nodeVersion }}
          checkLatest: true

      - script: |
          git config --local user.email imodeljs-admin@users.noreply.github.com
          git config --local user.name imodeljs-admin
        displayName: git config

      - powershell: |
          # Get the new version number.
          $json = Get-Content -Raw -Path common/config/rush/version-policies.json | ConvertFrom-Json
          $currVersion = $json[0].version

          $newBuildNumber = $currVersion + "_$(Build.BuildNumber)"

          Write-Host "##vso[build.updatebuildnumber]$newBuildNumber"
        displayName: Set build number
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

      - template: ../templates/core-build.yaml

      - template: ../templates/publish-storybook.yaml

      # Will run if even there is a failure somewhere else in the pipeline.
      - template: ../templates/publish-test-results.yaml
        parameters:
          NodeVersion: ${{ parameters.nodeVersion }}
      # The publish script identifies any new packages not previously published and tags the build
      - template: ../templates/publish.yaml
