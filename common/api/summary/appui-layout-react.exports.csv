sep=;
Release Tag;API Item
internal;addFloatingWidget(state: NineZoneState, id: FloatingWidgetState["id"], tabs: WidgetState["tabs"], floatingWidgetArgs?: Partial
internal;addPanelWidget(state: NineZoneState, side: PanelSide, id: WidgetState["id"], tabs: WidgetState["tabs"], widgetArgs?: Partial
internal;addPopoutWidget(state: NineZoneState, id: PopoutWidgetState["id"], tabs: WidgetState["tabs"], popoutWidgetArgs?: Partial
internal;addTab(state: NineZoneState, id: TabState["id"], tabArgs?: Partial
internal;addTabToWidget(state: NineZoneState, tabId: TabState["id"], widgetId: WidgetState["id"]): NineZoneState
internal;AnimateDockedToolSettingsContext: React_2.Context
internal;AppButton 
internal;AppButtonProps 
internal;AppContent(): JSX.Element
internal;AutoCollapseUnpinnedPanelsContext: React_2.Context
internal;BackButton 
internal;BackButtonProps 
internal;Backstage 
internal;BackstageDefaultProps = Pick
internal;BackstageItem 
internal;BackstageItemProps 
internal;BackstageProps 
internal;BackstageSeparator 
internal;BottomPanelSide = "bottom"
internal;CenterContent(): JSX.Element
internal;CenterContentNodeContext: React_2.Context
internal;ContentNodeContext: React_2.Context
internal;convertAllPopupWidgetContainersToFloating(state: NineZoneState): NineZoneState
internal;createLayoutStore(args?: Partial
internal;createNineZoneState(args?: Partial
internal;CursorType = "nwse-resize" | "nesw-resize" | "ew-resize" | "ns-resize" | "grabbing"
internal;CursorTypeContext: React_2.Context
internal;Dialog(props: DialogProps): JSX.Element
internal;DialogProps 
internal;Dock(): JSX.Element
internal;DockedToolSetting(props: ToolSettingProps): JSX.Element
internal;DockedToolSettings(props: DockedToolSettingsProps): JSX.Element
internal;DockedToolSettingsHandle(props: DockedToolSettingsHandleProps): JSX.Element
internal;DockedToolSettingsHandleProps 
internal;DockedToolSettingsOverflow: React_2.ForwardRefExoticComponent
internal;DockedToolSettingsOverflowProps 
internal;DockedToolSettingsProps 
internal;DockedToolSettingsState
internal;dockWidgetContainer(state: NineZoneState, widgetTabId: string, idIsContainerId?: boolean): NineZoneState
internal;DraggedPanelSideContext: React_2.Context
internal;DraggedResizeHandleContext: React_2.Context
internal;DraggedTabState
internal;DraggedWidgetIdContext: React_2.Context
internal;DragItem = TabDragItem | WidgetDragItem | PanelGripDragItem | ResizeHandleDragItem
internal;DragManager
internal;DragManagerContext: React_2.Context
internal;DragProvider: React_2.NamedExoticComponent
internal;DragProviderProps
internal;DragStartArgs
internal;DropTargetState = TabDragDropTargetState | WidgetDragDropTargetState
internal;Ellipsis(props: CommonProps): JSX.Element
internal;eqlOverflown(prev: readonly string[] | undefined, value: readonly string[]): boolean
internal;ExpandableButton 
internal;ExpandableButtonProps 
internal;FloatingTab(): JSX.Element
internal;FloatingTabLocation
internal;FloatingWidget(props: FloatingWidgetProps): JSX.Element
internal;floatingWidgetBringToFront(state: NineZoneState, floatingWidgetId: FloatingWidgetState["id"]): NineZoneState
internal;FloatingWidgetBringToFrontAction
internal;FloatingWidgetClearUserSizedAction
internal;FloatingWidgetDropTargetState
internal;FloatingWidgetHomeState
internal;FloatingWidgetLocation
internal;FloatingWidgetNodeContext: React_2.Context
internal;FloatingWidgetProps
internal;FloatingWidgetProvider(props: FloatingWidgetProviderProps): JSX.Element
internal;FloatingWidgetProviderProps
internal;FloatingWidgetResizeAction
internal;FloatingWidgetResizeHandle = FloatingWidgetEdgeHandle | FloatingWidgetCornerHandle
internal;FloatingWidgets(): JSX.Element
internal;FloatingWidgetSendBackAction
internal;FloatingWidgetSetBoundsAction
internal;FloatingWidgetSetUserSizedAction
internal;FloatingWidgetsState
internal;FloatingWidgetState
internal;floatWidget(state: NineZoneState, widgetTabId: string, point?: PointProps, size?: SizeProps): NineZoneState
internal;Footer 
internal;FooterIndicator: React_2.ForwardRefExoticComponent
internal;FooterIndicatorProps 
internal;FooterPopup(props: Partial
internal;FooterProps 
internal;getChildKey(child: React_2.ReactNode, index: number): string
internal;getCursorClassName(type: CursorType): string
internal;getOverflown(width: number, docked: ReadonlyArray
internal;getResizeBy(handle: FloatingWidgetResizeHandle, offset: PointProps): Rectangle
internal;getTabLocation(state: NineZoneState, id: TabState["id"]): TabLocation | undefined
internal;getUniqueId(): string
internal;getWidgetLocation(state: NineZoneState, id: WidgetState["id"]): WidgetLocation | undefined
internal;getWidgetPanelSectionId(side: PanelSide, panelSectionIndex: number): string
internal;handleToCursorType(handle: FloatingWidgetResizeHandle): CursorType
internal;HorizontalPanelSide = TopPanelSide | BottomPanelSide
internal;HorizontalPanelState 
internal;IconOnlyOnWidgetTabContext: React_2.Context
internal;insertPanelWidget(state: NineZoneState, side: PanelSide, id: WidgetState["id"], tabs: WidgetState["tabs"], sectionIndex: number, widgetArgs?: Partial
internal;insertTabToWidget(state: NineZoneState, tabId: TabState["id"], widgetId: WidgetState["id"], tabIndex: number): NineZoneState
internal;isDockedToolSettingsState(state: ToolSettingsState): state is DockedToolSettingsState
internal;isFloatingTabLocation(location: TabLocation): location is FloatingTabLocation
internal;isFloatingWidgetLocation(location: WidgetLocation): location is FloatingWidgetLocation
internal;isHorizontalPanelSide: (side: PanelSide) => side is HorizontalPanelSide
internal;isHorizontalPanelState(state: PanelState): state is HorizontalPanelState
internal;isPanelDropTargetState(state: DropTargetState): state is PanelDropTargetState
internal;isPanelTabLocation(location: TabLocation): location is PanelTabLocation
internal;isPanelWidgetLocation(location: WidgetLocation): location is PanelWidgetLocation
internal;isPopoutTabLocation(location: TabLocation): location is PopoutTabLocation
internal;isPopoutWidgetLocation(location: WidgetLocation): location is PopoutWidgetLocation
internal;isSectionDropTargetState(state: DropTargetState): state is SectionDropTargetState
internal;isTabDragDropTargetState(state: DropTargetState): state is TabDragDropTargetState
internal;isTabDropTargetState(state: DropTargetState): state is TabDropTargetState
internal;isWidgetDragDropTargetState(state: DropTargetState): state is WidgetDragDropTargetState
internal;isWidgetDropTargetState(state: DropTargetState): state is WidgetDropTargetState
internal;isWindowDropTargetState(state: WidgetDragDropTargetState): state is WindowDropTargetState
internal;LayoutState = NineZoneState
internal;LayoutStore = StoreApi
internal;LayoutStoreContext: React_2.Context
internal;LeftPanelSide = "left"
internal;MeasureContext: React_2.Context
internal;MessageCenter 
internal;MessageCenterDialog 
internal;MessageCenterDialogProps 
internal;MessageCenterMessage 
internal;MessageCenterMessageProps 
internal;MessageCenterProps 
internal;MessageCenterTab 
internal;MessageCenterTabProps 
internal;NavigationArea: React_2.NamedExoticComponent
internal;NavigationAreaProps 
internal;NineZone(props: NineZoneProps): JSX.Element
internal;NineZoneAction = ResizeAction | PanelToggleCollapsedAction | PanelSetCollapsedAction | PanelSetSizeAction | PanelSetSplitterPercentAction | PanelToggleSpanAction | PanelTogglePinnedAction | PanelInitializeAction | FloatingWidgetResizeAction | FloatingWidgetSetBoundsAction | FloatingWidgetBringToFrontAction | FloatingWidgetSendBackAction | FloatingWidgetClearUserSizedAction | FloatingWidgetSetUserSizedAction | PopoutWidgetSendBackAction | PanelWidgetDragStartAction | WidgetDragAction | WidgetDragEndAction | WidgetTabClickAction | WidgetTabDoubleClickAction | WidgetTabDragStartAction | WidgetTabDragAction | WidgetTabDragEndAction | WidgetTabPopoutAction | ToolSettingsDragStartAction | ToolSettingsDockAction
internal;NineZoneDispatch = (action: NineZoneAction) => void
internal;NineZoneDispatchContext: React_2.Context
internal;NineZoneLabels
internal;NineZoneLabelsContext: React_2.Context
internal;NineZoneProps
internal;NineZoneProvider(props: NineZoneProviderProps): JSX.Element
internal;NineZoneProviderProps 
internal;NineZoneState
internal;NineZoneStateReducer(state: NineZoneState, action: NineZoneAction): NineZoneState
internal;offsetAndContainInContainer: (tooltipBounds: RectangleProps, containerSize: SizeProps, offset?: PointProps) => Point
internal;onOverflowLabelAndEditorResize(): void
internal;PanelDropTargetState
internal;PanelInitializeAction
internal;PanelSetCollapsedAction
internal;PanelSetSizeAction
internal;PanelSetSplitterPercentAction
internal;PanelSide = VerticalPanelSide | HorizontalPanelSide
internal;PanelSideContext: React_2.Context
internal;panelSides: [LeftPanelSide, RightPanelSide, TopPanelSide, BottomPanelSide]
internal;PanelsState
internal;PanelState
internal;PanelTabLocation
internal;PanelToggleCollapsedAction
internal;PanelTogglePinnedAction
internal;PanelToggleSpanAction
internal;PanelWidget: React_2.ForwardRefExoticComponent
internal;PanelWidgetDragStartAction
internal;PanelWidgetLocation
internal;PanelWidgetProps
internal;PinToggle(): JSX.Element
internal;PointerCaptorArgs
internal;PointerCaptorEvent = MouseEvent | TouchEvent
internal;PopoutTabLocation
internal;PopoutToggle(): JSX.Element
internal;PopoutWidgetLocation
internal;PopoutWidgetSendBackAction
internal;PopoutWidgetsState
internal;PopoutWidgetState
internal;popoutWidgetToChildWindow(state: NineZoneState, tabId: string, preferredBounds: RectangleProps): NineZoneState
internal;removeTab(state: NineZoneState, tabId: TabState["id"]): NineZoneState
internal;removeTabFromWidget(state: NineZoneState, tabId: TabState["id"]): NineZoneState
internal;ResizeAction
internal;restrainInitialWidgetSize(size: SizeProps, nzSize: SizeProps): SizeProps
internal;RightPanelSide = "right"
internal;SafeAreaInsets
internal;SafeAreaInsetsHelpers
internal;ScrollableWidgetContent: React_2.NamedExoticComponent
internal;ScrollableWidgetContentProps
internal;SectionDropTargetState
internal;SendBack(): JSX.Element
internal;ShowWidgetIconContext: React_2.Context
internal;sideToCursorType(side: PanelSide): CursorType
internal;Snap 
internal;SnapMode 
internal;SnapModePanel 
internal;SnapModePanelProps 
internal;SnapModeProps 
internal;SnapProps 
internal;TabBarButtons(): JSX.Element
internal;TabDragDropTargetState = PanelDropTargetState | SectionDropTargetState | WidgetDropTargetState | TabDropTargetState | FloatingWidgetDropTargetState
internal;TabDragStartArgs 
internal;TabDropTargetState
internal;TabIdContext: React_2.Context
internal;TabLocation = PanelTabLocation | FloatingTabLocation | PopoutTabLocation
internal;TabNodeContext: React_2.Context
internal;TabPositionContext: React_2.Context
internal;TabPositionContextArgs
internal;TabsState
internal;TabState
internal;TitleBar(props: TitleBarProps): JSX.Element
internal;TitleBarButton(props: TitleBarButtonProps): JSX.Element
internal;TitleBarButtonProps 
internal;TitleBarProps 
internal;ToolAssistance 
internal;ToolAssistanceDialog 
internal;ToolAssistanceDialogProps 
internal;ToolAssistanceInstruction 
internal;ToolAssistanceInstructionProps 
internal;ToolAssistanceItem 
internal;ToolAssistanceItemProps 
internal;ToolAssistanceProps 
internal;ToolAssistanceSeparator 
internal;ToolAssistanceSeparatorProps 
internal;ToolbarButton 
internal;ToolbarButtonProps 
internal;ToolbarIcon 
internal;ToolbarIconProps 
internal;ToolsArea 
internal;ToolsAreaProps 
internal;ToolSettingProps 
internal;ToolSettingsDockAction
internal;ToolSettingsDragStartAction
internal;ToolSettingsNodeContext: React_2.Context
internal;ToolSettingsOverflowPanel(props: ToolSettingsOverflowPanelProps): JSX.Element
internal;ToolSettingsOverflowPanelProps 
internal;ToolSettingsState = DockedToolSettingsState | WidgetToolSettingsState
internal;toolSettingsTabId = "nz-tool-settings-tab"
internal;Tooltip 
internal;TooltipDefaultProps = Pick
internal;TooltipProps 
internal;TopPanelSide = "top"
internal;UiIsVisibleContext: React_2.Context
internal;useActiveTabId(): string
internal;useBorders(widgetId: WidgetState["id"]):
internal;useContainersStore: UseBoundStore
internal;useCursor(): void
internal;useDoubleClick(onDoubleClick?: () => void): () => void
internal;useDrag
internal;useDraggedItem(): DragItem | undefined
internal;useDraggedItemId
internal;useDragItem
internal;UseDragItemArgs
internal;useDragPanelGrip(args: UseDragPanelGripArgs): ({ initialPointerPosition }: DragStartArgs) => void
internal;UseDragPanelGripArgs
internal;useDragResizeHandle(args: UseDragResizeHandleArgs): ({ initialPointerPosition }: DragStartArgs) => void
internal;UseDragResizeHandleArgs
internal;useDragTab(args: UseDragTabArgs): ({ initialPointerPosition, pointerPosition, widgetSize }: TabDragStartArgs) => void
internal;UseDragTabArgs
internal;useDragToolSettings(args: UseDragToolSettingsArgs): ({ initialPointerPosition }: DragStartArgs) => void
internal;UseDragToolSettingsArgs
internal;useDragWidget(args: UseDragWidgetArgs): ({ initialPointerPosition, pointerPosition }: DragStartArgs) => void
internal;UseDragWidgetArgs
internal;useFloatingWidgetId(): FloatingWidgetState["id"] | undefined
internal;useIsDraggedItem(item: DragItem): boolean
internal;useIsDraggedType(type: DragItem["type"]): boolean
internal;useIsMainPanelWidget(): boolean
internal;useLabel(labelKey: keyof NineZoneLabels): string | undefined
internal;useLayout
internal;useLayoutStore(): LayoutStore
internal;useMode(widgetId: string): "fit" | "fill" | "minimized"
internal;usePanelsAutoCollapse
internal;UsePanelTargetArgs
internal;usePointerCaptor: 
internal;useResizeGrip: 
internal;useTabInteractions
internal;UseTabInteractionsArgs
internal;UseTabTargetArgs
internal;useTabTransientState(tabId: string, onSave?: () => void, onRestore?: () => void): void
internal;useTargeted(): DropTargetState | undefined
internal;useToolSettingsEntry(): DockedToolSettingsEntryContextArgs
internal;useTransientState(onSave?: () => void, onRestore?: () => void): void
internal;VerticalPanelSide = LeftPanelSide | RightPanelSide
internal;VerticalPanelState 
internal;Widget: React_2.ForwardRefExoticComponent
internal;WidgetContentContainer(props: WidgetContentContainerProps): JSX.Element
internal;WidgetContentContainerProps
internal;WidgetContentManager: React_2.NamedExoticComponent
internal;WidgetContentManagerContext: React_2.Context
internal;WidgetContentManagerContextArgs
internal;WidgetContentManagerProps
internal;WidgetContentNodeContext: React_2.Context
internal;WidgetContentRenderer(props: WidgetContentRendererProps): React_2.ReactPortal
internal;WidgetContentRenderers(): JSX.Element
internal;WidgetContext: React_2.Context
internal;WidgetContextArgs
internal;WidgetDragAction
internal;WidgetDragDropTargetState = PanelDropTargetState | SectionDropTargetState | WidgetDropTargetState | TabDropTargetState | WindowDropTargetState
internal;WidgetDragEndAction
internal;WidgetDropTargetState
internal;WidgetIdContext: React_2.Context
internal;WidgetLocation = PanelWidgetLocation | FloatingWidgetLocation | PopoutWidgetLocation
internal;WidgetMenu(props: WidgetMenuProps): JSX.Element
internal;WidgetMenuProps 
internal;WidgetOverflow(props: WidgetOverflowProps): JSX.Element
internal;WidgetOverflowContext: React_2.Context
internal;WidgetOverflowProps
internal;WidgetPanel: React_2.NamedExoticComponent
internal;WidgetPanelContext: React_2.Context
internal;WidgetPanelContextArgs
internal;WidgetPanelExpander({ side }: WidgetPanelExpanderProps): JSX.Element
internal;WidgetPanelExpanderProps
internal;WidgetPanelExpanders(): JSX.Element
internal;WidgetPanelGrip(props: CommonProps): JSX.Element
internal;WidgetPanelProvider: React_2.NamedExoticComponent
internal;WidgetPanelProviderProps
internal;WidgetPanels: React_2.NamedExoticComponent
internal;WidgetPanelsContent: React_2.ForwardRefExoticComponent
internal;WidgetPanelsContentProps 
internal;WidgetPanelsProps 
internal;WidgetProps 
internal;WidgetProvider: React_2.NamedExoticComponent
internal;WidgetProviderProps
internal;WidgetsState
internal;WidgetState
internal;WidgetTab: React_2.NamedExoticComponent
internal;WidgetTabBar: React_2.NamedExoticComponent
internal;WidgetTabBarProps
internal;WidgetTabClickAction
internal;WidgetTabDoubleClickAction
internal;WidgetTabDragAction
internal;WidgetTabDragEndAction
internal;WidgetTabDragStartAction
internal;WidgetTabPopoutAction
internal;WidgetTabProps 
internal;WidgetTabProvider({ id, first, firstInactive, last, showOnlyTabIcon }: WidgetTabProviderProps): JSX.Element
internal;WidgetTabProviderProps 
internal;WidgetTabs(): JSX.Element
internal;WidgetTabsEntryContext: React_2.Context
internal;WidgetTabsEntryContextProviderProps
internal;WidgetTabsEntryProvider: React_2.NamedExoticComponent
internal;WidgetToolSettingsState
internal;WindowDropTargetState