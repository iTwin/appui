/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninCallbackImport } from './routes/signin-callback'
import { Route as SettingsImport } from './routes/settings'
import { Route as LocalImport } from './routes/local'
import { Route as ITwinsImport } from './routes/iTwins'
import { Route as BlankImport } from './routes/blank'
import { Route as LocalFileNameImport } from './routes/local_.$fileName'
import { Route as ITwinITwinIdImport } from './routes/iTwin_.$iTwinId'
import { Route as BriefcaseFileNameImport } from './routes/briefcase.$fileName'
import { Route as ITwinITwinIdIModelIModelIdImport } from './routes/iTwin.$iTwinId.iModel.$iModelId'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SigninCallbackRoute = SigninCallbackImport.update({
  id: '/signin-callback',
  path: '/signin-callback',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const LocalRoute = LocalImport.update({
  id: '/local',
  path: '/local',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/local.lazy').then((d) => d.Route))

const ITwinsRoute = ITwinsImport.update({
  id: '/iTwins',
  path: '/iTwins',
  getParentRoute: () => rootRoute,
} as any)

const BlankRoute = BlankImport.update({
  id: '/blank',
  path: '/blank',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/blank.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const LocalFileNameRoute = LocalFileNameImport.update({
  id: '/local_/$fileName',
  path: '/local/$fileName',
  getParentRoute: () => rootRoute,
} as any)

const ITwinITwinIdRoute = ITwinITwinIdImport.update({
  id: '/iTwin_/$iTwinId',
  path: '/iTwin/$iTwinId',
  getParentRoute: () => rootRoute,
} as any)

const BriefcaseFileNameRoute = BriefcaseFileNameImport.update({
  id: '/briefcase/$fileName',
  path: '/briefcase/$fileName',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/briefcase.$fileName.lazy').then((d) => d.Route),
)

const ITwinITwinIdIModelIModelIdRoute = ITwinITwinIdIModelIModelIdImport.update(
  {
    id: '/iTwin/$iTwinId/iModel/$iModelId',
    path: '/iTwin/$iTwinId/iModel/$iModelId',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/blank': {
      id: '/blank'
      path: '/blank'
      fullPath: '/blank'
      preLoaderRoute: typeof BlankImport
      parentRoute: typeof rootRoute
    }
    '/iTwins': {
      id: '/iTwins'
      path: '/iTwins'
      fullPath: '/iTwins'
      preLoaderRoute: typeof ITwinsImport
      parentRoute: typeof rootRoute
    }
    '/local': {
      id: '/local'
      path: '/local'
      fullPath: '/local'
      preLoaderRoute: typeof LocalImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/signin-callback': {
      id: '/signin-callback'
      path: '/signin-callback'
      fullPath: '/signin-callback'
      preLoaderRoute: typeof SigninCallbackImport
      parentRoute: typeof rootRoute
    }
    '/briefcase/$fileName': {
      id: '/briefcase/$fileName'
      path: '/briefcase/$fileName'
      fullPath: '/briefcase/$fileName'
      preLoaderRoute: typeof BriefcaseFileNameImport
      parentRoute: typeof rootRoute
    }
    '/iTwin_/$iTwinId': {
      id: '/iTwin_/$iTwinId'
      path: '/iTwin/$iTwinId'
      fullPath: '/iTwin/$iTwinId'
      preLoaderRoute: typeof ITwinITwinIdImport
      parentRoute: typeof rootRoute
    }
    '/local_/$fileName': {
      id: '/local_/$fileName'
      path: '/local/$fileName'
      fullPath: '/local/$fileName'
      preLoaderRoute: typeof LocalFileNameImport
      parentRoute: typeof rootRoute
    }
    '/iTwin/$iTwinId/iModel/$iModelId': {
      id: '/iTwin/$iTwinId/iModel/$iModelId'
      path: '/iTwin/$iTwinId/iModel/$iModelId'
      fullPath: '/iTwin/$iTwinId/iModel/$iModelId'
      preLoaderRoute: typeof ITwinITwinIdIModelIModelIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/blank': typeof BlankRoute
  '/iTwins': typeof ITwinsRoute
  '/local': typeof LocalRoute
  '/settings': typeof SettingsRoute
  '/signin-callback': typeof SigninCallbackRoute
  '/briefcase/$fileName': typeof BriefcaseFileNameRoute
  '/iTwin/$iTwinId': typeof ITwinITwinIdRoute
  '/local/$fileName': typeof LocalFileNameRoute
  '/iTwin/$iTwinId/iModel/$iModelId': typeof ITwinITwinIdIModelIModelIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/blank': typeof BlankRoute
  '/iTwins': typeof ITwinsRoute
  '/local': typeof LocalRoute
  '/settings': typeof SettingsRoute
  '/signin-callback': typeof SigninCallbackRoute
  '/briefcase/$fileName': typeof BriefcaseFileNameRoute
  '/iTwin/$iTwinId': typeof ITwinITwinIdRoute
  '/local/$fileName': typeof LocalFileNameRoute
  '/iTwin/$iTwinId/iModel/$iModelId': typeof ITwinITwinIdIModelIModelIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/blank': typeof BlankRoute
  '/iTwins': typeof ITwinsRoute
  '/local': typeof LocalRoute
  '/settings': typeof SettingsRoute
  '/signin-callback': typeof SigninCallbackRoute
  '/briefcase/$fileName': typeof BriefcaseFileNameRoute
  '/iTwin_/$iTwinId': typeof ITwinITwinIdRoute
  '/local_/$fileName': typeof LocalFileNameRoute
  '/iTwin/$iTwinId/iModel/$iModelId': typeof ITwinITwinIdIModelIModelIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blank'
    | '/iTwins'
    | '/local'
    | '/settings'
    | '/signin-callback'
    | '/briefcase/$fileName'
    | '/iTwin/$iTwinId'
    | '/local/$fileName'
    | '/iTwin/$iTwinId/iModel/$iModelId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blank'
    | '/iTwins'
    | '/local'
    | '/settings'
    | '/signin-callback'
    | '/briefcase/$fileName'
    | '/iTwin/$iTwinId'
    | '/local/$fileName'
    | '/iTwin/$iTwinId/iModel/$iModelId'
  id:
    | '__root__'
    | '/'
    | '/blank'
    | '/iTwins'
    | '/local'
    | '/settings'
    | '/signin-callback'
    | '/briefcase/$fileName'
    | '/iTwin_/$iTwinId'
    | '/local_/$fileName'
    | '/iTwin/$iTwinId/iModel/$iModelId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  BlankRoute: typeof BlankRoute
  ITwinsRoute: typeof ITwinsRoute
  LocalRoute: typeof LocalRoute
  SettingsRoute: typeof SettingsRoute
  SigninCallbackRoute: typeof SigninCallbackRoute
  BriefcaseFileNameRoute: typeof BriefcaseFileNameRoute
  ITwinITwinIdRoute: typeof ITwinITwinIdRoute
  LocalFileNameRoute: typeof LocalFileNameRoute
  ITwinITwinIdIModelIModelIdRoute: typeof ITwinITwinIdIModelIModelIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  BlankRoute: BlankRoute,
  ITwinsRoute: ITwinsRoute,
  LocalRoute: LocalRoute,
  SettingsRoute: SettingsRoute,
  SigninCallbackRoute: SigninCallbackRoute,
  BriefcaseFileNameRoute: BriefcaseFileNameRoute,
  ITwinITwinIdRoute: ITwinITwinIdRoute,
  LocalFileNameRoute: LocalFileNameRoute,
  ITwinITwinIdIModelIModelIdRoute: ITwinITwinIdIModelIModelIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blank",
        "/iTwins",
        "/local",
        "/settings",
        "/signin-callback",
        "/briefcase/$fileName",
        "/iTwin_/$iTwinId",
        "/local_/$fileName",
        "/iTwin/$iTwinId/iModel/$iModelId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/blank": {
      "filePath": "blank.tsx"
    },
    "/iTwins": {
      "filePath": "iTwins.tsx"
    },
    "/local": {
      "filePath": "local.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/signin-callback": {
      "filePath": "signin-callback.tsx"
    },
    "/briefcase/$fileName": {
      "filePath": "briefcase.$fileName.tsx"
    },
    "/iTwin_/$iTwinId": {
      "filePath": "iTwin_.$iTwinId.tsx"
    },
    "/local_/$fileName": {
      "filePath": "local_.$fileName.tsx"
    },
    "/iTwin/$iTwinId/iModel/$iModelId": {
      "filePath": "iTwin.$iTwinId.iModel.$iModelId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
