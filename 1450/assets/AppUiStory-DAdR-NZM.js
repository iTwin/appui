import { r as reactExports, F as getWindow, S as Svg, v as requireReact, I as IconButton, B as Box, c as classnames, C as ShadowRoot, f as useMergedRefs, aJ as u, aK as useGlobals, P as Popover, d as useLatestRef, E as useResizeObserver, b as useIsomorphicLayoutEffect, i as useId, V as VisuallyHidden, aL as getAugmentedNamespace, n as commonjsGlobal, j as jsxRuntimeExports, e, aM as useDemoIModel, T as ThemeProvider } from "./iframe-qZqPc1fv.js";
import { eJ as SvgChevronRight, aJ as Checkbox, eK as useVirtualScroll, eL as Dictionary, eM as AbandonedError, eN as BeDuration, eO as BeTimePoint, eP as ByteStream, eQ as IndexMap, eR as IndexedValue, eS as ObservableSet, eT as OneAtATimeAction, eU as OrderedSet, eV as PriorityQueue, ct as ProcessDetector, eW as ReadonlyOrderedSet, eX as StopWatch, eY as TypedArrayBuilder, eZ as Uint16ArrayBuilder, e_ as Uint32ArrayBuilder, e$ as Uint8ArrayBuilder, f0 as UintArrayBuilder, f1 as areEqualPossiblyUndefined, f2 as asInstanceOf, f3 as base64StringToUint8Array, f4 as compareArrays, f5 as compareBooleans, f6 as compareBooleansOrUndefined, f7 as compareNumbers, f8 as compareNumbersOrUndefined, f9 as comparePossiblyUndefined, fa as compareSimpleArrays, fb as compareSimpleTypes, fc as compareStrings, fd as compareStringsOrUndefined, fe as compareWithTolerance, ff as isInstanceOf, fg as omit, fh as partitionArray, fi as utf8ToString, b1 as Point3d, fj as YawPitchRollAngles, fk as TextBlock, fl as Transform, fm as BentleyGeometryFlatBuffer, fn as IndexedPolyface, fo as IpcWebSocketMessage, fp as IModelError, fq as RpcConfiguration, fr as RpcDefaultConfiguration, fs as RpcManager, ft as RpcRoutingToken, fu as BentleyCloudRpcProtocol, fv as RpcRequest, fw as RpcRequestEvent, fx as AdditionalTransform, fy as AffineTransform, fz as AmbientLight, fA as AmbientOcclusion, fB as AnalysisStyle, fC as AnalysisStyleDisplacement, fD as AnalysisStyleThematic, fE as AreaPattern, fF as Atmosphere, fG as B3dmHeader, fH as BRepEntity, fI as BRepGeometryOperation, fJ as BackendError, fK as BackgroundFill, fL as BackgroundMapProvider, fM as BackgroundMapSettings, fN as BackgroundMapType, fO as Base64EncodedString, fP as BaseLayerSettings, fQ as BaseMapLayerSettings, fR as BatchType, fS as BisCodeSpec, fT as BlobOptionsBuilder, fU as BoundingSphere, fV as BriefcaseIdValue, fW as CURRENT_INVOCATION, fX as CURRENT_REQUEST, fY as Camera, fZ as Carto2DDegrees, f_ as Cartographic, f$ as CartographicRange, g0 as CatalogError, g1 as CesiumIonAssetId, g2 as CesiumTerrainAssetId, g3 as ChangeOpCode, g4 as ChangedValueState, g5 as ChangesetType, g6 as ChannelControlError, g7 as ClipIntersectionStyle, g8 as ClipStyle, g9 as CloudSqliteError, ga as Code, gb as CodeScopeSpec, gc as CodeSpec, aj as ColorByName, ai as ColorDef, gd as ColorIndex, ge as CommonLoggerCategory, gf as CompositeTileHeader, gg as ConcreteEntityTypes, gh as ConflictingLocksError, gi as ContentFlags, gj as ContentIdProvider, gk as ContextRealityModel, gl as ContextRealityModelProps, gm as ContextRealityModels, gn as Contour, go as ContourDisplay, gp as ContourGroup, gq as ContourStyle, gr as CurrentImdlVersion, gs as CutStyle, gt as DbQueryError, gu as DbRequestKind, gv as DbResponseKind, gw as DbResponseStatus, gx as DbValueFormat, gy as DefaultSupportedTypes, gz as DevToolsRpcInterface, gA as DevToolsStatsOptions, gB as DisplayStyle3dSettings, gC as DisplayStyleSettings, gD as DomainOptions, gE as ECJsNames, gF as ECSqlReader, gG as ECSqlSystemProperty, gH as ECSqlValueType, gI as Easing, gJ as EcefLocation, gK as EdgeArgs, gL as ElementGeometry, gM as ElementGeometryChange, gN as ElementGeometryOpcode, aO as EmptyLocalization, gO as EntityMetaData, gP as EntityReferenceSet, gQ as Environment, gR as ExternalSourceAttachmentRole, gS as Feature, eA as FeatureAppearance, gT as FeatureAppearanceProvider, gU as FeatureIndex, gV as FeatureIndexType, gW as FeatureOverrideType, gX as FeatureOverrides, gY as FeatureTable, gZ as FeatureTableHeader, g_ as FieldRun, g$ as FillDisplay, h0 as FillFlags, h1 as FontMap, h2 as FontType, h3 as FractionRun, h4 as FresnelSettings, h5 as Frustum, h6 as FrustumPlanes, h7 as GenericInstanceFilter, h8 as GenericInstanceFilterRuleValue, h9 as GeoCoordStatus, ha as GeocentricTransform, hb as GeodeticDatum, hc as GeodeticEllipsoid, hd as GeodeticTransform, he as GeodeticTransformPath, hf as GeographicCRS, hg as GeometryClass, hh as GeometryParams, hi as GeometryStreamBuilder, hj as GeometryStreamFlags, hk as GeometryStreamIterator, hl as GeometrySummaryVerbosity, hm as GlbHeader, hn as GlobeMode, ho as GltfV2ChunkTypes, hp as GltfVersions, hq as Gradient, hr as GraphicParams, hs as GridFileDefinition, ht as GridFileTransform, hu as GridOrientationType, hv as GroundPlane, hw as HSLColor, hx as HSVColor, hy as HSVConstants, hz as Helmert2DWithZOffset, hA as HemisphereLights, hB as HiddenLine, hC as Hilite, hD as HorizontalCRS, hE as HorizontalCRSExtent, hF as I3dmHeader, hG as IModel, hH as IModelNotFoundResponse, hI as IModelReadRpcInterface, hJ as IModelTileRpcInterface, hK as IModelVersion, hL as INSTANCE, hM as ImageBuffer, hN as ImageBufferFormat, hO as ImageGraphic, hP as ImageGraphicCorners, hQ as ImageMapLayerSettings, hR as ImageSource, hS as ImageSourceFormat, hT as ImdlFlags, hU as ImdlHeader, hV as InternetConnectivityStatus, hW as Interpolation, hX as IpcSession, hY as IpcWebSocket, hZ as IpcWebSocketBackend, h_ as IpcWebSocketFrontend, h$ as IpcWebSocketMessageType, i0 as LightSettings, i1 as LineBreakRun, i2 as LinePixels, i3 as LineStyle, i4 as LockState, i5 as MapImagerySettings, i6 as MapLayerSettings, i7 as MapSubLayerSettings, i8 as MarshalingBinaryMarker, i9 as MassPropertiesOperation, ia as MeshEdge, ib as MeshEdges, ic as MeshPolyline, id as ModelClipGroup, ie as ModelClipGroups, ig as ModelFeature, ih as ModelGeometryChanges, ii as ModelMapLayerDrapeTarget, ij as ModelMapLayerSettings, ik as MonochromeMode, il as MultiModelPackedFeatureTable, im as NoContentError, io as NonUniformColor, ip as NormalMapFlags, iq as Npc, ir as NpcCenter, is as NpcCorners, it as OPERATION, iu as OctEncodedNormal, iv as OctEncodedNormalPair, iw as OverriddenBy, ix as POLICY, iy as PackedFeature, iz as PackedFeatureModelTable, iA as PackedFeatureTable, iB as Paragraph, iC as Placement2d, iD as Placement3d, iE as PlanProjectionSettings, iF as PlanarClipMaskMode, iG as PlanarClipMaskPriority, iH as PlanarClipMaskSettings, iI as PntsHeader, iJ as PointCloudDisplaySettings, iK as PolylineEdgeArgs, iL as PolylineTypeFlags, iM as PositionalVectorTransform, iN as PrimitiveTypeCode, iO as ProfileOptions, iP as Projection, iQ as PropertyMetaData, iR as PropertyMetaDataMap, iS as QParams2d, iT as QParams3d, iU as QPoint2d, iV as QPoint2dBuffer, iW as QPoint2dBufferBuilder, iX as QPoint2dList, iY as QPoint3d, iZ as QPoint3dBuffer, i_ as QPoint3dBufferBuilder, i$ as QPoint3dList, j0 as Quantization, j1 as QueryBinder, j2 as QueryOptionsBuilder, j3 as QueryParamType, j4 as QueryRowFormat, j5 as REGISTRY, j6 as Rank, j7 as RealityDataFormat, j8 as RealityDataProvider, j9 as RealityDataSourceKey, ja as RealityModelDisplaySettings, jb as RelatedElement, jc as RenderMaterial, jd as RenderMaterialParams, je as RenderMode, jf as RenderSchedule, jg as RenderTexture, jh as RenderTextureParams, ji as ResponseLike, jj as RgbColor, jk as RpcContentType, jl as RpcControlChannel, jm as RpcControlResponse, jn as RpcDirectProtocol, jo as RpcDirectRequest, jp as RpcEndpoint, jq as RpcInterface, jr as RpcInvocation, js as RpcMarshaling, jt as RpcMultipart, ju as RpcNotFoundResponse, jv as RpcOpenAPIDescription, jw as RpcOperation, jx as RpcOperationPolicy, jy as RpcPendingQueue, jz as RpcPendingResponse, jA as RpcProtocol, jB as RpcProtocolEvent, jC as RpcProtocolVersion, jD as RpcRegistry, jE as RpcRequestFulfillment, jF as RpcRequestStatus, jG as RpcResponseCacheControl, jH as RpcRoutingMap, jI as RpcSerializedValue, jJ as RpcSessionInvocation, jK as Run, jL as SchemaState, jM as SectionType, jN as ServerError, jO as ServerTimeoutError, jP as SilhouetteEdgeArgs, jQ as SkyBox, jR as SkyBoxImageType, jS as SkyCube, jT as SkyGradient, jU as SkySphere, jV as SnapshotIModelRpcInterface, jW as SolarLight, jX as SolarShadowSettings, jY as SpatialClassifier, jZ as SpatialClassifierFlags, j_ as SpatialClassifierInsideDisplay, j$ as SpatialClassifierOutsideDisplay, k0 as SpatialClassifiers, k1 as SqliteError, k2 as SubCategoryAppearance, k3 as SubCategoryOverride, k4 as SyncMode, k5 as TabRun, k6 as TerrainHeightOriginMode, k7 as TerrainSettings, k8 as TextBlockComponent, k9 as TextRun, ka as TextString, kb as TextStyleSettings, kc as TextureMapUnits, kd as TextureMapping, ke as TextureTransparency, kf as ThematicDisplay, kg as ThematicDisplayMode, kh as ThematicDisplaySensor, ki as ThematicDisplaySensorSettings, kj as ThematicGradientColorScheme, kk as ThematicGradientMode, kl as ThematicGradientSettings, km as ThematicGradientTransparencyMode, kn as TileContentSource, ko as TileFormat, kp as TileHeader, kq as TileMetadataReader, kr as TileOptions, ks as TileReadError, kt as TileReadStatus, ku as TreeFlags, kv as Tween, kw as Tweens, kx as TxnAction, ky as TypeDefinition, kz as TypeOfChange, kA as VerticalCRS, kB as ViewDetails, kC as ViewDetails3d, kD as ViewFlags, kE as ViewStoreError, kF as ViewStoreRpc, kG as WEB_RPC_CONSTANTS, kH as WebAppRpcLogging, kI as WebAppRpcProtocol, kJ as WebAppRpcRequest, kK as WhiteOnWhiteReversalSettings, kL as WorkspaceError, kM as XyzRotation, kN as aggregateLoad, kO as bisectTileRange2d, kP as bisectTileRange3d, kQ as calculateSolarAngles, kR as calculateSolarDirection, kS as calculateSolarDirectionFromAngles, kT as calculateSunriseOrSunset, kU as compareIModelTileTreeIds, kV as computeChildTileProps, kW as computeChildTileRanges, kX as computeTileChordTolerance, kY as decodeTileContentDescription, kZ as defaultTileOptions, k_ as getMaximumMajorTileFormatVersion, k$ as getPullChangesIpcChannel, l0 as getTileObjectReference, l1 as iModelTileTreeIdToString, l2 as iTwinChannel, l3 as initializeRpcRequest, l4 as ipcAppChannels, l5 as isBinaryImageSource, l6 as isKnownTileFormat, l7 as isPlacement2dProps, l8 as isPlacement3dProps, l9 as isPowerOfTwo, la as isValidImageSourceFormat, lb as mapToGeoServiceStatus, lc as nativeAppIpcStrings, ld as nextHighestPowerOfTwo, le as nextPoint3d64FromByteStream, lf as parseTileTreeIdAndContentId, lg as readTileContentDescription, lh as rpcOverIpcStrings, li as textAnnotationFrameShapes, lj as tileFormatFromNumber, dL as useRefs, lk as ViewportComponent, ll as FloatingViewportContentControl, U as UiFramework, I as IModelApp, lm as ContentWrapper, ez as EmphasizeElements, ln as ViewUtilities, lo as NotificationManager, M as MessageManager, T as ToolAssistance, lp as ActivityMessageEndReason, lq as PointerMessage, lr as ElementTooltip, ls as ToolAdmin, lt as __rest, lu as __asyncGenerator, lv as __await, lw as __asyncValues, lx as __asyncDelegator, ly as DefaultViewOverlay, i as Tool, lz as LocalStateStorage, lA as ContentGroup, x as PrimitiveTool, lB as SelectionMode, lC as SelectionMethod, lD as LocateFilterStatus, lE as LocateResponse, bf as EventHandled, lF as CoordinateLockOverrides, dy as ToolbarItemUtilities, a9 as LengthDescription, N as NotifyMessageDetails, O as OutputMessagePriority, ao as Select, lG as useActiveIModelConnection, dg as ViewportComponentEvents, Z as UiItemsManager, lH as SurveyLengthDescription, d2 as QuantityType, h as ToolAssistanceImage, S as SvgPlaceholder, cn as CursorInformation, eF as AngleDescription, am as Flex, $ as Text, a6 as DropdownMenu, b as MenuItem, er as EditorContainer, ev as PropertyRecordEditor, l as StandardContentLayouts, lI as BlankConnection, lJ as Range3d, d8 as SpatialViewState, lK as CheckpointConnection, lL as ViewCreator3d, F as FrameworkAccuDraw, aV as ProgressLinear, aQ as Provider_default, aR as ThemeManager, w as ConfigurableUiContent } from "./appui-react-CLN8J6gc.js";
import { T as Title3, c as Subtitle2, e as DescriptionContainer, P as Primary, f as Controls3 } from "./blocks-vWvhPRMt.js";
import { d as ProgressRadial, a as BeEvent, o as BeEventList, j as BeUiEvent, l as BentleyError, p as BentleyLoggerCategory, m as BentleyStatus, q as BriefcaseStatus, C as ChangeSetStatus, r as CompressedId64Set, s as DbChangeStage, t as DbConflictCause, u as DbConflictResolution, v as DbOpcode, w as DbResult, x as DbValueType, y as DisposableList, z as DuplicatePolicy, E as ErrorCategory, A as GeoServiceStatus, G as Guid, H as HttpStatus, F as IModelHubStatus, J as IModelStatus, N as ITwinError, I as Id64, O as JsonUtils, Q as LogLevel, L as Logger, T as MutableCompressedId64Set, V as OpenMode, W as OrderedId64Array, X as OrderedId64Iterable, Y as PerfLogger, Z as ReadonlySortedArray, _ as RealityDataStatus, $ as RepositoryStatus, a0 as RpcInterfaceStatus, a1 as SortedArray, a2 as SpanKind, a3 as StatusCategory, a4 as SuccessCategory, a5 as Tracing, a6 as TransientIdSequence, a7 as UnexpectedErrors, n as assert, a8 as dispose, a9 as disposeArray, aa as isDisposable, ab as isIDisposable, ac as lowerBound, ad as shallowClone, ae as using, K as Key_enumExports, e as PropertyEditorParamTypes, f as StandardEditorNames, S as StandardTypeNames, D as DialogLayoutDataProvider, b as DialogButtonType, c as Dialog$1, B as Button, k as PropertyRecord, g as PropertyValueFormat, P as PropertyChangeStatus } from "./Key.enum-bWQ0azWJ.js";
import { c as createFrontstage } from "./Utils-BlPrrr_h.js";
const useIntersection = (onIntersect, options = {}, once = true) => {
  let { root, rootMargin, threshold } = options;
  let cleanupRef = reactExports.useRef(() => {
  });
  let setRef = reactExports.useCallback(
    (node) => {
      cleanupRef.current?.();
      cleanupRef.current = () => {
      };
      if (!node || !getWindow()?.IntersectionObserver) return;
      let observer = new IntersectionObserver(
        ([entry], obs) => {
          if (entry.isIntersecting) {
            if (once) obs.disconnect();
            onIntersect();
          }
        },
        {
          root,
          rootMargin,
          threshold
        }
      );
      observer.observe(node);
      cleanupRef.current = () => observer.disconnect();
    },
    [onIntersect, once, root, rootMargin, threshold]
  );
  return setRef;
};
let className = "_iui-line-clamp";
let css$1 = `
.${className} {
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: var(--_iui-line-clamp, 3);
  -webkit-box-orient: vertical;
}
`;
const lineClamp = {
  css: css$1,
  className
};
const SvgSortUp = (props) => reactExports.createElement(
  Svg,
  props,
  reactExports.createElement("path", {
    d: "m9 16v-12.7l3.8 3.7 1.2-1.2-6-5.8-1.2 1.2-4.8 4.6 1.2 1.2 3.8-3.7v12.7z"
  })
);
const SvgSortDown = (props) => reactExports.createElement(
  Svg,
  props,
  reactExports.createElement("path", {
    d: "m7 0v12.7l-3.8-3.7-1.2 1.2 6 5.8 1.2-1.2 4.8-4.6-1.2-1.2-3.8 3.7v-12.7z"
  })
);
const SvgFilter = (props) => reactExports.createElement(
  Svg,
  props,
  reactExports.createElement("path", {
    d: "m0 0v2l6 5v9l4-3v-6l6-5v-2z"
  })
);
const SvgFilterHollow = (props) => reactExports.createElement(
  Svg,
  props,
  reactExports.createElement("path", {
    d: "M15 1v.5L9.4 6.2l-.4.3v6L7 14V6.5l-.4-.3L1 1.5V1zm1-1H0v2l6 5v9l4-3V7l6-5z"
  })
);
var reactTable = { exports: {} };
var reactTable_production_min$1 = { exports: {} };
var reactTable_production_min = reactTable_production_min$1.exports;
var hasRequiredReactTable_production_min;
function requireReactTable_production_min() {
  if (hasRequiredReactTable_production_min) return reactTable_production_min$1.exports;
  hasRequiredReactTable_production_min = 1;
  (function(module, exports) {
    !function(e2, t) {
      t(exports, requireReact());
    }(reactTable_production_min, function(e2, t) {
      function n(e3, t2, n2, o2, r2, i2, u3) {
        try {
          var l2 = e3[i2](u3), s2 = l2.value;
        } catch (e4) {
          return void n2(e4);
        }
        l2.done ? t2(s2) : Promise.resolve(s2).then(o2, r2);
      }
      function o(e3) {
        return function() {
          var t2 = this, o2 = arguments;
          return new Promise(function(r2, i2) {
            var u3 = e3.apply(t2, o2);
            function l2(e4) {
              n(u3, r2, i2, l2, s2, "next", e4);
            }
            function s2(e4) {
              n(u3, r2, i2, l2, s2, "throw", e4);
            }
            l2(void 0);
          });
        };
      }
      function r() {
        return (r = Object.assign || function(e3) {
          for (var t2 = 1; t2 < arguments.length; t2++) {
            var n2 = arguments[t2];
            for (var o2 in n2) Object.prototype.hasOwnProperty.call(n2, o2) && (e3[o2] = n2[o2]);
          }
          return e3;
        }).apply(this, arguments);
      }
      function i(e3, t2) {
        if (null == e3) return {};
        var n2, o2, r2 = {}, i2 = Object.keys(e3);
        for (o2 = 0; o2 < i2.length; o2++) n2 = i2[o2], t2.indexOf(n2) >= 0 || (r2[n2] = e3[n2]);
        return r2;
      }
      function u2(e3) {
        var t2 = function(e4, t3) {
          if ("object" != typeof e4 || null === e4) return e4;
          var n2 = e4[Symbol.toPrimitive];
          if (void 0 !== n2) {
            var o2 = n2.call(e4, t3);
            if ("object" != typeof o2) return o2;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return String(e4);
        }(e3, "string");
        return "symbol" == typeof t2 ? t2 : String(t2);
      }
      t = t && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
      var l = { init: "init" }, s = function(e3) {
        var t2 = e3.value;
        return void 0 === t2 ? "" : t2;
      }, a = function() {
        return t.createElement(t.Fragment, null, " ");
      }, c = { Cell: s, width: 150, minWidth: 0, maxWidth: Number.MAX_SAFE_INTEGER };
      function d() {
        for (var e3 = arguments.length, t2 = new Array(e3), n2 = 0; n2 < e3; n2++) t2[n2] = arguments[n2];
        return t2.reduce(function(e4, t3) {
          var n3 = t3.style, o2 = t3.className;
          return e4 = r({}, e4, {}, i(t3, ["style", "className"])), n3 && (e4.style = e4.style ? r({}, e4.style || {}, {}, n3 || {}) : n3), o2 && (e4.className = e4.className ? e4.className + " " + o2 : o2), "" === e4.className && delete e4.className, e4;
        }, {});
      }
      var f = function(e3, t2) {
        return void 0 === t2 && (t2 = {}), function(n2) {
          return void 0 === n2 && (n2 = {}), [].concat(e3, [n2]).reduce(function(e4, o2) {
            return function e5(t3, n3, o3) {
              return "function" == typeof n3 ? e5({}, n3(t3, o3)) : Array.isArray(n3) ? d.apply(void 0, [t3].concat(n3)) : d(t3, n3);
            }(e4, o2, r({}, t2, { userProps: n2 }));
          }, {});
        };
      }, p = function(e3, t2, n2, o2) {
        return void 0 === n2 && (n2 = {}), e3.reduce(function(e4, t3) {
          return t3(e4, n2);
        }, t2);
      }, g = function(e3, t2, n2) {
        return void 0 === n2 && (n2 = {}), e3.forEach(function(e4) {
          e4(t2, n2);
        });
      };
      function v(e3, t2, n2, o2) {
        e3.findIndex(function(e4) {
          return e4.pluginName === n2;
        });
        t2.forEach(function(t3) {
          e3.findIndex(function(e4) {
            return e4.pluginName === t3;
          });
        });
      }
      function m(e3, t2) {
        return "function" == typeof e3 ? e3(t2) : e3;
      }
      function h(e3) {
        var n2 = t.useRef();
        return n2.current = e3, t.useCallback(function() {
          return n2.current;
        }, []);
      }
      var y = "undefined" != typeof document ? t.useLayoutEffect : t.useEffect;
      function w(e3, n2) {
        var o2 = t.useRef(false);
        y(function() {
          o2.current && e3(), o2.current = true;
        }, n2);
      }
      function R(e3, t2, n2) {
        return void 0 === n2 && (n2 = {}), function(o2, i2) {
          void 0 === i2 && (i2 = {});
          var u3 = "string" == typeof o2 ? t2[o2] : o2;
          if (void 0 === u3) throw console.info(t2), new Error("Renderer Error ☝️");
          return b(u3, r({}, e3, { column: t2 }, n2, {}, i2));
        };
      }
      function b(e3, n2) {
        return function(e4) {
          return "function" == typeof e4 && ((t2 = Object.getPrototypeOf(e4)).prototype && t2.prototype.isReactComponent);
          var t2;
        }(o2 = e3) || "function" == typeof o2 || function(e4) {
          return "object" == typeof e4 && "symbol" == typeof e4.$$typeof && ["react.memo", "react.forward_ref"].includes(e4.$$typeof.description);
        }(o2) ? t.createElement(e3, n2) : e3;
        var o2;
      }
      function S(e3, t2, n2) {
        return void 0 === n2 && (n2 = 0), e3.map(function(e4) {
          return x(e4 = r({}, e4, { parent: t2, depth: n2 })), e4.columns && (e4.columns = S(e4.columns, e4, n2 + 1)), e4;
        });
      }
      function C(e3) {
        return G(e3, "columns");
      }
      function x(e3) {
        var t2 = e3.id, n2 = e3.accessor, o2 = e3.Header;
        if ("string" == typeof n2) {
          t2 = t2 || n2;
          var r2 = n2.split(".");
          n2 = function(e4) {
            return function(e5, t3, n3) {
              if (!t3) return e5;
              var o3, r3 = "function" == typeof t3 ? t3 : JSON.stringify(t3), i2 = E.get(r3) || function() {
                var e6 = function(e7) {
                  return function e8(t4, n4) {
                    void 0 === n4 && (n4 = []);
                    if (Array.isArray(t4)) for (var o4 = 0; o4 < t4.length; o4 += 1) e8(t4[o4], n4);
                    else n4.push(t4);
                    return n4;
                  }(e7).map(function(e8) {
                    return String(e8).replace(".", "_");
                  }).join(".").replace(T, ".").replace(O, "").split(".");
                }(t3);
                return E.set(r3, e6), e6;
              }();
              try {
                o3 = i2.reduce(function(e6, t4) {
                  return e6[t4];
                }, e5);
              } catch (e6) {
              }
              return void 0 !== o3 ? o3 : n3;
            }(e4, r2);
          };
        }
        if (!t2 && "string" == typeof o2 && o2 && (t2 = o2), !t2 && e3.columns) throw console.error(e3), new Error('A column ID (or unique "Header" value) is required!');
        if (!t2) throw console.error(e3), new Error("A column ID (or string accessor) is required!");
        return Object.assign(e3, { id: t2, accessor: n2 }), e3;
      }
      function P(e3, t2) {
        if (!t2) throw new Error();
        return Object.assign(e3, r({ Header: a, Footer: a }, c, {}, t2, {}, e3)), Object.assign(e3, { originalWidth: e3.width }), e3;
      }
      function B(e3, t2, n2) {
        void 0 === n2 && (n2 = function() {
          return {};
        });
        for (var o2 = [], i2 = e3, u3 = 0, l2 = function() {
          return u3++;
        }, s2 = function() {
          var e4 = { headers: [] }, u4 = [], s3 = i2.some(function(e5) {
            return e5.parent;
          });
          i2.forEach(function(o3) {
            var i3, a2 = [].concat(u4).reverse()[0];
            if (s3) {
              if (o3.parent) i3 = r({}, o3.parent, { originalId: o3.parent.id, id: o3.parent.id + "_" + l2(), headers: [o3] }, n2(o3));
              else i3 = P(r({ originalId: o3.id + "_placeholder", id: o3.id + "_placeholder_" + l2(), placeholderOf: o3, headers: [o3] }, n2(o3)), t2);
              a2 && a2.originalId === i3.originalId ? a2.headers.push(o3) : u4.push(i3);
            }
            e4.headers.push(o3);
          }), o2.push(e4), i2 = u4;
        }; i2.length; ) s2();
        return o2.reverse();
      }
      var E = /* @__PURE__ */ new Map();
      function I() {
        for (var e3 = arguments.length, t2 = new Array(e3), n2 = 0; n2 < e3; n2++) t2[n2] = arguments[n2];
        for (var o2 = 0; o2 < t2.length; o2 += 1) if (void 0 !== t2[o2]) return t2[o2];
      }
      function F(e3) {
        if ("function" == typeof e3) return e3;
      }
      function G(e3, t2) {
        var n2 = [];
        return function e4(o2) {
          o2.forEach(function(o3) {
            o3[t2] ? e4(o3[t2]) : n2.push(o3);
          });
        }(e3), n2;
      }
      function A(e3, t2) {
        var n2 = t2.manualExpandedKey, o2 = t2.expanded, r2 = t2.expandSubRows, i2 = void 0 === r2 || r2, u3 = [];
        return e3.forEach(function(e4) {
          return function e5(t3, r3) {
            void 0 === r3 && (r3 = true), t3.isExpanded = t3.original && t3.original[n2] || o2[t3.id], t3.canExpand = t3.subRows && !!t3.subRows.length, r3 && u3.push(t3), t3.subRows && t3.subRows.length && t3.isExpanded && t3.subRows.forEach(function(t4) {
              return e5(t4, i2);
            });
          }(e4);
        }), u3;
      }
      function k(e3, t2, n2) {
        return F(e3) || t2[e3] || n2[e3] || n2.text;
      }
      function H(e3, t2, n2) {
        return e3 ? e3(t2, n2) : void 0 === t2;
      }
      function W() {
        throw new Error("React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.");
      }
      var z = null;
      var T = /\[/g, O = /\]/g;
      var M = function(e3) {
        return r({ role: "table" }, e3);
      }, j = function(e3) {
        return r({ role: "rowgroup" }, e3);
      }, L = function(e3, t2) {
        var n2 = t2.column;
        return r({ key: "header_" + n2.id, colSpan: n2.totalVisibleHeaderCount, role: "columnheader" }, e3);
      }, N = function(e3, t2) {
        var n2 = t2.column;
        return r({ key: "footer_" + n2.id, colSpan: n2.totalVisibleHeaderCount }, e3);
      }, D = function(e3, t2) {
        return r({ key: "headerGroup_" + t2.index, role: "row" }, e3);
      }, V = function(e3, t2) {
        return r({ key: "footerGroup_" + t2.index }, e3);
      }, _ = function(e3, t2) {
        return r({ key: "row_" + t2.row.id, role: "row" }, e3);
      }, X = function(e3, t2) {
        var n2 = t2.cell;
        return r({ key: "cell_" + n2.row.id + "_" + n2.column.id, role: "cell" }, e3);
      };
      function q() {
        return { useOptions: [], stateReducers: [], useControlledState: [], columns: [], columnsDeps: [], allColumns: [], allColumnsDeps: [], accessValue: [], materializedColumns: [], materializedColumnsDeps: [], useInstanceAfterData: [], visibleColumns: [], visibleColumnsDeps: [], headerGroups: [], headerGroupsDeps: [], useInstanceBeforeDimensions: [], useInstance: [], prepareRow: [], getTableProps: [M], getTableBodyProps: [j], getHeaderGroupProps: [D], getFooterGroupProps: [V], getHeaderProps: [L], getFooterProps: [N], getRowProps: [_], getCellProps: [X], useFinalInstance: [] };
      }
      l.resetHiddenColumns = "resetHiddenColumns", l.toggleHideColumn = "toggleHideColumn", l.setHiddenColumns = "setHiddenColumns", l.toggleHideAllColumns = "toggleHideAllColumns";
      var K = function(e3) {
        e3.getToggleHiddenProps = [U], e3.getToggleHideAllColumnsProps = [$], e3.stateReducers.push(J), e3.useInstanceBeforeDimensions.push(Y), e3.headerGroupsDeps.push(function(e4, t2) {
          var n2 = t2.instance;
          return [].concat(e4, [n2.state.hiddenColumns]);
        }), e3.useInstance.push(Q);
      };
      K.pluginName = "useColumnVisibility";
      var U = function(e3, t2) {
        var n2 = t2.column;
        return [e3, { onChange: function(e4) {
          n2.toggleHidden(!e4.target.checked);
        }, style: { cursor: "pointer" }, checked: n2.isVisible, title: "Toggle Column Visible" }];
      }, $ = function(e3, t2) {
        var n2 = t2.instance;
        return [e3, { onChange: function(e4) {
          n2.toggleHideAllColumns(!e4.target.checked);
        }, style: { cursor: "pointer" }, checked: !n2.allColumnsHidden && !n2.state.hiddenColumns.length, title: "Toggle All Columns Hidden", indeterminate: !n2.allColumnsHidden && n2.state.hiddenColumns.length }];
      };
      function J(e3, t2, n2, o2) {
        if (t2.type === l.init) return r({ hiddenColumns: [] }, e3);
        if (t2.type === l.resetHiddenColumns) return r({}, e3, { hiddenColumns: o2.initialState.hiddenColumns || [] });
        if (t2.type === l.toggleHideColumn) {
          var i2 = (void 0 !== t2.value ? t2.value : !e3.hiddenColumns.includes(t2.columnId)) ? [].concat(e3.hiddenColumns, [t2.columnId]) : e3.hiddenColumns.filter(function(e4) {
            return e4 !== t2.columnId;
          });
          return r({}, e3, { hiddenColumns: i2 });
        }
        return t2.type === l.setHiddenColumns ? r({}, e3, { hiddenColumns: m(t2.value, e3.hiddenColumns) }) : t2.type === l.toggleHideAllColumns ? r({}, e3, { hiddenColumns: (void 0 !== t2.value ? t2.value : !e3.hiddenColumns.length) ? o2.allColumns.map(function(e4) {
          return e4.id;
        }) : [] }) : void 0;
      }
      function Y(e3) {
        var n2 = e3.headers, o2 = e3.state.hiddenColumns;
        t.useRef(false).current;
        var r2 = 0;
        n2.forEach(function(e4) {
          return r2 += function e5(t2, n3) {
            t2.isVisible = n3 && !o2.includes(t2.id);
            var r3 = 0;
            return t2.headers && t2.headers.length ? t2.headers.forEach(function(n4) {
              return r3 += e5(n4, t2.isVisible);
            }) : r3 = t2.isVisible ? 1 : 0, t2.totalVisibleHeaderCount = r3, r3;
          }(e4, true);
        });
      }
      function Q(e3) {
        var n2 = e3.columns, o2 = e3.flatHeaders, r2 = e3.dispatch, i2 = e3.allColumns, u3 = e3.getHooks, s2 = e3.state.hiddenColumns, a2 = e3.autoResetHiddenColumns, c2 = void 0 === a2 || a2, d2 = h(e3), p2 = i2.length === s2.length, g2 = t.useCallback(function(e4, t2) {
          return r2({ type: l.toggleHideColumn, columnId: e4, value: t2 });
        }, [r2]), v2 = t.useCallback(function(e4) {
          return r2({ type: l.setHiddenColumns, value: e4 });
        }, [r2]), m2 = t.useCallback(function(e4) {
          return r2({ type: l.toggleHideAllColumns, value: e4 });
        }, [r2]), y2 = f(u3().getToggleHideAllColumnsProps, { instance: d2() });
        o2.forEach(function(e4) {
          e4.toggleHidden = function(t2) {
            r2({ type: l.toggleHideColumn, columnId: e4.id, value: t2 });
          }, e4.getToggleHiddenProps = f(u3().getToggleHiddenProps, { instance: d2(), column: e4 });
        });
        var R2 = h(c2);
        w(function() {
          R2() && r2({ type: l.resetHiddenColumns });
        }, [r2, n2]), Object.assign(e3, { allColumnsHidden: p2, toggleHideColumn: g2, setHiddenColumns: v2, toggleHideAllColumns: m2, getToggleHideAllColumnsProps: y2 });
      }
      var Z = {}, ee = {}, te = function(e3, t2, n2) {
        return e3;
      }, ne = function(e3, t2) {
        return e3.subRows || [];
      }, oe = function(e3, t2, n2) {
        return "" + (n2 ? [n2.id, t2].join(".") : t2);
      }, re = function(e3) {
        return e3;
      };
      function ie(e3) {
        var t2 = e3.initialState, n2 = void 0 === t2 ? Z : t2, o2 = e3.defaultColumn, u3 = void 0 === o2 ? ee : o2, l2 = e3.getSubRows, s2 = void 0 === l2 ? ne : l2, a2 = e3.getRowId, c2 = void 0 === a2 ? oe : a2, d2 = e3.stateReducer, f2 = void 0 === d2 ? te : d2, p2 = e3.useControlledState, g2 = void 0 === p2 ? re : p2;
        return r({}, i(e3, ["initialState", "defaultColumn", "getSubRows", "getRowId", "stateReducer", "useControlledState"]), { initialState: n2, defaultColumn: u3, getSubRows: s2, getRowId: c2, stateReducer: f2, useControlledState: g2 });
      }
      function ue(e3, t2) {
        void 0 === t2 && (t2 = 0);
        var n2 = 0, o2 = 0, r2 = 0, i2 = 0;
        return e3.forEach(function(e4) {
          var u3 = e4.headers;
          if (e4.totalLeft = t2, u3 && u3.length) {
            var l2 = ue(u3, t2), s2 = l2[0], a2 = l2[1], c2 = l2[2], d2 = l2[3];
            e4.totalMinWidth = s2, e4.totalWidth = a2, e4.totalMaxWidth = c2, e4.totalFlexWidth = d2;
          } else e4.totalMinWidth = e4.minWidth, e4.totalWidth = Math.min(Math.max(e4.minWidth, e4.width), e4.maxWidth), e4.totalMaxWidth = e4.maxWidth, e4.totalFlexWidth = e4.canResize ? e4.totalWidth : 0;
          e4.isVisible && (t2 += e4.totalWidth, n2 += e4.totalMinWidth, o2 += e4.totalWidth, r2 += e4.totalMaxWidth, i2 += e4.totalFlexWidth);
        }), [n2, o2, r2, i2];
      }
      function le(e3) {
        var t2 = e3.data, n2 = e3.rows, o2 = e3.flatRows, r2 = e3.rowsById, i2 = e3.column, u3 = e3.getRowId, l2 = e3.getSubRows, s2 = e3.accessValueHooks, a2 = e3.getInstance;
        t2.forEach(function(e4, c2) {
          return function e5(n3, c3, d2, f2, g2) {
            void 0 === d2 && (d2 = 0);
            var v2 = n3, m2 = u3(n3, c3, f2), h2 = r2[m2];
            if (h2) h2.subRows && h2.originalSubRows.forEach(function(t3, n4) {
              return e5(t3, n4, d2 + 1, h2);
            });
            else if ((h2 = { id: m2, original: v2, index: c3, depth: d2, cells: [{}] }).cells.map = W, h2.cells.filter = W, h2.cells.forEach = W, h2.cells[0].getCellProps = W, h2.values = {}, g2.push(h2), o2.push(h2), r2[m2] = h2, h2.originalSubRows = l2(n3, c3), h2.originalSubRows) {
              var y2 = [];
              h2.originalSubRows.forEach(function(t3, n4) {
                return e5(t3, n4, d2 + 1, h2, y2);
              }), h2.subRows = y2;
            }
            i2.accessor && (h2.values[i2.id] = i2.accessor(n3, c3, h2, g2, t2)), h2.values[i2.id] = p(s2, h2.values[i2.id], { row: h2, column: i2, instance: a2() });
          }(e4, c2, 0, void 0, n2);
        });
      }
      l.resetExpanded = "resetExpanded", l.toggleRowExpanded = "toggleRowExpanded", l.toggleAllRowsExpanded = "toggleAllRowsExpanded";
      var se = function(e3) {
        e3.getToggleAllRowsExpandedProps = [ae], e3.getToggleRowExpandedProps = [ce], e3.stateReducers.push(de), e3.useInstance.push(fe), e3.prepareRow.push(pe);
      };
      se.pluginName = "useExpanded";
      var ae = function(e3, t2) {
        var n2 = t2.instance;
        return [e3, { onClick: function(e4) {
          n2.toggleAllRowsExpanded();
        }, style: { cursor: "pointer" }, title: "Toggle All Rows Expanded" }];
      }, ce = function(e3, t2) {
        var n2 = t2.row;
        return [e3, { onClick: function() {
          n2.toggleRowExpanded();
        }, style: { cursor: "pointer" }, title: "Toggle Row Expanded" }];
      };
      function de(e3, t2, n2, o2) {
        if (t2.type === l.init) return r({ expanded: {} }, e3);
        if (t2.type === l.resetExpanded) return r({}, e3, { expanded: o2.initialState.expanded || {} });
        if (t2.type === l.toggleAllRowsExpanded) {
          var s2 = t2.value, a2 = o2.rowsById, c2 = Object.keys(a2).length === Object.keys(e3.expanded).length;
          if (void 0 !== s2 ? s2 : !c2) {
            var d2 = {};
            return Object.keys(a2).forEach(function(e4) {
              d2[e4] = true;
            }), r({}, e3, { expanded: d2 });
          }
          return r({}, e3, { expanded: {} });
        }
        if (t2.type === l.toggleRowExpanded) {
          var f2, p2 = t2.id, g2 = t2.value, v2 = e3.expanded[p2], m2 = void 0 !== g2 ? g2 : !v2;
          if (!v2 && m2) return r({}, e3, { expanded: r({}, e3.expanded, (f2 = {}, f2[p2] = true, f2)) });
          if (v2 && !m2) {
            var h2 = e3.expanded;
            h2[p2];
            return r({}, e3, { expanded: i(h2, [p2].map(u2)) });
          }
          return e3;
        }
      }
      function fe(e3) {
        var n2 = e3.data, o2 = e3.rows, r2 = e3.rowsById, i2 = e3.manualExpandedKey, u3 = void 0 === i2 ? "expanded" : i2, s2 = e3.paginateExpandedRows, a2 = void 0 === s2 || s2, c2 = e3.expandSubRows, d2 = void 0 === c2 || c2, p2 = e3.autoResetExpanded, g2 = void 0 === p2 || p2, m2 = e3.getHooks, y2 = e3.plugins, R2 = e3.state.expanded, b2 = e3.dispatch;
        v(y2, ["useSortBy", "useGroupBy", "usePivotColumns", "useGlobalFilter"], "useExpanded");
        var S2 = h(g2), C2 = Boolean(Object.keys(r2).length && Object.keys(R2).length);
        C2 && Object.keys(r2).some(function(e4) {
          return !R2[e4];
        }) && (C2 = false), w(function() {
          S2() && b2({ type: l.resetExpanded });
        }, [b2, n2]);
        var x2 = t.useCallback(function(e4, t2) {
          b2({ type: l.toggleRowExpanded, id: e4, value: t2 });
        }, [b2]), P2 = t.useCallback(function(e4) {
          return b2({ type: l.toggleAllRowsExpanded, value: e4 });
        }, [b2]), B2 = t.useMemo(function() {
          return a2 ? A(o2, { manualExpandedKey: u3, expanded: R2, expandSubRows: d2 }) : o2;
        }, [a2, o2, u3, R2, d2]), E2 = t.useMemo(function() {
          return function(e4) {
            var t2 = 0;
            return Object.keys(e4).forEach(function(e5) {
              var n3 = e5.split(".");
              t2 = Math.max(t2, n3.length);
            }), t2;
          }(R2);
        }, [R2]), I2 = h(e3), F2 = f(m2().getToggleAllRowsExpandedProps, { instance: I2() });
        Object.assign(e3, { preExpandedRows: o2, expandedRows: B2, rows: B2, expandedDepth: E2, isAllRowsExpanded: C2, toggleRowExpanded: x2, toggleAllRowsExpanded: P2, getToggleAllRowsExpandedProps: F2 });
      }
      function pe(e3, t2) {
        var n2 = t2.instance.getHooks, o2 = t2.instance;
        e3.toggleRowExpanded = function(t3) {
          return o2.toggleRowExpanded(e3.id, t3);
        }, e3.getToggleRowExpandedProps = f(n2().getToggleRowExpandedProps, { instance: o2, row: e3 });
      }
      var ge = function(e3, t2, n2) {
        return e3 = e3.filter(function(e4) {
          return t2.some(function(t3) {
            var o2 = e4.values[t3];
            return String(o2).toLowerCase().includes(String(n2).toLowerCase());
          });
        });
      };
      ge.autoRemove = function(e3) {
        return !e3;
      };
      var ve = function(e3, t2, n2) {
        return e3.filter(function(e4) {
          return t2.some(function(t3) {
            var o2 = e4.values[t3];
            return void 0 === o2 || String(o2).toLowerCase() === String(n2).toLowerCase();
          });
        });
      };
      ve.autoRemove = function(e3) {
        return !e3;
      };
      var me = function(e3, t2, n2) {
        return e3.filter(function(e4) {
          return t2.some(function(t3) {
            var o2 = e4.values[t3];
            return void 0 === o2 || String(o2) === String(n2);
          });
        });
      };
      me.autoRemove = function(e3) {
        return !e3;
      };
      var he = function(e3, t2, n2) {
        return e3.filter(function(e4) {
          return t2.some(function(t3) {
            return e4.values[t3].includes(n2);
          });
        });
      };
      he.autoRemove = function(e3) {
        return !e3 || !e3.length;
      };
      var ye = function(e3, t2, n2) {
        return e3.filter(function(e4) {
          return t2.some(function(t3) {
            var o2 = e4.values[t3];
            return o2 && o2.length && n2.every(function(e5) {
              return o2.includes(e5);
            });
          });
        });
      };
      ye.autoRemove = function(e3) {
        return !e3 || !e3.length;
      };
      var we = function(e3, t2, n2) {
        return e3.filter(function(e4) {
          return t2.some(function(t3) {
            var o2 = e4.values[t3];
            return o2 && o2.length && n2.some(function(e5) {
              return o2.includes(e5);
            });
          });
        });
      };
      we.autoRemove = function(e3) {
        return !e3 || !e3.length;
      };
      var Re = function(e3, t2, n2) {
        return e3.filter(function(e4) {
          return t2.some(function(t3) {
            var o2 = e4.values[t3];
            return n2.includes(o2);
          });
        });
      };
      Re.autoRemove = function(e3) {
        return !e3 || !e3.length;
      };
      var be = function(e3, t2, n2) {
        return e3.filter(function(e4) {
          return t2.some(function(t3) {
            return e4.values[t3] === n2;
          });
        });
      };
      be.autoRemove = function(e3) {
        return void 0 === e3;
      };
      var Se = function(e3, t2, n2) {
        return e3.filter(function(e4) {
          return t2.some(function(t3) {
            return e4.values[t3] == n2;
          });
        });
      };
      Se.autoRemove = function(e3) {
        return null == e3;
      };
      var Ce = function(e3, t2, n2) {
        var o2 = n2 || [], r2 = o2[0], i2 = o2[1];
        if ((r2 = "number" == typeof r2 ? r2 : -1 / 0) > (i2 = "number" == typeof i2 ? i2 : 1 / 0)) {
          var u3 = r2;
          r2 = i2, i2 = u3;
        }
        return e3.filter(function(e4) {
          return t2.some(function(t3) {
            var n3 = e4.values[t3];
            return n3 >= r2 && n3 <= i2;
          });
        });
      };
      Ce.autoRemove = function(e3) {
        return !e3 || "number" != typeof e3[0] && "number" != typeof e3[1];
      };
      var xe = Object.freeze({ __proto__: null, text: ge, exactText: ve, exactTextCase: me, includes: he, includesAll: ye, includesSome: we, includesValue: Re, exact: be, equals: Se, between: Ce });
      l.resetFilters = "resetFilters", l.setFilter = "setFilter", l.setAllFilters = "setAllFilters";
      var Pe = function(e3) {
        e3.stateReducers.push(Be), e3.useInstance.push(Ee);
      };
      function Be(e3, t2, n2, o2) {
        if (t2.type === l.init) return r({ filters: [] }, e3);
        if (t2.type === l.resetFilters) return r({}, e3, { filters: o2.initialState.filters || [] });
        if (t2.type === l.setFilter) {
          var i2 = t2.columnId, u3 = t2.filterValue, s2 = o2.allColumns, a2 = o2.filterTypes, c2 = s2.find(function(e4) {
            return e4.id === i2;
          });
          if (!c2) throw new Error("React-Table: Could not find a column with id: " + i2);
          var d2 = k(c2.filter, a2 || {}, xe), f2 = e3.filters.find(function(e4) {
            return e4.id === i2;
          }), p2 = m(u3, f2 && f2.value);
          return H(d2.autoRemove, p2, c2) ? r({}, e3, { filters: e3.filters.filter(function(e4) {
            return e4.id !== i2;
          }) }) : r({}, e3, f2 ? { filters: e3.filters.map(function(e4) {
            return e4.id === i2 ? { id: i2, value: p2 } : e4;
          }) } : { filters: [].concat(e3.filters, [{ id: i2, value: p2 }]) });
        }
        if (t2.type === l.setAllFilters) {
          var g2 = t2.filters, v2 = o2.allColumns, h2 = o2.filterTypes;
          return r({}, e3, { filters: m(g2, e3.filters).filter(function(e4) {
            var t3 = v2.find(function(t4) {
              return t4.id === e4.id;
            });
            return !H(k(t3.filter, h2 || {}, xe).autoRemove, e4.value, t3);
          }) });
        }
      }
      function Ee(e3) {
        var n2 = e3.data, o2 = e3.rows, r2 = e3.flatRows, i2 = e3.rowsById, u3 = e3.allColumns, s2 = e3.filterTypes, a2 = e3.manualFilters, c2 = e3.defaultCanFilter, d2 = void 0 !== c2 && c2, f2 = e3.disableFilters, p2 = e3.state.filters, g2 = e3.dispatch, v2 = e3.autoResetFilters, m2 = void 0 === v2 || v2, y2 = t.useCallback(function(e4, t2) {
          g2({ type: l.setFilter, columnId: e4, filterValue: t2 });
        }, [g2]), R2 = t.useCallback(function(e4) {
          g2({ type: l.setAllFilters, filters: e4 });
        }, [g2]);
        u3.forEach(function(e4) {
          var t2 = e4.id, n3 = e4.accessor, o3 = e4.defaultCanFilter, r3 = e4.disableFilters;
          e4.canFilter = n3 ? I(true !== r3 && void 0, true !== f2 && void 0, true) : I(o3, d2, false), e4.setFilter = function(t3) {
            return y2(e4.id, t3);
          };
          var i3 = p2.find(function(e5) {
            return e5.id === t2;
          });
          e4.filterValue = i3 && i3.value;
        });
        var b2 = t.useMemo(function() {
          if (a2 || !p2.length) return [o2, r2, i2];
          var e4 = [], t2 = {};
          return [function n3(o3, r3) {
            void 0 === r3 && (r3 = 0);
            var i3 = o3;
            return (i3 = p2.reduce(function(e5, t3) {
              var n4 = t3.id, o4 = t3.value, i4 = u3.find(function(e6) {
                return e6.id === n4;
              });
              if (!i4) return e5;
              0 === r3 && (i4.preFilteredRows = e5);
              var l2 = k(i4.filter, s2 || {}, xe);
              return l2 ? (i4.filteredRows = l2(e5, [n4], o4), i4.filteredRows) : (console.warn("Could not find a valid 'column.filter' for column with the ID: " + i4.id + "."), e5);
            }, o3)).forEach(function(o4) {
              e4.push(o4), t2[o4.id] = o4, o4.subRows && (o4.subRows = o4.subRows && o4.subRows.length > 0 ? n3(o4.subRows, r3 + 1) : o4.subRows);
            }), i3;
          }(o2), e4, t2];
        }, [a2, p2, o2, r2, i2, u3, s2]), S2 = b2[0], C2 = b2[1], x2 = b2[2];
        t.useMemo(function() {
          u3.filter(function(e4) {
            return !p2.find(function(t2) {
              return t2.id === e4.id;
            });
          }).forEach(function(e4) {
            e4.preFilteredRows = S2, e4.filteredRows = S2;
          });
        }, [S2, p2, u3]);
        var P2 = h(m2);
        w(function() {
          P2() && g2({ type: l.resetFilters });
        }, [g2, a2 ? null : n2]), Object.assign(e3, { preFilteredRows: o2, preFilteredFlatRows: r2, preFilteredRowsById: i2, filteredRows: S2, filteredFlatRows: C2, filteredRowsById: x2, rows: S2, flatRows: C2, rowsById: x2, setFilter: y2, setAllFilters: R2 });
      }
      Pe.pluginName = "useFilters", l.resetGlobalFilter = "resetGlobalFilter", l.setGlobalFilter = "setGlobalFilter";
      var Ie = function(e3) {
        e3.stateReducers.push(Fe), e3.useInstance.push(Ge);
      };
      function Fe(e3, t2, n2, o2) {
        if (t2.type === l.resetGlobalFilter) return r({}, e3, { globalFilter: o2.initialState.globalFilter || void 0 });
        if (t2.type === l.setGlobalFilter) {
          var u3 = t2.filterValue, s2 = o2.userFilterTypes, a2 = k(o2.globalFilter, s2 || {}, xe), c2 = m(u3, e3.globalFilter);
          if (H(a2.autoRemove, c2)) {
            e3.globalFilter;
            return i(e3, ["globalFilter"]);
          }
          return r({}, e3, { globalFilter: c2 });
        }
      }
      function Ge(e3) {
        var n2 = e3.data, o2 = e3.rows, r2 = e3.flatRows, i2 = e3.rowsById, u3 = e3.allColumns, s2 = e3.filterTypes, a2 = e3.globalFilter, c2 = e3.manualGlobalFilter, d2 = e3.state.globalFilter, f2 = e3.dispatch, p2 = e3.autoResetGlobalFilter, g2 = void 0 === p2 || p2, v2 = e3.disableGlobalFilter, m2 = t.useCallback(function(e4) {
          f2({ type: l.setGlobalFilter, filterValue: e4 });
        }, [f2]), y2 = t.useMemo(function() {
          if (c2 || void 0 === d2) return [o2, r2, i2];
          var e4 = [], t2 = {}, n3 = k(a2, s2 || {}, xe);
          if (!n3) return console.warn("Could not find a valid 'globalFilter' option."), o2;
          u3.forEach(function(e5) {
            var t3 = e5.disableGlobalFilter;
            e5.canFilter = I(true !== t3 && void 0, true !== v2 && void 0, true);
          });
          var l2 = u3.filter(function(e5) {
            return true === e5.canFilter;
          });
          return [function o3(r3) {
            return (r3 = n3(r3, l2.map(function(e5) {
              return e5.id;
            }), d2)).forEach(function(n4) {
              e4.push(n4), t2[n4.id] = n4, n4.subRows = n4.subRows && n4.subRows.length ? o3(n4.subRows) : n4.subRows;
            }), r3;
          }(o2), e4, t2];
        }, [c2, d2, a2, s2, u3, o2, r2, i2, v2]), R2 = y2[0], b2 = y2[1], S2 = y2[2], C2 = h(g2);
        w(function() {
          C2() && f2({ type: l.resetGlobalFilter });
        }, [f2, c2 ? null : n2]), Object.assign(e3, { preGlobalFilteredRows: o2, preGlobalFilteredFlatRows: r2, preGlobalFilteredRowsById: i2, globalFilteredRows: R2, globalFilteredFlatRows: b2, globalFilteredRowsById: S2, rows: R2, flatRows: b2, rowsById: S2, setGlobalFilter: m2, disableGlobalFilter: v2 });
      }
      function Ae(e3, t2) {
        return t2.reduce(function(e4, t3) {
          return e4 + ("number" == typeof t3 ? t3 : 0);
        }, 0);
      }
      Ie.pluginName = "useGlobalFilter";
      var ke = Object.freeze({ __proto__: null, sum: Ae, min: function(e3) {
        var t2 = e3[0] || 0;
        return e3.forEach(function(e4) {
          "number" == typeof e4 && (t2 = Math.min(t2, e4));
        }), t2;
      }, max: function(e3) {
        var t2 = e3[0] || 0;
        return e3.forEach(function(e4) {
          "number" == typeof e4 && (t2 = Math.max(t2, e4));
        }), t2;
      }, minMax: function(e3) {
        var t2 = e3[0] || 0, n2 = e3[0] || 0;
        return e3.forEach(function(e4) {
          "number" == typeof e4 && (t2 = Math.min(t2, e4), n2 = Math.max(n2, e4));
        }), t2 + ".." + n2;
      }, average: function(e3) {
        return Ae(0, e3) / e3.length;
      }, median: function(e3) {
        if (!e3.length) return null;
        var t2 = Math.floor(e3.length / 2), n2 = [].concat(e3).sort(function(e4, t3) {
          return e4 - t3;
        });
        return e3.length % 2 != 0 ? n2[t2] : (n2[t2 - 1] + n2[t2]) / 2;
      }, unique: function(e3) {
        return Array.from(new Set(e3).values());
      }, uniqueCount: function(e3) {
        return new Set(e3).size;
      }, count: function(e3) {
        return e3.length;
      } }), He = [], We = {};
      l.resetGroupBy = "resetGroupBy", l.setGroupBy = "setGroupBy", l.toggleGroupBy = "toggleGroupBy";
      var ze = function(e3) {
        e3.getGroupByToggleProps = [Te], e3.stateReducers.push(Oe), e3.visibleColumnsDeps.push(function(e4, t2) {
          var n2 = t2.instance;
          return [].concat(e4, [n2.state.groupBy]);
        }), e3.visibleColumns.push(Me), e3.useInstance.push(Le), e3.prepareRow.push(Ne);
      };
      ze.pluginName = "useGroupBy";
      var Te = function(e3, t2) {
        var n2 = t2.header;
        return [e3, { onClick: n2.canGroupBy ? function(e4) {
          e4.persist(), n2.toggleGroupBy();
        } : void 0, style: { cursor: n2.canGroupBy ? "pointer" : void 0 }, title: "Toggle GroupBy" }];
      };
      function Oe(e3, t2, n2, o2) {
        if (t2.type === l.init) return r({ groupBy: [] }, e3);
        if (t2.type === l.resetGroupBy) return r({}, e3, { groupBy: o2.initialState.groupBy || [] });
        if (t2.type === l.setGroupBy) return r({}, e3, { groupBy: t2.value });
        if (t2.type === l.toggleGroupBy) {
          var i2 = t2.columnId, u3 = t2.value, s2 = void 0 !== u3 ? u3 : !e3.groupBy.includes(i2);
          return r({}, e3, s2 ? { groupBy: [].concat(e3.groupBy, [i2]) } : { groupBy: e3.groupBy.filter(function(e4) {
            return e4 !== i2;
          }) });
        }
      }
      function Me(e3, t2) {
        var n2 = t2.instance.state.groupBy, o2 = n2.map(function(t3) {
          return e3.find(function(e4) {
            return e4.id === t3;
          });
        }).filter(Boolean), r2 = e3.filter(function(e4) {
          return !n2.includes(e4.id);
        });
        return (e3 = [].concat(o2, r2)).forEach(function(e4) {
          e4.isGrouped = n2.includes(e4.id), e4.groupedIndex = n2.indexOf(e4.id);
        }), e3;
      }
      var je = {};
      function Le(e3) {
        var n2 = e3.data, o2 = e3.rows, i2 = e3.flatRows, u3 = e3.rowsById, s2 = e3.allColumns, a2 = e3.flatHeaders, c2 = e3.groupByFn, d2 = void 0 === c2 ? De : c2, p2 = e3.manualGroupBy, g2 = e3.aggregations, m2 = void 0 === g2 ? je : g2, y2 = e3.plugins, R2 = e3.state.groupBy, b2 = e3.dispatch, S2 = e3.autoResetGroupBy, C2 = void 0 === S2 || S2, x2 = e3.disableGroupBy, P2 = e3.defaultCanGroupBy, B2 = e3.getHooks;
        v(y2, ["useColumnOrder", "useFilters"], "useGroupBy");
        var E2 = h(e3);
        s2.forEach(function(t2) {
          var n3 = t2.accessor, o3 = t2.defaultGroupBy, r2 = t2.disableGroupBy;
          t2.canGroupBy = n3 ? I(t2.canGroupBy, true !== r2 && void 0, true !== x2 && void 0, true) : I(t2.canGroupBy, o3, P2, false), t2.canGroupBy && (t2.toggleGroupBy = function() {
            return e3.toggleGroupBy(t2.id);
          }), t2.Aggregated = t2.Aggregated || t2.Cell;
        });
        var F2 = t.useCallback(function(e4, t2) {
          b2({ type: l.toggleGroupBy, columnId: e4, value: t2 });
        }, [b2]), A2 = t.useCallback(function(e4) {
          b2({ type: l.setGroupBy, value: e4 });
        }, [b2]);
        a2.forEach(function(e4) {
          e4.getGroupByToggleProps = f(B2().getGroupByToggleProps, { instance: E2(), header: e4 });
        });
        var k2 = t.useMemo(function() {
          if (p2 || !R2.length) return [o2, i2, u3, He, We, i2, u3];
          var e4 = R2.filter(function(e5) {
            return s2.find(function(t3) {
              return t3.id === e5;
            });
          }), t2 = [], n3 = {}, l2 = [], a3 = {}, c3 = [], f2 = {}, g3 = function o3(i3, u4, p3) {
            if (void 0 === u4 && (u4 = 0), u4 === e4.length) return i3.map(function(e5) {
              return r({}, e5, { depth: u4 });
            });
            var g4 = e4[u4], v2 = d2(i3, g4);
            return Object.entries(v2).map(function(r2, i4) {
              var d3 = r2[0], v3 = r2[1], h2 = g4 + ":" + d3, y3 = o3(v3, u4 + 1, h2 = p3 ? p3 + ">" + h2 : h2), w2 = u4 ? G(v3, "leafRows") : v3, R3 = function(t3, n4, o4) {
                var r3 = {};
                return s2.forEach(function(i5) {
                  if (e4.includes(i5.id)) r3[i5.id] = n4[0] ? n4[0].values[i5.id] : null;
                  else {
                    var u5 = "function" == typeof i5.aggregate ? i5.aggregate : m2[i5.aggregate] || ke[i5.aggregate];
                    if (u5) {
                      var l3 = n4.map(function(e5) {
                        return e5.values[i5.id];
                      }), s3 = t3.map(function(e5) {
                        var t4 = e5.values[i5.id];
                        if (!o4 && i5.aggregateValue) {
                          var n5 = "function" == typeof i5.aggregateValue ? i5.aggregateValue : m2[i5.aggregateValue] || ke[i5.aggregateValue];
                          if (!n5) throw console.info({ column: i5 }), new Error("React Table: Invalid column.aggregateValue option for column listed above");
                          t4 = n5(t4, e5, i5);
                        }
                        return t4;
                      });
                      r3[i5.id] = u5(s3, l3);
                    } else {
                      if (i5.aggregate) throw console.info({ column: i5 }), new Error("React Table: Invalid column.aggregate option for column listed above");
                      r3[i5.id] = null;
                    }
                  }
                }), r3;
              }(w2, v3, u4), b3 = { id: h2, isGrouped: true, groupByID: g4, groupByVal: d3, values: R3, subRows: y3, leafRows: w2, depth: u4, index: i4 };
              return y3.forEach(function(e5) {
                t2.push(e5), n3[e5.id] = e5, e5.isGrouped ? (l2.push(e5), a3[e5.id] = e5) : (c3.push(e5), f2[e5.id] = e5);
              }), b3;
            });
          }(o2);
          return g3.forEach(function(e5) {
            t2.push(e5), n3[e5.id] = e5, e5.isGrouped ? (l2.push(e5), a3[e5.id] = e5) : (c3.push(e5), f2[e5.id] = e5);
          }), [g3, t2, n3, l2, a3, c3, f2];
        }, [p2, R2, o2, i2, u3, s2, m2, d2]), H2 = k2[0], W2 = k2[1], z2 = k2[2], T2 = k2[3], O2 = k2[4], M2 = k2[5], j2 = k2[6], L2 = h(C2);
        w(function() {
          L2() && b2({ type: l.resetGroupBy });
        }, [b2, p2 ? null : n2]), Object.assign(e3, { preGroupedRows: o2, preGroupedFlatRow: i2, preGroupedRowsById: u3, groupedRows: H2, groupedFlatRows: W2, groupedRowsById: z2, onlyGroupedFlatRows: T2, onlyGroupedRowsById: O2, nonGroupedFlatRows: M2, nonGroupedRowsById: j2, rows: H2, flatRows: W2, rowsById: z2, toggleGroupBy: F2, setGroupBy: A2 });
      }
      function Ne(e3) {
        e3.allCells.forEach(function(t2) {
          var n2;
          t2.isGrouped = t2.column.isGrouped && t2.column.id === e3.groupByID, t2.isPlaceholder = !t2.isGrouped && t2.column.isGrouped, t2.isAggregated = !t2.isGrouped && !t2.isPlaceholder && (null == (n2 = e3.subRows) ? void 0 : n2.length);
        });
      }
      function De(e3, t2) {
        return e3.reduce(function(e4, n2, o2) {
          var r2 = "" + n2.values[t2];
          return e4[r2] = Array.isArray(e4[r2]) ? e4[r2] : [], e4[r2].push(n2), e4;
        }, {});
      }
      var Ve = /([0-9]+)/gm;
      function _e(e3, t2) {
        return e3 === t2 ? 0 : e3 > t2 ? 1 : -1;
      }
      function Xe(e3, t2, n2) {
        return [e3.values[n2], t2.values[n2]];
      }
      function qe(e3) {
        return "number" == typeof e3 ? isNaN(e3) || e3 === 1 / 0 || e3 === -1 / 0 ? "" : String(e3) : "string" == typeof e3 ? e3 : "";
      }
      var Ke = Object.freeze({ __proto__: null, alphanumeric: function(e3, t2, n2) {
        var o2 = Xe(e3, t2, n2), r2 = o2[0], i2 = o2[1];
        for (r2 = qe(r2), i2 = qe(i2), r2 = r2.split(Ve).filter(Boolean), i2 = i2.split(Ve).filter(Boolean); r2.length && i2.length; ) {
          var u3 = r2.shift(), l2 = i2.shift(), s2 = parseInt(u3, 10), a2 = parseInt(l2, 10), c2 = [s2, a2].sort();
          if (isNaN(c2[0])) {
            if (u3 > l2) return 1;
            if (l2 > u3) return -1;
          } else {
            if (isNaN(c2[1])) return isNaN(s2) ? -1 : 1;
            if (s2 > a2) return 1;
            if (a2 > s2) return -1;
          }
        }
        return r2.length - i2.length;
      }, datetime: function(e3, t2, n2) {
        var o2 = Xe(e3, t2, n2), r2 = o2[0], i2 = o2[1];
        return _e(r2 = r2.getTime(), i2 = i2.getTime());
      }, basic: function(e3, t2, n2) {
        var o2 = Xe(e3, t2, n2);
        return _e(o2[0], o2[1]);
      }, string: function(e3, t2, n2) {
        var o2 = Xe(e3, t2, n2), r2 = o2[0], i2 = o2[1];
        for (r2 = r2.split("").filter(Boolean), i2 = i2.split("").filter(Boolean); r2.length && i2.length; ) {
          var u3 = r2.shift(), l2 = i2.shift(), s2 = u3.toLowerCase(), a2 = l2.toLowerCase();
          if (s2 > a2) return 1;
          if (a2 > s2) return -1;
          if (u3 > l2) return 1;
          if (l2 > u3) return -1;
        }
        return r2.length - i2.length;
      }, number: function(e3, t2, n2) {
        var o2 = Xe(e3, t2, n2), r2 = o2[0], i2 = o2[1], u3 = /[^0-9.]/gi;
        return _e(r2 = Number(String(r2).replace(u3, "")), i2 = Number(String(i2).replace(u3, "")));
      } });
      l.resetSortBy = "resetSortBy", l.setSortBy = "setSortBy", l.toggleSortBy = "toggleSortBy", l.clearSortBy = "clearSortBy", c.sortType = "alphanumeric", c.sortDescFirst = false;
      var Ue = function(e3) {
        e3.getSortByToggleProps = [$e], e3.stateReducers.push(Je), e3.useInstance.push(Ye);
      };
      Ue.pluginName = "useSortBy";
      var $e = function(e3, t2) {
        var n2 = t2.instance, o2 = t2.column, r2 = n2.isMultiSortEvent, i2 = void 0 === r2 ? function(e4) {
          return e4.shiftKey;
        } : r2;
        return [e3, { onClick: o2.canSort ? function(e4) {
          e4.persist(), o2.toggleSortBy(void 0, !n2.disableMultiSort && i2(e4));
        } : void 0, style: { cursor: o2.canSort ? "pointer" : void 0 }, title: o2.canSort ? "Toggle SortBy" : void 0 }];
      };
      function Je(e3, t2, n2, o2) {
        if (t2.type === l.init) return r({ sortBy: [] }, e3);
        if (t2.type === l.resetSortBy) return r({}, e3, { sortBy: o2.initialState.sortBy || [] });
        if (t2.type === l.clearSortBy) return r({}, e3, { sortBy: e3.sortBy.filter(function(e4) {
          return e4.id !== t2.columnId;
        }) });
        if (t2.type === l.setSortBy) return r({}, e3, { sortBy: t2.sortBy });
        if (t2.type === l.toggleSortBy) {
          var i2, u3 = t2.columnId, s2 = t2.desc, a2 = t2.multi, c2 = o2.allColumns, d2 = o2.disableMultiSort, f2 = o2.disableSortRemove, p2 = o2.disableMultiRemove, g2 = o2.maxMultiSortColCount, v2 = void 0 === g2 ? Number.MAX_SAFE_INTEGER : g2, m2 = e3.sortBy, h2 = c2.find(function(e4) {
            return e4.id === u3;
          }).sortDescFirst, y2 = m2.find(function(e4) {
            return e4.id === u3;
          }), w2 = m2.findIndex(function(e4) {
            return e4.id === u3;
          }), R2 = null != s2, b2 = [];
          return "toggle" !== (i2 = !d2 && a2 ? y2 ? "toggle" : "add" : w2 !== m2.length - 1 || 1 !== m2.length ? "replace" : y2 ? "toggle" : "replace") || f2 || R2 || a2 && p2 || !(y2 && y2.desc && !h2 || !y2.desc && h2) || (i2 = "remove"), "replace" === i2 ? b2 = [{ id: u3, desc: R2 ? s2 : h2 }] : "add" === i2 ? (b2 = [].concat(m2, [{ id: u3, desc: R2 ? s2 : h2 }])).splice(0, b2.length - v2) : "toggle" === i2 ? b2 = m2.map(function(e4) {
            return e4.id === u3 ? r({}, e4, { desc: R2 ? s2 : !y2.desc }) : e4;
          }) : "remove" === i2 && (b2 = m2.filter(function(e4) {
            return e4.id !== u3;
          })), r({}, e3, { sortBy: b2 });
        }
      }
      function Ye(e3) {
        var n2 = e3.data, o2 = e3.rows, r2 = e3.flatRows, i2 = e3.allColumns, u3 = e3.orderByFn, s2 = void 0 === u3 ? Qe : u3, a2 = e3.sortTypes, c2 = e3.manualSortBy, d2 = e3.defaultCanSort, p2 = e3.disableSortBy, g2 = e3.flatHeaders, m2 = e3.state.sortBy, y2 = e3.dispatch, R2 = e3.plugins, b2 = e3.getHooks, S2 = e3.autoResetSortBy, C2 = void 0 === S2 || S2;
        v(R2, ["useFilters", "useGlobalFilter", "useGroupBy", "usePivotColumns"], "useSortBy");
        var x2 = t.useCallback(function(e4) {
          y2({ type: l.setSortBy, sortBy: e4 });
        }, [y2]), P2 = t.useCallback(function(e4, t2, n3) {
          y2({ type: l.toggleSortBy, columnId: e4, desc: t2, multi: n3 });
        }, [y2]), B2 = h(e3);
        g2.forEach(function(e4) {
          var t2 = e4.accessor, n3 = e4.canSort, o3 = e4.disableSortBy, r3 = e4.id, i3 = t2 ? I(true !== o3 && void 0, true !== p2 && void 0, true) : I(d2, n3, false);
          e4.canSort = i3, e4.canSort && (e4.toggleSortBy = function(t3, n4) {
            return P2(e4.id, t3, n4);
          }, e4.clearSortBy = function() {
            y2({ type: l.clearSortBy, columnId: e4.id });
          }), e4.getSortByToggleProps = f(b2().getSortByToggleProps, { instance: B2(), column: e4 });
          var u4 = m2.find(function(e5) {
            return e5.id === r3;
          });
          e4.isSorted = !!u4, e4.sortedIndex = m2.findIndex(function(e5) {
            return e5.id === r3;
          }), e4.isSortedDesc = e4.isSorted ? u4.desc : void 0;
        });
        var E2 = t.useMemo(function() {
          if (c2 || !m2.length) return [o2, r2];
          var e4 = [], t2 = m2.filter(function(e5) {
            return i2.find(function(t3) {
              return t3.id === e5.id;
            });
          });
          return [function n3(o3) {
            var r3 = s2(o3, t2.map(function(e5) {
              var t3 = i2.find(function(t4) {
                return t4.id === e5.id;
              });
              if (!t3) throw new Error("React-Table: Could not find a column with id: " + e5.id + " while sorting");
              var n4 = t3.sortType, o4 = F(n4) || (a2 || {})[n4] || Ke[n4];
              if (!o4) throw new Error("React-Table: Could not find a valid sortType of '" + n4 + "' for column '" + e5.id + "'.");
              return function(t4, n5) {
                return o4(t4, n5, e5.id, e5.desc);
              };
            }), t2.map(function(e5) {
              var t3 = i2.find(function(t4) {
                return t4.id === e5.id;
              });
              return t3 && t3.sortInverted ? e5.desc : !e5.desc;
            }));
            return r3.forEach(function(t3) {
              e4.push(t3), t3.subRows && 0 !== t3.subRows.length && (t3.subRows = n3(t3.subRows));
            }), r3;
          }(o2), e4];
        }, [c2, m2, o2, r2, i2, s2, a2]), G2 = E2[0], A2 = E2[1], k2 = h(C2);
        w(function() {
          k2() && y2({ type: l.resetSortBy });
        }, [c2 ? null : n2]), Object.assign(e3, { preSortedRows: o2, preSortedFlatRows: r2, sortedRows: G2, sortedFlatRows: A2, rows: G2, flatRows: A2, setSortBy: x2, toggleSortBy: P2 });
      }
      function Qe(e3, t2, n2) {
        return [].concat(e3).sort(function(e4, o2) {
          for (var r2 = 0; r2 < t2.length; r2 += 1) {
            var i2 = t2[r2], u3 = false === n2[r2] || "desc" === n2[r2], l2 = i2(e4, o2);
            if (0 !== l2) return u3 ? -l2 : l2;
          }
          return n2[0] ? e4.index - o2.index : o2.index - e4.index;
        });
      }
      l.resetPage = "resetPage", l.gotoPage = "gotoPage", l.setPageSize = "setPageSize";
      var Ze = function(e3) {
        e3.stateReducers.push(et), e3.useInstance.push(tt);
      };
      function et(e3, t2, n2, o2) {
        if (t2.type === l.init) return r({ pageSize: 10, pageIndex: 0 }, e3);
        if (t2.type === l.resetPage) return r({}, e3, { pageIndex: o2.initialState.pageIndex || 0 });
        if (t2.type === l.gotoPage) {
          var i2 = o2.pageCount, u3 = o2.page, s2 = m(t2.pageIndex, e3.pageIndex), a2 = false;
          return s2 > e3.pageIndex ? a2 = -1 === i2 ? u3.length >= e3.pageSize : s2 < i2 : s2 < e3.pageIndex && (a2 = s2 > -1), a2 ? r({}, e3, { pageIndex: s2 }) : e3;
        }
        if (t2.type === l.setPageSize) {
          var c2 = t2.pageSize, d2 = e3.pageSize * e3.pageIndex;
          return r({}, e3, { pageIndex: Math.floor(d2 / c2), pageSize: c2 });
        }
      }
      function tt(e3) {
        var n2 = e3.rows, o2 = e3.autoResetPage, r2 = void 0 === o2 || o2, i2 = e3.manualExpandedKey, u3 = void 0 === i2 ? "expanded" : i2, s2 = e3.plugins, a2 = e3.pageCount, c2 = e3.paginateExpandedRows, d2 = void 0 === c2 || c2, f2 = e3.expandSubRows, p2 = void 0 === f2 || f2, g2 = e3.state, m2 = g2.pageSize, y2 = g2.pageIndex, R2 = g2.expanded, b2 = g2.globalFilter, S2 = g2.filters, C2 = g2.groupBy, x2 = g2.sortBy, P2 = e3.dispatch, B2 = e3.data, E2 = e3.manualPagination;
        v(s2, ["useGlobalFilter", "useFilters", "useGroupBy", "useSortBy", "useExpanded"], "usePagination");
        var I2 = h(r2);
        w(function() {
          I2() && P2({ type: l.resetPage });
        }, [P2, E2 ? null : B2, b2, S2, C2, x2]);
        var F2 = E2 ? a2 : Math.ceil(n2.length / m2), G2 = t.useMemo(function() {
          return F2 > 0 ? [].concat(new Array(F2)).fill(null).map(function(e4, t2) {
            return t2;
          }) : [];
        }, [F2]), k2 = t.useMemo(function() {
          var e4;
          if (E2) e4 = n2;
          else {
            var t2 = m2 * y2, o3 = t2 + m2;
            e4 = n2.slice(t2, o3);
          }
          return d2 ? e4 : A(e4, { manualExpandedKey: u3, expanded: R2, expandSubRows: p2 });
        }, [p2, R2, u3, E2, y2, m2, d2, n2]), H2 = y2 > 0, W2 = -1 === F2 ? k2.length >= m2 : y2 < F2 - 1, z2 = t.useCallback(function(e4) {
          P2({ type: l.gotoPage, pageIndex: e4 });
        }, [P2]), T2 = t.useCallback(function() {
          return z2(function(e4) {
            return e4 - 1;
          });
        }, [z2]), O2 = t.useCallback(function() {
          return z2(function(e4) {
            return e4 + 1;
          });
        }, [z2]), M2 = t.useCallback(function(e4) {
          P2({ type: l.setPageSize, pageSize: e4 });
        }, [P2]);
        Object.assign(e3, { pageOptions: G2, pageCount: F2, page: k2, canPreviousPage: H2, canNextPage: W2, gotoPage: z2, previousPage: T2, nextPage: O2, setPageSize: M2 });
      }
      Ze.pluginName = "usePagination", l.resetPivot = "resetPivot", l.togglePivot = "togglePivot";
      var nt = function(e3) {
        e3.getPivotToggleProps = [rt], e3.stateReducers.push(it), e3.useInstanceAfterData.push(ut), e3.allColumns.push(lt), e3.accessValue.push(st), e3.materializedColumns.push(at), e3.materializedColumnsDeps.push(ct), e3.visibleColumns.push(dt), e3.visibleColumnsDeps.push(ft), e3.useInstance.push(pt), e3.prepareRow.push(gt);
      };
      nt.pluginName = "usePivotColumns";
      var ot = [], rt = function(e3, t2) {
        var n2 = t2.header;
        return [e3, { onClick: n2.canPivot ? function(e4) {
          e4.persist(), n2.togglePivot();
        } : void 0, style: { cursor: n2.canPivot ? "pointer" : void 0 }, title: "Toggle Pivot" }];
      };
      function it(e3, t2, n2, o2) {
        if (t2.type === l.init) return r({ pivotColumns: ot }, e3);
        if (t2.type === l.resetPivot) return r({}, e3, { pivotColumns: o2.initialState.pivotColumns || ot });
        if (t2.type === l.togglePivot) {
          var i2 = t2.columnId, u3 = t2.value, s2 = void 0 !== u3 ? u3 : !e3.pivotColumns.includes(i2);
          return r({}, e3, s2 ? { pivotColumns: [].concat(e3.pivotColumns, [i2]) } : { pivotColumns: e3.pivotColumns.filter(function(e4) {
            return e4 !== i2;
          }) });
        }
      }
      function ut(e3) {
        e3.allColumns.forEach(function(t2) {
          t2.isPivotSource = e3.state.pivotColumns.includes(t2.id);
        });
      }
      function lt(e3, t2) {
        var n2 = t2.instance;
        return e3.forEach(function(e4) {
          e4.isPivotSource = n2.state.pivotColumns.includes(e4.id), e4.uniqueValues = /* @__PURE__ */ new Set();
        }), e3;
      }
      function st(e3, t2) {
        var n2 = t2.column;
        return n2.uniqueValues && void 0 !== e3 && n2.uniqueValues.add(e3), e3;
      }
      function at(e3, t2) {
        var n2 = t2.instance, o2 = n2.allColumns, i2 = n2.state;
        if (!i2.pivotColumns.length || !i2.groupBy || !i2.groupBy.length) return e3;
        var u3 = i2.pivotColumns.map(function(e4) {
          return o2.find(function(t3) {
            return t3.id === e4;
          });
        }).filter(Boolean), l2 = o2.filter(function(e4) {
          return !e4.isPivotSource && !i2.groupBy.includes(e4.id) && !i2.pivotColumns.includes(e4.id);
        }), s2 = C(function e4(t3, n3, o3) {
          void 0 === t3 && (t3 = 0), void 0 === o3 && (o3 = []);
          var i3 = u3[t3];
          return i3 ? Array.from(i3.uniqueValues).sort().map(function(u4) {
            var l3 = r({}, i3, { Header: i3.PivotHeader || "string" == typeof i3.header ? i3.Header + ": " + u4 : u4, isPivotGroup: true, parent: n3, depth: t3, id: n3 ? n3.id + "." + i3.id + "." + u4 : i3.id + "." + u4, pivotValue: u4 });
            return l3.columns = e4(t3 + 1, l3, [].concat(o3, [function(e5) {
              return e5.values[i3.id] === u4;
            }])), l3;
          }) : l2.map(function(e5) {
            return r({}, e5, { canPivot: false, isPivoted: true, parent: n3, depth: t3, id: "" + (n3 ? n3.id + "." + e5.id : e5.id), accessor: function(t4, n4, r2) {
              if (o3.every(function(e6) {
                return e6(r2);
              })) return r2.values[e5.id];
            } });
          });
        }());
        return [].concat(e3, s2);
      }
      function ct(e3, t2) {
        var n2 = t2.instance.state, o2 = n2.pivotColumns, r2 = n2.groupBy;
        return [].concat(e3, [o2, r2]);
      }
      function dt(e3, t2) {
        var n2 = t2.instance.state;
        return e3 = e3.filter(function(e4) {
          return !e4.isPivotSource;
        }), n2.pivotColumns.length && n2.groupBy && n2.groupBy.length && (e3 = e3.filter(function(e4) {
          return e4.isGrouped || e4.isPivoted;
        })), e3;
      }
      function ft(e3, t2) {
        var n2 = t2.instance;
        return [].concat(e3, [n2.state.pivotColumns, n2.state.groupBy]);
      }
      function pt(e3) {
        var t2 = e3.columns, n2 = e3.allColumns, o2 = e3.flatHeaders, r2 = e3.getHooks, i2 = e3.plugins, u3 = e3.dispatch, s2 = e3.autoResetPivot, a2 = void 0 === s2 || s2, c2 = e3.manaulPivot, d2 = e3.disablePivot, p2 = e3.defaultCanPivot;
        v(i2, ["useGroupBy"], "usePivotColumns");
        var g2 = h(e3);
        n2.forEach(function(t3) {
          var n3 = t3.accessor, o3 = t3.defaultPivot, r3 = t3.disablePivot;
          t3.canPivot = n3 ? I(t3.canPivot, true !== r3 && void 0, true !== d2 && void 0, true) : I(t3.canPivot, o3, p2, false), t3.canPivot && (t3.togglePivot = function() {
            return e3.togglePivot(t3.id);
          }), t3.Aggregated = t3.Aggregated || t3.Cell;
        });
        o2.forEach(function(e4) {
          e4.getPivotToggleProps = f(r2().getPivotToggleProps, { instance: g2(), header: e4 });
        });
        var m2 = h(a2);
        w(function() {
          m2() && u3({ type: l.resetPivot });
        }, [u3, c2 ? null : t2]), Object.assign(e3, { togglePivot: function(e4, t3) {
          u3({ type: l.togglePivot, columnId: e4, value: t3 });
        } });
      }
      function gt(e3) {
        e3.allCells.forEach(function(e4) {
          e4.isPivoted = e4.column.isPivoted;
        });
      }
      l.resetSelectedRows = "resetSelectedRows", l.toggleAllRowsSelected = "toggleAllRowsSelected", l.toggleRowSelected = "toggleRowSelected", l.toggleAllPageRowsSelected = "toggleAllPageRowsSelected";
      var vt = function(e3) {
        e3.getToggleRowSelectedProps = [mt], e3.getToggleAllRowsSelectedProps = [ht], e3.getToggleAllPageRowsSelectedProps = [yt], e3.stateReducers.push(wt), e3.useInstance.push(Rt), e3.prepareRow.push(bt);
      };
      vt.pluginName = "useRowSelect";
      var mt = function(e3, t2) {
        var n2 = t2.instance, o2 = t2.row, r2 = n2.manualRowSelectedKey, i2 = void 0 === r2 ? "isSelected" : r2;
        return [e3, { onChange: function(e4) {
          o2.toggleRowSelected(e4.target.checked);
        }, style: { cursor: "pointer" }, checked: !(!o2.original || !o2.original[i2]) || o2.isSelected, title: "Toggle Row Selected", indeterminate: o2.isSomeSelected }];
      }, ht = function(e3, t2) {
        var n2 = t2.instance;
        return [e3, { onChange: function(e4) {
          n2.toggleAllRowsSelected(e4.target.checked);
        }, style: { cursor: "pointer" }, checked: n2.isAllRowsSelected, title: "Toggle All Rows Selected", indeterminate: Boolean(!n2.isAllRowsSelected && Object.keys(n2.state.selectedRowIds).length) }];
      }, yt = function(e3, t2) {
        var n2 = t2.instance;
        return [e3, { onChange: function(e4) {
          n2.toggleAllPageRowsSelected(e4.target.checked);
        }, style: { cursor: "pointer" }, checked: n2.isAllPageRowsSelected, title: "Toggle All Current Page Rows Selected", indeterminate: Boolean(!n2.isAllPageRowsSelected && n2.page.some(function(e4) {
          var t3 = e4.id;
          return n2.state.selectedRowIds[t3];
        })) }];
      };
      function wt(e3, t2, n2, o2) {
        if (t2.type === l.init) return r({ selectedRowIds: {} }, e3);
        if (t2.type === l.resetSelectedRows) return r({}, e3, { selectedRowIds: o2.initialState.selectedRowIds || {} });
        if (t2.type === l.toggleAllRowsSelected) {
          var i2 = t2.value, u3 = o2.isAllRowsSelected, s2 = o2.rowsById, a2 = o2.nonGroupedRowsById, c2 = void 0 === a2 ? s2 : a2, d2 = void 0 !== i2 ? i2 : !u3, f2 = Object.assign({}, e3.selectedRowIds);
          return d2 ? Object.keys(c2).forEach(function(e4) {
            f2[e4] = true;
          }) : Object.keys(c2).forEach(function(e4) {
            delete f2[e4];
          }), r({}, e3, { selectedRowIds: f2 });
        }
        if (t2.type === l.toggleRowSelected) {
          var p2 = t2.id, g2 = t2.value, v2 = o2.rowsById, m2 = o2.selectSubRows, h2 = void 0 === m2 || m2, y2 = o2.getSubRows, w2 = e3.selectedRowIds[p2], R2 = void 0 !== g2 ? g2 : !w2;
          if (w2 === R2) return e3;
          var b2 = r({}, e3.selectedRowIds);
          return function e4(t3) {
            var n3 = v2[t3];
            if (n3 && (n3.isGrouped || (R2 ? b2[t3] = true : delete b2[t3]), h2 && y2(n3))) return y2(n3).forEach(function(t4) {
              return e4(t4.id);
            });
          }(p2), r({}, e3, { selectedRowIds: b2 });
        }
        if (t2.type === l.toggleAllPageRowsSelected) {
          var S2 = t2.value, C2 = o2.page, x2 = o2.rowsById, P2 = o2.selectSubRows, B2 = void 0 === P2 || P2, E2 = o2.isAllPageRowsSelected, I2 = o2.getSubRows, F2 = void 0 !== S2 ? S2 : !E2, G2 = r({}, e3.selectedRowIds);
          return C2.forEach(function(e4) {
            return function e5(t3) {
              var n3 = x2[t3];
              if (n3.isGrouped || (F2 ? G2[t3] = true : delete G2[t3]), B2 && I2(n3)) return I2(n3).forEach(function(t4) {
                return e5(t4.id);
              });
            }(e4.id);
          }), r({}, e3, { selectedRowIds: G2 });
        }
        return e3;
      }
      function Rt(e3) {
        var n2 = e3.data, o2 = e3.rows, r2 = e3.getHooks, i2 = e3.plugins, u3 = e3.rowsById, s2 = e3.nonGroupedRowsById, a2 = void 0 === s2 ? u3 : s2, c2 = e3.autoResetSelectedRows, d2 = void 0 === c2 || c2, p2 = e3.state.selectedRowIds, g2 = e3.selectSubRows, m2 = void 0 === g2 || g2, y2 = e3.dispatch, R2 = e3.page, b2 = e3.getSubRows;
        v(i2, ["useFilters", "useGroupBy", "useSortBy", "useExpanded", "usePagination"], "useRowSelect");
        var S2 = t.useMemo(function() {
          var e4 = [];
          return o2.forEach(function(t2) {
            var n3 = m2 ? function e5(t3, n4, o3) {
              if (n4[t3.id]) return true;
              var r3 = o3(t3);
              if (r3 && r3.length) {
                var i3 = true, u4 = false;
                return r3.forEach(function(t4) {
                  u4 && !i3 || (e5(t4, n4, o3) ? u4 = true : i3 = false);
                }), !!i3 || !!u4 && null;
              }
              return false;
            }(t2, p2, b2) : !!p2[t2.id];
            t2.isSelected = !!n3, t2.isSomeSelected = null === n3, n3 && e4.push(t2);
          }), e4;
        }, [o2, m2, p2, b2]), C2 = Boolean(Object.keys(a2).length && Object.keys(p2).length), x2 = C2;
        C2 && Object.keys(a2).some(function(e4) {
          return !p2[e4];
        }) && (C2 = false), C2 || R2 && R2.length && R2.some(function(e4) {
          var t2 = e4.id;
          return !p2[t2];
        }) && (x2 = false);
        var P2 = h(d2);
        w(function() {
          P2() && y2({ type: l.resetSelectedRows });
        }, [y2, n2]);
        var B2 = t.useCallback(function(e4) {
          return y2({ type: l.toggleAllRowsSelected, value: e4 });
        }, [y2]), E2 = t.useCallback(function(e4) {
          return y2({ type: l.toggleAllPageRowsSelected, value: e4 });
        }, [y2]), I2 = t.useCallback(function(e4, t2) {
          return y2({ type: l.toggleRowSelected, id: e4, value: t2 });
        }, [y2]), F2 = h(e3), G2 = f(r2().getToggleAllRowsSelectedProps, { instance: F2() }), A2 = f(r2().getToggleAllPageRowsSelectedProps, { instance: F2() });
        Object.assign(e3, { selectedFlatRows: S2, isAllRowsSelected: C2, isAllPageRowsSelected: x2, toggleRowSelected: I2, toggleAllRowsSelected: B2, getToggleAllRowsSelectedProps: G2, getToggleAllPageRowsSelectedProps: A2, toggleAllPageRowsSelected: E2 });
      }
      function bt(e3, t2) {
        var n2 = t2.instance;
        e3.toggleRowSelected = function(t3) {
          return n2.toggleRowSelected(e3.id, t3);
        }, e3.getToggleRowSelectedProps = f(n2.getHooks().getToggleRowSelectedProps, { instance: n2, row: e3 });
      }
      var St = function(e3) {
        return {};
      }, Ct = function(e3) {
        return {};
      };
      l.setRowState = "setRowState", l.setCellState = "setCellState", l.resetRowState = "resetRowState";
      var xt = function(e3) {
        e3.stateReducers.push(Pt), e3.useInstance.push(Bt), e3.prepareRow.push(Et);
      };
      function Pt(e3, t2, n2, o2) {
        var i2 = o2.initialRowStateAccessor, u3 = void 0 === i2 ? St : i2, s2 = o2.initialCellStateAccessor, a2 = void 0 === s2 ? Ct : s2, c2 = o2.rowsById;
        if (t2.type === l.init) return r({ rowState: {} }, e3);
        if (t2.type === l.resetRowState) return r({}, e3, { rowState: o2.initialState.rowState || {} });
        if (t2.type === l.setRowState) {
          var d2, f2 = t2.rowId, p2 = t2.value, g2 = void 0 !== e3.rowState[f2] ? e3.rowState[f2] : u3(c2[f2]);
          return r({}, e3, { rowState: r({}, e3.rowState, (d2 = {}, d2[f2] = m(p2, g2), d2)) });
        }
        if (t2.type === l.setCellState) {
          var v2, h2, y2, w2, R2, b2 = t2.rowId, S2 = t2.columnId, C2 = t2.value, x2 = void 0 !== e3.rowState[b2] ? e3.rowState[b2] : u3(c2[b2]), P2 = void 0 !== (null == x2 ? void 0 : null == (v2 = x2.cellState) ? void 0 : v2[S2]) ? x2.cellState[S2] : a2(null == (h2 = c2[b2]) ? void 0 : null == (y2 = h2.cells) ? void 0 : y2.find(function(e4) {
            return e4.column.id === S2;
          }));
          return r({}, e3, { rowState: r({}, e3.rowState, (R2 = {}, R2[b2] = r({}, x2, { cellState: r({}, x2.cellState || {}, (w2 = {}, w2[S2] = m(C2, P2), w2)) }), R2)) });
        }
      }
      function Bt(e3) {
        var n2 = e3.autoResetRowState, o2 = void 0 === n2 || n2, r2 = e3.data, i2 = e3.dispatch, u3 = t.useCallback(function(e4, t2) {
          return i2({ type: l.setRowState, rowId: e4, value: t2 });
        }, [i2]), s2 = t.useCallback(function(e4, t2, n3) {
          return i2({ type: l.setCellState, rowId: e4, columnId: t2, value: n3 });
        }, [i2]), a2 = h(o2);
        w(function() {
          a2() && i2({ type: l.resetRowState });
        }, [r2]), Object.assign(e3, { setRowState: u3, setCellState: s2 });
      }
      function Et(e3, t2) {
        var n2 = t2.instance, o2 = n2.initialRowStateAccessor, r2 = void 0 === o2 ? St : o2, i2 = n2.initialCellStateAccessor, u3 = void 0 === i2 ? Ct : i2, l2 = n2.state.rowState;
        e3 && (e3.state = void 0 !== l2[e3.id] ? l2[e3.id] : r2(e3), e3.setState = function(t3) {
          return n2.setRowState(e3.id, t3);
        }, e3.cells.forEach(function(t3) {
          e3.state.cellState || (e3.state.cellState = {}), t3.state = void 0 !== e3.state.cellState[t3.column.id] ? e3.state.cellState[t3.column.id] : u3(t3), t3.setState = function(o3) {
            return n2.setCellState(e3.id, t3.column.id, o3);
          };
        }));
      }
      xt.pluginName = "useRowState", l.resetColumnOrder = "resetColumnOrder", l.setColumnOrder = "setColumnOrder";
      var It = function(e3) {
        e3.stateReducers.push(Ft), e3.visibleColumnsDeps.push(function(e4, t2) {
          var n2 = t2.instance;
          return [].concat(e4, [n2.state.columnOrder]);
        }), e3.visibleColumns.push(Gt), e3.useInstance.push(At);
      };
      function Ft(e3, t2, n2, o2) {
        return t2.type === l.init ? r({ columnOrder: [] }, e3) : t2.type === l.resetColumnOrder ? r({}, e3, { columnOrder: o2.initialState.columnOrder || [] }) : t2.type === l.setColumnOrder ? r({}, e3, { columnOrder: m(t2.columnOrder, e3.columnOrder) }) : void 0;
      }
      function Gt(e3, t2) {
        var n2 = t2.instance.state.columnOrder;
        if (!n2 || !n2.length) return e3;
        for (var o2 = [].concat(n2), r2 = [].concat(e3), i2 = [], u3 = function() {
          var e4 = o2.shift(), t3 = r2.findIndex(function(t4) {
            return t4.id === e4;
          });
          t3 > -1 && i2.push(r2.splice(t3, 1)[0]);
        }; r2.length && o2.length; ) u3();
        return [].concat(i2, r2);
      }
      function At(e3) {
        var n2 = e3.dispatch;
        e3.setColumnOrder = t.useCallback(function(e4) {
          return n2({ type: l.setColumnOrder, columnOrder: e4 });
        }, [n2]);
      }
      It.pluginName = "useColumnOrder", c.canResize = true, l.columnStartResizing = "columnStartResizing", l.columnResizing = "columnResizing", l.columnDoneResizing = "columnDoneResizing", l.resetResize = "resetResize";
      var kt = function(e3) {
        e3.getResizerProps = [Ht], e3.getHeaderProps.push({ style: { position: "relative" } }), e3.stateReducers.push(Wt), e3.useInstance.push(Tt), e3.useInstanceBeforeDimensions.push(zt);
      }, Ht = function(e3, t2) {
        var n2 = t2.instance, o2 = t2.header, r2 = n2.dispatch, i2 = function(e4, t3) {
          var n3 = false;
          if ("touchstart" === e4.type) {
            if (e4.touches && e4.touches.length > 1) return;
            n3 = true;
          }
          var o3, i3, u3 = function(e5) {
            var t4 = [];
            return function e6(n4) {
              n4.columns && n4.columns.length && n4.columns.map(e6);
              t4.push(n4);
            }(e5), t4;
          }(t3).map(function(e5) {
            return [e5.id, e5.totalWidth];
          }), s2 = n3 ? Math.round(e4.touches[0].clientX) : e4.clientX, a2 = function() {
            window.cancelAnimationFrame(o3), o3 = null, r2({ type: l.columnDoneResizing });
          }, c2 = function() {
            window.cancelAnimationFrame(o3), o3 = null, r2({ type: l.columnResizing, clientX: i3 });
          }, d2 = function(e5) {
            i3 = e5, o3 || (o3 = window.requestAnimationFrame(c2));
          }, f2 = { mouse: { moveEvent: "mousemove", moveHandler: function(e5) {
            return d2(e5.clientX);
          }, upEvent: "mouseup", upHandler: function(e5) {
            document.removeEventListener("mousemove", f2.mouse.moveHandler), document.removeEventListener("mouseup", f2.mouse.upHandler), a2();
          } }, touch: { moveEvent: "touchmove", moveHandler: function(e5) {
            return e5.cancelable && (e5.preventDefault(), e5.stopPropagation()), d2(e5.touches[0].clientX), false;
          }, upEvent: "touchend", upHandler: function(e5) {
            document.removeEventListener(f2.touch.moveEvent, f2.touch.moveHandler), document.removeEventListener(f2.touch.upEvent, f2.touch.moveHandler), a2();
          } } }, p2 = n3 ? f2.touch : f2.mouse, g2 = !!function() {
            if ("boolean" == typeof z) return z;
            var e5 = false;
            try {
              var t4 = { get passive() {
                return e5 = true, false;
              } };
              window.addEventListener("test", null, t4), window.removeEventListener("test", null, t4);
            } catch (t5) {
              e5 = false;
            }
            return z = e5;
          }() && { passive: false };
          document.addEventListener(p2.moveEvent, p2.moveHandler, g2), document.addEventListener(p2.upEvent, p2.upHandler, g2), r2({ type: l.columnStartResizing, columnId: t3.id, columnWidth: t3.totalWidth, headerIdWidths: u3, clientX: s2 });
        };
        return [e3, { onMouseDown: function(e4) {
          return e4.persist() || i2(e4, o2);
        }, onTouchStart: function(e4) {
          return e4.persist() || i2(e4, o2);
        }, style: { cursor: "col-resize" }, draggable: false, role: "separator" }];
      };
      function Wt(e3, t2) {
        if (t2.type === l.init) return r({ columnResizing: { columnWidths: {} } }, e3);
        if (t2.type === l.resetResize) return r({}, e3, { columnResizing: { columnWidths: {} } });
        if (t2.type === l.columnStartResizing) {
          var n2 = t2.clientX, o2 = t2.columnId, i2 = t2.columnWidth, u3 = t2.headerIdWidths;
          return r({}, e3, { columnResizing: r({}, e3.columnResizing, { startX: n2, headerIdWidths: u3, columnWidth: i2, isResizingColumn: o2 }) });
        }
        if (t2.type === l.columnResizing) {
          var s2 = t2.clientX, a2 = e3.columnResizing, c2 = a2.startX, d2 = a2.columnWidth, f2 = a2.headerIdWidths, p2 = (s2 - c2) / d2, g2 = {};
          return (void 0 === f2 ? [] : f2).forEach(function(e4) {
            var t3 = e4[0], n3 = e4[1];
            g2[t3] = Math.max(n3 + n3 * p2, 0);
          }), r({}, e3, { columnResizing: r({}, e3.columnResizing, { columnWidths: r({}, e3.columnResizing.columnWidths, {}, g2) }) });
        }
        return t2.type === l.columnDoneResizing ? r({}, e3, { columnResizing: r({}, e3.columnResizing, { startX: null, isResizingColumn: null }) }) : void 0;
      }
      kt.pluginName = "useResizeColumns";
      var zt = function(e3) {
        var t2 = e3.flatHeaders, n2 = e3.disableResizing, o2 = e3.getHooks, r2 = e3.state.columnResizing, i2 = h(e3);
        t2.forEach(function(e4) {
          var t3 = I(true !== e4.disableResizing && void 0, true !== n2 && void 0, true);
          e4.canResize = t3, e4.width = r2.columnWidths[e4.id] || e4.originalWidth || e4.width, e4.isResizing = r2.isResizingColumn === e4.id, t3 && (e4.getResizerProps = f(o2().getResizerProps, { instance: i2(), header: e4 }));
        });
      };
      function Tt(e3) {
        var n2 = e3.plugins, o2 = e3.dispatch, r2 = e3.autoResetResize, i2 = void 0 === r2 || r2, u3 = e3.columns;
        v(n2, ["useAbsoluteLayout"], "useResizeColumns");
        var s2 = h(i2);
        w(function() {
          s2() && o2({ type: l.resetResize });
        }, [u3]);
        var a2 = t.useCallback(function() {
          return o2({ type: l.resetResize });
        }, [o2]);
        Object.assign(e3, { resetResizing: a2 });
      }
      var Ot = { position: "absolute", top: 0 }, Mt = function(e3) {
        e3.getTableBodyProps.push(jt), e3.getRowProps.push(jt), e3.getHeaderGroupProps.push(jt), e3.getFooterGroupProps.push(jt), e3.getHeaderProps.push(function(e4, t2) {
          var n2 = t2.column;
          return [e4, { style: r({}, Ot, { left: n2.totalLeft + "px", width: n2.totalWidth + "px" }) }];
        }), e3.getCellProps.push(function(e4, t2) {
          var n2 = t2.cell;
          return [e4, { style: r({}, Ot, { left: n2.column.totalLeft + "px", width: n2.column.totalWidth + "px" }) }];
        }), e3.getFooterProps.push(function(e4, t2) {
          var n2 = t2.column;
          return [e4, { style: r({}, Ot, { left: n2.totalLeft + "px", width: n2.totalWidth + "px" }) }];
        });
      };
      Mt.pluginName = "useAbsoluteLayout";
      var jt = function(e3, t2) {
        return [e3, { style: { position: "relative", width: t2.instance.totalColumnsWidth + "px" } }];
      }, Lt = { display: "inline-block", boxSizing: "border-box" }, Nt = function(e3, t2) {
        return [e3, { style: { display: "flex", width: t2.instance.totalColumnsWidth + "px" } }];
      }, Dt = function(e3) {
        e3.getRowProps.push(Nt), e3.getHeaderGroupProps.push(Nt), e3.getFooterGroupProps.push(Nt), e3.getHeaderProps.push(function(e4, t2) {
          var n2 = t2.column;
          return [e4, { style: r({}, Lt, { width: n2.totalWidth + "px" }) }];
        }), e3.getCellProps.push(function(e4, t2) {
          var n2 = t2.cell;
          return [e4, { style: r({}, Lt, { width: n2.column.totalWidth + "px" }) }];
        }), e3.getFooterProps.push(function(e4, t2) {
          var n2 = t2.column;
          return [e4, { style: r({}, Lt, { width: n2.totalWidth + "px" }) }];
        });
      };
      function Vt(e3) {
        e3.getTableProps.push(_t), e3.getRowProps.push(Xt), e3.getHeaderGroupProps.push(Xt), e3.getFooterGroupProps.push(Xt), e3.getHeaderProps.push(qt), e3.getCellProps.push(Kt), e3.getFooterProps.push(Ut);
      }
      Dt.pluginName = "useBlockLayout", Vt.pluginName = "useFlexLayout";
      var _t = function(e3, t2) {
        return [e3, { style: { minWidth: t2.instance.totalColumnsMinWidth + "px" } }];
      }, Xt = function(e3, t2) {
        return [e3, { style: { display: "flex", flex: "1 0 auto", minWidth: t2.instance.totalColumnsMinWidth + "px" } }];
      }, qt = function(e3, t2) {
        var n2 = t2.column;
        return [e3, { style: { boxSizing: "border-box", flex: n2.totalFlexWidth ? n2.totalFlexWidth + " 0 auto" : void 0, minWidth: n2.totalMinWidth + "px", width: n2.totalWidth + "px" } }];
      }, Kt = function(e3, t2) {
        var n2 = t2.cell;
        return [e3, { style: { boxSizing: "border-box", flex: n2.column.totalFlexWidth + " 0 auto", minWidth: n2.column.totalMinWidth + "px", width: n2.column.totalWidth + "px" } }];
      }, Ut = function(e3, t2) {
        var n2 = t2.column;
        return [e3, { style: { boxSizing: "border-box", flex: n2.totalFlexWidth ? n2.totalFlexWidth + " 0 auto" : void 0, minWidth: n2.totalMinWidth + "px", width: n2.totalWidth + "px" } }];
      };
      function $t(e3) {
        e3.stateReducers.push(Zt), e3.getTableProps.push(Jt), e3.getHeaderProps.push(Yt), e3.getRowProps.push(Qt);
      }
      l.columnStartResizing = "columnStartResizing", l.columnResizing = "columnResizing", l.columnDoneResizing = "columnDoneResizing", l.resetResize = "resetResize", $t.pluginName = "useGridLayout";
      var Jt = function(e3, t2) {
        var n2 = t2.instance;
        return [e3, { style: { display: "grid", gridTemplateColumns: n2.visibleColumns.map(function(e4) {
          var t3;
          return n2.state.gridLayout.columnWidths[e4.id] ? n2.state.gridLayout.columnWidths[e4.id] + "px" : (null == (t3 = n2.state.columnResizing) ? void 0 : t3.isResizingColumn) ? n2.state.gridLayout.startWidths[e4.id] + "px" : "number" == typeof e4.width ? e4.width + "px" : e4.width;
        }).join(" ") } }];
      }, Yt = function(e3, t2) {
        var n2 = t2.column;
        return [e3, { id: "header-cell-" + n2.id, style: { position: "sticky", gridColumn: "span " + n2.totalVisibleHeaderCount } }];
      }, Qt = function(e3, t2) {
        var n2 = t2.row;
        return n2.isExpanded ? [e3, { style: { gridColumn: "1 / " + (n2.cells.length + 1) } }] : [e3, {}];
      };
      function Zt(e3, t2, n2, o2) {
        if (t2.type === l.init) return r({ gridLayout: { columnWidths: {} } }, e3);
        if (t2.type === l.resetResize) return r({}, e3, { gridLayout: { columnWidths: {} } });
        if (t2.type === l.columnStartResizing) {
          var i2 = t2.columnId, u3 = t2.headerIdWidths, s2 = en(i2);
          if (void 0 !== s2) {
            var a2 = o2.visibleColumns.reduce(function(e4, t3) {
              var n3;
              return r({}, e4, ((n3 = {})[t3.id] = en(t3.id), n3));
            }, {}), c2 = o2.visibleColumns.reduce(function(e4, t3) {
              var n3;
              return r({}, e4, ((n3 = {})[t3.id] = t3.minWidth, n3));
            }, {}), d2 = o2.visibleColumns.reduce(function(e4, t3) {
              var n3;
              return r({}, e4, ((n3 = {})[t3.id] = t3.maxWidth, n3));
            }, {}), f2 = u3.map(function(e4) {
              var t3 = e4[0];
              return [t3, en(t3)];
            });
            return r({}, e3, { gridLayout: r({}, e3.gridLayout, { startWidths: a2, minWidths: c2, maxWidths: d2, headerIdGridWidths: f2, columnWidth: s2 }) });
          }
          return e3;
        }
        if (t2.type === l.columnResizing) {
          var p2 = t2.clientX, g2 = e3.columnResizing.startX, v2 = e3.gridLayout, m2 = v2.columnWidth, h2 = v2.minWidths, y2 = v2.maxWidths, w2 = v2.headerIdGridWidths, R2 = (p2 - g2) / m2, b2 = {};
          return (void 0 === w2 ? [] : w2).forEach(function(e4) {
            var t3 = e4[0], n3 = e4[1];
            b2[t3] = Math.min(Math.max(h2[t3], n3 + n3 * R2), y2[t3]);
          }), r({}, e3, { gridLayout: r({}, e3.gridLayout, { columnWidths: r({}, e3.gridLayout.columnWidths, {}, b2) }) });
        }
        return t2.type === l.columnDoneResizing ? r({}, e3, { gridLayout: r({}, e3.gridLayout, { startWidths: {}, minWidths: {}, maxWidths: {} }) }) : void 0;
      }
      function en(e3) {
        var t2, n2 = null == (t2 = document.getElementById("header-cell-" + e3)) ? void 0 : t2.offsetWidth;
        if (void 0 !== n2) return n2;
      }
      e2._UNSTABLE_usePivotColumns = nt, e2.actions = l, e2.defaultColumn = c, e2.defaultGroupByFn = De, e2.defaultOrderByFn = Qe, e2.defaultRenderer = s, e2.emptyRenderer = a, e2.ensurePluginOrder = v, e2.flexRender = b, e2.functionalUpdate = m, e2.loopHooks = g, e2.makePropGetter = f, e2.makeRenderer = R, e2.reduceHooks = p, e2.safeUseLayoutEffect = y, e2.useAbsoluteLayout = Mt, e2.useAsyncDebounce = function(e3, n2) {
        void 0 === n2 && (n2 = 0);
        var r2 = t.useRef({}), i2 = h(e3), u3 = h(n2);
        return t.useCallback(function() {
          var e4 = o(regeneratorRuntime.mark(function e5() {
            var t2, n3, l2, s2 = arguments;
            return regeneratorRuntime.wrap(function(e6) {
              for (; ; ) switch (e6.prev = e6.next) {
                case 0:
                  for (t2 = s2.length, n3 = new Array(t2), l2 = 0; l2 < t2; l2++) n3[l2] = s2[l2];
                  return r2.current.promise || (r2.current.promise = new Promise(function(e7, t3) {
                    r2.current.resolve = e7, r2.current.reject = t3;
                  })), r2.current.timeout && clearTimeout(r2.current.timeout), r2.current.timeout = setTimeout(o(regeneratorRuntime.mark(function e7() {
                    return regeneratorRuntime.wrap(function(e8) {
                      for (; ; ) switch (e8.prev = e8.next) {
                        case 0:
                          return delete r2.current.timeout, e8.prev = 1, e8.t0 = r2.current, e8.next = 5, i2().apply(void 0, n3);
                        case 5:
                          e8.t1 = e8.sent, e8.t0.resolve.call(e8.t0, e8.t1), e8.next = 12;
                          break;
                        case 9:
                          e8.prev = 9, e8.t2 = e8.catch(1), r2.current.reject(e8.t2);
                        case 12:
                          return e8.prev = 12, delete r2.current.promise, e8.finish(12);
                        case 15:
                        case "end":
                          return e8.stop();
                      }
                    }, e7, null, [[1, 9, 12, 15]]);
                  })), u3()), e6.abrupt("return", r2.current.promise);
                case 5:
                case "end":
                  return e6.stop();
              }
            }, e5);
          }));
          return function() {
            return e4.apply(this, arguments);
          };
        }(), [i2, u3]);
      }, e2.useBlockLayout = Dt, e2.useColumnOrder = It, e2.useExpanded = se, e2.useFilters = Pe, e2.useFlexLayout = Vt, e2.useGetLatest = h, e2.useGlobalFilter = Ie, e2.useGridLayout = $t, e2.useGroupBy = ze, e2.useMountedLayoutEffect = w, e2.usePagination = Ze, e2.useResizeColumns = kt, e2.useRowSelect = vt, e2.useRowState = xt, e2.useSortBy = Ue, e2.useTable = function(e3) {
        for (var n2 = arguments.length, o2 = new Array(n2 > 1 ? n2 - 1 : 0), i2 = 1; i2 < n2; i2++) o2[i2 - 1] = arguments[i2];
        e3 = ie(e3), o2 = [K].concat(o2);
        var u3 = t.useRef({}), s2 = h(u3.current);
        Object.assign(s2(), r({}, e3, { plugins: o2, hooks: q() })), o2.filter(Boolean).forEach(function(e4) {
          e4(s2().hooks);
        });
        var a2 = h(s2().hooks);
        s2().getHooks = a2, delete s2().hooks, Object.assign(s2(), p(a2().useOptions, ie(e3)));
        var c2 = s2(), d2 = c2.data, v2 = c2.columns, m2 = c2.initialState, y2 = c2.defaultColumn, w2 = c2.getSubRows, b2 = c2.getRowId, E2 = c2.stateReducer, I2 = c2.useControlledState, F2 = h(E2), G2 = t.useCallback(function(e4, t2) {
          if (!t2.type) throw console.info({ action: t2 }), new Error("Unknown Action 👆");
          return [].concat(a2().stateReducers, Array.isArray(F2()) ? F2() : [F2()]).reduce(function(n3, o3) {
            return o3(n3, t2, e4, s2()) || n3;
          }, e4);
        }, [a2, F2, s2]), A2 = t.useReducer(G2, void 0, function() {
          return G2(m2, { type: l.init });
        }), k2 = A2[0], H2 = A2[1], W2 = p([].concat(a2().useControlledState, [I2]), k2, { instance: s2() });
        Object.assign(s2(), { state: W2, dispatch: H2 });
        var z2 = t.useMemo(function() {
          return S(p(a2().columns, v2, { instance: s2() }));
        }, [a2, s2, v2].concat(p(a2().columnsDeps, [], { instance: s2() })));
        s2().columns = z2;
        var T2 = t.useMemo(function() {
          return p(a2().allColumns, C(z2), { instance: s2() }).map(x);
        }, [z2, a2, s2].concat(p(a2().allColumnsDeps, [], { instance: s2() })));
        s2().allColumns = T2;
        var O2 = t.useMemo(function() {
          for (var e4 = [], t2 = [], n3 = {}, o3 = [].concat(T2); o3.length; ) {
            var r2 = o3.shift();
            le({ data: d2, rows: e4, flatRows: t2, rowsById: n3, column: r2, getRowId: b2, getSubRows: w2, accessValueHooks: a2().accessValue, getInstance: s2 });
          }
          return [e4, t2, n3];
        }, [T2, d2, b2, w2, a2, s2]), M2 = O2[0], j2 = O2[1], L2 = O2[2];
        Object.assign(s2(), { rows: M2, initialRows: [].concat(M2), flatRows: j2, rowsById: L2 }), g(a2().useInstanceAfterData, s2());
        var N2 = t.useMemo(function() {
          return p(a2().visibleColumns, T2, { instance: s2() }).map(function(e4) {
            return P(e4, y2);
          });
        }, [a2, T2, s2, y2].concat(p(a2().visibleColumnsDeps, [], { instance: s2() })));
        T2 = t.useMemo(function() {
          var e4 = [].concat(N2);
          return T2.forEach(function(t2) {
            e4.find(function(e5) {
              return e5.id === t2.id;
            }) || e4.push(t2);
          }), e4;
        }, [T2, N2]), s2().allColumns = T2;
        var D2 = t.useMemo(function() {
          return p(a2().headerGroups, B(N2, y2), s2());
        }, [a2, N2, y2, s2].concat(p(a2().headerGroupsDeps, [], { instance: s2() })));
        s2().headerGroups = D2;
        var V2 = t.useMemo(function() {
          return D2.length ? D2[0].headers : [];
        }, [D2]);
        s2().headers = V2, s2().flatHeaders = D2.reduce(function(e4, t2) {
          return [].concat(e4, t2.headers);
        }, []), g(a2().useInstanceBeforeDimensions, s2());
        var _2 = N2.filter(function(e4) {
          return e4.isVisible;
        }).map(function(e4) {
          return e4.id;
        }).sort().join("_");
        N2 = t.useMemo(function() {
          return N2.filter(function(e4) {
            return e4.isVisible;
          });
        }, [N2, _2]), s2().visibleColumns = N2;
        var X2 = ue(V2), U2 = X2[0], $2 = X2[1], J2 = X2[2];
        return s2().totalColumnsMinWidth = U2, s2().totalColumnsWidth = $2, s2().totalColumnsMaxWidth = J2, g(a2().useInstance, s2()), [].concat(s2().flatHeaders, s2().allColumns).forEach(function(e4) {
          e4.render = R(s2(), e4), e4.getHeaderProps = f(a2().getHeaderProps, { instance: s2(), column: e4 }), e4.getFooterProps = f(a2().getFooterProps, { instance: s2(), column: e4 });
        }), s2().headerGroups = t.useMemo(function() {
          return D2.filter(function(e4, t2) {
            return e4.headers = e4.headers.filter(function(e5) {
              return e5.headers ? function e6(t3) {
                return t3.filter(function(t4) {
                  return t4.headers ? e6(t4.headers) : t4.isVisible;
                }).length;
              }(e5.headers) : e5.isVisible;
            }), !!e4.headers.length && (e4.getHeaderGroupProps = f(a2().getHeaderGroupProps, { instance: s2(), headerGroup: e4, index: t2 }), e4.getFooterGroupProps = f(a2().getFooterGroupProps, { instance: s2(), headerGroup: e4, index: t2 }), true);
          });
        }, [D2, s2, a2]), s2().footerGroups = [].concat(s2().headerGroups).reverse(), s2().prepareRow = t.useCallback(function(e4) {
          e4.getRowProps = f(a2().getRowProps, { instance: s2(), row: e4 }), e4.allCells = T2.map(function(t2) {
            var n3 = e4.values[t2.id], o3 = { column: t2, row: e4, value: n3 };
            return o3.getCellProps = f(a2().getCellProps, { instance: s2(), cell: o3 }), o3.render = R(s2(), t2, { row: e4, cell: o3, value: n3 }), o3;
          }), e4.cells = N2.map(function(t2) {
            return e4.allCells.find(function(e5) {
              return e5.column.id === t2.id;
            });
          }), g(a2().prepareRow, e4, { instance: s2() });
        }, [a2, s2, T2, N2]), s2().getTableProps = f(a2().getTableProps, { instance: s2() }), s2().getTableBodyProps = f(a2().getTableBodyProps, { instance: s2() }), g(a2().useFinalInstance, s2()), s2();
      }, Object.defineProperty(e2, "__esModule", { value: true });
    });
  })(reactTable_production_min$1, reactTable_production_min$1.exports);
  return reactTable_production_min$1.exports;
}
var hasRequiredReactTable;
function requireReactTable() {
  if (hasRequiredReactTable) return reactTable.exports;
  hasRequiredReactTable = 1;
  {
    reactTable.exports = requireReactTable_production_min();
  }
  return reactTable.exports;
}
var reactTableExports = requireReactTable();
const getCellStyle = (column, isTableResizing) => {
  let style = {};
  style.flex = "1 1 145px";
  if (column.width) {
    let width = "string" == typeof column.width ? column.width : `${column.width}px`;
    style.width = width;
    if (isTableResizing && column.canResize)
      style.flex = `${Number(column.width)} ${Number(column.width)} ${width}`;
    else style.flex = `0 0 ${width}`;
  }
  if (column.maxWidth) style.maxWidth = `${column.maxWidth}px`;
  if (column.minWidth) style.minWidth = `${column.minWidth}px`;
  return style;
};
const getStickyStyle = (column, columnList) => {
  if (!column.sticky) return {};
  let left = 0;
  for (let col of columnList) {
    if (col.id === column.id) break;
    left += Number(col.width || col.resizeWidth || 0);
  }
  let right = 0;
  for (let col of [...columnList].reverse()) {
    if (col.id === column.id) break;
    right += Number(col.width || col.resizeWidth || 0);
  }
  return {
    "--iui-table-sticky-left": "left" === column.sticky ? `${left}px` : void 0,
    "--iui-table-sticky-right": "right" === column.sticky ? `${right}px` : void 0
  };
};
const getSubRowStyle = ({ density = "default", depth = 1 }) => {
  let cellPadding = 16;
  let expanderMargin = 8;
  if ("condensed" === density) {
    cellPadding = 12;
    expanderMargin = 4;
  } else if ("extra-condensed" === density) {
    cellPadding = 8;
    expanderMargin = 4;
  }
  let multiplier = 26 + expanderMargin;
  return {
    paddingInlineStart: cellPadding + depth * multiplier
  };
};
const TableInstanceContext = reactExports.createContext(void 0);
const SubRowExpander = (props) => {
  let { cell, isDisabled, cellProps, expanderCell, density, ...rest } = props;
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    expanderCell ? expanderCell(cellProps) : reactExports.createElement(
      IconButton,
      {
        "aria-label": "Toggle sub row",
        "aria-expanded": cell.row.isExpanded ? "true" : "false",
        style: {
          marginInlineEnd: "default" === density || void 0 === density ? 8 : 4
        },
        className: "iui-table-row-expander",
        styleType: "borderless",
        size: "small",
        onClick: (e2) => {
          e2.stopPropagation();
          cell.row.toggleRowExpanded();
        },
        disabled: isDisabled,
        ...rest
      },
      reactExports.createElement(SvgChevronRight, {
        style: {
          transform: cell.row.isExpanded ? "rotate(90deg)" : void 0
        }
      })
    )
  );
};
const DefaultCellRendererPropsChildren = reactExports.createContext(void 0);
const DefaultCell = (props) => {
  let instance = reactExports.useContext(TableInstanceContext);
  let isCustomCell = reactExports.useMemo(
    () => instance?.columns.find(({ id: id2 }) => props.cellProps.column.id === id2)?.Cell !== reactTableExports.defaultColumn.Cell,
    [instance, props.cellProps.column.id]
  );
  let isCellRendererChildrenCustom = reactExports.useContext(DefaultCellRendererPropsChildren) !== props.children;
  let isDefaultTextCell = "string" == typeof props.cellProps.value && !isCustomCell && !isCellRendererChildrenCustom;
  let {
    cellElementProps: {
      className: cellElementClassName,
      style: cellElementStyle,
      ...cellElementProps
    },
    children,
    startIcon,
    endIcon,
    cellProps,
    isDisabled,
    className: className2,
    style,
    status,
    clamp = isDefaultTextCell,
    ...rest
  } = props;
  let { key: cellElementKey, ...cellElementPropsRest } = cellElementProps;
  return reactExports.createElement(
    Box,
    {
      ...cellElementPropsRest,
      key: cellElementKey,
      ...rest,
      className: classnames(cellElementClassName, className2),
      "aria-disabled": isDisabled?.(cellProps.row.original) || void 0,
      "data-iui-status": status,
      style: {
        ...cellElementStyle,
        ...style
      }
    },
    reactExports.createElement(
      ShadowRoot,
      {
        key: `${cellElementKey}-shadow-root`,
        flush: false,
        css
      },
      reactExports.createElement("slot", {
        name: "start"
      }),
      reactExports.createElement(
        TableCellContent,
        {
          shouldRenderWrapper: isDefaultTextCell
        },
        clamp ? reactExports.createElement(
          "div",
          {
            className: lineClamp.className
          },
          reactExports.createElement("slot", null)
        ) : reactExports.createElement("slot", null)
      ),
      reactExports.createElement("slot", {
        name: "end"
      }),
      reactExports.createElement("slot", {
        name: "shadows"
      })
    ),
    startIcon && reactExports.createElement(
      Box,
      {
        className: "iui-table-cell-start-icon",
        slot: "start",
        key: `${cellElementKey}-start`
      },
      startIcon
    ),
    children,
    endIcon && reactExports.createElement(
      Box,
      {
        className: "iui-table-cell-end-icon",
        slot: "end",
        key: `${cellElementKey}-end`
      },
      endIcon
    )
  );
};
let TableCellContent = (props) => {
  let { children, shouldRenderWrapper } = props;
  return shouldRenderWrapper ? reactExports.createElement(
    "div",
    {
      className: "_iui-table-cell-default-content",
      onClick: (e2) => e2.stopPropagation()
    },
    children
  ) : children;
};
let css = `
._iui-table-cell-default-content {
  position: relative;
  isolation: isolate;
}
._iui-table-cell-default-content::before {
  content: '';
  display: block;
  position: absolute;
  inset: -6px;
  z-index: -1;
}
${lineClamp.css}
`;
const SELECTION_CELL_ID = "iui-table-checkbox-selector";
const SelectionColumn = (props = {}) => {
  let { isDisabled, density } = props;
  let densityWidth = "condensed" === density ? 42 : "extra-condensed" === density ? 34 : 48;
  return {
    id: SELECTION_CELL_ID,
    disableResizing: true,
    disableGroupBy: true,
    disableReordering: true,
    minWidth: densityWidth,
    width: densityWidth,
    maxWidth: densityWidth,
    columnClassName: "iui-slot",
    cellClassName: "iui-slot",
    Header: ({
      getToggleAllRowsSelectedProps,
      toggleAllRowsSelected,
      rows,
      preFilteredFlatRows,
      state: state2
    }) => {
      let disabled = preFilteredFlatRows.every(
        (row) => isDisabled?.(row.original)
      );
      let checked = preFilteredFlatRows.every(
        (row) => state2.selectedRowIds[row.id] || isDisabled?.(row.original)
      );
      let indeterminate = !checked && Object.keys(state2.selectedRowIds).length > 0;
      let nextToggleState = !rows.some((row) => row.isSelected);
      return reactExports.createElement(Checkbox, {
        ...getToggleAllRowsSelectedProps(),
        style: {},
        title: "",
        checked: checked && !disabled,
        indeterminate,
        disabled,
        "aria-label": `${nextToggleState ? "Select" : "Deselect"} all rows`,
        onChange: () => toggleAllRowsSelected(nextToggleState)
      });
    },
    Cell: ({ row, selectSubRows = true }) => reactExports.createElement(Checkbox, {
      ...row.getToggleRowSelectedProps(),
      style: {},
      title: "",
      disabled: isDisabled?.(row.original),
      onClick: (e2) => e2.stopPropagation(),
      "aria-label": `${row.isSelected ? "Deselect" : "Select"} row`,
      onChange: () => {
        if (row.subRows.length > 0 && selectSubRows && void 0 === row.initialSubRows[0].original[iuiId])
          row.toggleRowSelected(
            !row.subRows.every(
              (subRow) => subRow.isSelected || isDisabled?.(subRow.original)
            )
          );
        else row.toggleRowSelected(!row.isSelected);
      }
    }),
    cellRenderer: (props2) => reactExports.createElement(DefaultCell, {
      ...props2,
      isDisabled: (rowData) => !!isDisabled?.(rowData)
    })
  };
};
const EXPANDER_CELL_ID = "iui-table-expander";
const ExpanderColumn = (props = {}) => {
  let { subComponent, isDisabled } = props;
  return {
    id: EXPANDER_CELL_ID,
    disableResizing: true,
    disableGroupBy: true,
    disableReordering: true,
    minWidth: 48,
    width: 48,
    maxWidth: 48,
    columnClassName: "iui-slot",
    cellClassName: "iui-slot",
    Cell: (props2) => {
      let { row } = props2;
      if (!subComponent?.(row)) return null;
      return reactExports.createElement(
        IconButton,
        {
          "aria-label": "Toggle expandable content",
          className: "iui-table-row-expander",
          styleType: "borderless",
          size: "small",
          onClick: (e2) => {
            e2.stopPropagation();
            row.toggleRowExpanded();
          },
          disabled: isDisabled?.(props2.row.original),
          "aria-expanded": row.isExpanded
        },
        reactExports.createElement(SvgChevronRight, null)
      );
    },
    cellRenderer: (props2) => reactExports.createElement(DefaultCell, {
      ...props2,
      isDisabled: (rowData) => !!isDisabled?.(rowData)
    })
  };
};
const TableCell = (props) => {
  let {
    cell,
    cellIndex,
    isDisabled,
    tableHasSubRows,
    tableInstance,
    expanderCell,
    density
  } = props;
  let hasSubRowExpander = cellIndex === cell.row.cells.findIndex((c) => c.column.id !== SELECTION_CELL_ID);
  let cellElementProps = cell.getCellProps({
    className: classnames("iui-table-cell", cell.column.cellClassName, {
      "iui-table-cell-sticky": !!cell.column.sticky
    }),
    style: {
      ...getCellStyle(cell.column, !!tableInstance.state.isTableResizing),
      ...tableHasSubRows && hasSubRowExpander && getSubRowStyle({
        density,
        depth: cell.row.depth + (cell.row.canExpand ? 0 : 1)
      }),
      ...getStickyStyle(cell.column, tableInstance.visibleColumns)
    }
  });
  let cellProps = reactExports.useMemo(
    () => ({
      ...tableInstance,
      ...{
        cell,
        row: cell.row,
        value: cell.value,
        column: cell.column
      }
    }),
    [cell, tableInstance]
  );
  let cellContent = reactExports.useMemo(
    () => reactExports.createElement(
      reactExports.Fragment,
      null,
      tableHasSubRows && hasSubRowExpander && cell.row.canExpand && reactExports.createElement(SubRowExpander, {
        cell,
        isDisabled,
        cellProps,
        expanderCell,
        density,
        slot: "start"
      }),
      cell.render("Cell")
    ),
    [
      cell,
      cellProps,
      density,
      expanderCell,
      hasSubRowExpander,
      isDisabled,
      tableHasSubRows
    ]
  );
  let defaultCellRendererChildren = reactExports.useMemo(
    () => reactExports.createElement(
      reactExports.Fragment,
      null,
      cellContent,
      "left" === cell.column.sticky && tableInstance.state.sticky.isScrolledToRight && reactExports.createElement(Box, {
        className: "iui-table-cell-shadow-right",
        slot: "shadows"
      }),
      "right" === cell.column.sticky && tableInstance.state.sticky.isScrolledToLeft && reactExports.createElement(Box, {
        className: "iui-table-cell-shadow-left",
        slot: "shadows"
      })
    ),
    [
      cell.column.sticky,
      cellContent,
      tableInstance.state.sticky.isScrolledToLeft,
      tableInstance.state.sticky.isScrolledToRight
    ]
  );
  let cellRendererProps = reactExports.useMemo(
    () => ({
      cellElementProps,
      cellProps,
      children: defaultCellRendererChildren
    }),
    [cellElementProps, cellProps, defaultCellRendererChildren]
  );
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    reactExports.createElement(
      DefaultCellRendererPropsChildren.Provider,
      {
        value: defaultCellRendererChildren
      },
      cell.column.cellRenderer ? cell.column.cellRenderer({
        ...cellRendererProps,
        isDisabled: () => isDisabled
      }) : reactExports.createElement(DefaultCell, {
        ...cellRendererProps,
        isDisabled: () => isDisabled
      })
    )
  );
};
const TableRow = (props) => {
  let {
    row,
    rowProps,
    isLast,
    onRowInViewport,
    onBottomReached,
    intersectionMargin,
    onClick,
    subComponent,
    isDisabled,
    tableHasSubRows,
    tableInstance,
    expanderCell,
    scrollContainerRef,
    tableRowRef,
    density,
    virtualItem,
    virtualizer
  } = props;
  let onIntersect = reactExports.useCallback(() => {
    onRowInViewport.current?.(row.original);
    isLast && onBottomReached.current?.();
  }, [isLast, onBottomReached, onRowInViewport, row.original]);
  let intersectionRoot = reactExports.useMemo(() => {
    let isTableScrollable = (scrollContainerRef?.scrollHeight ?? 0) > (scrollContainerRef?.offsetHeight ?? 0);
    if (isTableScrollable) return scrollContainerRef;
  }, [scrollContainerRef]);
  let intersectionRef = useIntersection(onIntersect, {
    rootMargin: `${intersectionMargin}px`,
    root: intersectionRoot
  });
  let userRowProps = rowProps?.(row) ?? {};
  let { status, isLoading, ...restUserRowProps } = userRowProps;
  let mergedProps = {
    ...row.getRowProps({
      style: {
        flex: "0 0 auto",
        minWidth: "100%",
        ...null != virtualItem ? {
          transform: `translateY(${virtualItem.start}px)`
        } : {}
      }
    }),
    ...restUserRowProps,
    ...{
      className: classnames(
        "iui-table-row",
        {
          "iui-table-row-expanded": row.isExpanded && subComponent,
          "iui-loading": isLoading
        },
        userRowProps?.className
      ),
      "aria-selected": row.isSelected || void 0,
      "aria-disabled": isDisabled || void 0,
      "data-iui-status": status,
      "data-iui-index": virtualItem?.index,
      ...null != virtualItem && {
        "data-iui-virtualizer": "item"
      }
    }
  };
  let refs = useMergedRefs(
    intersectionRef,
    mergedProps.ref,
    tableRowRef,
    virtualizer?.measureElement
  );
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    reactExports.createElement(
      Box,
      {
        ...mergedProps,
        key: mergedProps.key,
        ref: refs,
        onClick: (event) => {
          mergedProps?.onClick?.(event);
          onClick?.(event, row);
        }
      },
      row.cells.map(
        (cell, index) => reactExports.createElement(TableCell, {
          key: cell.getCellProps().key,
          cell,
          cellIndex: index,
          isDisabled,
          tableHasSubRows,
          tableInstance,
          expanderCell,
          density
        })
      )
    )
  );
};
let hasAnySelectedSubRow = (row, selectedRowIds) => {
  if (selectedRowIds?.[row.id]) return true;
  return row.subRows.some(
    (subRow) => hasAnySelectedSubRow(subRow, selectedRowIds)
  );
};
const TableRowMemoized = reactExports.memo(
  TableRow,
  (prevProp, nextProp) => prevProp.isLast === nextProp.isLast && prevProp.state.hiddenColumns?.length === nextProp.state.hiddenColumns?.length && !!prevProp.state.hiddenColumns?.every(
    (column, index) => nextProp.state.hiddenColumns?.[index] === column
  ) && prevProp.onRowInViewport === nextProp.onRowInViewport && prevProp.onBottomReached === nextProp.onBottomReached && prevProp.onClick === nextProp.onClick && prevProp.row.original === nextProp.row.original && prevProp.state.selectedRowIds?.[prevProp.row.id] === nextProp.state.selectedRowIds?.[nextProp.row.id] && prevProp.row.subRows.some(
    (subRow) => hasAnySelectedSubRow(subRow, prevProp.state.selectedRowIds)
  ) === nextProp.row.subRows.some(
    (subRow) => hasAnySelectedSubRow(subRow, nextProp.state.selectedRowIds)
  ) && prevProp.state.expanded?.[prevProp.row.id] === nextProp.state.expanded?.[nextProp.row.id] && prevProp.subComponent === nextProp.subComponent && prevProp.row.cells.every(
    (cell, index) => nextProp.row.cells[index].column === cell.column
  ) && prevProp.isDisabled === nextProp.isDisabled && prevProp.rowProps === nextProp.rowProps && prevProp.expanderCell === nextProp.expanderCell && prevProp.tableHasSubRows === nextProp.tableHasSubRows && prevProp.scrollContainerRef === nextProp.scrollContainerRef && prevProp.state.columnOrder === nextProp.state.columnOrder && !nextProp.state.columnResizing.isResizingColumn && prevProp.state.isTableResizing === nextProp.state.isTableResizing && prevProp.state.sticky.isScrolledToLeft === nextProp.state.sticky.isScrolledToLeft && prevProp.state.sticky.isScrolledToRight === nextProp.state.sticky.isScrolledToRight && prevProp.density === nextProp.density && prevProp.virtualizer === nextProp.virtualizer && prevProp.virtualItem?.index === nextProp.virtualItem?.index && prevProp.virtualItem?.start === nextProp.virtualItem?.start
);
let isValidDate = (date) => !!date && !isNaN(date.valueOf());
let betweenDate = (rows, ids, filterValue) => {
  let [min, max] = filterValue || [];
  let MAX_DATE_VALUE = 864e13;
  let minValue = isValidDate(min) ? min : new Date(-MAX_DATE_VALUE);
  let maxValue = isValidDate(max) ? max : new Date(MAX_DATE_VALUE);
  return rows.filter(
    (row) => ids.some((id2) => {
      let rowValue = row.values[id2];
      return rowValue.valueOf() >= minValue.valueOf() && rowValue.valueOf() <= maxValue.valueOf();
    })
  );
};
betweenDate.autoRemove = (val) => !val || !isValidDate(val[0]) && !isValidDate(val[1]);
const customFilterFunctions = {
  betweenDate
};
const useExpanderCell = (subComponent, expanderCell, isRowDisabled) => (hooks) => {
  if (!subComponent) return;
  hooks.allColumns.push((columns) => {
    let hasExpanderColumn = columns.find((c) => c.id === EXPANDER_CELL_ID);
    if (hasExpanderColumn) return columns;
    let expanderColumn = ExpanderColumn({
      subComponent,
      isDisabled: isRowDisabled
    });
    return [
      {
        ...expanderColumn,
        Cell: expanderCell ? (cellProps) => reactExports.createElement(
          reactExports.Fragment,
          null,
          expanderCell(cellProps)
        ) : expanderColumn.Cell
      },
      ...columns
    ];
  });
};
const useSelectionCell = (isSelectable, selectionMode, isRowDisabled, density = "default") => (hooks) => {
  if (!isSelectable) return;
  hooks.allColumns.push(
    (columns) => "single" === selectionMode || columns.find((c) => c.id === SELECTION_CELL_ID) ? columns : [
      SelectionColumn({
        isDisabled: isRowDisabled,
        density
      }),
      ...columns
    ]
  );
};
let text = (rows, ids, filterValue) => {
  rows = rows.filter(
    (row) => ids.some((id2) => {
      let rowValue = row.values[id2];
      return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());
    })
  );
  return rows;
};
text.autoRemove = (val) => !val;
let exactText = (rows, ids, filterValue) => rows.filter(
  (row) => ids.some((id2) => {
    let rowValue = row.values[id2];
    return void 0 !== rowValue ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;
  })
);
exactText.autoRemove = (val) => !val;
let exactTextCase = (rows, ids, filterValue) => rows.filter(
  (row) => ids.some((id2) => {
    let rowValue = row.values[id2];
    return void 0 !== rowValue ? String(rowValue) === String(filterValue) : true;
  })
);
exactTextCase.autoRemove = (val) => !val;
let includes = (rows, ids, filterValue) => rows.filter(
  (row) => ids.some((id2) => {
    let rowValue = row.values[id2];
    return rowValue.includes(filterValue);
  })
);
includes.autoRemove = (val) => !val || !val.length;
let includesAll = (rows, ids, filterValue) => rows.filter(
  (row) => ids.some((id2) => {
    let rowValue = row.values[id2];
    return rowValue && rowValue.length && filterValue.every((val) => rowValue.includes(val));
  })
);
includesAll.autoRemove = (val) => !val || !val.length;
let includesSome = (rows, ids, filterValue) => rows.filter(
  (row) => ids.some((id2) => {
    let rowValue = row.values[id2];
    return rowValue && rowValue.length && filterValue.some((val) => rowValue.includes(val));
  })
);
includesSome.autoRemove = (val) => !val || !val.length;
let includesValue = (rows, ids, filterValue) => rows.filter(
  (row) => ids.some((id2) => {
    let rowValue = row.values[id2];
    return filterValue.includes(rowValue);
  })
);
includesValue.autoRemove = (val) => !val || !val.length;
let between = (rows, ids, filterValue) => {
  let [min, max] = filterValue || [];
  min = "number" == typeof min ? min : -1 / 0;
  max = "number" == typeof max ? max : 1 / 0;
  if (min > max) {
    let temp = min;
    min = max;
    max = temp;
  }
  return rows.filter(
    (row) => ids.some((id2) => {
      let rowValue = row.values[id2];
      return rowValue >= min && rowValue <= max;
    })
  );
};
between.autoRemove = (val) => !val || "number" != typeof val[0] && "number" != typeof val[1];
const defaultFilterFunctions = {
  text,
  exactText,
  exactTextCase,
  includes,
  includesAll,
  includesSome,
  includesValue,
  between
};
const useSubRowFiltering = (hasAnySubRows) => (hooks) => {
  hooks.useInstance.push(useInstance$3.bind({}, hasAnySubRows));
};
let useInstance$3 = (hasAnySubRows, instance) => {
  let setInitialSubRows = (rows) => {
    rows.forEach((row) => {
      if (!row.initialSubRows) row.initialSubRows = row.subRows;
      setInitialSubRows(row.subRows);
    });
  };
  setInitialSubRows(instance.initialRows);
  let {
    filteredRows = instance.filteredRows,
    filteredFlatRows = instance.filteredFlatRows,
    filteredRowsById = instance.filteredRowsById
  } = reactExports.useMemo(() => {
    if (!hasAnySubRows) return {};
    let setSubRows = (rows) => {
      rows.forEach((row) => {
        row.subRows = row.initialSubRows ?? [];
        setSubRows(row.subRows);
      });
    };
    setSubRows(instance.initialRows);
    let currentlyFilteredRows = [...instance.initialRows];
    instance.state.filters.forEach(({ id: columnId, value: filterValue }) => {
      let column = instance.allColumns.find((c) => c.id === columnId);
      if (!column) return;
      let filterTypes = {
        ...defaultFilterFunctions,
        ...instance.filterTypes
      };
      let filterFn = "function" == typeof column.filter ? column.filter : filterTypes[column.filter ?? "text"];
      currentlyFilteredRows = currentlyFilteredRows.filter(
        (row) => handleRowFiltering(row, filterFn, columnId, filterValue)
      );
    });
    let filteredRows2 = [];
    let filteredFlatRows2 = [];
    let filteredRowsById2 = {};
    let populateRows = (row) => {
      if (0 === row.depth) filteredRows2.push(row);
      filteredFlatRows2.push(row);
      filteredRowsById2[row.id] = row;
      if (row.subRows.length) row.subRows.forEach((r) => populateRows(r));
    };
    currentlyFilteredRows.forEach((row) => populateRows(row));
    return {
      filteredRows: filteredRows2,
      filteredFlatRows: filteredFlatRows2,
      filteredRowsById: filteredRowsById2
    };
  }, [
    instance.allColumns,
    instance.filterTypes,
    instance.initialRows,
    instance.state.filters,
    hasAnySubRows
  ]);
  Object.assign(instance, {
    filteredRows,
    filteredFlatRows,
    filteredRowsById,
    rows: filteredRows,
    flatRows: filteredFlatRows,
    rowsById: filteredRowsById
  });
};
let handleRowFiltering = (row, filterFn, columnId, filterValue) => {
  let hasFilteredSubRows = false;
  row.subRows = row.initialSubRows.filter((subRow) => {
    let result2 = handleRowFiltering(subRow, filterFn, columnId, filterValue);
    if (result2) hasFilteredSubRows = true;
    return result2;
  });
  if (hasFilteredSubRows) return true;
  let result = filterFn([row], [columnId], filterValue);
  return !!result.length;
};
const useSubRowSelection = (hooks) => {
  hooks.useInstance.push(useInstance$2);
};
let useInstance$2 = (instance) => {
  let selectedFlatRows = reactExports.useMemo(() => {
    let selectedFlatRows2 = [];
    let setSelectionState = (row, selectedRowIds) => {
      let isSomeSubRowsSelected = false;
      row.initialSubRows.forEach((subRow) => {
        setSelectionState(subRow, selectedRowIds);
        if (subRow.isSelected || subRow.isSomeSelected)
          isSomeSubRowsSelected = true;
      });
      if (selectedRowIds[row.id]) {
        row.isSelected = true;
        row.isSomeSelected = false;
        selectedFlatRows2.push(row);
      } else {
        row.isSelected = false;
        row.isSomeSelected = isSomeSubRowsSelected;
      }
    };
    instance.rows.forEach(
      (row) => setSelectionState(row, instance.state.selectedRowIds)
    );
    return selectedFlatRows2;
  }, [instance.rows, instance.state.selectedRowIds]);
  Object.assign(instance, {
    selectedFlatRows
  });
};
const useResizeColumns = (ownerDocument) => (hooks) => {
  hooks.getResizerProps = [defaultGetResizerProps(ownerDocument)];
  hooks.stateReducers.push(reducer$2);
  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);
};
let isTouchEvent = (event) => "touchstart" === event.type;
let defaultGetResizerProps = (ownerDocument) => (props, { instance, header, nextHeader }) => {
  let { dispatch } = instance;
  let onResizeStart = (e2, header2) => {
    if (isTouchEvent(e2) && e2.touches && e2.touches.length > 1) return;
    let headerIdWidths = getLeafHeaders(header2).map((d) => [
      d.id,
      getHeaderWidth(d)
    ]);
    let nextHeaderIdWidths = nextHeader ? getLeafHeaders(nextHeader).map((d) => [d.id, getHeaderWidth(d)]) : [];
    let clientX = isTouchEvent(e2) ? Math.round(e2.touches[0].clientX) : e2.clientX;
    let dispatchMove = (clientXPos) => dispatch({
      type: reactTableExports.actions.columnResizing,
      clientX: clientXPos
    });
    let dispatchEnd = () => dispatch({
      type: reactTableExports.actions.columnDoneResizing
    });
    let handlersAndEvents = {
      mouse: {
        moveEvent: "mousemove",
        moveHandler: (e3) => dispatchMove(e3.clientX),
        upEvent: "mouseup",
        upHandler: () => {
          ownerDocument.current?.removeEventListener(
            "mousemove",
            handlersAndEvents.mouse.moveHandler
          );
          ownerDocument.current?.removeEventListener(
            "mouseup",
            handlersAndEvents.mouse.upHandler
          );
          ownerDocument.current?.removeEventListener(
            "mouseleave",
            handlersAndEvents.mouse.upHandler
          );
          dispatchEnd();
        }
      },
      touch: {
        moveEvent: "touchmove",
        moveHandler: (e3) => {
          if (e3.cancelable) {
            e3.preventDefault();
            e3.stopPropagation();
          }
          dispatchMove(e3.touches[0].clientX);
        },
        upEvent: "touchend",
        upHandler: () => {
          ownerDocument.current?.removeEventListener(
            handlersAndEvents.touch.moveEvent,
            handlersAndEvents.touch.moveHandler
          );
          ownerDocument.current?.removeEventListener(
            handlersAndEvents.touch.upEvent,
            handlersAndEvents.touch.moveHandler
          );
          dispatchEnd();
        }
      }
    };
    let events2 = isTouchEvent(e2) ? handlersAndEvents.touch : handlersAndEvents.mouse;
    let passiveIfSupported = passiveEventSupported() ? {
      passive: false
    } : false;
    ownerDocument.current?.addEventListener(
      events2.moveEvent,
      events2.moveHandler,
      passiveIfSupported
    );
    ownerDocument.current?.addEventListener(
      events2.upEvent,
      events2.upHandler,
      passiveIfSupported
    );
    if (!isTouchEvent(e2))
      ownerDocument.current?.addEventListener(
        "mouseleave",
        handlersAndEvents.mouse.upHandler,
        passiveIfSupported
      );
    dispatch({
      type: reactTableExports.actions.columnStartResizing,
      columnId: header2.id,
      columnWidth: getHeaderWidth(header2),
      nextColumnWidth: getHeaderWidth(nextHeader),
      headerIdWidths,
      nextHeaderIdWidths,
      clientX
    });
  };
  return [
    props,
    {
      onClick: (e2) => {
        e2.stopPropagation();
      },
      onMouseDown: (e2) => {
        e2.persist();
        e2.preventDefault();
        e2.stopPropagation();
        onResizeStart(e2, header);
      },
      onTouchStart: (e2) => {
        e2.persist();
        e2.preventDefault();
        onResizeStart(e2, header);
      },
      style: {
        cursor: "col-resize"
      },
      draggable: false,
      role: "separator"
    }
  ];
};
useResizeColumns.pluginName = "useResizeColumns";
let reducer$2 = (newState, action5, previousState, instance) => {
  if (action5.type === reactTableExports.actions.init)
    return {
      ...newState,
      columnResizing: {
        columnWidths: {}
      }
    };
  if (action5.type === reactTableExports.actions.resetResize)
    return {
      ...newState,
      columnResizing: {
        columnWidths: {}
      }
    };
  if (action5.type === reactTableExports.actions.columnStartResizing) {
    let {
      clientX,
      columnId,
      columnWidth,
      nextColumnWidth,
      headerIdWidths,
      nextHeaderIdWidths
    } = action5;
    return {
      ...newState,
      columnResizing: {
        ...newState.columnResizing,
        startX: clientX,
        columnWidth,
        nextColumnWidth,
        headerIdWidths,
        nextHeaderIdWidths,
        isResizingColumn: columnId
      }
    };
  }
  if (action5.type === reactTableExports.actions.columnResizing) {
    let { clientX } = action5;
    let {
      startX = 0,
      columnWidth = 1,
      nextColumnWidth = 1,
      headerIdWidths = [],
      nextHeaderIdWidths = []
    } = newState.columnResizing;
    if (!instance) return newState;
    let deltaX = clientX - startX;
    let newColumnWidths = getColumnWidths(headerIdWidths, deltaX / columnWidth);
    let isTableWidthDecreasing = calculateTableWidth(newColumnWidths, instance.flatHeaders) < instance.tableWidth;
    let newNextColumnWidths = instance?.columnResizeMode === "fit" || instance?.columnResizeMode === "expand" && isTableWidthDecreasing ? getColumnWidths(nextHeaderIdWidths, -deltaX / nextColumnWidth) : {};
    if (!isNewColumnWidthsValid(newColumnWidths, instance.flatHeaders) || !isNewColumnWidthsValid(newNextColumnWidths, instance.flatHeaders) || !isNewTableWidthValid(
      {
        ...newColumnWidths,
        ...newNextColumnWidths
      },
      instance
    ))
      return newState;
    instance?.flatHeaders.forEach((h) => {
      if (!h.width) h.width = h.resizeWidth;
    });
    return {
      ...newState,
      columnResizing: {
        ...newState.columnResizing,
        columnWidths: {
          ...newState.columnResizing.columnWidths,
          ...newColumnWidths,
          ...newNextColumnWidths
        }
      }
    };
  }
  if (action5.type === reactTableExports.actions.columnDoneResizing)
    return {
      ...newState,
      columnResizing: {
        ...newState.columnResizing,
        startX: void 0,
        isResizingColumn: void 0
      }
    };
  return newState;
};
let getColumnWidths = (headerIdWidths, deltaPercentage) => {
  let columnWidths = {};
  headerIdWidths.forEach(([headerId, headerWidth]) => {
    columnWidths[headerId] = Math.max(
      headerWidth + headerWidth * deltaPercentage,
      0
    );
  });
  return columnWidths;
};
let isNewColumnWidthsValid = (columnWidths, headers) => {
  if (Object.values(columnWidths).some((width) => width <= 1)) return false;
  for (let [headerId, width] of Object.entries(columnWidths)) {
    let header = headers?.find((h) => h.id === headerId);
    if (!header) continue;
    let minWidth = header.minWidth || 0;
    let maxWidth = header.maxWidth || 1 / 0;
    if (width < minWidth || width > maxWidth) return false;
  }
  return true;
};
let isNewTableWidthValid = (columnWidths, instance) => {
  if ("fit" === instance.columnResizeMode) return true;
  let newTableWidth = 0;
  for (let header of instance.flatHeaders)
    newTableWidth += columnWidths[header.id] ? columnWidths[header.id] : getHeaderWidth(header);
  if (Math.round(newTableWidth) < instance.tableWidth) return false;
  return true;
};
let useInstanceBeforeDimensions = (instance) => {
  let {
    flatHeaders,
    getHooks,
    state: { columnResizing },
    columnResizeMode
  } = instance;
  let getInstance = reactTableExports.useGetLatest(instance);
  flatHeaders.forEach((header, index) => {
    let resizeWidth = columnResizing.columnWidths[header.id];
    header.width = resizeWidth || header.width || header.originalWidth;
    header.isResizing = columnResizing.isResizingColumn === header.id;
    let headerToResize = header.disableResizing && "fit" === columnResizeMode ? getPreviousResizableHeader(header, instance) : header;
    let nextResizableHeader = "expand" === columnResizeMode && index === flatHeaders.length - 1 ? getPreviousResizableHeader(header, instance) : getNextResizableHeader(header, instance);
    header.canResize = null != header.disableResizing ? !header.disableResizing : true;
    if ("fit" === columnResizeMode)
      header.isResizerVisible = header.canResize && !!nextResizableHeader || headerToResize && !!instance.flatHeaders[index + 1]?.canResize;
    else header.isResizerVisible = header.canResize && !!headerToResize;
    header.getResizerProps = reactTableExports.makePropGetter(getHooks().getResizerProps, {
      instance: getInstance(),
      header: headerToResize,
      nextHeader: nextResizableHeader
    });
  });
};
let getPreviousResizableHeader = (headerColumn, instance) => {
  let headersList = (headerColumn.parent?.columns || instance.flatHeaders).filter(({ isVisible }) => isVisible);
  let headerIndex = headersList.findIndex((h) => h.id === headerColumn.id);
  return [...headersList].slice(0, headerIndex).reverse().find((h) => !h.disableResizing);
};
let getNextResizableHeader = (headerColumn, instance) => {
  let headersList = (headerColumn.parent?.columns || instance.flatHeaders).filter(({ isVisible }) => isVisible);
  let headerIndex = headersList.findIndex((h) => h.id === headerColumn.id);
  return [...headersList].slice(headerIndex + 1).find((h) => !h.disableResizing);
};
function getLeafHeaders(header) {
  let leafHeaders = [];
  let recurseHeader = (header2) => {
    if (header2.columns && header2.columns.length)
      header2.columns.map(recurseHeader);
    leafHeaders.push(header2);
  };
  recurseHeader(header);
  return leafHeaders;
}
let getHeaderWidth = (header) => {
  if (!header) return 0;
  return "string" == typeof header.width && Number.isNaN(Number(header.width)) ? Number(header.resizeWidth || 0) : Number(header.width || header.resizeWidth || 0);
};
let calculateTableWidth = (columnWidths, headers) => {
  let newTableWidth = 0;
  for (let header of headers)
    newTableWidth += columnWidths[header.id] ? columnWidths[header.id] : getHeaderWidth(header);
  return newTableWidth;
};
let passiveSupported = null;
let passiveEventSupported = () => {
  if (null != passiveSupported) return passiveSupported;
  try {
    let options = {
      once: true,
      get passive() {
        passiveSupported = true;
        return false;
      }
    };
    window.addEventListener("test", () => {
    }, options);
  } catch {
    passiveSupported = false;
  }
  return passiveSupported;
};
let leftClassName = u["iui-table-reorder-column-left"];
let rightClassName = u["iui-table-reorder-column-right"];
let REORDER_ACTIONS = {
  columnDragStart: "columnDragStart",
  columnDragEnd: "columnDragEnd"
};
const useColumnDragAndDrop = (isEnabled) => (hooks) => {
  hooks.getDragAndDropProps = [defaultGetDragAndDropProps(isEnabled)];
  hooks.stateReducers.push(reducer$1);
  hooks.useInstance.push(useInstance$1);
};
let defaultGetDragAndDropProps = (isEnabled) => (props, { instance, header }) => {
  if (!isEnabled || header.disableReordering) return props;
  let onDragStart = () => {
    instance.dispatch({
      type: REORDER_ACTIONS.columnDragStart,
      columnIndex: instance.flatHeaders.indexOf(header)
    });
  };
  let setOnDragColumnStyle = (event, position) => {
    let columnElement = event.currentTarget;
    if ("left" === position) {
      columnElement.classList.remove(rightClassName);
      columnElement.classList.add(leftClassName);
    } else if ("right" === position) {
      columnElement.classList.remove(leftClassName);
      columnElement.classList.add(rightClassName);
    } else {
      columnElement.classList.remove(leftClassName);
      columnElement.classList.remove(rightClassName);
    }
  };
  let reorderColumns = (tableColumns, srcIndex, dstIndex) => {
    let newTableColumns = [...tableColumns];
    let [removed] = newTableColumns.splice(srcIndex, 1);
    newTableColumns.splice(dstIndex, 0, removed);
    return newTableColumns;
  };
  let onDragOver = (event) => {
    event.preventDefault();
    let headerIndex = instance.flatHeaders.indexOf(header);
    if (instance.state.columnReorderStartIndex !== headerIndex)
      setOnDragColumnStyle(
        event,
        instance.state.columnReorderStartIndex > headerIndex ? "left" : "right"
      );
  };
  let onDragLeave = (event) => {
    setOnDragColumnStyle(event);
  };
  let onDrop = (event) => {
    event.preventDefault();
    setOnDragColumnStyle(event);
    let columnIds = instance.allColumns.map((x) => x.id);
    let srcIndex = instance.state.columnReorderStartIndex;
    let dstIndex = columnIds.findIndex((x) => x === header.id);
    if (srcIndex === dstIndex || -1 === srcIndex || -1 === dstIndex) return;
    instance.setColumnOrder(reorderColumns(columnIds, srcIndex, dstIndex));
    instance.dispatch({
      type: REORDER_ACTIONS.columnDragEnd,
      columnIndex: -1
    });
  };
  return [
    props,
    {
      draggable: true,
      onDragStart,
      onDragOver,
      onDragLeave,
      onDrop
    }
  ];
};
let reducer$1 = (newState, action5) => {
  switch (action5.type) {
    case reactTableExports.actions.init:
      return {
        ...newState,
        columnReorderStartIndex: -1
      };
    case REORDER_ACTIONS.columnDragStart:
      return {
        ...newState,
        columnReorderStartIndex: action5.columnIndex
      };
    case REORDER_ACTIONS.columnDragEnd:
      return {
        ...newState,
        columnReorderStartIndex: -1
      };
    default:
      return newState;
  }
};
let useInstance$1 = (instance) => {
  let { flatHeaders, getHooks } = instance;
  let getInstance = reactTableExports.useGetLatest(instance);
  flatHeaders.forEach((header) => {
    header.getDragAndDropProps = reactTableExports.makePropGetter(
      getHooks().getDragAndDropProps,
      {
        instance: getInstance(),
        header
      }
    );
  });
};
function useScrollToRow({
  data,
  enableVirtualization,
  page,
  paginatorRenderer,
  scrollToRow
}) {
  let rowRefs = reactExports.useRef({});
  let pageRef = reactExports.useRef(page);
  pageRef.current = page;
  let dataRef = reactExports.useRef(data);
  dataRef.current = data;
  let scrollToIndex = reactExports.useMemo(() => {
    if (!scrollToRow || paginatorRenderer) return;
    let index = scrollToRow(pageRef.current, dataRef.current);
    return index < 0 ? void 0 : index;
  }, [paginatorRenderer, scrollToRow]);
  reactExports.useEffect(() => {
    if (enableVirtualization || null == scrollToIndex || scrollToIndex < 0)
      return;
    rowRefs.current[pageRef.current[scrollToIndex]?.id]?.scrollIntoView();
  }, [enableVirtualization, scrollToIndex]);
  let tableRowRef = reactExports.useCallback(
    (row) => (element) => {
      rowRefs.current[row.id] = element;
    },
    []
  );
  return {
    scrollToIndex,
    tableRowRef
  };
}
reactTableExports.actions.setScrolledLeft = "setScrolledLeft";
reactTableExports.actions.setScrolledRight = "setScrolledRight";
const useStickyColumns = (hooks) => {
  hooks.stateReducers.push(reducer);
  hooks.useInstance.push(useInstance);
};
let reducer = (newState, action5) => {
  if (action5.type === reactTableExports.actions.init)
    return {
      ...newState,
      sticky: {}
    };
  if (action5.type === reactTableExports.actions.setScrolledLeft && newState.sticky?.isScrolledToLeft !== action5.value)
    return {
      ...newState,
      sticky: {
        ...newState.sticky,
        isScrolledToLeft: action5.value
      }
    };
  if (action5.type === reactTableExports.actions.setScrolledRight && newState.sticky?.isScrolledToRight !== action5.value)
    return {
      ...newState,
      sticky: {
        ...newState.sticky,
        isScrolledToRight: action5.value
      }
    };
  return newState;
};
let useInstance = (instance) => {
  let { flatHeaders } = instance;
  flatHeaders.forEach((header) => {
    if (!header.originalSticky) header.originalSticky = header.sticky ?? "none";
    header.sticky = "none" === header.originalSticky ? void 0 : header.originalSticky;
  });
  let hasLeftStickyColumn = false;
  [...flatHeaders].reverse().forEach((header) => {
    if ("left" === header.sticky) hasLeftStickyColumn = true;
    if (hasLeftStickyColumn) header.sticky = "left";
  });
  let hasRightStickyColumn = false;
  flatHeaders.forEach((header) => {
    if ("right" === header.sticky) hasRightStickyColumn = true;
    if (hasRightStickyColumn) header.sticky = "right";
  });
};
const onExpandHandler = (newState, instance, onExpand) => {
  if (!instance?.preFilteredFlatRows.length)
    return void onExpand?.([], newState);
  let expandedData = [];
  instance.preFilteredFlatRows.forEach((row) => {
    if (newState.expanded[row.id]) expandedData.push(row.original);
  });
  onExpand?.(expandedData, newState);
};
const onFilterHandler = (newState, action5, previousState, currentFilter, instance) => {
  let previousFilter = previousState.filters.find(
    (f) => f.id === action5.columnId
  );
  if (previousFilter?.value != action5.filterValue) {
    let filters = newState.filters.map((f) => {
      let column = instance?.allColumns.find((c) => c.id === f.id);
      return {
        id: f.id,
        value: f.value,
        fieldType: column?.fieldType ?? "text",
        filterType: column?.filter ?? "text"
      };
    });
    return filters;
  }
  return currentFilter;
};
let onSelectHandler = (newState, instance, onSelect, isRowDisabled) => {
  if (!instance?.rows.length) return void onSelect?.([], newState);
  let newSelectedRowIds = {};
  let handleRow = (row) => {
    if (isRowDisabled?.(row.original)) return false;
    let hasSubComponents = !!row.initialSubRows[0]?.original[iuiId];
    let hasSubRows = row.subRows.length > 0 && !hasSubComponents;
    let isAllSubSelected = true;
    if (hasSubRows)
      row.initialSubRows.forEach((subRow) => {
        let result = handleRow(subRow);
        if (!result) isAllSubSelected = false;
      });
    let isRowSelected = newState.selectedRowIds[row.id];
    let case1 = isRowSelected && (!instance.selectSubRows || !hasSubRows);
    let case2 = hasSubRows && isAllSubSelected;
    if (case1 || case2) newSelectedRowIds[row.id] = true;
    return !!newSelectedRowIds[row.id];
  };
  instance.initialRows.forEach((row) => handleRow(row));
  let selectedData = getSelectedData(newSelectedRowIds, instance);
  newState.selectedRowIds = newSelectedRowIds;
  onSelect?.(selectedData, newState);
};
const onToggleHandler = (newState, action5, instance, onSelect, isRowDisabled) => {
  onSelectHandler(newState, instance, onSelect, isRowDisabled);
  newState.lastSelectedRowId = action5.id;
};
const onSingleSelectHandler = (state2, action5, instance, onSelect, isRowDisabled) => {
  let selectedRowIds = {
    [action5.id]: true
  };
  if (instance?.selectSubRows) {
    let handleRow = (row) => {
      selectedRowIds[row.id] = true;
      row.subRows.forEach((r) => handleRow(r));
    };
    handleRow(instance.rowsById[action5.id]);
  }
  let newState = {
    ...state2,
    lastSelectedRowId: action5.id,
    selectedRowIds
  };
  onSelectHandler(newState, instance, onSelect, isRowDisabled);
  return newState;
};
const onShiftSelectHandler = (state2, action5, instance, onSelect, isRowDisabled) => {
  if (null == instance) return state2;
  let startIndex = Math.max(
    0,
    instance.flatRows.findIndex((row) => row.id === state2.lastSelectedRowId)
  );
  let endIndex = Math.max(
    0,
    instance.flatRows.findIndex((row) => row.id === action5.id)
  );
  if (startIndex > endIndex) {
    let temp = startIndex;
    startIndex = endIndex;
    endIndex = temp;
  }
  let isLastSelectedRowIdSelected = null == state2.lastSelectedRowId || !!state2.selectedRowIds[state2.lastSelectedRowId];
  let selectedRowIds = action5.ctrlPressed ? {
    ...state2.selectedRowIds
  } : {};
  instance.flatRows.slice(startIndex, endIndex + 1).forEach((r) => selectedRowIds[r.id] = isLastSelectedRowIdSelected);
  let handleRow = (row) => {
    selectedRowIds[row.id] = isLastSelectedRowIdSelected;
    row.subRows.forEach((r) => handleRow(r));
  };
  handleRow(instance.flatRows[endIndex]);
  let newState = {
    ...state2,
    selectedRowIds
  };
  onSelectHandler(newState, instance, onSelect, isRowDisabled);
  return newState;
};
let getSelectedData = (selectedRowIds, instance) => {
  let selectedData = [];
  let setSelectedData = (row) => {
    if (selectedRowIds[row.id]) selectedData.push(row.original);
    row.initialSubRows.forEach((subRow) => setSelectedData(subRow));
  };
  instance?.initialRows.forEach((row) => setSelectedData(row));
  return selectedData;
};
const onTableResizeStart = (state2) => ({
  ...state2,
  isTableResizing: true
});
const onTableResizeEnd = (state2, action5) => ({
  ...state2,
  isTableResizing: false,
  columnResizing: {
    ...state2.columnResizing,
    columnWidths: {
      ...action5.columnWidths
    }
  }
});
const FilterToggle = (props) => {
  let { column, className: className2, ...rest } = props;
  useGlobals();
  let [isVisible, setIsVisible] = reactExports.useState(false);
  let close = reactExports.useCallback(() => setIsVisible(false), []);
  let setFilter = reactExports.useCallback(
    (filterValue) => {
      column.setFilter(filterValue);
      close();
    },
    [close, column]
  );
  let clearFilter = reactExports.useCallback(() => {
    column.setFilter(void 0);
    close();
  }, [close, column]);
  let isColumnFiltered = null != column.filterValue && "" !== column.filterValue;
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    column.canFilter && column.Filter && reactExports.createElement(
      Popover,
      {
        content: column.render("Filter", {
          close,
          setFilter,
          clearFilter
        }),
        placement: "bottom-start",
        visible: isVisible,
        onVisibleChange: setIsVisible,
        closeOnOutsideClick: true,
        applyBackground: true
      },
      reactExports.createElement(
        IconButton,
        {
          styleType: "borderless",
          isActive: isVisible || isColumnFiltered,
          className: classnames("iui-table-filter-button", className2),
          "aria-label": "Filter",
          onClick: (e2) => {
            e2.stopPropagation();
          },
          "data-iui-shift": "left",
          ...rest
        },
        isColumnFiltered ? reactExports.createElement(SvgFilter, null) : reactExports.createElement(SvgFilterHollow, null)
      )
    )
  );
};
const ColumnHeader = reactExports.forwardRef((props, forwardedRef) => {
  let {
    column,
    areFiltersSet,
    isResizable,
    columnResizeMode,
    enableColumnReordering,
    density,
    columnHasExpanders,
    isLast,
    isTableEmpty,
    ...rest
  } = props;
  let isHeaderDirectClick = reactExports.useRef(false);
  let instance = reactExports.useContext(TableInstanceContext);
  let COLUMN_MIN_WIDTHS = {
    default: 72,
    withExpander: 108
  };
  let showFilterButton = (column2) => (!isTableEmpty || areFiltersSet) && column2.canFilter && !!column2.Filter;
  let showSortButton = (column2) => !isTableEmpty && column2.canSort;
  let { onClick, ...restSortProps } = column.getSortByToggleProps();
  if ([void 0, 0].includes(column.minWidth)) {
    column.minWidth = columnHasExpanders ? COLUMN_MIN_WIDTHS.withExpander : COLUMN_MIN_WIDTHS.default;
    if ("number" == typeof column.width && column.minWidth > column.width)
      column.minWidth = column.width;
  }
  let columnProps = column.getHeaderProps({
    ...restSortProps,
    className: classnames(
      "iui-table-cell",
      {
        "iui-actionable": column.canSort,
        "iui-sorted": column.isSorted,
        "iui-table-cell-sticky": !!column.sticky
      },
      column.columnClassName
    ),
    style: {
      ...getCellStyle(column, !!instance?.state.isTableResizing),
      ...columnHasExpanders && getSubRowStyle({
        density
      }),
      ...getStickyStyle(column, instance?.visibleColumns ?? []),
      flexWrap: "wrap",
      columnGap: "var(--iui-size-xs)"
    }
  });
  return reactExports.createElement(
    Box,
    {
      ...columnProps,
      ...rest,
      key: columnProps.key,
      title: void 0,
      ref: useMergedRefs(
        reactExports.useCallback(
          (el) => {
            if (el) column.resizeWidth = el.getBoundingClientRect().width;
          },
          [column]
        ),
        forwardedRef
      ),
      onMouseDown: () => {
        isHeaderDirectClick.current = true;
      },
      onClick: (e2) => {
        if (isHeaderDirectClick.current) {
          onClick?.(e2);
          isHeaderDirectClick.current = false;
        }
      },
      tabIndex: showSortButton(column) ? 0 : void 0,
      onKeyDown: (e2) => {
        if ("Enter" == e2.key && showSortButton(column)) column.toggleSortBy();
      }
    },
    reactExports.createElement(
      reactExports.Fragment,
      null,
      "string" == typeof column.Header ? reactExports.createElement(
        ShadowRoot,
        {
          css: lineClamp.css
        },
        reactExports.createElement(
          "div",
          {
            className: lineClamp.className
          },
          reactExports.createElement("slot", null)
        ),
        reactExports.createElement("slot", {
          name: "actions"
        }),
        reactExports.createElement("slot", {
          name: "resizers"
        }),
        reactExports.createElement("slot", {
          name: "shadows"
        })
      ) : null,
      column.render("Header"),
      (showFilterButton(column) || showSortButton(column)) && reactExports.createElement(
        Box,
        {
          className: "iui-table-header-actions-container",
          onKeyDown: (e2) => e2.stopPropagation(),
          slot: "actions"
        },
        showFilterButton(column) && reactExports.createElement(FilterToggle, {
          column
        }),
        showSortButton(column) && reactExports.createElement(
          Box,
          {
            className: "iui-table-cell-end-icon"
          },
          column.isSortedDesc || !column.isSorted && column.sortDescFirst ? reactExports.createElement(SvgSortDown, {
            className: "iui-table-sort",
            "aria-hidden": true
          }) : reactExports.createElement(SvgSortUp, {
            className: "iui-table-sort",
            "aria-hidden": true
          })
        )
      ),
      isResizable && column.isResizerVisible && (!isLast || "expand" === columnResizeMode) && reactExports.createElement(
        Box,
        {
          ...column.getResizerProps(),
          className: "iui-table-resizer",
          slot: "resizers"
        },
        reactExports.createElement(Box, {
          className: "iui-table-resizer-bar"
        })
      ),
      enableColumnReordering && !column.disableReordering && reactExports.createElement(Box, {
        className: "iui-table-reorder-bar",
        slot: "resizers"
      }),
      "left" === column.sticky && instance?.state.sticky.isScrolledToRight && reactExports.createElement(Box, {
        className: "iui-table-cell-shadow-right",
        slot: "shadows"
      }),
      "right" === column.sticky && instance?.state.sticky.isScrolledToLeft && reactExports.createElement(Box, {
        className: "iui-table-cell-shadow-left",
        slot: "shadows"
      })
    )
  );
});
let TableExpandableContent = reactExports.forwardRef((props, ref) => {
  let { children, className: className2, style, isDisabled, virtualItem, ...rest } = props;
  return reactExports.createElement(
    Box,
    {
      className: classnames("iui-table-row", "iui-table-expanded-content", className2),
      style: {
        flex: "0 0 auto",
        minWidth: "100%",
        ...null != virtualItem ? {
          transform: `translateY(${virtualItem.start}px)`
        } : {},
        ...style
      },
      "aria-disabled": isDisabled,
      "data-iui-index": virtualItem?.index,
      ...null != virtualItem && {
        "data-iui-virtualizer": "item"
      },
      ref,
      ...rest
    },
    children
  );
});
const TableExpandableContentMemoized = reactExports.memo(
  TableExpandableContent
);
let singleRowSelectedAction = "singleRowSelected";
let shiftRowSelectedAction = "shiftRowSelected";
const tableResizeStartAction = "tableResizeStart";
let tableResizeEndAction = "tableResizeEnd";
const iuiId = Symbol("iui-id");
let flattenColumns = (columns) => {
  let flatColumns = [];
  columns.forEach((column) => {
    flatColumns.push(column);
    if ("columns" in column)
      flatColumns.push(...flattenColumns(column.columns));
  });
  return flatColumns;
};
const Table = (props) => {
  let {
    data,
    columns,
    isLoading = false,
    emptyTableContent,
    className: className2,
    style,
    id: id2,
    isSelectable = false,
    onSelect,
    onRowClick,
    selectionMode = "multi",
    isSortable = false,
    onSort,
    stateReducer,
    onBottomReached,
    onRowInViewport,
    intersectionMargin = 300,
    subComponent,
    onExpand,
    onFilter,
    globalFilterValue,
    emptyFilteredTableContent,
    filterTypes: filterFunctions,
    expanderCell,
    isRowDisabled,
    rowProps,
    density = "default",
    selectSubRows = true,
    getSubRows,
    selectRowOnClick = true,
    paginatorRenderer,
    pageSize = 25,
    isResizable = false,
    columnResizeMode = "fit",
    styleType = "default",
    enableVirtualization = false,
    enableColumnReordering = false,
    headerWrapperProps,
    headerProps,
    bodyProps,
    tableProps,
    emptyTableContentProps,
    getRowId,
    caption = "Table",
    role,
    scrollToRow,
    useControlledState,
    autoResetExpanded,
    autoResetFilters,
    autoResetGlobalFilter,
    autoResetHiddenColumns,
    autoResetPage,
    autoResetResize,
    autoResetSelectedRows,
    autoResetSortBy,
    defaultCanFilter,
    defaultCanSort,
    defaultColumn: defaultColumnProp,
    disableFilters,
    disableGlobalFilter,
    disableMultiSort,
    disableSortRemove,
    disabledMultiRemove,
    expandSubRows,
    globalFilter,
    initialState,
    isMultiSortEvent,
    manualExpandedKey,
    manualFilters,
    manualGlobalFilter,
    manualRowSelectedKey,
    manualSortBy,
    maxMultiSortColCount,
    orderByFn,
    pageCount,
    sortTypes,
    manualPagination,
    paginateExpandedRows,
    ..._rest
  } = props;
  let { ariaRestAttributes, nonAriaRestAttributes } = reactExports.useMemo(
    () => Object.entries(_rest).reduce(
      (result, [key, value]) => {
        if (key.startsWith("aria-")) result.ariaRestAttributes[key] = value;
        else result.nonAriaRestAttributes[key] = value;
        return result;
      },
      {
        ariaRestAttributes: {},
        nonAriaRestAttributes: {}
      }
    ),
    [_rest]
  );
  let { outerAriaRestAttributes, innerAriaRestAttributes } = reactExports.useMemo(() => {
    if (tableProps || role)
      return {
        outerAriaRestAttributes: {
          ...ariaRestAttributes
        },
        innerAriaRestAttributes: {}
      };
    return {
      outerAriaRestAttributes: {},
      innerAriaRestAttributes: {
        ...ariaRestAttributes
      }
    };
  }, [ariaRestAttributes, role, tableProps]);
  useGlobals();
  let ownerDocument = reactExports.useRef(void 0);
  let defaultColumn = reactExports.useMemo(
    () => ({
      maxWidth: 0,
      minWidth: 0,
      width: 0,
      ...defaultColumnProp
    }),
    [defaultColumnProp]
  );
  let rowHeight = reactExports.useMemo(() => {
    if ("condensed" === density) return 50;
    if ("extra-condensed" === density) return 38;
    return 62;
  }, [density]);
  let onBottomReachedRef = useLatestRef(onBottomReached);
  let onRowInViewportRef = useLatestRef(onRowInViewport);
  let hasManualSelectionColumn = reactExports.useMemo(() => {
    let flatColumns = flattenColumns(columns);
    return flatColumns.some((column) => column.id === SELECTION_CELL_ID);
  }, [columns]);
  let disableUserSelect = reactExports.useCallback((e2) => {
    if ("Shift" === e2.key)
      ownerDocument.current && (ownerDocument.current.documentElement.style.userSelect = "none");
  }, []);
  let enableUserSelect = reactExports.useCallback((e2) => {
    if ("Shift" === e2.key)
      ownerDocument.current && (ownerDocument.current.documentElement.style.userSelect = "");
  }, []);
  reactExports.useEffect(() => {
    if (!isSelectable || "multi" !== selectionMode) return;
    let ownerDoc = ownerDocument.current;
    ownerDoc?.addEventListener("keydown", disableUserSelect);
    ownerDoc?.addEventListener("keyup", enableUserSelect);
    return () => {
      ownerDoc?.removeEventListener("keydown", disableUserSelect);
      ownerDoc?.removeEventListener("keyup", enableUserSelect);
    };
  }, [
    isSelectable,
    selectionMode,
    ownerDocument,
    disableUserSelect,
    enableUserSelect
  ]);
  let previousFilter = reactExports.useRef([]);
  let currentFilter = reactExports.useRef(previousFilter.current);
  let tableStateReducer = reactExports.useCallback(
    (newState, action5, previousState, instance2) => {
      switch (action5.type) {
        case reactTableExports.actions.toggleSortBy:
          onSort?.(newState);
          break;
        case reactTableExports.actions.setFilter:
          currentFilter.current = onFilterHandler(
            newState,
            action5,
            previousState,
            currentFilter.current,
            instance2
          );
          break;
        case reactTableExports.actions.toggleRowExpanded:
        case reactTableExports.actions.toggleAllRowsExpanded:
          onExpandHandler(newState, instance2, onExpand);
          break;
        case singleRowSelectedAction:
          newState = onSingleSelectHandler(
            newState,
            action5,
            instance2,
            onSelect,
            hasManualSelectionColumn ? void 0 : isRowDisabled
          );
          break;
        case shiftRowSelectedAction:
          newState = onShiftSelectHandler(
            newState,
            action5,
            instance2,
            onSelect,
            hasManualSelectionColumn ? void 0 : isRowDisabled
          );
          break;
        case reactTableExports.actions.toggleRowSelected:
        case reactTableExports.actions.toggleAllRowsSelected:
        case reactTableExports.actions.toggleAllPageRowsSelected:
          onToggleHandler(
            newState,
            action5,
            instance2,
            onSelect,
            hasManualSelectionColumn ? void 0 : isRowDisabled
          );
          break;
        case tableResizeStartAction:
          newState = onTableResizeStart(newState);
          break;
        case tableResizeEndAction:
          newState = onTableResizeEnd(newState, action5);
          break;
      }
      return stateReducer ? stateReducer(newState, action5, previousState, instance2) : newState;
    },
    [
      hasManualSelectionColumn,
      isRowDisabled,
      onExpand,
      onSelect,
      onSort,
      stateReducer
    ]
  );
  let filterTypes = reactExports.useMemo(
    () => ({
      ...customFilterFunctions,
      ...filterFunctions
    }),
    [filterFunctions]
  );
  let hasAnySubRows = reactExports.useMemo(
    () => data.some(
      (item, index) => getSubRows ? getSubRows(item, index) : item.subRows
    ),
    [data, getSubRows]
  );
  let getSubRowsWithSubComponents = reactExports.useCallback(
    (originalRow, relativeIndex) => {
      if (originalRow[iuiId]) return [];
      if (originalRow.subRows) return originalRow.subRows;
      return [
        {
          [iuiId]: `subcomponent-${relativeIndex}`,
          ...originalRow
        }
      ];
    },
    []
  );
  let getRowIdWithSubComponents = reactExports.useCallback(
    (originalRow, relativeIndex, parent) => {
      let defaultRowId = parent ? `${parent.id}.${relativeIndex}` : `${relativeIndex}`;
      let rowIdFromUser = getRowId?.(originalRow, relativeIndex, parent);
      if (void 0 !== rowIdFromUser && originalRow[iuiId])
        return `${rowIdFromUser}-${defaultRowId}`;
      return rowIdFromUser ?? defaultRowId;
    },
    [getRowId]
  );
  let instance = reactTableExports.useTable(
    {
      manualPagination: manualPagination ?? !paginatorRenderer,
      paginateExpandedRows: paginateExpandedRows ?? false,
      useControlledState,
      autoResetExpanded,
      autoResetFilters,
      autoResetGlobalFilter,
      autoResetHiddenColumns,
      autoResetPage,
      autoResetResize,
      autoResetSelectedRows,
      autoResetSortBy,
      defaultCanFilter,
      defaultCanSort,
      disableFilters,
      disableGlobalFilter,
      disableMultiSort,
      disableSortRemove,
      disabledMultiRemove,
      expandSubRows,
      globalFilter,
      isMultiSortEvent,
      manualExpandedKey,
      manualFilters,
      manualGlobalFilter,
      manualRowSelectedKey,
      manualSortBy,
      maxMultiSortColCount,
      orderByFn,
      pageCount: pageCount ?? -1,
      sortTypes,
      columns,
      defaultColumn,
      disableSortBy: !isSortable,
      stateReducer: tableStateReducer,
      filterTypes,
      selectSubRows,
      data,
      getSubRows: subComponent ? getSubRowsWithSubComponents : getSubRows,
      initialState: {
        pageSize,
        ...initialState
      },
      columnResizeMode,
      getRowId: subComponent ? getRowIdWithSubComponents : getRowId
    },
    reactTableExports.useFlexLayout,
    useResizeColumns(ownerDocument),
    reactTableExports.useFilters,
    useSubRowFiltering(hasAnySubRows),
    reactTableExports.useGlobalFilter,
    reactTableExports.useSortBy,
    reactTableExports.useExpanded,
    reactTableExports.usePagination,
    reactTableExports.useRowSelect,
    useSubRowSelection,
    useExpanderCell(subComponent, expanderCell, isRowDisabled),
    useSelectionCell(isSelectable, selectionMode, isRowDisabled, density),
    reactTableExports.useColumnOrder,
    useColumnDragAndDrop(enableColumnReordering),
    useStickyColumns
  );
  let {
    getTableProps,
    rows,
    headerGroups: _headerGroups,
    getTableBodyProps,
    prepareRow,
    state: state2,
    allColumns,
    dispatch,
    page,
    gotoPage,
    setPageSize,
    flatHeaders,
    setGlobalFilter
  } = instance;
  let headerGroups = _headerGroups;
  if (1 === columns.length && "columns" in columns[0]) {
    headerGroups = _headerGroups.slice(1);
  }
  let areFiltersSet = allColumns.some(
    (column) => null != column.filterValue && "" !== column.filterValue
  ) || !!globalFilterValue;
  let onRowClickHandler = reactExports.useCallback(
    (event, row) => {
      let isDisabled = isRowDisabled?.(row.original);
      let ctrlPressed = event.ctrlKey || event.metaKey;
      if (!isDisabled) onRowClick?.(event, row);
      if (isSelectable && !isDisabled && selectRowOnClick && !event.isDefaultPrevented())
        if ("multi" === selectionMode && event.shiftKey)
          dispatch({
            type: shiftRowSelectedAction,
            id: row.id,
            ctrlPressed
          });
        else if (row.isSelected || "single" !== selectionMode && ctrlPressed)
          row.toggleRowSelected(!row.isSelected);
        else
          dispatch({
            type: singleRowSelectedAction,
            id: row.id
          });
    },
    [
      isRowDisabled,
      isSelectable,
      selectRowOnClick,
      selectionMode,
      dispatch,
      onRowClick
    ]
  );
  reactExports.useEffect(() => {
    setGlobalFilter(globalFilterValue);
  }, [globalFilterValue, setGlobalFilter]);
  reactExports.useEffect(() => {
    setPageSize(pageSize);
  }, [pageSize, setPageSize]);
  reactExports.useEffect(() => {
    if (previousFilter.current !== currentFilter.current) {
      previousFilter.current = currentFilter.current;
      onFilter?.(currentFilter.current, state2, instance.filteredRows);
    }
  }, [state2, instance.filteredRows, onFilter]);
  let lastPassedColumns = reactExports.useRef([]);
  reactExports.useEffect(() => {
    if (lastPassedColumns.current.length > 0 && JSON.stringify(lastPassedColumns.current) !== JSON.stringify(columns))
      instance.setColumnOrder([]);
    lastPassedColumns.current = columns;
  }, [columns, instance]);
  let paginatorRendererProps = reactExports.useMemo(
    () => ({
      currentPage: state2.pageIndex,
      pageSize: state2.pageSize,
      totalRowsCount: rows.length,
      size: "default" !== density ? "small" : "default",
      isLoading,
      onPageChange: gotoPage,
      onPageSizeChange: setPageSize,
      totalSelectedRowsCount: "single" === selectionMode ? 0 : instance.selectedFlatRows.length
    }),
    [
      density,
      gotoPage,
      isLoading,
      rows.length,
      setPageSize,
      state2.pageIndex,
      state2.pageSize,
      instance.selectedFlatRows,
      selectionMode
    ]
  );
  let tableRef = reactExports.useRef(null);
  let { scrollToIndex, tableRowRef } = useScrollToRow({
    ...props,
    scrollToRow,
    page
  });
  let columnRefs = reactExports.useRef({});
  let previousTableWidth = reactExports.useRef(0);
  let onTableResize = reactExports.useCallback(
    ({ width }) => {
      if (!isResizable) return;
      instance.tableWidth = width;
      if (width === previousTableWidth.current) return;
      previousTableWidth.current = width;
      flatHeaders.forEach((header) => {
        if (columnRefs.current[header.id])
          header.resizeWidth = columnRefs.current[header.id].getBoundingClientRect().width;
      });
      if (0 === Object.keys(state2.columnResizing.columnWidths).length) return;
      dispatch({
        type: tableResizeStartAction
      });
    },
    [
      dispatch,
      state2.columnResizing.columnWidths,
      flatHeaders,
      instance,
      isResizable
    ]
  );
  let [resizeRef] = useResizeObserver(onTableResize);
  useIsomorphicLayoutEffect(() => {
    if (state2.isTableResizing) {
      let newColumnWidths = {};
      flatHeaders.forEach((column) => {
        if (columnRefs.current[column.id])
          newColumnWidths[column.id] = columnRefs.current[column.id].getBoundingClientRect().width;
      });
      dispatch({
        type: tableResizeEndAction,
        columnWidths: newColumnWidths
      });
    }
  });
  let { virtualizer, css: virtualizerCss } = useVirtualScroll({
    enabled: enableVirtualization,
    count: page.length,
    getScrollElement: () => tableRef.current,
    estimateSize: () => rowHeight,
    getItemKey: (index) => page[index].id,
    overscan: 1
  });
  useIsomorphicLayoutEffect(() => {
    if (scrollToIndex)
      virtualizer.scrollToIndex(scrollToIndex, {
        align: "start"
      });
  }, [virtualizer, scrollToIndex]);
  let getPreparedRow = reactExports.useCallback(
    (index, virtualItem, virtualizer2) => {
      let row = page[index];
      prepareRow(row);
      let isRowASubComponent = !!row.original[iuiId] && !!subComponent;
      if (isRowASubComponent)
        return reactExports.createElement(
          TableExpandableContentMemoized,
          {
            key: row.getRowProps().key,
            virtualItem,
            ref: enableVirtualization ? virtualizer2?.measureElement : tableRowRef(row),
            isDisabled: !!isRowDisabled?.(row.original)
          },
          subComponent(row)
        );
      return reactExports.createElement(TableRowMemoized, {
        row,
        rowProps,
        isLast: index === page.length - 1,
        onRowInViewport: onRowInViewportRef,
        onBottomReached: onBottomReachedRef,
        intersectionMargin,
        state: state2,
        key: row.getRowProps().key,
        onClick: onRowClickHandler,
        subComponent,
        isDisabled: !!isRowDisabled?.(row.original),
        tableHasSubRows: hasAnySubRows,
        tableInstance: instance,
        expanderCell,
        scrollContainerRef: tableRef.current,
        tableRowRef: enableVirtualization ? void 0 : tableRowRef(row),
        density,
        virtualItem,
        virtualizer: virtualizer2
      });
    },
    [
      page,
      prepareRow,
      subComponent,
      rowProps,
      onRowInViewportRef,
      onBottomReachedRef,
      intersectionMargin,
      state2,
      onRowClickHandler,
      isRowDisabled,
      hasAnySubRows,
      instance,
      expanderCell,
      enableVirtualization,
      tableRowRef,
      density
    ]
  );
  let updateStickyState = () => {
    if (!tableRef.current || flatHeaders.every((header) => !header.sticky))
      return;
    0 !== tableRef.current.scrollLeft ? dispatch({
      type: reactTableExports.actions.setScrolledRight,
      value: true
    }) : dispatch({
      type: reactTableExports.actions.setScrolledRight,
      value: false
    });
    tableRef.current.scrollLeft !== tableRef.current.scrollWidth - tableRef.current.clientWidth ? dispatch({
      type: reactTableExports.actions.setScrolledLeft,
      value: true
    }) : dispatch({
      type: reactTableExports.actions.setScrolledLeft,
      value: false
    });
  };
  reactExports.useEffect(() => {
    updateStickyState();
  }, []);
  let captionId = useId();
  return reactExports.createElement(
    TableInstanceContext.Provider,
    {
      value: instance
    },
    reactExports.createElement(
      Box,
      {
        ref: useMergedRefs(
          tableRef,
          resizeRef,
          reactExports.useCallback((element) => {
            ownerDocument.current = element?.ownerDocument;
          }, [])
        ),
        id: id2,
        ...getTableProps({
          className: classnames("iui-table", className2),
          style: {
            minWidth: 0,
            ...style
          }
        }),
        role,
        onScroll: () => updateStickyState(),
        "data-iui-size": "default" === density ? void 0 : density,
        ...outerAriaRestAttributes,
        ...nonAriaRestAttributes
      },
      reactExports.createElement(
        ShadowRoot,
        null,
        reactExports.createElement(
          "div",
          {
            role: "table",
            ...innerAriaRestAttributes,
            ...tableProps,
            "aria-labelledby": captionId
          },
          reactExports.createElement(
            VisuallyHidden,
            {
              id: captionId
            },
            caption
          ),
          reactExports.createElement("slot", {
            name: "iui-table-header-wrapper"
          }),
          reactExports.createElement("slot", {
            name: "iui-table-body"
          })
        ),
        reactExports.createElement("slot", {
          name: "iui-table-body-extra"
        }),
        reactExports.createElement("slot", null)
      ),
      headerGroups.map((headerGroup) => {
        headerGroup.headers = headerGroup.headers.filter(
          (header) => !header.id.includes("iui-table-checkbox-selector_placeholder") && !header.id.includes("iui-table-expander_placeholder")
        );
        let headerGroupProps = headerGroup.getHeaderGroupProps({
          className: "iui-table-row"
        });
        return reactExports.createElement(
          Box,
          {
            slot: "iui-table-header-wrapper",
            as: "div",
            key: headerGroupProps.key,
            ...headerWrapperProps,
            className: classnames(
              "iui-table-header-wrapper",
              headerWrapperProps?.className
            )
          },
          reactExports.createElement(
            Box,
            {
              as: "div",
              ...headerProps,
              className: classnames("iui-table-header", headerProps?.className)
            },
            reactExports.createElement(
              Box,
              {
                ...headerGroupProps,
                key: headerGroupProps.key
              },
              headerGroup.headers.map((column, index) => {
                let dragAndDropProps = column.getDragAndDropProps();
                return reactExports.createElement(ColumnHeader, {
                  ...dragAndDropProps,
                  key: dragAndDropProps.key || column.id || index,
                  column,
                  areFiltersSet,
                  columnHasExpanders: hasAnySubRows && index === headerGroup.headers.findIndex(
                    (c) => c.id !== SELECTION_CELL_ID
                  ),
                  isLast: index === headerGroup.headers.length - 1,
                  isTableEmpty: 0 === data.length,
                  isResizable,
                  columnResizeMode,
                  enableColumnReordering,
                  density,
                  ref: (el) => {
                    if (el) columnRefs.current[column.id] = el;
                  }
                });
              })
            )
          )
        );
      }),
      reactExports.createElement(
        Box,
        {
          slot: "iui-table-body",
          as: "div",
          ...bodyProps,
          ...getTableBodyProps({
            className: classnames(
              "iui-table-body",
              {
                "iui-zebra-striping": "zebra-rows" === styleType
              },
              bodyProps?.className
            )
          }),
          role: void 0
        },
        reactExports.createElement(
          ShadowRoot,
          {
            css: virtualizerCss,
            flush: false
          },
          enableVirtualization && 0 !== data.length ? reactExports.createElement(
            "div",
            {
              "data-iui-virtualizer": "root",
              style: {
                minBlockSize: virtualizer.getTotalSize()
              }
            },
            reactExports.createElement("slot", null)
          ) : reactExports.createElement("slot", null)
        ),
        0 !== data.length && reactExports.createElement(
          reactExports.Fragment,
          null,
          enableVirtualization ? virtualizer.getVirtualItems().map(
            (virtualItem) => getPreparedRow(virtualItem.index, virtualItem, virtualizer)
          ) : page.map((_, index) => getPreparedRow(index))
        )
      ),
      isLoading && 0 === data.length && reactExports.createElement(
        TableBodyExtraWrapper,
        null,
        reactExports.createElement(
          TableEmptyWrapper,
          emptyTableContentProps,
          reactExports.createElement(ProgressRadial, {
            indeterminate: true
          })
        )
      ),
      !isLoading && 0 === data.length && !areFiltersSet && reactExports.createElement(
        TableBodyExtraWrapper,
        null,
        reactExports.createElement(
          TableEmptyWrapper,
          emptyTableContentProps,
          reactExports.createElement("div", null, emptyTableContent)
        )
      ),
      !isLoading && (0 === data.length || 0 === rows.length) && areFiltersSet && reactExports.createElement(
        TableBodyExtraWrapper,
        null,
        reactExports.createElement(
          TableEmptyWrapper,
          emptyTableContentProps,
          reactExports.createElement("div", null, emptyFilteredTableContent)
        )
      ),
      isLoading && 0 !== data.length && reactExports.createElement(
        TableBodyExtraWrapper,
        {
          "data-iui-loading": "true"
        },
        reactExports.createElement(ProgressRadial, {
          indeterminate: true,
          size: "small"
        })
      ),
      paginatorRenderer?.(paginatorRendererProps)
    )
  );
};
let TableBodyExtraWrapper = reactExports.forwardRef((props, ref) => {
  let { children, ...rest } = props;
  return reactExports.createElement(
    Box,
    {
      as: "div",
      ref,
      slot: "iui-table-body-extra",
      ...rest,
      className: classnames("iui-table-body-extra", rest.className)
    },
    children
  );
});
let TableEmptyWrapper = reactExports.forwardRef((props, ref) => {
  let { children, ...rest } = props;
  return reactExports.createElement(
    Box,
    {
      as: "div",
      ref,
      ...rest,
      className: classnames("iui-table-empty", rest.className)
    },
    children
  );
});
const Divider = reactExports.forwardRef((props, ref) => {
  let { className: className2, orientation = "horizontal", ...rest } = props;
  return reactExports.createElement(Box, {
    as: "hr",
    className: classnames("iui-divider", className2),
    "aria-orientation": "vertical" === orientation ? "vertical" : void 0,
    ref,
    ...rest
  });
});
function isProperSubclassOf(subclass, superclass) {
  return subclass.prototype instanceof superclass;
}
function isSubclassOf(subclass, superclass) {
  return subclass === superclass || isProperSubclassOf(subclass, superclass);
}
class Entry {
  key;
  value;
  newer;
  older;
  constructor(key, value) {
    this.key = key;
    this.value = value;
  }
}
class EntryIterator {
  _entry;
  constructor(oldestEntry) {
    this._entry = oldestEntry;
  }
  next() {
    const ent = this._entry;
    if (!ent)
      return { done: true, value: void 0 };
    this._entry = ent.newer;
    const val = [ent.key, ent.value];
    return { done: false, value: val };
  }
}
class KeyIterator {
  _entry;
  constructor(oldestEntry) {
    this._entry = oldestEntry;
  }
  next() {
    const ent = this._entry;
    if (!ent)
      return { done: true, value: void 0 };
    this._entry = ent.newer;
    return { done: false, value: ent.key };
  }
}
class ValueIterator {
  _entry;
  constructor(oldestEntry) {
    this._entry = oldestEntry;
  }
  next() {
    const ent = this._entry;
    if (!ent)
      return { done: true, value: void 0 };
    this._entry = ent.newer;
    return { done: false, value: ent.value };
  }
}
class LRUCache {
  _container;
  /** Current number of items */
  size;
  /** Maximum number of items this cache can hold */
  limit;
  /** Least recently-used entry. Invalidated when cache is modified. */
  oldest;
  /** Most recently-used entry. Invalidated when cache is modified. */
  newest;
  /**
   * Construct a new LRUCache to hold up to `limit` entries.
   */
  constructor(limit, container2) {
    this.size = 0;
    this.limit = limit;
    this.oldest = this.newest = void 0;
    this._container = container2;
  }
  markEntryAsUsed(entry) {
    if (entry === this.newest)
      return;
    if (entry.newer) {
      if (entry === this.oldest) {
        this.oldest = entry.newer;
      }
      entry.newer.older = entry.older;
    }
    if (entry.older) {
      entry.older.newer = entry.newer;
    }
    entry.newer = void 0;
    entry.older = this.newest;
    if (this.newest) {
      this.newest.newer = entry;
    }
    this.newest = entry;
  }
  /**  Replace all values in this cache with key-value pairs (2-element Arrays) from provided iterable. */
  assign(entries) {
    let entry;
    let limit = this.limit || Number.MAX_VALUE;
    this._container.clear();
    const it = entries[Symbol.iterator]();
    for (let itv = it.next(); !itv.done; itv = it.next()) {
      const e2 = new Entry(itv.value[0], itv.value[1]);
      this._container.set(e2.key, e2);
      if (!entry) {
        this.oldest = e2;
      } else {
        entry.newer = e2;
        e2.older = entry;
      }
      entry = e2;
      if (limit-- === 0) {
        throw new Error("overflow");
      }
    }
    this.newest = entry;
    this.size = this._container.size;
  }
  /** Get and register recent use of <key>.
   *  Returns the value associated with <key> or undefined if not in cache.
   */
  get(key) {
    const entry = this._container.get(key);
    if (!entry)
      return;
    this.markEntryAsUsed(entry);
    return entry.value;
  }
  /** Put <value> into the cache associated with <key>. Replaces any existing entry with the same key.
   *  @returns `this`.
   */
  set(key, value) {
    let entry = this._container.get(key);
    if (entry) {
      entry.value = value;
      this.markEntryAsUsed(entry);
      return this;
    }
    this._container.set(key, entry = new Entry(key, value));
    if (this.newest) {
      this.newest.newer = entry;
      entry.older = this.newest;
    } else {
      this.oldest = entry;
    }
    this.newest = entry;
    ++this.size;
    if (this.size > this.limit) {
      this.shift();
    }
    return this;
  }
  /**  Purge the least recently used (oldest) entry from the cache.
   *  @returns The removed entry or undefined if the cache was empty.
   */
  shift() {
    const entry = this.oldest;
    if (entry) {
      if (entry.newer) {
        this.oldest = entry.newer;
        this.oldest.older = void 0;
      } else {
        this.oldest = void 0;
        this.newest = void 0;
      }
      entry.newer = entry.older = void 0;
      this._container.delete(entry.key);
      --this.size;
      return [entry.key, entry.value];
    }
    return void 0;
  }
  /** Access value for `key` without registering recent use. Useful if you do not
   *  want to change the state of the cache, but only "peek" at it.
   *  @returns The value associated with `key` if found, or undefined if not found.
   */
  find(key) {
    const e2 = this._container.get(key);
    return e2 ? e2.value : void 0;
  }
  /** Check if there's a value for key in the cache without registering recent use. */
  has(key) {
    return this._container.has(key);
  }
  /**  Remove entry `key` from cache and return its value.
   *  @returns The removed value, or undefined if not found.
   */
  delete(key) {
    const entry = this._container.get(key);
    if (!entry)
      return;
    this._container.delete(entry.key);
    if (entry.newer && entry.older) {
      entry.older.newer = entry.newer;
      entry.newer.older = entry.older;
    } else if (entry.newer) {
      entry.newer.older = void 0;
      this.oldest = entry.newer;
    } else if (entry.older) {
      entry.older.newer = void 0;
      this.newest = entry.older;
    } else {
      this.oldest = this.newest = void 0;
    }
    this.size--;
    return entry.value;
  }
  /**  Removes all entries */
  clear() {
    this.oldest = this.newest = void 0;
    this.size = 0;
    this._container.clear();
  }
  /** Returns an iterator over all keys, starting with the oldest. */
  keys() {
    return this.oldest ? new KeyIterator(this.oldest) : void 0;
  }
  /** Returns an iterator over all values, starting with the oldest. */
  values() {
    return this.oldest ? new ValueIterator(this.oldest) : void 0;
  }
  /** Returns an iterator over all entries, starting with the oldest. */
  entries() {
    return this.oldest ? new EntryIterator(this.oldest) : void 0;
  }
  /**  Call `fun` for each entry, starting with the oldest entry. */
  forEach(fun, thisObj) {
    if (typeof thisObj !== "object") {
      thisObj = this;
    }
    let entry = this.oldest;
    while (entry) {
      fun.call(thisObj, entry.value, entry.key, this);
      entry = entry.newer;
    }
  }
  /** Returns a JSON (array) representation */
  toJSON() {
    const s = new Array(this.size);
    let i = 0;
    let entry = this.oldest;
    while (entry) {
      s[i++] = { key: entry.key, value: entry.value };
      entry = entry.newer;
    }
    return s;
  }
  /** Returns a String representation */
  toString() {
    let s = "";
    let entry = this.oldest;
    while (entry) {
      s += `${String(entry.key)}:${entry.value}`;
      entry = entry.newer;
      if (entry) {
        s += " < ";
      }
    }
    return s;
  }
}
class LRUMap extends LRUCache {
  /**
   * Construct a new LRUMap to hold up to `limit` entries.
   */
  constructor(limit) {
    super(limit, /* @__PURE__ */ new Map());
  }
}
class LRUDictionary extends LRUCache {
  /**
   * Construct a new LRUDictionary to hold up to `limit` entries.
   * @param limit The maximum number of entries permitted in the dictionary.
   * @param compareKeys The function used to compare keys within the dictionary.
   */
  constructor(limit, compareKeys) {
    super(limit, new Dictionary(compareKeys));
  }
}
class TupleKeyedMap {
  _map = /* @__PURE__ */ new Map();
  // argument types match those of Map
  constructor(entries) {
    if (entries)
      for (const [k, v] of entries) {
        this.set(k, v);
      }
  }
  clear() {
    return this._map.clear();
  }
  makeKeyError() {
    return Error("A Bad key was used, it didn't match the key type of the the map.");
  }
  get(key) {
    let cursor = this._map;
    for (const subkey of key) {
      if (!(cursor instanceof Map))
        throw this.makeKeyError();
      cursor = cursor.get(subkey);
      if (cursor === void 0)
        return void 0;
    }
    if (cursor instanceof Map)
      throw this.makeKeyError();
    return cursor;
  }
  has(key) {
    return this.get(key) !== void 0;
  }
  set(key, value) {
    let cursor = this._map;
    for (let i = 0; i < key.length - 1; ++i) {
      const subkey = key[i];
      let next = cursor.get(subkey);
      if (next === void 0) {
        next = /* @__PURE__ */ new Map();
        cursor.set(subkey, next);
      }
      cursor = next;
    }
    const finalSubkey = key[key.length - 1];
    if (!(cursor instanceof Map))
      throw this.makeKeyError();
    cursor.set(finalSubkey, value);
    this._size++;
    return this;
  }
  *[Symbol.iterator]() {
    function* impl(map2, keyPrefix) {
      for (const [k, v] of map2) {
        const nextKey = [...keyPrefix, k];
        if (v instanceof Map) {
          yield* impl(v, nextKey);
        } else {
          yield [nextKey, v];
        }
      }
    }
    yield* impl(this._map, []);
  }
  _size = 0;
  get size() {
    return this._size;
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
}
const defaultYieldManagerOptions = {
  iterationsBeforeYield: 1e3
};
class YieldManager {
  /** Options controlling the yield behavior. */
  options;
  _counter = 0;
  /** Constructor.
   * @param options Options customizing the yield behavior. Omitted properties are assigned their default values.
   */
  constructor(options = {}) {
    this.options = { ...defaultYieldManagerOptions, ...options };
  }
  /** Increment the iteration counter, yielding control and resetting the counter if [[options.iterationsBeforeYield]] is exceeded. */
  async allowYield() {
    this._counter = (this._counter + 1) % this.options.iterationsBeforeYield;
    if (this._counter === 0) {
      await this.actualYield();
    }
  }
  async actualYield() {
    await new Promise((r) => setTimeout(r, 0));
  }
}
const coreBentley = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AbandonedError,
  BeDuration,
  BeEvent,
  BeEventList,
  BeTimePoint,
  BeUiEvent,
  BentleyError,
  get BentleyLoggerCategory() {
    return BentleyLoggerCategory;
  },
  get BentleyStatus() {
    return BentleyStatus;
  },
  get BriefcaseStatus() {
    return BriefcaseStatus;
  },
  ByteStream,
  get ChangeSetStatus() {
    return ChangeSetStatus;
  },
  get CompressedId64Set() {
    return CompressedId64Set;
  },
  get DbChangeStage() {
    return DbChangeStage;
  },
  get DbConflictCause() {
    return DbConflictCause;
  },
  get DbConflictResolution() {
    return DbConflictResolution;
  },
  get DbOpcode() {
    return DbOpcode;
  },
  get DbResult() {
    return DbResult;
  },
  get DbValueType() {
    return DbValueType;
  },
  Dictionary,
  DisposableList,
  get DuplicatePolicy() {
    return DuplicatePolicy;
  },
  Entry,
  ErrorCategory,
  get GeoServiceStatus() {
    return GeoServiceStatus;
  },
  get Guid() {
    return Guid;
  },
  get HttpStatus() {
    return HttpStatus;
  },
  get IModelHubStatus() {
    return IModelHubStatus;
  },
  get IModelStatus() {
    return IModelStatus;
  },
  get ITwinError() {
    return ITwinError;
  },
  get Id64() {
    return Id64;
  },
  IndexMap,
  IndexedValue,
  get JsonUtils() {
    return JsonUtils;
  },
  LRUCache,
  LRUDictionary,
  LRUMap,
  get LogLevel() {
    return LogLevel;
  },
  Logger,
  MutableCompressedId64Set,
  ObservableSet,
  OneAtATimeAction,
  get OpenMode() {
    return OpenMode;
  },
  OrderedId64Array,
  get OrderedId64Iterable() {
    return OrderedId64Iterable;
  },
  OrderedSet,
  PerfLogger,
  PriorityQueue,
  ProcessDetector,
  ReadonlyOrderedSet,
  ReadonlySortedArray,
  get RealityDataStatus() {
    return RealityDataStatus;
  },
  get RepositoryStatus() {
    return RepositoryStatus;
  },
  get RpcInterfaceStatus() {
    return RpcInterfaceStatus;
  },
  SortedArray,
  get SpanKind() {
    return SpanKind;
  },
  StatusCategory,
  StopWatch,
  SuccessCategory,
  Tracing,
  TransientIdSequence,
  TupleKeyedMap,
  TypedArrayBuilder,
  Uint16ArrayBuilder,
  Uint32ArrayBuilder,
  Uint8ArrayBuilder,
  UintArrayBuilder,
  UnexpectedErrors,
  YieldManager,
  areEqualPossiblyUndefined,
  asInstanceOf,
  assert,
  base64StringToUint8Array,
  compareArrays,
  compareBooleans,
  compareBooleansOrUndefined,
  compareNumbers,
  compareNumbersOrUndefined,
  comparePossiblyUndefined,
  compareSimpleArrays,
  compareSimpleTypes,
  compareStrings,
  compareStringsOrUndefined,
  compareWithTolerance,
  dispose,
  disposeArray,
  isDisposable,
  isIDisposable,
  isInstanceOf,
  isProperSubclassOf,
  isSubclassOf,
  lowerBound,
  omit,
  partitionArray,
  shallowClone,
  using,
  utf8ToString
}, Symbol.toStringTag, { value: "Module" }));
class TextAnnotation {
  /** The rotation of the annotation.
   * @note When defining an annotation for a [TextAnnotation2d]($backend), only the `yaw` component (rotation around the Z axis) is used.
   */
  orientation;
  /** The formatted document. */
  textBlock;
  /** Describes how to compute the [[textBlock]]'s anchor point. */
  anchor;
  /** An offset applied to the anchor point that can be used to position annotations within the same geometry stream relative to one another. */
  offset;
  /** The leaders of the text annotation. */
  leaders;
  constructor(offset, angles, textBlock, anchor, leaders) {
    this.offset = offset;
    this.orientation = angles;
    this.textBlock = textBlock;
    this.anchor = anchor;
    this.leaders = leaders;
  }
  /** Creates a new TextAnnotation. */
  static create(args) {
    const offset = args?.offset ?? new Point3d();
    const angles = args?.orientation ?? new YawPitchRollAngles();
    const textBlock = args?.textBlock ?? TextBlock.createEmpty();
    const anchor = args?.anchor ?? { vertical: "top", horizontal: "left" };
    const leaders = args?.leaders ?? void 0;
    return new TextAnnotation(offset, angles, textBlock, anchor, leaders);
  }
  /**
   * Creates a new TextAnnotation instance from its JSON representation.
   */
  static fromJSON(props) {
    return TextAnnotation.create({
      offset: props?.offset ? Point3d.fromJSON(props.offset) : void 0,
      orientation: props?.orientation ? YawPitchRollAngles.fromJSON(props.orientation) : void 0,
      textBlock: props?.textBlock ? TextBlock.create(props.textBlock) : void 0,
      anchor: props?.anchor ? { ...props.anchor } : void 0,
      leaders: props?.leaders ? props.leaders.map((leader) => ({
        startPoint: Point3d.fromJSON(leader.startPoint),
        attachment: leader.attachment,
        styleOverrides: leader.styleOverrides ?? void 0,
        intermediatePoints: leader.intermediatePoints ? leader.intermediatePoints.map((point) => Point3d.fromJSON(point)) : void 0
      })) : void 0
    });
  }
  /**
   * Converts this annotation to its JSON representation.
   */
  toJSON() {
    const props = {};
    props.textBlock = this.textBlock.toJSON();
    if (!this.offset.isZero) {
      props.offset = this.offset.toJSON();
    }
    if (!this.orientation.isIdentity()) {
      props.orientation = this.orientation.toJSON();
    }
    if (this.anchor.vertical !== "top" || this.anchor.horizontal !== "left") {
      props.anchor = { ...this.anchor };
    }
    props.leaders = this.leaders?.map((leader) => ({
      startPoint: leader.startPoint.toJSON(),
      attachment: leader.attachment,
      styleOverrides: leader.styleOverrides ?? void 0,
      intermediatePoints: leader.intermediatePoints ? leader.intermediatePoints.map((point) => point.toJSON()) : void 0
    })) ?? void 0;
    return props;
  }
  /** Compute the transform that positions and orients this annotation relative to its anchor point, based on the [[textBlock]]'s computed bounding box.
   * The anchor point is computed as specified by this annotation's [[anchor]] setting. For example, if the text block is anchored
   * at the bottom left, then the transform will be relative to the bottom-left corner of `textBlockExtents`.
   * The text block will be rotated around the fixed anchor point according to [[orientation]], then translated by [[offset]].
   * The anchor point will coincide with (0, 0, 0) unless an [[offset]] is present.
   * If a scale factor is specified, the transform will also scale the annotation by that factor. Usually, this should come from the [[Drawing]] containing the annotation.
   * @param boundingBox A box fully containing the [[textBlock]]. This range should include the margins.
   * @param scaleFactor A factor by which to scale the annotation. Default: 1 (no scaling).
   * @see [[computeAnchorPoint]] to compute the transform's anchor point.
   * @see [computeLayoutTextBlockResult]($backend) to lay out a `TextBlock`.
   */
  computeTransform(boundingBox, scaleFactor = 1) {
    const anchorPt = this.computeAnchorPoint(boundingBox);
    const matrix = this.orientation.toMatrix3d();
    const transform = Transform.createIdentity();
    const translation = Transform.createTranslation(this.offset.minus(anchorPt));
    const scaleTransform = Transform.createScaleAboutPoint(anchorPt, scaleFactor);
    const rotation = Transform.createFixedPointAndMatrix(anchorPt, matrix);
    transform.multiplyTransformTransform(translation, transform);
    transform.multiplyTransformTransform(scaleTransform, transform);
    transform.multiplyTransformTransform(rotation, transform);
    return transform;
  }
  /** Compute the anchor point of this annotation as specified by [[anchor]].
   * @param boundingBox A box fully containing the [[textBlock]].
   * @see [[computeTransform]] to compute the transform relative to the anchor point.
   */
  computeAnchorPoint(boundingBox) {
    let x = boundingBox.low.x;
    let y = boundingBox.high.y;
    switch (this.anchor.horizontal) {
      case "center":
        x += boundingBox.xLength() / 2;
        break;
      case "right":
        x += boundingBox.xLength();
        break;
    }
    switch (this.anchor.vertical) {
      case "middle":
        y -= boundingBox.yLength() / 2;
        break;
      case "bottom":
        y -= boundingBox.yLength();
        break;
    }
    return new Point3d(x, y, 0);
  }
  /** Returns true if the leaders of this annotation are equal to the leaders of `other`. */
  areLeadersEqual(leadersA, leadersB) {
    if (leadersA === leadersB)
      return true;
    if (!leadersA || !leadersB || leadersA.length !== leadersB.length)
      return false;
    for (let i = 0; i < leadersA.length; ++i) {
      const a = leadersA[i];
      const b = leadersB[i];
      if (!a.startPoint.isAlmostEqual(b.startPoint))
        return false;
      if (JSON.stringify(a.attachment) !== JSON.stringify(b.attachment))
        return false;
      if (JSON.stringify(a.styleOverrides) !== JSON.stringify(b.styleOverrides))
        return false;
      const pointsA = a.intermediatePoints ?? [];
      const pointsB = b.intermediatePoints ?? [];
      if (pointsA.length !== pointsB.length)
        return false;
      for (let j = 0; j < pointsA.length; ++j) {
        if (!pointsA[j].isAlmostEqual(pointsB[j]))
          return false;
      }
    }
    return true;
  }
  /** Returns true if this annotation is logically equivalent to `other`. */
  equals(other) {
    if (this.anchor.horizontal !== other.anchor.horizontal || this.anchor.vertical !== other.anchor.vertical || !this.orientation.isAlmostEqual(other.orientation) || !this.offset.isAlmostEqual(other.offset) || !this.textBlock.equals(other.textBlock))
      return false;
    return this.areLeadersEqual(this.leaders, other.leaders);
  }
}
function nextChunk(stream) {
  if (stream.remainingLength < 8) {
    stream.curPos = stream.length;
    return void 0;
  }
  const chars = [stream.readUint8(), stream.readUint8(), stream.readUint8(), stream.readUint8()];
  if (chars.some((c) => c < 65 || c > 90))
    return void 0;
  const dataLength = stream.readUint32();
  const data = dataLength > 0 ? stream.nextBytes(dataLength) : void 0;
  return {
    type: String.fromCharCode(...chars),
    data
  };
}
function readElementMeshes(data) {
  const polyfaces = [];
  const stream = ByteStream.fromUint8Array(data);
  const firstChunk = nextChunk(stream);
  if (!firstChunk || "LMSH" !== firstChunk.type)
    return polyfaces;
  while (stream.remainingLength > 0) {
    const chunk = nextChunk(stream);
    if (!chunk || chunk.type !== "PLFC" || !chunk.data)
      continue;
    try {
      const geom = BentleyGeometryFlatBuffer.bytesToGeometry(chunk.data, true);
      if (geom instanceof IndexedPolyface)
        polyfaces.push(geom);
    } catch {
    }
  }
  return polyfaces;
}
function isBuffer$1(val) {
  return val && typeof val.constructor !== "undefined" && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
let parts = [];
class IpcWebSocketTransport {
  _partial;
  _received = [];
  _outstanding = 0;
  unwrap(data) {
    return typeof Blob !== "undefined" && data instanceof Blob ? data.arrayBuffer() : data;
  }
  async notifyIncoming(data, connection) {
    if (this._partial) {
      this._received.push(data);
      --this._outstanding;
      if (this._outstanding === 0) {
        const partial = this._partial;
        const received = this._received;
        this._partial = void 0;
        this._received = [];
        await Promise.all(received.map(async (v, i, a) => a[i] = await this.unwrap(v)));
        parts = received;
        const message = JSON.parse(partial, reviver);
        parts.length = 0;
        return InSentOrder.deliver(message, connection);
      } else {
        return IpcWebSocketMessage.internal();
      }
    } else {
      const [serialized, followers] = JSON.parse(data);
      if (followers) {
        this._partial = serialized;
        this._outstanding = followers;
        return IpcWebSocketMessage.internal();
      } else {
        const message = JSON.parse(serialized, reviver);
        return InSentOrder.deliver(message, connection);
      }
    }
  }
  serialize(data) {
    parts.length = 0;
    const objects = JSON.stringify(data, replacer);
    const value = [JSON.stringify([objects, parts.length]), ...parts];
    parts.length = 0;
    return value;
  }
  notifyClose(connection) {
    InSentOrder.close(connection);
  }
}
const types$2 = [Uint8Array, Int8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, DataView];
function identify(value) {
  return isBuffer$1(value) ? 0 : types$2.indexOf(value.constructor);
}
function lookup$1(value) {
  return types$2[value.type];
}
function replacer(_key, value) {
  const asBinary = replaceBinary(value);
  if (asBinary) {
    return asBinary;
  }
  return value;
}
function reviver(_key, value) {
  if (typeof value === "object" && value !== null && value.hasOwnProperty("ipc") && value.ipc === "binary") {
    return reviveBinary(value);
  }
  return value;
}
function replaceBinary(value) {
  if (ArrayBuffer.isView(value) || isBuffer$1(value)) {
    const index = parts.push(value) - 1;
    const type = identify(value);
    return { ipc: "binary", type, index };
  } else {
    return void 0;
  }
}
function reviveBinary(value) {
  const constructor = lookup$1(value);
  const part = parts[value.index];
  return new constructor(part);
}
function makePromise() {
  let resolve = () => {
  };
  let reject = () => {
  };
  const promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return { promise, resolve, reject };
}
class InSentOrder {
  static _connections = /* @__PURE__ */ new Map();
  static async deliver(message, connection) {
    let context2 = this._connections.get(connection);
    if (!context2) {
      context2 = { queue: [], last: -1 };
      this._connections.set(connection, context2);
    }
    const entry = new InSentOrder(message);
    context2.queue.push(entry);
    context2.queue.sort((a, b) => a.sequence - b.sequence);
    while (context2.queue.length !== 0) {
      const next = context2.queue[0];
      const duplicate = next.sequence <= context2.last;
      const match = next.sequence === context2.last + 1;
      if (duplicate) {
        next.duplicate = true;
      } else if (match) {
        ++context2.last;
      }
      if (duplicate || match) {
        context2.queue.shift();
        next.release();
      } else {
        break;
      }
    }
    return entry.message;
  }
  static close(connection) {
    this._connections.delete(connection);
  }
  release = () => {
  };
  sequence;
  duplicate = false;
  message;
  constructor(message) {
    this.sequence = message.sequence;
    const { promise, resolve } = makePromise();
    this.message = promise;
    this.release = () => {
      const value = this.duplicate ? IpcWebSocketMessage.duplicate() : message;
      resolve(value);
    };
  }
}
class RpcPushTransport {
  onMessage;
}
class RpcPushService {
  /** The push service for the dedicated backend (for example, an electron or mobile app). */
  static dedicated = new RpcPushService("dedicated");
  name;
  constructor(name) {
    this.name = name;
  }
}
class RpcPushChannel {
  /** @internal */
  static enabled = false;
  static _channels = /* @__PURE__ */ new Map();
  static setup(transport) {
    transport.onMessage = RpcPushChannel.notifySubscribers.bind(RpcPushChannel);
    RpcPushChannel.enabled = true;
  }
  static notifySubscribers(channelId, messageData) {
    const channel = this._channels.get(channelId);
    if (!channel)
      return;
    for (const subscriber of channel._subscribers)
      subscriber.onMessage.raiseEvent(messageData);
  }
  _subscribers = [];
  name;
  service;
  get id() {
    return RpcPushChannel.formatId(this.name, this.service);
  }
  get enabled() {
    return RpcPushChannel.enabled;
  }
  subscribe() {
    const subscription = new RpcPushSubscription(this);
    this._subscribers.push(subscription);
    return subscription;
  }
  static formatId(name, service) {
    return `${service.name}-${name}`;
  }
  constructor(name, service) {
    this.name = name;
    this.service = service;
  }
  /** Creates a new RpcPushChannel.
   * @throws IModelError if a channel with the specified name and service already exist.
   */
  static create(name, service = RpcPushService.dedicated) {
    return this.get(name, service, false);
  }
  /** Obtains an RpcPushChannel, creating it if one with the specified name and service does not already exists. */
  static obtain(name, service = RpcPushService.dedicated) {
    return this.get(name, service, true);
  }
  static get(name, service, reuseExisting) {
    const id2 = this.formatId(name, service);
    let channel = this._channels.get(id2);
    if (channel) {
      if (!reuseExisting)
        throw new IModelError(BentleyStatus.ERROR, `Channel "${id2}" already exists.`);
      ++channel._refCount;
      return channel;
    }
    channel = new RpcPushChannel(name, service);
    this._channels.set(id2, channel);
    return channel;
  }
  _refCount = 1;
  dispose() {
    if (this.isDisposed)
      return;
    assert(this._refCount > 0);
    if (--this._refCount === 0) {
      RpcPushChannel._channels.delete(this.id);
      this._subscribers.length = 0;
    }
  }
  get isDisposed() {
    return 0 === this._refCount;
  }
}
class RpcPushSubscription {
  channel;
  onMessage = new BeEvent();
  /** @internal */
  constructor(channel) {
    this.channel = channel;
  }
}
class RpcPushConnection {
  static for(_channel, _client = void 0) {
    throw new IModelError(BentleyStatus.ERROR, "Not implemented.");
  }
  channel;
  client;
  constructor(channel, client2) {
    this.channel = channel;
    this.client = client2;
  }
}
class TestRpcManager {
  static initialize(interfaces) {
    const config = class extends RpcDefaultConfiguration {
      interfaces = () => interfaces;
    };
    for (const def of interfaces)
      RpcConfiguration.assign(def, () => RpcDefaultConfiguration);
    const instance = RpcConfiguration.obtain(config);
    RpcConfiguration.initializeInterfaces(instance);
  }
}
class BentleyCloudRpcConfiguration extends RpcConfiguration {
  /** Access-Control header values for backend servers that serve frontends using BentleyCloudRpcProtocol. */
  static accessControl = {
    allowOrigin: "*",
    allowMethods: "POST, GET, OPTIONS",
    allowHeaders: "Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With, X-Correlation-Id, X-Session-Id, X-Application-Id, X-Application-Version, X-User-Id, X-Protocol-Version"
  };
}
class BentleyCloudRpcManager extends RpcManager {
  /** @beta Initializes BentleyCloudRpcManager for the frontend of an application. */
  static initializeClient(params, interfaces, routing = RpcRoutingToken.default) {
    return BentleyCloudRpcManager.performInitialization(params, interfaces, routing);
  }
  /** @beta Initializes BentleyCloudRpcManager for the backend of an application. */
  static initializeImpl(params, interfaces) {
    return BentleyCloudRpcManager.performInitialization(params, interfaces);
  }
  static performInitialization(params, interfaces, routing = RpcRoutingToken.default) {
    const protocol = class extends (params.protocol || BentleyCloudRpcProtocol) {
      pathPrefix = params.uriPrefix || "";
      info = params.info;
    };
    const config = class extends BentleyCloudRpcConfiguration {
      interfaces = () => interfaces;
      protocol = new protocol(this);
      routing = routing;
    };
    for (const def of interfaces) {
      RpcConfiguration.assignWithRouting(def, routing, config);
    }
    const instance = RpcConfiguration.obtain(config);
    if (params.pathPrefix) {
      instance.protocol.pathPrefix = params.pathPrefix;
    }
    RpcConfiguration.initializeInterfaces(instance);
    if (params.pendingRequestListener) {
      const listener = params.pendingRequestListener;
      RpcRequest.events.addListener((type, request2) => {
        if (type === RpcRequestEvent.PendingUpdateReceived && request2.protocol === instance.protocol) {
          listener(type, request2);
        }
      });
    }
    return instance;
  }
}
const coreCommon = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AdditionalTransform,
  AffineTransform,
  AmbientLight,
  get AmbientOcclusion() {
    return AmbientOcclusion;
  },
  AnalysisStyle,
  AnalysisStyleDisplacement,
  AnalysisStyleThematic,
  get AreaPattern() {
    return AreaPattern;
  },
  get Atmosphere() {
    return Atmosphere;
  },
  B3dmHeader,
  get BRepEntity() {
    return BRepEntity;
  },
  get BRepGeometryOperation() {
    return BRepGeometryOperation;
  },
  BackendError,
  get BackgroundFill() {
    return BackgroundFill;
  },
  BackgroundMapProvider,
  BackgroundMapSettings,
  get BackgroundMapType() {
    return BackgroundMapType;
  },
  get Base64EncodedString() {
    return Base64EncodedString;
  },
  get BaseLayerSettings() {
    return BaseLayerSettings;
  },
  BaseMapLayerSettings,
  get BatchType() {
    return BatchType;
  },
  BentleyCloudRpcConfiguration,
  BentleyCloudRpcManager,
  BentleyCloudRpcProtocol,
  get BisCodeSpec() {
    return BisCodeSpec;
  },
  BlobOptionsBuilder,
  BoundingSphere,
  get BriefcaseIdValue() {
    return BriefcaseIdValue;
  },
  CURRENT_INVOCATION,
  CURRENT_REQUEST,
  Camera,
  Carto2DDegrees,
  Cartographic,
  CartographicRange,
  get CatalogError() {
    return CatalogError;
  },
  get CesiumIonAssetId() {
    return CesiumIonAssetId;
  },
  get CesiumTerrainAssetId() {
    return CesiumTerrainAssetId;
  },
  get ChangeOpCode() {
    return ChangeOpCode;
  },
  get ChangedValueState() {
    return ChangedValueState;
  },
  get ChangesetType() {
    return ChangesetType;
  },
  get ChannelControlError() {
    return ChannelControlError;
  },
  ClipIntersectionStyle,
  ClipStyle,
  get CloudSqliteError() {
    return CloudSqliteError;
  },
  Code,
  get CodeScopeSpec() {
    return CodeScopeSpec;
  },
  CodeSpec,
  ColorByName,
  ColorDef,
  ColorIndex,
  get CommonLoggerCategory() {
    return CommonLoggerCategory;
  },
  CompositeTileHeader,
  get ConcreteEntityTypes() {
    return ConcreteEntityTypes;
  },
  ConflictingLocksError,
  get ContentFlags() {
    return ContentFlags;
  },
  ContentIdProvider,
  ContextRealityModel,
  get ContextRealityModelProps() {
    return ContextRealityModelProps;
  },
  ContextRealityModels,
  Contour,
  ContourDisplay,
  ContourGroup,
  ContourStyle,
  get CurrentImdlVersion() {
    return CurrentImdlVersion;
  },
  CutStyle,
  DbQueryError,
  get DbRequestKind() {
    return DbRequestKind;
  },
  get DbResponseKind() {
    return DbResponseKind;
  },
  get DbResponseStatus() {
    return DbResponseStatus;
  },
  get DbValueFormat() {
    return DbValueFormat;
  },
  get DefaultSupportedTypes() {
    return DefaultSupportedTypes;
  },
  DevToolsRpcInterface,
  get DevToolsStatsOptions() {
    return DevToolsStatsOptions;
  },
  DisplayStyle3dSettings,
  DisplayStyleSettings,
  get DomainOptions() {
    return DomainOptions;
  },
  ECJsNames,
  ECSqlReader,
  get ECSqlSystemProperty() {
    return ECSqlSystemProperty;
  },
  get ECSqlValueType() {
    return ECSqlValueType;
  },
  Easing,
  EcefLocation,
  EdgeArgs,
  get ElementGeometry() {
    return ElementGeometry;
  },
  get ElementGeometryChange() {
    return ElementGeometryChange;
  },
  get ElementGeometryOpcode() {
    return ElementGeometryOpcode;
  },
  EmptyLocalization,
  EntityMetaData,
  EntityReferenceSet,
  Environment,
  get ExternalSourceAttachmentRole() {
    return ExternalSourceAttachmentRole;
  },
  Feature,
  FeatureAppearance,
  get FeatureAppearanceProvider() {
    return FeatureAppearanceProvider;
  },
  FeatureIndex,
  get FeatureIndexType() {
    return FeatureIndexType;
  },
  get FeatureOverrideType() {
    return FeatureOverrideType;
  },
  FeatureOverrides,
  FeatureTable,
  FeatureTableHeader,
  FieldRun,
  get FillDisplay() {
    return FillDisplay;
  },
  get FillFlags() {
    return FillFlags;
  },
  FontMap,
  get FontType() {
    return FontType;
  },
  FractionRun,
  FresnelSettings,
  Frustum,
  get FrustumPlanes() {
    return FrustumPlanes;
  },
  get GenericInstanceFilter() {
    return GenericInstanceFilter;
  },
  get GenericInstanceFilterRuleValue() {
    return GenericInstanceFilterRuleValue;
  },
  get GeoCoordStatus() {
    return GeoCoordStatus;
  },
  GeocentricTransform,
  GeodeticDatum,
  GeodeticEllipsoid,
  GeodeticTransform,
  GeodeticTransformPath,
  GeographicCRS,
  get GeometryClass() {
    return GeometryClass;
  },
  GeometryParams,
  GeometryStreamBuilder,
  get GeometryStreamFlags() {
    return GeometryStreamFlags;
  },
  GeometryStreamIterator,
  get GeometrySummaryVerbosity() {
    return GeometrySummaryVerbosity;
  },
  GlbHeader,
  get GlobeMode() {
    return GlobeMode;
  },
  get GltfV2ChunkTypes() {
    return GltfV2ChunkTypes;
  },
  get GltfVersions() {
    return GltfVersions;
  },
  get Gradient() {
    return Gradient;
  },
  GraphicParams,
  GridFileDefinition,
  GridFileTransform,
  get GridOrientationType() {
    return GridOrientationType;
  },
  GroundPlane,
  HSLColor,
  HSVColor,
  get HSVConstants() {
    return HSVConstants;
  },
  Helmert2DWithZOffset,
  HemisphereLights,
  get HiddenLine() {
    return HiddenLine;
  },
  get Hilite() {
    return Hilite;
  },
  HorizontalCRS,
  HorizontalCRSExtent,
  I3dmHeader,
  IModel,
  IModelError,
  IModelNotFoundResponse,
  IModelReadRpcInterface,
  IModelTileRpcInterface,
  IModelVersion,
  INSTANCE,
  ImageBuffer,
  get ImageBufferFormat() {
    return ImageBufferFormat;
  },
  ImageGraphic,
  ImageGraphicCorners,
  ImageMapLayerSettings,
  ImageSource,
  get ImageSourceFormat() {
    return ImageSourceFormat;
  },
  get ImdlFlags() {
    return ImdlFlags;
  },
  ImdlHeader,
  get InternetConnectivityStatus() {
    return InternetConnectivityStatus;
  },
  Interpolation,
  IpcSession,
  IpcWebSocket,
  IpcWebSocketBackend,
  IpcWebSocketFrontend,
  get IpcWebSocketMessage() {
    return IpcWebSocketMessage;
  },
  get IpcWebSocketMessageType() {
    return IpcWebSocketMessageType;
  },
  IpcWebSocketTransport,
  LightSettings,
  LineBreakRun,
  get LinePixels() {
    return LinePixels;
  },
  get LineStyle() {
    return LineStyle;
  },
  get LockState() {
    return LockState;
  },
  MapImagerySettings,
  MapLayerSettings,
  MapSubLayerSettings,
  get MarshalingBinaryMarker() {
    return MarshalingBinaryMarker;
  },
  get MassPropertiesOperation() {
    return MassPropertiesOperation;
  },
  MeshEdge,
  MeshEdges,
  MeshPolyline,
  ModelClipGroup,
  ModelClipGroups,
  get ModelFeature() {
    return ModelFeature;
  },
  get ModelGeometryChanges() {
    return ModelGeometryChanges;
  },
  get ModelMapLayerDrapeTarget() {
    return ModelMapLayerDrapeTarget;
  },
  ModelMapLayerSettings,
  get MonochromeMode() {
    return MonochromeMode;
  },
  MultiModelPackedFeatureTable,
  NoContentError,
  NonUniformColor,
  get NormalMapFlags() {
    return NormalMapFlags;
  },
  get Npc() {
    return Npc;
  },
  NpcCenter,
  NpcCorners,
  OPERATION,
  OctEncodedNormal,
  OctEncodedNormalPair,
  get OverriddenBy() {
    return OverriddenBy;
  },
  POLICY,
  get PackedFeature() {
    return PackedFeature;
  },
  PackedFeatureModelTable,
  PackedFeatureTable,
  Paragraph,
  Placement2d,
  Placement3d,
  PlanProjectionSettings,
  get PlanarClipMaskMode() {
    return PlanarClipMaskMode;
  },
  get PlanarClipMaskPriority() {
    return PlanarClipMaskPriority;
  },
  PlanarClipMaskSettings,
  PntsHeader,
  PointCloudDisplaySettings,
  PolylineEdgeArgs,
  get PolylineTypeFlags() {
    return PolylineTypeFlags;
  },
  PositionalVectorTransform,
  get PrimitiveTypeCode() {
    return PrimitiveTypeCode;
  },
  get ProfileOptions() {
    return ProfileOptions;
  },
  Projection,
  PropertyMetaData,
  PropertyMetaDataMap,
  QParams2d,
  QParams3d,
  QPoint2d,
  get QPoint2dBuffer() {
    return QPoint2dBuffer;
  },
  QPoint2dBufferBuilder,
  QPoint2dList,
  QPoint3d,
  get QPoint3dBuffer() {
    return QPoint3dBuffer;
  },
  QPoint3dBufferBuilder,
  QPoint3dList,
  get Quantization() {
    return Quantization;
  },
  QueryBinder,
  QueryOptionsBuilder,
  get QueryParamType() {
    return QueryParamType;
  },
  get QueryRowFormat() {
    return QueryRowFormat;
  },
  REGISTRY,
  get Rank() {
    return Rank;
  },
  get RealityDataFormat() {
    return RealityDataFormat;
  },
  get RealityDataProvider() {
    return RealityDataProvider;
  },
  get RealityDataSourceKey() {
    return RealityDataSourceKey;
  },
  RealityModelDisplaySettings,
  RelatedElement,
  RenderMaterial,
  RenderMaterialParams,
  get RenderMode() {
    return RenderMode;
  },
  get RenderSchedule() {
    return RenderSchedule;
  },
  get RenderTexture() {
    return RenderTexture;
  },
  RenderTextureParams,
  ResponseLike,
  RgbColor,
  RpcConfiguration,
  get RpcContentType() {
    return RpcContentType;
  },
  RpcControlChannel,
  RpcControlResponse,
  RpcDefaultConfiguration,
  RpcDirectProtocol,
  RpcDirectRequest,
  get RpcEndpoint() {
    return RpcEndpoint;
  },
  RpcInterface,
  RpcInvocation,
  RpcManager,
  RpcMarshaling,
  RpcMultipart,
  RpcNotFoundResponse,
  RpcOpenAPIDescription,
  get RpcOperation() {
    return RpcOperation;
  },
  RpcOperationPolicy,
  RpcPendingQueue,
  RpcPendingResponse,
  RpcProtocol,
  get RpcProtocolEvent() {
    return RpcProtocolEvent;
  },
  get RpcProtocolVersion() {
    return RpcProtocolVersion;
  },
  RpcPushChannel,
  RpcPushConnection,
  RpcPushService,
  RpcPushSubscription,
  RpcPushTransport,
  RpcRegistry,
  RpcRequest,
  get RpcRequestEvent() {
    return RpcRequestEvent;
  },
  get RpcRequestFulfillment() {
    return RpcRequestFulfillment;
  },
  get RpcRequestStatus() {
    return RpcRequestStatus;
  },
  get RpcResponseCacheControl() {
    return RpcResponseCacheControl;
  },
  get RpcRoutingMap() {
    return RpcRoutingMap;
  },
  RpcRoutingToken,
  get RpcSerializedValue() {
    return RpcSerializedValue;
  },
  RpcSessionInvocation,
  get Run() {
    return Run;
  },
  get SchemaState() {
    return SchemaState;
  },
  get SectionType() {
    return SectionType;
  },
  ServerError,
  ServerTimeoutError,
  SilhouetteEdgeArgs,
  SkyBox,
  get SkyBoxImageType() {
    return SkyBoxImageType;
  },
  SkyCube,
  SkyGradient,
  SkySphere,
  SnapshotIModelRpcInterface,
  SolarLight,
  SolarShadowSettings,
  SpatialClassifier,
  SpatialClassifierFlags,
  get SpatialClassifierInsideDisplay() {
    return SpatialClassifierInsideDisplay;
  },
  get SpatialClassifierOutsideDisplay() {
    return SpatialClassifierOutsideDisplay;
  },
  SpatialClassifiers,
  get SqliteError() {
    return SqliteError;
  },
  SubCategoryAppearance,
  SubCategoryOverride,
  get SyncMode() {
    return SyncMode;
  },
  TabRun,
  get TerrainHeightOriginMode() {
    return TerrainHeightOriginMode;
  },
  TerrainSettings,
  TestRpcManager,
  TextAnnotation,
  TextBlock,
  TextBlockComponent,
  TextRun,
  TextString,
  TextStyleSettings,
  get TextureMapUnits() {
    return TextureMapUnits;
  },
  get TextureMapping() {
    return TextureMapping;
  },
  get TextureTransparency() {
    return TextureTransparency;
  },
  ThematicDisplay,
  get ThematicDisplayMode() {
    return ThematicDisplayMode;
  },
  ThematicDisplaySensor,
  ThematicDisplaySensorSettings,
  get ThematicGradientColorScheme() {
    return ThematicGradientColorScheme;
  },
  get ThematicGradientMode() {
    return ThematicGradientMode;
  },
  ThematicGradientSettings,
  get ThematicGradientTransparencyMode() {
    return ThematicGradientTransparencyMode;
  },
  get TileContentSource() {
    return TileContentSource;
  },
  get TileFormat() {
    return TileFormat;
  },
  TileHeader,
  TileMetadataReader,
  get TileOptions() {
    return TileOptions;
  },
  TileReadError,
  get TileReadStatus() {
    return TileReadStatus;
  },
  get TreeFlags() {
    return TreeFlags;
  },
  Tween,
  Tweens,
  get TxnAction() {
    return TxnAction;
  },
  TypeDefinition,
  get TypeOfChange() {
    return TypeOfChange;
  },
  VerticalCRS,
  ViewDetails,
  ViewDetails3d,
  ViewFlags,
  get ViewStoreError() {
    return ViewStoreError;
  },
  get ViewStoreRpc() {
    return ViewStoreRpc;
  },
  WEB_RPC_CONSTANTS,
  WebAppRpcLogging,
  WebAppRpcProtocol,
  WebAppRpcRequest,
  WhiteOnWhiteReversalSettings,
  get WorkspaceError() {
    return WorkspaceError;
  },
  XyzRotation,
  aggregateLoad,
  bisectTileRange2d,
  bisectTileRange3d,
  calculateSolarAngles,
  calculateSolarDirection,
  calculateSolarDirectionFromAngles,
  calculateSunriseOrSunset,
  compareIModelTileTreeIds,
  computeChildTileProps,
  computeChildTileRanges,
  computeTileChordTolerance,
  decodeTileContentDescription,
  defaultTileOptions,
  getMaximumMajorTileFormatVersion,
  getPullChangesIpcChannel,
  getTileObjectReference,
  iModelTileTreeIdToString,
  iTwinChannel,
  initializeRpcRequest,
  ipcAppChannels,
  isBinaryImageSource,
  isKnownTileFormat,
  isPlacement2dProps,
  isPlacement3dProps,
  isPowerOfTwo,
  isValidImageSourceFormat,
  mapToGeoServiceStatus,
  nativeAppIpcStrings,
  nextHighestPowerOfTwo,
  nextPoint3d64FromByteStream,
  parseTileTreeIdAndContentId,
  readElementMeshes,
  readTileContentDescription,
  rpcOverIpcStrings,
  textAnnotationFrameShapes,
  tileFormatFromNumber
}, Symbol.toStringTag, { value: "Module" }));
const SvgDetails = (props) => {
  return reactExports.createElement(
    "svg",
    { viewBox: "0 0 16 16", width: "1rem", height: "1rem", fill: "var(--iui-color-icon-muted, currentColor)", ...props },
    reactExports.createElement("path", { d: "M13 0H3a1 1 0 00-1 1v14a1 1 0 001 1h10a1 1 0 001-1V1a1 1 0 00-1-1zM5 13H4v-1h1zm0-3H4V9h1zm0-3H4V6h1zm0-3H4V3h1zm7 9H7v-1h5zm0-3H7V9h5zm0-3H7V6h5zm0-3H7V3h5z" })
  );
};
function FloatingViewportContent(props) {
  const { viewportControl } = useFloatingViewport(props);
  return reactExports.createElement(FloatingViewportContentWrapper, null, viewportControl);
}
function FloatingViewportContentWrapper({ children }) {
  return reactExports.createElement(
    "div",
    { className: "uifw-dialog-imodel-content", style: { height: "100%", position: "relative" } },
    reactExports.createElement(ContentWrapper, { content: children, style: { height: "100%", position: "relative" }, contentIndex: void 0 })
  );
}
function useFloatingViewport(args) {
  const { contentId, initialViewState, onContextMenu, viewportRef } = args;
  const [viewport, setViewport] = reactExports.useState();
  const contentControl = reactExports.useRef(void 0);
  const viewState = reactExports.useMemo(() => typeof initialViewState === "function" ? initialViewState() : initialViewState, [initialViewState]);
  const ref = reactExports.useCallback((v) => {
    setViewport(v);
  }, []);
  const refs = useRefs(ref, viewportRef);
  const viewportControl = reactExports.useMemo(() => {
    const node = reactExports.createElement(ViewportComponent, { key: contentId, imodel: viewState.iModel, viewState, controlId: contentId, onContextMenu, viewportRef: refs });
    return node;
  }, [refs, onContextMenu, viewState, contentId]);
  reactExports.useEffect(() => {
    if (!contentControl.current) {
      contentControl.current = new FloatingViewportContentControl(contentId, contentId, null);
      UiFramework.content.addFloatingContentControl(contentControl.current);
    }
    return () => {
      if (contentControl.current) {
        UiFramework.content.dropFloatingContentControl(contentControl.current);
        contentControl.current = void 0;
      }
    };
  }, [contentId]);
  reactExports.useEffect(() => {
    if (viewport && contentControl.current) {
      contentControl.current.viewport = viewport;
      if (null === contentControl.current.reactNode) {
        contentControl.current.reactNode = viewportControl;
      }
    }
  }, [viewport, viewportControl]);
  reactExports.useEffect(() => {
    return IModelApp.viewManager.onViewClose.addListener((vp) => {
      if (contentControl.current?.viewport === vp) {
        UiFramework.content.dropFloatingContentControl(contentControl.current);
        contentControl.current = void 0;
      }
    });
  }, []);
  return {
    viewportControl
  };
}
class ViewStateHelper {
  /** Create a ViewState from the SavedView */
  static async viewStateFromProps(iModelConnection, savedViewProps) {
    const className2 = savedViewProps.viewDefinitionProps.classFullName;
    const ctor = await iModelConnection.findClassFor(className2, void 0);
    if (void 0 === ctor)
      throw new Error(`Invalid ViewState class name of [${className2}]`);
    const viewState = ctor.createFromProps(savedViewProps, iModelConnection);
    await viewState.load();
    return viewState;
  }
  /** Apply EmphasizeElements from the SavedView */
  static emphasizeElementsFromProps(vp, savedViewProps) {
    let changed = false;
    if (savedViewProps.emphasizeElementsProps) {
      const emphasizeElements = new EmphasizeElements();
      changed = emphasizeElements.fromJSON(savedViewProps.emphasizeElementsProps, vp);
    }
    return changed;
  }
  /** Create props for a ViewState */
  static viewStateToProps(viewState) {
    const savedViewProps = viewState.toProps();
    savedViewProps.bisBaseClass = ViewUtilities.getBisBaseClass(viewState.classFullName);
    return savedViewProps;
  }
  /** Create props for an EmphasizeElements and store in SavedViewProps */
  static emphasizeElementsToProps(vp, savedViewProps) {
    const ee = EmphasizeElements.get(vp);
    const emphasizeElementsProps = ee ? ee.toJSON(vp) : void 0;
    savedViewProps.emphasizeElementsProps = emphasizeElementsProps;
  }
}
class StageContentLayout {
  /** Create props for a View Layout */
  static viewLayoutToProps(contentLayoutDef, contentGroup, emphasizeElements = false, contentCallback) {
    const contentLayoutProps = contentLayoutDef.toJSON();
    const contentGroupProps = {
      ...contentGroup.toJSON(contentCallback),
      layout: contentLayoutProps
    };
    const viewStateProps = new Array();
    const viewports = contentGroup.getViewports();
    for (const viewport of viewports) {
      if (viewport) {
        const savedViewProps = ViewStateHelper.viewStateToProps(viewport.view);
        if (emphasizeElements)
          ViewStateHelper.emphasizeElementsToProps(viewport, savedViewProps);
        viewStateProps.push(savedViewProps);
      }
    }
    const savedViewLayoutProps = {
      contentGroupProps,
      viewStateProps
    };
    return savedViewLayoutProps;
  }
  /** Create an array of ViewStates from the StageContentLayout */
  static async viewStatesFromProps(iModelConnection, savedProps) {
    const viewStates = new Array();
    if (savedProps.viewStateProps) {
      for (const savedViewProps of savedProps.viewStateProps) {
        const viewState = await ViewStateHelper.viewStateFromProps(iModelConnection, savedViewProps);
        viewStates.push(viewState);
      }
    }
    return viewStates;
  }
  /** Apply EmphasizeElements from the SavedView */
  static emphasizeElementsFromProps(contentGroup, savedProps) {
    const changedList = new Array();
    const viewports = contentGroup.getViewports();
    let index = 0;
    for (const savedViewProps of savedProps.viewStateProps) {
      const viewport = viewports[index];
      if (viewport) {
        const changed = ViewStateHelper.emphasizeElementsFromProps(viewport, savedViewProps);
        changedList.push(changed);
      }
      index++;
    }
    return changedList.some((changed) => changed);
  }
}
class AppNotificationManager extends NotificationManager {
  /** Output a prompt, given an i18n key.
   */
  outputPromptByKey(key) {
    this.outputPrompt(UiFramework.translate(key));
  }
  /** Output a prompt to the user. A 'prompt' indicates an action the user should take to proceed.
   */
  outputPrompt(prompt) {
    MessageManager.outputPrompt(prompt);
    const mainInstruction = ToolAssistance.createInstruction("", prompt);
    const instructions = ToolAssistance.createInstructions(mainInstruction);
    MessageManager.setToolAssistance(instructions);
  }
  /** Output a message and/or alert to the user. */
  outputMessage(message) {
    MessageManager.outputMessage(message);
  }
  /** Output a MessageBox and wait for response from the user.
   * @param mbType       The MessageBox type.
   * @param message      The message to display.
   * @param icon         The MessageBox icon type.
   * @return the response from the user.
   */
  async openMessageBox(mbType, message, icon) {
    return MessageManager.openMessageBox(mbType, message, icon);
  }
  /**
   * Set up for activity messages.
   * @param details  The activity message details.
   * @return true if the message was displayed, false if an invalid priority is specified.
   */
  setupActivityMessage(details) {
    return MessageManager.setupActivityMessageDetails(details);
  }
  /**
   * Output an activity message to the user.
   * @param messageText      The message text.
   * @param percentComplete  The percentage of completion.
   * @return true if the message was displayed, false if the message could not be displayed.
   */
  outputActivityMessage(messageText, percentComplete) {
    return MessageManager.setupActivityMessageValues(messageText, percentComplete);
  }
  /**
   * End an activity message.
   * @param reason       Reason for the end of the Activity Message.
   * @return true if the message was ended successfully, false if the activityMessage could not be ended.
   */
  endActivityMessage(reason) {
    let result = false;
    switch (reason) {
      case ActivityMessageEndReason.Completed:
        result = MessageManager.endActivityMessage(true);
        break;
      case ActivityMessageEndReason.Cancelled:
        result = MessageManager.endActivityMessage(false);
        break;
    }
    return result;
  }
  /** Update message position created with [[OutputMessageType.Pointer]].
   * @param displayPoint        Point at which to display the Pointer type message.
   * @param relativePosition    Position relative to displayPoint at which to display the Pointer type message.
   */
  updatePointerMessage(displayPoint, relativePosition) {
    PointerMessage.updateMessage(displayPoint, relativePosition);
  }
  /** Hides the Pointer message. */
  closePointerMessage() {
    PointerMessage.hideMessage();
  }
  /** Return true if _showTooltip has an implementation and will display a tooltip. */
  get isToolTipSupported() {
    return true;
  }
  /** Return true if the tooltip is currently open. */
  get isToolTipOpen() {
    return ElementTooltip.isTooltipVisible;
  }
  /** Clear the ToolTip if it is currently open. If not open, does nothing. */
  clearToolTip() {
    if (this.isToolTipOpen)
      ElementTooltip.hideTooltip();
  }
  /** Show a ToolTip window.
   * @param el       The HTMLElement that anchors the toolTip.
   * @param message  The message to display inside the ToolTip
   * @param pt       An optional location, relative to the origin of el, for the ToolTip. If undefined, center of el.
   * @param options  Options that supply additional information about how the ToolTip should function.
   */
  _showToolTip(el, message, pt, options) {
    ElementTooltip.showTooltip(el, message, pt, options);
  }
  /** Hide a InputField message. */
  closeInputFieldMessage() {
    MessageManager.hideInputFieldMessage();
  }
  /** Setup tool assistance instructions for a tool. The instructions include the main instruction, which includes the current prompt.
   * @param instructions The tool assistance instructions.
   * @public
   */
  setToolAssistance(instructions) {
    MessageManager.outputPrompt(instructions ? instructions.mainInstruction.text : "");
    MessageManager.setToolAssistance(instructions);
  }
}
class FrameworkToolAdmin extends ToolAdmin {
  async processShortcutKey(e2, wentDown) {
    if (!wentDown)
      return false;
    if (UiFramework.isContextMenuOpen)
      return false;
    if (e2.key === Key_enumExports.Key.Escape.valueOf())
      return false;
    if (isElement$1(e2.target) && isEditable(e2.target))
      return false;
    UiFramework.keyboardShortcuts.processKey(e2.key, e2.altKey, e2.ctrlKey, e2.shiftKey);
    return true;
  }
}
function isElement$1(target) {
  return target instanceof Element;
}
const editableTags = ["input", "textarea", "select"];
function isEditable(element) {
  const tagName = element.tagName.toLowerCase();
  return editableTags.includes(tagName);
}
var AccessTokenAdapter = {};
const require$$0$2 = /* @__PURE__ */ getAugmentedNamespace(coreBentley);
const require$$1 = /* @__PURE__ */ getAugmentedNamespace(coreCommon);
var hasRequiredAccessTokenAdapter;
function requireAccessTokenAdapter() {
  if (hasRequiredAccessTokenAdapter) return AccessTokenAdapter;
  hasRequiredAccessTokenAdapter = 1;
  Object.defineProperty(AccessTokenAdapter, "__esModule", { value: true });
  AccessTokenAdapter.AccessTokenAdapter = void 0;
  const core_bentley_1 = require$$0$2;
  const core_common_1 = require$$1;
  let AccessTokenAdapter$1 = class AccessTokenAdapter2 {
    static toAuthorization(accessToken) {
      const splitAccessToken = accessToken.split(" ");
      if (splitAccessToken.length !== 2)
        throw new core_common_1.IModelError(core_bentley_1.RepositoryStatus.InvalidRequest, "Unsupported access token format");
      return {
        scheme: splitAccessToken[0],
        token: splitAccessToken[1]
      };
    }
    static toAuthorizationCallback(accessToken) {
      if (typeof accessToken === "function") {
        return async () => {
          const token = await accessToken();
          return AccessTokenAdapter2.toAuthorization(token);
        };
      } else {
        return async () => AccessTokenAdapter2.toAuthorization(accessToken);
      }
    }
  };
  AccessTokenAdapter.AccessTokenAdapter = AccessTokenAdapter$1;
  return AccessTokenAdapter;
}
var AccessTokenAdapterExports = requireAccessTokenAdapter();
var ChangesetFunctions = {};
var IModelState;
(function(IModelState2) {
  IModelState2["NotInitialized"] = "notInitialized";
  IModelState2["Initialized"] = "initialized";
})(IModelState || (IModelState = {}));
var ContainerTypes;
(function(ContainerTypes2) {
  ContainerTypes2[ContainerTypes2["None"] = 0] = "None";
  ContainerTypes2[ContainerTypes2["SchemaSync"] = 1] = "SchemaSync";
  ContainerTypes2[ContainerTypes2["CodeStore"] = 2] = "CodeStore";
  ContainerTypes2[ContainerTypes2["ViewStore"] = 4] = "ViewStore";
})(ContainerTypes || (ContainerTypes = {}));
var ChangesetState;
(function(ChangesetState2) {
  ChangesetState2["WaitingForFile"] = "waitingForFile";
  ChangesetState2["FileUploaded"] = "fileUploaded";
})(ChangesetState || (ChangesetState = {}));
var ContainingChanges;
(function(ContainingChanges2) {
  ContainingChanges2[ContainingChanges2["Regular"] = 0] = "Regular";
  ContainingChanges2[ContainingChanges2["Schema"] = 1] = "Schema";
  ContainingChanges2[ContainingChanges2["Definition"] = 2] = "Definition";
  ContainingChanges2[ContainingChanges2["SpatialData"] = 4] = "SpatialData";
  ContainingChanges2[ContainingChanges2["SheetsAndDrawings"] = 8] = "SheetsAndDrawings";
  ContainingChanges2[ContainingChanges2["ViewsAndModels"] = 16] = "ViewsAndModels";
  ContainingChanges2[ContainingChanges2["GlobalProperties"] = 32] = "GlobalProperties";
  ContainingChanges2[ContainingChanges2["SchemaSync"] = 64] = "SchemaSync";
})(ContainingChanges || (ContainingChanges = {}));
var ChangesetGroupState;
(function(ChangesetGroupState2) {
  ChangesetGroupState2["InProgress"] = "inProgress";
  ChangesetGroupState2["Completed"] = "completed";
  ChangesetGroupState2["TimedOut"] = "timedOut";
  ChangesetGroupState2["ForciblyClosed"] = "forciblyClosed";
})(ChangesetGroupState || (ChangesetGroupState = {}));
var NamedVersionState;
(function(NamedVersionState2) {
  NamedVersionState2["Visible"] = "visible";
  NamedVersionState2["Hidden"] = "hidden";
})(NamedVersionState || (NamedVersionState = {}));
var CheckpointState;
(function(CheckpointState2) {
  CheckpointState2["Successful"] = "successful";
  CheckpointState2["Scheduled"] = "scheduled";
  CheckpointState2["Failed"] = "failed";
  CheckpointState2["NotGenerated"] = "notGenerated";
})(CheckpointState || (CheckpointState = {}));
var ThumbnailSize;
(function(ThumbnailSize2) {
  ThumbnailSize2["Small"] = "small";
  ThumbnailSize2["Large"] = "large";
})(ThumbnailSize || (ThumbnailSize = {}));
var IModelPermission;
(function(IModelPermission2) {
  IModelPermission2["WebView"] = "imodels_webview";
  IModelPermission2["Read"] = "imodels_read";
  IModelPermission2["Write"] = "imodels_write";
  IModelPermission2["Manage"] = "imodels_manage";
  IModelPermission2["Delete"] = "imodels-delete";
})(IModelPermission || (IModelPermission = {}));
var IModelCreationState;
(function(IModelCreationState2) {
  IModelCreationState2["Successful"] = "successful";
  IModelCreationState2["WaitingForFile"] = "waitingForFile";
  IModelCreationState2["Scheduled"] = "scheduled";
  IModelCreationState2["Failed"] = "failed";
  IModelCreationState2["MainIModelIsMissingFederationGuids"] = "mainIModelIsMissingFederationGuids";
})(IModelCreationState || (IModelCreationState = {}));
async function* map(iterator2, mapFunc) {
  for await (const entity of iterator2)
    yield mapFunc(entity);
}
async function* flatten(pagedIterator) {
  for await (const entityChunk of pagedIterator)
    for (const entity of entityChunk)
      yield entity;
}
async function toArray$1(iterator2) {
  const result = [];
  for await (const entity of iterator2)
    result.push(entity);
  return result;
}
async function take(iterator2, entityCount) {
  const result = [];
  for await (const entity of iterator2) {
    result.push(entity);
    if (result.length === entityCount)
      break;
  }
  return result;
}
var ContentType;
(function(ContentType2) {
  ContentType2["Json"] = "application/json";
  ContentType2["Png"] = "image/png";
  ContentType2["Jpeg"] = "image/jpeg";
})(ContentType || (ContentType = {}));
var OrderByOperator;
(function(OrderByOperator2) {
  OrderByOperator2["Ascending"] = "asc";
  OrderByOperator2["Descending"] = "desc";
})(OrderByOperator || (OrderByOperator = {}));
var PreferReturn;
(function(PreferReturn2) {
  PreferReturn2["Minimal"] = "minimal";
  PreferReturn2["Representation"] = "representation";
})(PreferReturn || (PreferReturn = {}));
var IModelsErrorCode;
(function(IModelsErrorCode2) {
  IModelsErrorCode2["BaselineFileInitializationFailed"] = "BaselineFileInitializationFailed";
  IModelsErrorCode2["BaselineFileInitializationTimedOut"] = "BaselineFileInitializationTimedOut";
  IModelsErrorCode2["BaselineFileNotFound"] = "BaselineFileNotFound";
  IModelsErrorCode2["BriefcaseNotFound"] = "BriefcaseNotFound";
  IModelsErrorCode2["ChangesetDownloadFailed"] = "ChangesetDownloadFailed";
  IModelsErrorCode2["ChangesetExists"] = "ChangesetExists";
  IModelsErrorCode2["ChangesetExtendedDataNotFound"] = "ChangesetExtendedDataNotFound";
  IModelsErrorCode2["ChangesetGroupNotFound"] = "ChangesetGroupNotFound";
  IModelsErrorCode2["ChangesetNotFound"] = "ChangesetNotFound";
  IModelsErrorCode2["CheckpointNotFound"] = "CheckpointNotFound";
  IModelsErrorCode2["ClonedIModelInitializationFailed"] = "ClonedIModelInitializationFailed";
  IModelsErrorCode2["ClonedIModelInitializationTimedOut"] = "ClonedIModelInitializationTimedOut";
  IModelsErrorCode2["ConflictWithAnotherUser"] = "ConflictWithAnotherUser";
  IModelsErrorCode2["DataConflict"] = "DataConflict";
  IModelsErrorCode2["DownloadAborted"] = "DownloadAborted";
  IModelsErrorCode2["EmptyIModelInitializationFailed"] = "EmptyIModelInitializationFailed";
  IModelsErrorCode2["FileNotFound"] = "FileNotFound";
  IModelsErrorCode2["IModelExists"] = "iModelExists";
  IModelsErrorCode2["IModelForkInitializationFailed"] = "IModelForkInitializationFailed";
  IModelsErrorCode2["IModelForkInitializationTimedOut"] = "IModelForkInitializationTimedOut";
  IModelsErrorCode2["IModelFromTemplateInitializationFailed"] = "IModelFromTemplateInitializationFailed";
  IModelsErrorCode2["IModelFromTemplateInitializationTimedOut"] = "IModelFromTemplateInitializationTimedOut";
  IModelsErrorCode2["IModelNotFound"] = "iModelNotFound";
  IModelsErrorCode2["InsufficientPermissions"] = "InsufficientPermissions";
  IModelsErrorCode2["InvalidChange"] = "InvalidChange";
  IModelsErrorCode2["InvalidHeaderValue"] = "InvalidHeaderValue";
  IModelsErrorCode2["InvalidIModelGCSCreationMode"] = "InvalidIModelGCSCreationMode";
  IModelsErrorCode2["InvalidIModelsRequest"] = "InvalidiModelsRequest";
  IModelsErrorCode2["InvalidRequestBody"] = "InvalidRequestBody";
  IModelsErrorCode2["InvalidThumbnailFormat"] = "InvalidThumbnailFormat";
  IModelsErrorCode2["InvalidValue"] = "InvalidValue";
  IModelsErrorCode2["ITwinNotFound"] = "iTwinNotFound";
  IModelsErrorCode2["LockNotFound"] = "LockNotFound";
  IModelsErrorCode2["MainIModelIsMissingFederationGuids"] = "MainIModelIsMissingFederationGuids";
  IModelsErrorCode2["MaximumNumberOfBriefcasesPerUser"] = "MaximumNumberOfBriefcasesPerUser";
  IModelsErrorCode2["MissingRequestBody"] = "MissingRequestBody";
  IModelsErrorCode2["MissingRequiredHeader"] = "MissingRequiredHeader";
  IModelsErrorCode2["MissingRequiredParameter"] = "MissingRequiredParameter";
  IModelsErrorCode2["MissingRequiredProperty"] = "MissingRequiredProperty";
  IModelsErrorCode2["MutuallyExclusiveParametersProvided"] = "MutuallyExclusiveParametersProvided";
  IModelsErrorCode2["MutuallyExclusivePropertiesProvided"] = "MutuallyExclusivePropertiesProvided";
  IModelsErrorCode2["NamedVersionNotFound"] = "NamedVersionNotFound";
  IModelsErrorCode2["NamedVersionOnChangesetExists"] = "NamedVersionOnChangesetExists";
  IModelsErrorCode2["NewerChangesExist"] = "NewerChangesExist";
  IModelsErrorCode2["RateLimitExceeded"] = "RateLimitExceeded";
  IModelsErrorCode2["RequestTooLarge"] = "RequestTooLarge";
  IModelsErrorCode2["ResourceQuotaExceeded"] = "ResourceQuotaExceeded";
  IModelsErrorCode2["TooManyRequests"] = "TooManyRequests";
  IModelsErrorCode2["Unauthorized"] = "Unauthorized";
  IModelsErrorCode2["Unknown"] = "Unknown";
  IModelsErrorCode2["Unrecognized"] = "Unrecognized";
  IModelsErrorCode2["UserNotFound"] = "UserNotFound";
  IModelsErrorCode2["VersionExists"] = "NamedVersionExists";
})(IModelsErrorCode || (IModelsErrorCode = {}));
function isIModelsApiError(error) {
  const errorCode = error?.code;
  return errorCode !== void 0 && typeof errorCode === "string";
}
var IModelOrderByProperty;
(function(IModelOrderByProperty2) {
  IModelOrderByProperty2["Name"] = "name";
  IModelOrderByProperty2["CreatedDateTime"] = "createdDateTime";
})(IModelOrderByProperty || (IModelOrderByProperty = {}));
const SPECIAL_VALUES_ME = "me";
var BriefcaseOrderByProperty;
(function(BriefcaseOrderByProperty2) {
  BriefcaseOrderByProperty2["AcquiredDateTime"] = "acquiredDateTime";
})(BriefcaseOrderByProperty || (BriefcaseOrderByProperty = {}));
var ChangesetOrderByProperty;
(function(ChangesetOrderByProperty2) {
  ChangesetOrderByProperty2["Index"] = "index";
})(ChangesetOrderByProperty || (ChangesetOrderByProperty = {}));
var NamedVersionOrderByProperty;
(function(NamedVersionOrderByProperty2) {
  NamedVersionOrderByProperty2["ChangesetIndex"] = "changesetIndex";
  NamedVersionOrderByProperty2["CreatedDateTime"] = "createdDateTime";
})(NamedVersionOrderByProperty || (NamedVersionOrderByProperty = {}));
var UserOrderByProperty;
(function(UserOrderByProperty2) {
  UserOrderByProperty2["GivenName"] = "givenName";
  UserOrderByProperty2["Surname"] = "surname";
})(UserOrderByProperty || (UserOrderByProperty = {}));
let EntityPageListIterator$1 = class EntityPageListIterator {
  constructor(pageQueryFunc) {
    this._entityPages = this.queryPages(pageQueryFunc);
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  async next() {
    return this._entityPages.next();
  }
  async *queryPages(pageQueryFunc) {
    let nextPageQueryFunc = pageQueryFunc;
    while (nextPageQueryFunc) {
      const entityPage = await nextPageQueryFunc();
      nextPageQueryFunc = entityPage.next;
      yield entityPage.entities;
    }
  }
};
let EntityListIteratorImpl$1 = class EntityListIteratorImpl {
  constructor(pageQueryFunc) {
    this._entityPages = new EntityPageListIterator$1(pageQueryFunc);
    this._entities = flatten(this._entityPages);
  }
  [Symbol.asyncIterator]() {
    return this;
  }
  async next() {
    return this._entities.next();
  }
  byPage() {
    return this._entityPages;
  }
};
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}
const { toString: toString$1 } = Object.prototype;
const { getPrototypeOf } = Object;
const { iterator, toStringTag } = Symbol;
const kindOf = /* @__PURE__ */ ((cache) => (thing) => {
  const str = toString$1.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
const typeOfTest = (type) => (thing) => typeof thing === type;
const { isArray } = Array;
const isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction$1(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
const isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
const isString = typeOfTest("string");
const isFunction$1 = typeOfTest("function");
const isNumber = typeOfTest("number");
const isObject$1 = (thing) => thing !== null && typeof thing === "object";
const isBoolean = (thing) => thing === true || thing === false;
const isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype2 = getPrototypeOf(val);
  return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(toStringTag in val) && !(iterator in val);
};
const isEmptyObject = (val) => {
  if (!isObject$1(val) || isBuffer(val)) {
    return false;
  }
  try {
    return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;
  } catch (e2) {
    return false;
  }
};
const isDate = kindOfTest("Date");
const isFile = kindOfTest("File");
const isBlob$2 = kindOfTest("Blob");
const isFileList = kindOfTest("FileList");
const isStream = (val) => isObject$1(val) && isFunction$1(val.pipe);
const isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction$1(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction$1(thing.toString) && thing.toString() === "[object FormData]"));
};
const isURLSearchParams = kindOfTest("URLSearchParams");
const [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
const trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    if (isBuffer(obj)) {
      return;
    }
    const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys2.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys2[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  if (isBuffer(obj)) {
    return null;
  }
  key = key.toLowerCase();
  const keys2 = Object.keys(obj);
  let i = keys2.length;
  let _key;
  while (i-- > 0) {
    _key = keys2[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
const _global = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
const isContextDefined = (context2) => !isUndefined(context2) && context2 !== _global;
function merge() {
  const { caseless, skipUndefined } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      if (!skipUndefined || !isUndefined(val)) {
        result[targetKey] = val;
      }
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
const extend$1 = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction$1(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
const inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
const toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null) return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
const isTypedArray = /* @__PURE__ */ ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[iterator];
  const _iterator = generator.call(obj);
  let result;
  while ((result = _iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
const isHTMLForm = kindOfTest("HTMLFormElement");
const toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer2(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
const hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
const isRegExp = kindOfTest("RegExp");
const reduceDescriptors = (obj, reducer2) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer2(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction$1(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction$1(value)) return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
const toObjectSet = (arrayOrString, delimiter2) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter2));
  return obj;
};
const noop = () => {
};
const toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction$1(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
}
const toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject$1(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (isBuffer(source)) {
        return source;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
const isAsyncFn = kindOfTest("AsyncFunction");
const isThenable = (thing) => thing && (isObject$1(thing) || isFunction$1(thing)) && isFunction$1(thing.then) && isFunction$1(thing.catch);
const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({ source, data }) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);
    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === "function",
  isFunction$1(_global.postMessage)
);
const asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
const isIterable = (thing) => thing != null && isFunction$1(thing[iterator]);
const utils$1 = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject: isObject$1,
  isPlainObject,
  isEmptyObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob: isBlob$2,
  isRegExp,
  isFunction: isFunction$1,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend: extend$1,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap,
  isIterable
};
function AxiosError$1(message, code, config, request2, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request2 && (this.request = request2);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
utils$1.inherits(AxiosError$1, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$1.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
const prototype$1 = AxiosError$1.prototype;
const descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError$1, descriptors);
Object.defineProperty(prototype$1, "isAxiosError", { value: true });
AxiosError$1.from = (error, code, config, request2, response, customProps) => {
  const axiosError = Object.create(prototype$1);
  utils$1.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  const msg = error && error.message ? error.message : "Error";
  const errCode = code == null && error ? error.code : code;
  AxiosError$1.call(axiosError, msg, errCode, config, request2, response);
  if (error && axiosError.cause == null) {
    Object.defineProperty(axiosError, "cause", { value: error, configurable: true });
  }
  axiosError.name = error && error.name || "Error";
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
const httpAdapter = null;
function isVisitable(thing) {
  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
}
function removeBrackets(key) {
  return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils$1.isArray(arr) && !arr.some(isVisitable);
}
const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData$1(obj, formData, options) {
  if (!utils$1.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new FormData();
  options = utils$1.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils$1.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
  if (!utils$1.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null) return "";
    if (utils$1.isDate(value)) {
      return value.toISOString();
    }
    if (utils$1.isBoolean(value)) {
      return value.toString();
    }
    if (!useBlob && utils$1.isBlob(value)) {
      throw new AxiosError$1("Blob is not supported. Use a Buffer instead.");
    }
    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils$1.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils$1.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils$1.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils$1.forEach(value, function each(el, key) {
      const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils$1.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils$1.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
function encode$1(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer2(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData$1(params, this, options);
}
const prototype = AxiosURLSearchParams.prototype;
prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode$1);
  } : encode$1;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+");
}
function buildURL(url2, params, options) {
  if (!params) {
    return url2;
  }
  const _encode = options && options.encode || encode;
  if (utils$1.isFunction(options)) {
    options = {
      serialize: options
    };
  }
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url2.indexOf("#");
    if (hashmarkIndex !== -1) {
      url2 = url2.slice(0, hashmarkIndex);
    }
    url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url2;
}
class InterceptorManager {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id2) {
    if (this.handlers[id2]) {
      this.handlers[id2] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils$1.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}
const transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};
const URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
const FormData$1 = typeof FormData !== "undefined" ? FormData : null;
const Blob$1 = typeof Blob !== "undefined" ? Blob : null;
const platform$1 = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams$1,
    FormData: FormData$1,
    Blob: Blob$1
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};
const hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
const _navigator = typeof navigator === "object" && navigator || void 0;
const hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
const hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
const origin = hasBrowserEnv && window.location.href || "http://localhost";
const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  hasBrowserEnv,
  hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv,
  navigator: _navigator,
  origin
}, Symbol.toStringTag, { value: "Module" }));
const platform = {
  ...utils,
  ...platform$1
};
function toURLEncodedForm(data, options) {
  return toFormData$1(data, new platform.classes.URLSearchParams(), {
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils$1.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    },
    ...options
  });
}
function parsePropPath(name) {
  return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys2 = Object.keys(arr);
  let i;
  const len = keys2.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys2[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__") return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils$1.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils$1.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils$1.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils$1.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
    const obj = {};
    utils$1.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
function stringifySafely(rawValue, parser2, encoder) {
  if (utils$1.isString(rawValue)) {
    try {
      (parser2 || JSON.parse)(rawValue);
      return utils$1.trim(rawValue);
    } catch (e2) {
      if (e2.name !== "SyntaxError") {
        throw e2;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
const defaults = {
  transitional: transitionalDefaults,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType2 = headers.getContentType() || "";
    const hasJSONContentType = contentType2.indexOf("application/json") > -1;
    const isObjectPayload = utils$1.isObject(data);
    if (isObjectPayload && utils$1.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils$1.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
    }
    if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
      return data;
    }
    if (utils$1.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$1.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType2.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils$1.isFileList(data)) || contentType2.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData$1(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
      return data;
    }
    if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data, this.parseReviver);
      } catch (e2) {
        if (strictJSONParsing) {
          if (e2.name === "SyntaxError") {
            throw AxiosError$1.from(e2, AxiosError$1.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e2;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
const ignoreDuplicateOf = utils$1.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
const parseHeaders = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser2(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};
const $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context2, value, header, filter2, isHeaderNameFilter) {
  if (utils$1.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils$1.isString(value)) return;
  if (utils$1.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils$1.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils$1.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
let AxiosHeaders$1 = class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils$1.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else if (utils$1.isObject(header) && utils$1.isIterable(header)) {
      let obj = {}, dest, key;
      for (const entry of header) {
        if (!utils$1.isArray(entry)) {
          throw TypeError("Object iterator must return a key-value pair");
        }
        obj[key = entry[0]] = (dest = obj[key]) ? utils$1.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
      }
      setHeaders(obj, valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser2) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils$1.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser2) {
          return value;
        }
        if (parser2 === true) {
          return parseTokens(value);
        }
        if (utils$1.isFunction(parser2)) {
          return parser2.call(this, value, key);
        }
        if (utils$1.isRegExp(parser2)) {
          return parser2.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils$1.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils$1.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils$1.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys2 = Object.keys(this);
    let i = keys2.length;
    let deleted = false;
    while (i--) {
      const key = keys2[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils$1.forEach(this, (value, header) => {
      const key = utils$1.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils$1.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  getSetCookie() {
    return this.get("set-cookie") || [];
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype2 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype2, _header);
        accessors[lHeader] = true;
      }
    }
    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders$1.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils$1.reduceDescriptors(AxiosHeaders$1.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils$1.freezeMethods(AxiosHeaders$1);
function transformData(fns, response) {
  const config = this || defaults;
  const context2 = response || config;
  const headers = AxiosHeaders$1.from(context2.headers);
  let data = context2.data;
  utils$1.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}
function isCancel$1(value) {
  return !!(value && value.__CANCEL__);
}
function CanceledError$1(message, config, request2) {
  AxiosError$1.call(this, message == null ? "canceled" : message, AxiosError$1.ERR_CANCELED, config, request2);
  this.name = "CanceledError";
}
utils$1.inherits(CanceledError$1, AxiosError$1, {
  __CANCEL__: true
});
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError$1(
      "Request failed with status code " + response.status,
      [AxiosError$1.ERR_BAD_REQUEST, AxiosError$1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}
function parseProtocol(url2) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
  return match && match[1] || "";
}
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn(...args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);
  return throttle((e2) => {
    const loaded = e2.loaded;
    const total = e2.lengthComputable ? e2.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e2,
      lengthComputable: total != null,
      [isDownloadStream ? "download" : "upload"]: true
    };
    listener(data);
  }, freq);
};
const progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
const asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
const isURLSameOrigin = platform.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url2) => {
  url2 = new URL(url2, platform.origin);
  return origin2.protocol === url2.protocol && origin2.host === url2.host && (isMSIE || origin2.port === url2.port);
})(
  new URL(platform.origin),
  platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
) : () => true;
const cookies = platform.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils$1.isString(path) && cookie.push("path=" + path);
      utils$1.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);
function isAbsoluteURL(url2) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
}
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
  let isRelativeUrl = !isAbsoluteURL(requestedURL);
  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}
const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
function mergeConfig$1(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, prop, caseless) {
    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
      return utils$1.merge.call({ caseless }, target, source);
    } else if (utils$1.isPlainObject(source)) {
      return utils$1.merge({}, source);
    } else if (utils$1.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, prop, caseless) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(a, b, prop, caseless);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(void 0, a, prop, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
  };
  utils$1.forEach(Object.keys({ ...config1, ...config2 }), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}
const resolveConfig = (config) => {
  const newConfig = mergeConfig$1({}, config);
  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
  newConfig.headers = headers = AxiosHeaders$1.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
  if (auth) {
    headers.set(
      "Authorization",
      "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
    );
  }
  if (utils$1.isFormData(data)) {
    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(void 0);
    } else if (utils$1.isFunction(data.getHeaders)) {
      const formHeaders = data.getHeaders();
      const allowedHeaders = ["content-type", "content-length"];
      Object.entries(formHeaders).forEach(([key, val]) => {
        if (allowedHeaders.includes(key.toLowerCase())) {
          headers.set(key, val);
        }
      });
    }
  }
  if (platform.hasStandardBrowserEnv) {
    withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};
const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
const xhrAdapter = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
    let { responseType, onUploadProgress, onDownloadProgress } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload();
      flushDownload && flushDownload();
      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener("abort", onCanceled);
    }
    let request2 = new XMLHttpRequest();
    request2.open(_config.method.toUpperCase(), _config.url, true);
    request2.timeout = _config.timeout;
    function onloadend() {
      if (!request2) {
        return;
      }
      const responseHeaders = AxiosHeaders$1.from(
        "getAllResponseHeaders" in request2 && request2.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
      const response = {
        data: responseData,
        status: request2.status,
        statusText: request2.statusText,
        headers: responseHeaders,
        config,
        request: request2
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request2 = null;
    }
    if ("onloadend" in request2) {
      request2.onloadend = onloadend;
    } else {
      request2.onreadystatechange = function handleLoad() {
        if (!request2 || request2.readyState !== 4) {
          return;
        }
        if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request2.onabort = function handleAbort() {
      if (!request2) {
        return;
      }
      reject(new AxiosError$1("Request aborted", AxiosError$1.ECONNABORTED, config, request2));
      request2 = null;
    };
    request2.onerror = function handleError(event) {
      const msg = event && event.message ? event.message : "Network Error";
      const err = new AxiosError$1(msg, AxiosError$1.ERR_NETWORK, config, request2);
      err.event = event || null;
      reject(err);
      request2 = null;
    };
    request2.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = _config.transitional || transitionalDefaults;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError$1(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError$1.ETIMEDOUT : AxiosError$1.ECONNABORTED,
        config,
        request2
      ));
      request2 = null;
    };
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request2) {
      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request2.setRequestHeader(key, val);
      });
    }
    if (!utils$1.isUndefined(_config.withCredentials)) {
      request2.withCredentials = !!_config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request2.responseType = _config.responseType;
    }
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request2.addEventListener("progress", downloadThrottled);
    }
    if (onUploadProgress && request2.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request2.upload.addEventListener("progress", uploadThrottled);
      request2.upload.addEventListener("loadend", flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      onCanceled = (cancel3) => {
        if (!request2) {
          return;
        }
        reject(!cancel3 || cancel3.type ? new CanceledError$1(null, config, request2) : cancel3);
        request2.abort();
        request2 = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError$1("Unsupported protocol " + protocol + ":", AxiosError$1.ERR_BAD_REQUEST, config));
      return;
    }
    request2.send(requestData || null);
  });
};
const composeSignals = (signals, timeout) => {
  const { length } = signals = signals ? signals.filter(Boolean) : [];
  if (timeout || length) {
    let controller = new AbortController();
    let aborted;
    const onabort = function(reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError$1 ? err : new CanceledError$1(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError$1(`timeout ${timeout} of ms exceeded`, AxiosError$1.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach((signal2) => {
          signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
        });
        signals = null;
      }
    };
    signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
    const { signal } = controller;
    signal.unsubscribe = () => utils$1.asap(unsubscribe);
    return signal;
  }
};
const streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
const readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};
const readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }
  const reader = stream.getReader();
  try {
    for (; ; ) {
      const { done, value } = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};
const trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator2 = readBytes(stream, chunkSize);
  let bytes = 0;
  let done;
  let _onFinish = (e2) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e2);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const { done: done2, value } = await iterator2.next();
        if (done2) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator2.return();
    }
  }, {
    highWaterMark: 2
  });
};
const DEFAULT_CHUNK_SIZE = 64 * 1024;
const { isFunction } = utils$1;
const globalFetchAPI = (({ fetch: fetch2, Request: Request2, Response: Response2 }) => ({
  fetch: fetch2,
  Request: Request2,
  Response: Response2
}))(utils$1.global);
const {
  ReadableStream: ReadableStream$1,
  TextEncoder: TextEncoder$1
} = utils$1.global;
const test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e2) {
    return false;
  }
};
const factory = (env) => {
  const { fetch: fetch2, Request: Request2, Response: Response2 } = Object.assign({}, globalFetchAPI, env);
  const isFetchSupported = isFunction(fetch2);
  const isRequestSupported = isFunction(Request2);
  const isResponseSupported = isFunction(Response2);
  if (!isFetchSupported) {
    return false;
  }
  const isReadableStreamSupported = isFetchSupported && isFunction(ReadableStream$1);
  const encodeText = isFetchSupported && (typeof TextEncoder$1 === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder$1()) : async (str) => new Uint8Array(await new Request2(str).arrayBuffer()));
  const supportsRequestStream = isRequestSupported && isReadableStreamSupported && test(() => {
    let duplexAccessed = false;
    const hasContentType = new Request2(platform.origin, {
      body: new ReadableStream$1(),
      method: "POST",
      get duplex() {
        duplexAccessed = true;
        return "half";
      }
    }).headers.has("Content-Type");
    return duplexAccessed && !hasContentType;
  });
  const supportsResponseStream = isResponseSupported && isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response2("").body));
  const resolvers = {
    stream: supportsResponseStream && ((res) => res.body)
  };
  isFetchSupported && (() => {
    ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
      !resolvers[type] && (resolvers[type] = (res, config) => {
        let method = res && res[type];
        if (method) {
          return method.call(res);
        }
        throw new AxiosError$1(`Response type '${type}' is not supported`, AxiosError$1.ERR_NOT_SUPPORT, config);
      });
    });
  })();
  const getBodyLength = async (body2) => {
    if (body2 == null) {
      return 0;
    }
    if (utils$1.isBlob(body2)) {
      return body2.size;
    }
    if (utils$1.isSpecCompliantForm(body2)) {
      const _request = new Request2(platform.origin, {
        method: "POST",
        body: body2
      });
      return (await _request.arrayBuffer()).byteLength;
    }
    if (utils$1.isArrayBufferView(body2) || utils$1.isArrayBuffer(body2)) {
      return body2.byteLength;
    }
    if (utils$1.isURLSearchParams(body2)) {
      body2 = body2 + "";
    }
    if (utils$1.isString(body2)) {
      return (await encodeText(body2)).byteLength;
    }
  };
  const resolveBodyLength = async (headers, body2) => {
    const length = utils$1.toFiniteNumber(headers.getContentLength());
    return length == null ? getBodyLength(body2) : length;
  };
  return async (config) => {
    let {
      url: url2,
      method,
      data,
      signal,
      cancelToken,
      timeout,
      onDownloadProgress,
      onUploadProgress,
      responseType,
      headers,
      withCredentials = "same-origin",
      fetchOptions
    } = resolveConfig(config);
    responseType = responseType ? (responseType + "").toLowerCase() : "text";
    let composedSignal = composeSignals([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
    let request2 = null;
    const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
    });
    let requestContentLength;
    try {
      if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
        let _request = new Request2(url2, {
          method: "POST",
          body: data,
          duplex: "half"
        });
        let contentTypeHeader;
        if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
          headers.setContentType(contentTypeHeader);
        }
        if (_request.body) {
          const [onProgress, flush] = progressEventDecorator(
            requestContentLength,
            progressEventReducer(asyncDecorator(onUploadProgress))
          );
          data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
        }
      }
      if (!utils$1.isString(withCredentials)) {
        withCredentials = withCredentials ? "include" : "omit";
      }
      const isCredentialsSupported = isRequestSupported && "credentials" in Request2.prototype;
      const resolvedOptions = {
        ...fetchOptions,
        signal: composedSignal,
        method: method.toUpperCase(),
        headers: headers.normalize().toJSON(),
        body: data,
        duplex: "half",
        credentials: isCredentialsSupported ? withCredentials : void 0
      };
      request2 = isRequestSupported && new Request2(url2, resolvedOptions);
      let response = await (isRequestSupported ? fetch2(request2, fetchOptions) : fetch2(url2, resolvedOptions));
      const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
      if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
        const options = {};
        ["status", "statusText", "headers"].forEach((prop) => {
          options[prop] = response[prop];
        });
        const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
        const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
          responseContentLength,
          progressEventReducer(asyncDecorator(onDownloadProgress), true)
        ) || [];
        response = new Response2(
          trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
            flush && flush();
            unsubscribe && unsubscribe();
          }),
          options
        );
      }
      responseType = responseType || "text";
      let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
      !isStreamResponse && unsubscribe && unsubscribe();
      return await new Promise((resolve, reject) => {
        settle(resolve, reject, {
          data: responseData,
          headers: AxiosHeaders$1.from(response.headers),
          status: response.status,
          statusText: response.statusText,
          config,
          request: request2
        });
      });
    } catch (err) {
      unsubscribe && unsubscribe();
      if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
        throw Object.assign(
          new AxiosError$1("Network Error", AxiosError$1.ERR_NETWORK, config, request2),
          {
            cause: err.cause || err
          }
        );
      }
      throw AxiosError$1.from(err, err && err.code, config, request2);
    }
  };
};
const seedCache = /* @__PURE__ */ new Map();
const getFetch = (config) => {
  let env = utils$1.merge.call({
    skipUndefined: true
  }, globalFetchAPI, config ? config.env : null);
  const { fetch: fetch2, Request: Request2, Response: Response2 } = env;
  const seeds = [
    Request2,
    Response2,
    fetch2
  ];
  let len = seeds.length, i = len, seed, target, map2 = seedCache;
  while (i--) {
    seed = seeds[i];
    target = map2.get(seed);
    target === void 0 && map2.set(seed, target = i ? /* @__PURE__ */ new Map() : factory(env));
    map2 = target;
  }
  return target;
};
getFetch();
const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter,
  fetch: {
    get: getFetch
  }
};
utils$1.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e2) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
const renderReason = (reason) => `- ${reason}`;
const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
const adapters = {
  getAdapter: (adapters2, config) => {
    adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
    const { length } = adapters2;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters2[i];
      let id2;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError$1(`Unknown adapter '${id2}'`);
        }
      }
      if (adapter && (utils$1.isFunction(adapter) || (adapter = adapter.get(config)))) {
        break;
      }
      rejectedReasons[id2 || "#" + i] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id2, state2]) => `adapter ${id2} ` + (state2 === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError$1(
        `There is no suitable adapter to dispatch the request ` + s,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError$1(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders$1.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters.getAdapter(config.adapter || defaults.adapter, config);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders$1.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel$1(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}
const VERSION$1 = "1.12.0";
const validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators$1[type] = function validator2(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
const deprecatedWarnings = {};
validators$1.transitional = function transitional(validator2, version2, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION$1 + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator2 === false) {
      throw new AxiosError$1(
        formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
        AxiosError$1.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version2 + " and will be removed in the near future"
        )
      );
    }
    return validator2 ? validator2(value, opt, opts) : true;
  };
};
validators$1.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError$1("options must be an object", AxiosError$1.ERR_BAD_OPTION_VALUE);
  }
  const keys2 = Object.keys(options);
  let i = keys2.length;
  while (i-- > 0) {
    const opt = keys2[i];
    const validator2 = schema[opt];
    if (validator2) {
      const value = options[opt];
      const result = value === void 0 || validator2(value, opt, options);
      if (result !== true) {
        throw new AxiosError$1("option " + opt + " must be " + result, AxiosError$1.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError$1("Unknown option " + opt, AxiosError$1.ERR_BAD_OPTION);
    }
  }
}
const validator = {
  assertOptions,
  validators: validators$1
};
const validators = validator.validators;
let Axios$1 = class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig || {};
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};
        Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        try {
          if (!err.stack) {
            err.stack = stack;
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
            err.stack += "\n" + stack;
          }
        } catch (e2) {
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig$1(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator.assertOptions(transitional2, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils$1.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }
    if (config.allowAbsoluteUrls !== void 0) ;
    else if (this.defaults.allowAbsoluteUrls !== void 0) {
      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
    } else {
      config.allowAbsoluteUrls = true;
    }
    validator.assertOptions(config, {
      baseUrl: validators.spelling("baseURL"),
      withXsrfToken: validators.spelling("withXSRFToken")
    }, true);
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils$1.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils$1.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift(...requestInterceptorChain);
      chain.push(...responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig$1(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios$1.prototype[method] = function(url2, config) {
    return this.request(mergeConfig$1(config || {}, {
      method,
      url: url2,
      data: (config || {}).data
    }));
  };
});
utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url2, data, config) {
      return this.request(mergeConfig$1(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url: url2,
        data
      }));
    };
  }
  Axios$1.prototype[method] = generateHTTPMethod();
  Axios$1.prototype[method + "Form"] = generateHTTPMethod(true);
});
let CancelToken$1 = class CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel3) => {
      if (!token._listeners) return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel3);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel3(message, config, request2) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError$1(message, config, request2);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  toAbortSignal() {
    const controller = new AbortController();
    const abort = (err) => {
      controller.abort(err);
    };
    this.subscribe(abort);
    controller.signal.unsubscribe = () => this.unsubscribe(abort);
    return controller.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel3;
    const token = new CancelToken(function executor(c) {
      cancel3 = c;
    });
    return {
      token,
      cancel: cancel3
    };
  }
};
function spread$1(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}
function isAxiosError$1(payload) {
  return utils$1.isObject(payload) && payload.isAxiosError === true;
}
const HttpStatusCode$1 = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode$1).forEach(([key, value]) => {
  HttpStatusCode$1[value] = key;
});
function createInstance(defaultConfig) {
  const context2 = new Axios$1(defaultConfig);
  const instance = bind(Axios$1.prototype.request, context2);
  utils$1.extend(instance, Axios$1.prototype, context2, { allOwnKeys: true });
  utils$1.extend(instance, context2, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig$1(defaultConfig, instanceConfig));
  };
  return instance;
}
const axios = createInstance(defaults);
axios.Axios = Axios$1;
axios.CanceledError = CanceledError$1;
axios.CancelToken = CancelToken$1;
axios.isCancel = isCancel$1;
axios.VERSION = VERSION$1;
axios.toFormData = toFormData$1;
axios.AxiosError = AxiosError$1;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread$1;
axios.isAxiosError = isAxiosError$1;
axios.mergeConfig = mergeConfig$1;
axios.AxiosHeaders = AxiosHeaders$1;
axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters.getAdapter;
axios.HttpStatusCode = HttpStatusCode$1;
axios.default = axios;
const {
  Axios: Axios2,
  AxiosError,
  CanceledError,
  isCancel,
  CancelToken: CancelToken2,
  VERSION,
  all: all2,
  Cancel,
  isAxiosError,
  spread,
  toFormData,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode,
  formToJSON,
  getAdapter,
  mergeConfig
} = axios;
let AxiosResponseHeadersAdapter$1 = class AxiosResponseHeadersAdapter {
  constructor(response) {
    this._response = response;
  }
  get(headerName) {
    if (this._response.headers.get instanceof Function)
      return this._response.headers.get(headerName);
    return this._response.headers[headerName.toLowerCase()];
  }
  getAll() {
    return this._response.headers;
  }
};
let Constants$3 = class Constants {
};
Constants$3.api = {
  baseUrl: "https://api.bentley.com/imodels",
  version: "itwin-platform.v2"
};
Constants$3.headers = {
  accept: "Accept",
  authorization: "Authorization",
  contentType: "Content-Type",
  prefer: "Prefer",
  location: "Location"
};
Constants$3.time = {
  sleepPeriodInMs: 1e3,
  iModelInitializationTimeOutInMs: 5 * 60 * 1e3
};
Constants$3.httpStatusCodes = {
  internalServerError: 500
};
Constants$3.retryPolicy = {
  maxRetries: 3,
  baseDelayInMs: 300,
  delayFactor: 3
};
async function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
async function waitForCondition(params) {
  const sleepPeriodInMs = Constants$3.time.sleepPeriodInMs;
  const timeOutInMs = params.timeOutInMs ?? Constants$3.time.iModelInitializationTimeOutInMs;
  for (let retries = Math.ceil(timeOutInMs / sleepPeriodInMs); retries > 0; --retries) {
    const isTargetStateReached = await params.conditionToSatisfy();
    if (isTargetStateReached)
      return;
    await sleep(sleepPeriodInMs);
  }
  const timeoutError = params.timeoutErrorFactory();
  throw timeoutError;
}
let AxiosRestClient$1 = class AxiosRestClient {
  constructor(parseErrorFunc, retryPolicy2) {
    this._parseErrorFunc = parseErrorFunc;
    this._retryPolicy = retryPolicy2;
  }
  async sendGetRequest(params) {
    const requestConfig = {
      headers: params.headers
    };
    if (params.responseType === ContentType.Png) {
      requestConfig.responseType = "arraybuffer";
      const response = await this.executeRequest(async () => axios.get(params.url, requestConfig));
      const data = response.body;
      if (data instanceof ArrayBuffer)
        return { ...response, body: new Uint8Array(data) };
      return response;
    }
    return this.executeRequest(async () => axios.get(params.url, requestConfig));
  }
  async sendPostRequest(params) {
    const requestConfig = {
      headers: params.headers
    };
    return this.executeRequest(async () => axios.post(params.url, params.body.content ?? {}, requestConfig));
  }
  async sendPutRequest(params) {
    const requestConfig = {
      headers: params.headers
    };
    return this.executeRequest(async () => axios.put(params.url, params.body.content, requestConfig));
  }
  async sendPatchRequest(params) {
    const requestConfig = {
      headers: params.headers
    };
    return this.executeRequest(async () => axios.patch(params.url, params.body.content ?? {}, requestConfig));
  }
  async sendDeleteRequest(params) {
    const requestConfig = {
      headers: params.headers
    };
    return this.executeRequest(async () => axios.delete(params.url, requestConfig));
  }
  async executeRequest(requestFunc) {
    try {
      const response = await this.executeWithRetry(requestFunc);
      return {
        body: response.data,
        headers: new AxiosResponseHeadersAdapter$1(response)
      };
    } catch (error) {
      if (axios.isAxiosError(error)) {
        const parsedError = this._parseErrorFunc({ statusCode: error.response?.status, body: error.response?.data }, error);
        throw parsedError;
      }
      throw error;
    }
  }
  async executeWithRetry(requestFunc) {
    let retriesInvoked = 0;
    for (; ; ) {
      try {
        return await requestFunc();
      } catch (error) {
        if (this._retryPolicy === null || retriesInvoked >= this._retryPolicy.maxRetries || retriesInvoked >= AxiosRestClient.retryCountUpperBound || !await this._retryPolicy.shouldRetry({ retriesInvoked, error })) {
          throw error;
        }
        const sleepDurationInMs = this._retryPolicy.getSleepDurationInMs({ retriesInvoked: retriesInvoked++ });
        if (sleepDurationInMs > 0) {
          await sleep(sleepDurationInMs);
        }
      }
    }
  }
};
AxiosRestClient$1.retryCountUpperBound = 10;
class IModelsErrorBaseImpl extends Error {
  constructor(params) {
    super();
    this.name = this.code = params.code;
    this.message = params.message;
    this.originalError = params.originalError;
  }
}
class IModelsErrorImpl extends IModelsErrorBaseImpl {
  constructor(params) {
    super(params);
    this.details = params.details;
    this.statusCode = params.statusCode;
  }
}
let IModelsErrorParser$2 = class IModelsErrorParser {
  static parse(response, originalError) {
    if (!response.body)
      return IModelsErrorParser.createUnrecognizedError(response, originalError);
    if (response.statusCode === 401)
      return IModelsErrorParser.createUnauthorizedError(response, originalError);
    const errorFromApi = response.body;
    const errorCode = IModelsErrorParser.parseCode(errorFromApi?.error?.code);
    if (errorCode === IModelsErrorCode.Unrecognized)
      return IModelsErrorParser.createUnrecognizedError(response, originalError);
    const errorDetails = IModelsErrorParser.parseDetails(errorFromApi.error?.details);
    const errorMessage2 = IModelsErrorParser.parseAndFormatMessage(errorFromApi?.error?.message, errorDetails);
    return new IModelsErrorImpl({
      code: errorCode,
      statusCode: response.statusCode,
      originalError,
      message: errorMessage2,
      details: errorDetails
    });
  }
  static parseCode(errorCode) {
    if (!errorCode)
      return IModelsErrorCode.Unrecognized;
    const adjustedErrorCode = IModelsErrorParser.adjustErrorCodeCaseToMatchEnum(errorCode);
    let parsedCode = IModelsErrorCode[adjustedErrorCode];
    if (!parsedCode)
      parsedCode = IModelsErrorCode.Unrecognized;
    return parsedCode;
  }
  static adjustErrorCodeCaseToMatchEnum(errorCode) {
    return errorCode.replace("iModel", "IModel").replace("iTwin", "ITwin");
  }
  static parseDetails(details) {
    if (!details)
      return void 0;
    return details.map((unparsedDetail) => {
      return { ...unparsedDetail, code: this.parseCode(unparsedDetail.code) };
    });
  }
  static parseAndFormatMessage(message, errorDetails) {
    let result = message ?? IModelsErrorParser._defaultErrorMessage;
    if (!errorDetails || errorDetails.length === 0)
      return result;
    result += " Details:\n";
    for (let i = 0; i < errorDetails.length; i++) {
      result += `${i + 1}. ${errorDetails[i].code}: ${errorDetails[i].message}`;
      if (errorDetails[i].target)
        result += ` Target: ${errorDetails[i].target}.`;
      result += "\n";
    }
    return result;
  }
  static createUnrecognizedError(response, originalError) {
    return new IModelsErrorImpl({
      code: IModelsErrorCode.Unrecognized,
      statusCode: response.statusCode,
      originalError,
      message: `${IModelsErrorParser._defaultErrorMessage}.
Original error message: ${originalError.message},
original error code: ${originalError.code},
response status code: ${response.statusCode},
response body: ${JSON.stringify(response.body)}`,
      details: void 0
    });
  }
  static createUnauthorizedError(response, originalError) {
    const errorMessage2 = response.body?.error?.message ?? response.body?.message ?? IModelsErrorParser._defaultUnauthorizedMessage;
    return new IModelsErrorImpl({
      code: IModelsErrorCode.Unauthorized,
      statusCode: response.statusCode,
      originalError,
      message: errorMessage2,
      details: void 0
    });
  }
};
IModelsErrorParser$2._defaultErrorMessage = "Unknown error occurred";
IModelsErrorParser$2._defaultUnauthorizedMessage = "Authorization failed";
let OperationsBase$1 = class OperationsBase {
  constructor(_options) {
    this._options = _options;
  }
  async sendGetRequest(params) {
    const urlAndHeaders = {
      url: params.url,
      headers: await this.formHeaders(params)
    };
    if (params.responseType === ContentType.Png)
      return this._options.restClient.sendGetRequest({
        responseType: ContentType.Png,
        ...urlAndHeaders
      });
    return this._options.restClient.sendGetRequest({
      responseType: params.responseType ?? ContentType.Json,
      ...urlAndHeaders
    });
  }
  async sendPostRequest(params) {
    return this._options.restClient.sendPostRequest({
      url: params.url,
      body: {
        contentType: ContentType.Json,
        content: params.body
      },
      headers: await this.formHeaders({ ...params, contentType: ContentType.Json })
    });
  }
  async sendPutRequest(params) {
    return this._options.restClient.sendPutRequest({
      url: params.url,
      body: {
        contentType: params.contentType,
        content: params.body
      },
      headers: await this.formHeaders({ ...params, contentType: params.contentType })
    });
  }
  async sendPatchRequest(params) {
    return this._options.restClient.sendPatchRequest({
      url: params.url,
      body: {
        contentType: ContentType.Json,
        content: params.body
      },
      headers: await this.formHeaders({ ...params, contentType: ContentType.Json })
    });
  }
  async sendDeleteRequest(params) {
    return this._options.restClient.sendDeleteRequest({
      url: params.url,
      headers: await this.formHeaders(params)
    });
  }
  async getEntityCollectionPage(params) {
    const response = await this.sendGetRequest(params);
    return {
      entities: params.entityCollectionAccessor(response),
      next: response.body._links.next ? async () => this.getEntityCollectionPage({ ...params, url: response.body._links.next.href }) : void 0
    };
  }
  resolveHeaderValue(headerOrHeaderFactory) {
    if (typeof headerOrHeaderFactory === "function")
      return headerOrHeaderFactory();
    return headerOrHeaderFactory;
  }
  addOrUpdateHeaders(existingHeaders, additionalHeaders) {
    if (!additionalHeaders)
      return;
    for (const headerName in additionalHeaders) {
      if (Object.prototype.hasOwnProperty.call(additionalHeaders, headerName)) {
        const headerValue = this.resolveHeaderValue(additionalHeaders[headerName]);
        if (typeof headerValue === "string")
          existingHeaders[headerName] = headerValue;
        else
          delete existingHeaders[headerName];
      }
    }
  }
  async formHeaders(params) {
    const headers = {};
    const authorizationInfo = await params.authorization();
    headers[Constants$3.headers.authorization] = `${authorizationInfo.scheme} ${authorizationInfo.token}`;
    headers[Constants$3.headers.accept] = `application/vnd.bentley.${this._options.api.version}+json`;
    if (params.preferReturn)
      headers[Constants$3.headers.prefer] = `return=${params.preferReturn}`;
    if (params.contentType)
      headers[Constants$3.headers.contentType] = params.contentType;
    this.addOrUpdateHeaders(headers, this._options.headers);
    this.addOrUpdateHeaders(headers, params.headers);
    return headers;
  }
};
let AxiosRetryPolicy$1 = class AxiosRetryPolicy {
  constructor(params) {
    this.maxRetries = params.maxRetries;
    this._backoffAlgorithm = params.backoffAlgorithm;
  }
  shouldRetry(params) {
    if (isAxiosError(params.error) && params.error.response?.status != null) {
      return params.error.response.status >= Constants$3.httpStatusCodes.internalServerError;
    }
    return true;
  }
  getSleepDurationInMs(params) {
    return this._backoffAlgorithm.getSleepDurationInMs(params.retriesInvoked);
  }
};
let ExponentialBackoffAlgorithm$1 = class ExponentialBackoffAlgorithm {
  constructor(params) {
    this._baseDelayInMs = params.baseDelayInMs;
    this._factor = params.factor;
  }
  getSleepDurationInMs(attempt) {
    return Math.pow(this._factor, attempt) * this._baseDelayInMs;
  }
};
async function getUser(authorization, userOperations, urlFormatter, userLink, headers) {
  if (!userLink)
    return void 0;
  const { iModelId, userId } = urlFormatter.parseUserUrl(userLink);
  return userOperations.getSingle({
    authorization,
    iModelId,
    userId,
    headers
  });
}
function assertStringHeaderValue(headerName, headerValue) {
  const isString2 = typeof headerValue === "string" || headerValue instanceof String;
  if (!isString2)
    throw new Error(`Assertion failed: header's ${headerName} value is not a string.`);
}
function assertLink(link) {
  if (!link || !link.href)
    throw new Error("Assertion failed: link is falsy.");
}
let IModelOperations$2 = class IModelOperations extends OperationsBase$1 {
  constructor(options, _iModelsClient) {
    super(options);
    this._iModelsClient = _iModelsClient;
  }
  /**
   * Gets iModels for a specific iTwin. This method returns iModels in their minimal representation. The returned iterator
   * internally queries entities in pages. Wraps the {@link https://developer.bentley.com/apis/imodels-v2/operations/get-itwin-imodels/ Get iTwin iModels}
   * operation from iModels API.
   * @param {GetIModelListParams} params parameters for this operation. See {@link GetIModelListParams}.
   * @returns {EntityListIterator<MinimalIModel>} iterator for iModel list. See {@link EntityListIterator}, {@link MinimalIModel}.
   */
  getMinimalList(params) {
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getIModelListUrl({ urlParams: params.urlParams }),
      preferReturn: PreferReturn.Minimal,
      entityCollectionAccessor: (response) => response.body.iModels,
      headers: params.headers
    }));
  }
  /**
   * Gets iModels for a specific iTwin. This method returns iModels in their full representation. The returned iterator
   * internally queries entities in pages. Wraps the {@link https://developer.bentley.com/apis/imodels-v2/operations/get-itwin-imodels/ Get iTwin iModels}
   * operation from iModels API.
   * @param {GetIModelListParams} params parameters for this operation. See {@link GetIModelListParams}.
   * @returns {EntityListIterator<IModel>} iterator for iModel list. See {@link EntityListIterator}, {@link IModel}.
   */
  getRepresentationList(params) {
    const entityCollectionAccessor = (response) => {
      const iModels = response.body.iModels;
      const mappedIModels = iModels.map((iModel) => this.appendRelatedEntityCallbacks(params.authorization, iModel, params.headers));
      return mappedIModels;
    };
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getIModelListUrl({ urlParams: params.urlParams }),
      preferReturn: PreferReturn.Representation,
      entityCollectionAccessor,
      headers: params.headers
    }));
  }
  /**
   * Gets a single iModel by its id. This method returns an iModel in its full representation. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-details/ Get iModel} operation from iModels API.
   * @param {GetSingleIModelParams} params parameters for this operation. See {@link GetSingleIModelParams}.
   * @returns {Promise<iModel>} an iModel with specified id. See {@link IModel}.
   */
  async getSingle(params) {
    const response = await this.sendGetRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getSingleIModelUrl({ iModelId: params.iModelId }),
      headers: params.headers
    });
    const result = this.appendRelatedEntityCallbacks(params.authorization, response.body.iModel, params.headers);
    return result;
  }
  /**
   * Creates an empty iModel with specified properties. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel/ Create iModel} operation from iModels API.
   * @param {CreateEmptyIModelParams} params parameters for this operation. See {@link CreateEmptyIModelParams}.
   * @returns {Promise<iModel>} newly created iModel. See {@link IModel}.
   */
  async createEmpty(params) {
    const createIModelBody = this.getCreateEmptyIModelRequestBody(params.iModelProperties);
    if (createIModelBody.geographicCoordinateSystem && createIModelBody.creationMode !== "empty") {
      throw new IModelsErrorImpl({
        code: IModelsErrorCode.InvalidIModelGCSCreationMode,
        message: "For empty iModels, GeographicCoordinateSystem can only be set when creationMode is 'empty'.",
        originalError: void 0,
        statusCode: void 0,
        details: void 0
      });
    }
    let createdIModel = await this.sendIModelPostRequest(params.authorization, createIModelBody, params.headers);
    if (createdIModel.state === IModelState.NotInitialized) {
      await this.waitForEmptyIModelInitialization({
        authorization: params.authorization,
        headers: params.headers,
        iModelId: createdIModel.id,
        timeOutInMs: params.timeOutInMs
      });
      createdIModel = await this.getSingle({
        authorization: params.authorization,
        iModelId: createdIModel.id
      });
    }
    const result = this.appendRelatedEntityCallbacks(params.authorization, createdIModel, params.headers);
    return result;
  }
  /**
   * Creates an iModel from a template. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel/ Create iModel} operation from iModels API.
   * It uses the `template` request body property to specify the source iModel which will be used as a template. Internally
   * this method creates the iModel instance and then repeatedly queries the iModel state until the iModel is initialized.
   * The execution of this method can take up to several minutes due to waiting for initialization to complete.
   * @param {CreateIModelFromTemplateParams} params parameters for this operation. See {@link CreateIModelFromTemplateParams}.
   * @returns {Promise<iModel>} newly created iModel. See {@link IModel}.
   * @throws an error that implements `iModelsError` interface with code {@link IModelsErrorCode.IModelFromTemplateInitializationFailed} if
   * iModel initialization failed or did not complete in time. See {@link IModelsErrorCode}.
   */
  async createFromTemplate(params) {
    const createIModelBody = this.getCreateIModelFromTemplateRequestBody(params.iModelProperties);
    const createdIModel = await this.sendIModelPostRequest(params.authorization, createIModelBody, params.headers);
    await this.waitForTemplatedIModelInitialization({
      authorization: params.authorization,
      iModelId: createdIModel.id,
      headers: params.headers,
      timeOutInMs: params.timeOutInMs
    });
    return this.getSingle({
      authorization: params.authorization,
      iModelId: createdIModel.id,
      headers: params.headers
    });
  }
  /**
   * Clones the specified iModel. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/clone-imodel/ Clone iModel} operation from iModels API.
   * Internally this method clones the iModel and then repeatedly queries the new iModel's state until it is initialized.
   * The execution of this method can take up to several minutes due to waiting for initialization to complete.
   * @param {CloneIModelParams} params parameters for this operation. See {@link CloneIModelParams}.
   * @returns {Promise<IModel>} newly created iModel. See {@link IModel}.
   * @throws an error that implements `iModelsError` interface with code {@link IModelsErrorCode.ClonedIModelInitializationFailed} if
   * iModel initialization failed or {@link IModelsErrorCode.ClonedIModelInitializationTimedOut} if operation did not complete in time.
   * See {@link IModelsErrorCode}.
   */
  async clone(params) {
    const cloneIModelBody = this.getCloneIModelRequestBody(params.iModelProperties);
    const cloneIModelResponse = await this.sendPostRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getCloneIModelUrl({ iModelId: params.iModelId }),
      body: cloneIModelBody,
      headers: params.headers
    });
    const locationHeaderValue = cloneIModelResponse.headers.get(Constants$3.headers.location);
    assertStringHeaderValue(Constants$3.headers.location, locationHeaderValue);
    const { iModelId: clonedIModelId } = this._options.urlFormatter.parseIModelUrl(locationHeaderValue);
    await this.waitForClonedIModelInitialization({
      authorization: params.authorization,
      iModelId: clonedIModelId,
      headers: params.headers,
      timeOutInMs: params.timeOutInMs
    });
    return this.getSingle({
      authorization: params.authorization,
      iModelId: clonedIModelId
    });
  }
  /**
   * Forks the specified iModel. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/fork-imodel/ Fork iModel} operation from iModels API.
   * Internally this method forks the iModel and then repeatedly queries the new iModel's creation state until it is succeeded.
   * The execution of this method can take up to several minutes due to waiting for initialization to complete.
   * @param {ForkIModelParams} params parameters for this operation. See {@link ForkIModelParams}.
   * @returns {Promise<IModel>} newly created iModel. See {@link IModel}.
   * @throws an error that implements `iModelsError` interface with code {@link IModelsErrorCode.IModelForkInitializationFailed} if
   * iModel initialization failed, {@link IModelsErrorCode.IModelForkInitializationTimedOut} if operation did not complete in time or
   * {@link IModelsErrorCode.MainIModelIsMissingFederationGuids} if the iModel from which user is attempting to create a fork does not
   * have {@link https://www.itwinjs.org/bis/guide/fundamentals/federationguids/ FederationGuid} property set on all its elements.
   * See {@link IModelsErrorCode}.
   */
  async fork(params) {
    const forkIModelBody = this.getForkIModelRequestBody(params.iModelProperties);
    const forkIModelResponse = await this.sendPostRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getForkIModelUrl({ iModelId: params.iModelId }),
      body: forkIModelBody,
      headers: params.headers
    });
    const locationHeaderValue = forkIModelResponse.headers.get(Constants$3.headers.location);
    assertStringHeaderValue(Constants$3.headers.location, locationHeaderValue);
    const { iModelId: forkIModelId } = this._options.urlFormatter.parseIModelUrl(locationHeaderValue);
    await this.waitForIModelForkInitialization({
      authorization: params.authorization,
      iModelId: forkIModelId,
      headers: params.headers,
      timeOutInMs: params.timeOutInMs
    });
    return this.getSingle({
      authorization: params.authorization,
      iModelId: forkIModelId
    });
  }
  /**
   * Updates iModel properties. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/update-imodel/ Update iModel} operation from iModels API.
   * @param {UpdateIModelParams} params parameters for this operation. See {@link UpdateIModelParams}.
   * @returns {Promise<IModel>} updated iModel. See {@link IModel}.
   */
  async update(params) {
    const updateIModelBody = this.getUpdateIModelRequestBody(params.iModelProperties);
    const updateIModelResponse = await this.sendPatchRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getSingleIModelUrl({ iModelId: params.iModelId }),
      body: updateIModelBody,
      headers: params.headers
    });
    const result = this.appendRelatedEntityCallbacks(params.authorization, updateIModelResponse.body.iModel, params.headers);
    return result;
  }
  /**
   * Deletes an iModel with specified id. Wraps the {@link https://developer.bentley.com/apis/imodels-v2/operations/delete-imodel/ Delete iModel}
   * operation from iModels API.
   * @param {DeleteIModelParams} params parameters for this operation. See {@link DeleteIModelParams}.
   * @returns {Promise<void>} a promise that resolves after operation completes.
   */
  async delete(params) {
    await this.sendDeleteRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getSingleIModelUrl({ iModelId: params.iModelId }),
      headers: params.headers
    });
  }
  appendRelatedEntityCallbacks(authorization, iModel, headers) {
    const getCreator = async () => this.getCreator(authorization, iModel._links.creator?.href, headers);
    const result = {
      ...iModel,
      getCreator
    };
    return result;
  }
  getCreateEmptyIModelRequestBody(iModelProperties) {
    const result = {
      iTwinId: iModelProperties.iTwinId,
      name: iModelProperties.name,
      description: iModelProperties.description,
      extent: iModelProperties.extent,
      containersEnabled: iModelProperties.containersEnabled,
      creationMode: iModelProperties.creationMode,
      geographicCoordinateSystem: iModelProperties.geographicCoordinateSystem
    };
    return result;
  }
  async sendIModelPostRequest(authorization, createIModelBody, headers) {
    const createIModelResponse = await this.sendPostRequest({
      authorization,
      url: this._options.urlFormatter.getCreateIModelUrl(),
      body: createIModelBody,
      headers
    });
    return createIModelResponse.body.iModel;
  }
  async getCreator(authorization, creatorLink, headers) {
    if (!creatorLink)
      return void 0;
    const { iModelId, userId } = this._options.urlFormatter.parseUserUrl(creatorLink);
    return this._iModelsClient.users.getSingle({
      authorization,
      iModelId,
      userId,
      headers
    });
  }
  getCreateIModelFromTemplateRequestBody(iModelProperties) {
    const emptyIModelParams = this.getCreateEmptyIModelRequestBody(iModelProperties);
    return {
      ...emptyIModelParams,
      template: {
        iModelId: iModelProperties.template.iModelId,
        changesetId: iModelProperties.template.changesetId
      }
    };
  }
  getCloneIModelRequestBody(iModelProperties) {
    return {
      iTwinId: iModelProperties.iTwinId,
      name: iModelProperties.name,
      description: iModelProperties.description,
      changesetId: iModelProperties.changesetId,
      changesetIndex: iModelProperties.changesetIndex,
      containersEnabled: iModelProperties.containersEnabled
    };
  }
  getForkIModelRequestBody(iModelProperties) {
    return {
      iTwinId: iModelProperties.iTwinId,
      name: iModelProperties.name,
      description: iModelProperties.description,
      changesetId: iModelProperties.changesetId,
      changesetIndex: iModelProperties.changesetIndex,
      preserveHistory: iModelProperties.preserveHistory,
      containersEnabled: iModelProperties.containersEnabled
    };
  }
  getUpdateIModelRequestBody(iModelProperties) {
    return {
      name: iModelProperties.name,
      description: iModelProperties.description,
      extent: iModelProperties.extent
    };
  }
  async isIModelInitialized(params) {
    const { state: state2 } = await this._iModelsClient.operations.getCreateIModelDetails({
      authorization: params.authorization,
      iModelId: params.iModelId,
      headers: params.headers
    });
    if (state2 !== IModelCreationState.Scheduled && state2 !== IModelCreationState.WaitingForFile && state2 !== IModelCreationState.Successful)
      throw new IModelsErrorImpl({
        code: params.errorCodeOnFailure,
        message: `iModel initialization failed with state '${state2}'`,
        originalError: void 0,
        statusCode: void 0,
        details: void 0
      });
    return state2 === IModelCreationState.Successful;
  }
  async isIModelForkInitialized(params) {
    const { state: state2 } = await this._iModelsClient.operations.getCreateIModelDetails({
      authorization: params.authorization,
      iModelId: params.iModelId,
      headers: params.headers
    });
    if (state2 === IModelCreationState.MainIModelIsMissingFederationGuids)
      throw new IModelsErrorImpl({
        code: IModelsErrorCode.MainIModelIsMissingFederationGuids,
        message: "iModel fork initialization failed because some elements in the main iModel do not have FederationGuid property set.",
        originalError: void 0,
        statusCode: void 0,
        details: void 0
      });
    if (state2 !== IModelCreationState.Scheduled && state2 !== IModelCreationState.WaitingForFile && state2 !== IModelCreationState.Successful)
      throw new IModelsErrorImpl({
        code: IModelsErrorCode.IModelForkInitializationFailed,
        message: `iModel fork initialization failed with state '${state2}'`,
        originalError: void 0,
        statusCode: void 0,
        details: void 0
      });
    return state2 === IModelCreationState.Successful;
  }
  async waitForEmptyIModelInitialization(params) {
    return waitForCondition({
      conditionToSatisfy: async () => this.isIModelInitialized({
        authorization: params.authorization,
        iModelId: params.iModelId,
        errorCodeOnFailure: IModelsErrorCode.EmptyIModelInitializationFailed,
        headers: params.headers
      }),
      timeoutErrorFactory: () => new IModelsErrorImpl({
        code: IModelsErrorCode.EmptyIModelInitializationFailed,
        message: "Timed out waiting for empty iModel initialization.",
        originalError: void 0,
        statusCode: void 0,
        details: void 0
      }),
      timeOutInMs: params.timeOutInMs
    });
  }
  async waitForTemplatedIModelInitialization(params) {
    return waitForCondition({
      conditionToSatisfy: async () => this.isIModelInitialized({
        authorization: params.authorization,
        iModelId: params.iModelId,
        errorCodeOnFailure: IModelsErrorCode.IModelFromTemplateInitializationFailed,
        headers: params.headers
      }),
      timeoutErrorFactory: () => new IModelsErrorImpl({
        code: IModelsErrorCode.IModelFromTemplateInitializationTimedOut,
        message: "Timed out waiting for Baseline File initialization.",
        originalError: void 0,
        statusCode: void 0,
        details: void 0
      }),
      timeOutInMs: params.timeOutInMs
    });
  }
  async waitForClonedIModelInitialization(params) {
    return waitForCondition({
      conditionToSatisfy: async () => this.isIModelInitialized({
        authorization: params.authorization,
        iModelId: params.iModelId,
        errorCodeOnFailure: IModelsErrorCode.ClonedIModelInitializationFailed,
        headers: params.headers
      }),
      timeoutErrorFactory: () => new IModelsErrorImpl({
        code: IModelsErrorCode.ClonedIModelInitializationTimedOut,
        message: "Timed out waiting for Cloned iModel initialization.",
        originalError: void 0,
        statusCode: void 0,
        details: void 0
      }),
      timeOutInMs: params.timeOutInMs
    });
  }
  async waitForIModelForkInitialization(params) {
    return waitForCondition({
      conditionToSatisfy: async () => this.isIModelForkInitialized({
        authorization: params.authorization,
        iModelId: params.iModelId,
        headers: params.headers
      }),
      timeoutErrorFactory: () => new IModelsErrorImpl({
        code: IModelsErrorCode.IModelForkInitializationTimedOut,
        message: "Timed out waiting for iModel fork initialization.",
        originalError: void 0,
        statusCode: void 0,
        details: void 0
      }),
      timeOutInMs: params.timeOutInMs
    });
  }
};
let BriefcaseOperations$2 = class BriefcaseOperations extends OperationsBase$1 {
  constructor(options, _iModelsClient) {
    super(options);
    this._iModelsClient = _iModelsClient;
  }
  /**
   * Gets Briefcases of a specific iModel. This method returns Briefcases in their minimal representation. The returned iterator
   * internally queries entities in pages. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-briefcases/ Get iModel Briefcases}
   * operation from iModels API.
   * @param {GetBriefcaseListParams} params parameters for this operation. See {@link GetBriefcaseListParams}.
   * @returns {EntityListIterator<MinimalBriefcase>} iterator for Briefcase list. See {@link EntityListIterator},
   * {@link MinimalBriefcase}.
   */
  getMinimalList(params) {
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getBriefcaseListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
      preferReturn: PreferReturn.Minimal,
      entityCollectionAccessor: (response) => response.body.briefcases,
      headers: params.headers
    }));
  }
  /**
   * Gets Briefcases of a specific iModel. This method returns Briefcases in their full representation. The returned iterator
   * internally queries entities in pages. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-briefcases/ Get iModel Briefcases}
   * operation from iModels API.
   * @param {GetBriefcaseListParams} params parameters for this operation. See {@link GetBriefcaseListParams}.
   * @returns {EntityListIterator<Briefcase>} iterator for Briefcase list. See {@link EntityListIterator}, {@link Briefcase}.
   */
  getRepresentationList(params) {
    const entityCollectionAccessor = (response) => {
      const briefcases = response.body.briefcases;
      const mappedBriefcases = briefcases.map((briefcase) => this.appendRelatedEntityCallbacks(params.authorization, briefcase, params.headers));
      return mappedBriefcases;
    };
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getBriefcaseListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
      preferReturn: PreferReturn.Representation,
      entityCollectionAccessor,
      headers: params.headers
    }));
  }
  /**
   * Gets a single Briefcase by its id. This method returns a Briefcase in its full representation. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-briefcase-details/ Get iModel Briefcase}
   * operation from iModels API.
   * @param {GetSingleBriefcaseParams} params parameters for this operation. See {@link GetSingleBriefcaseParams}.
   * @returns {Promise<Briefcase>} an Briefcase with specified id. See {@link iModel}.
   */
  async getSingle(params) {
    const response = await this.sendGetRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getSingleBriefcaseUrl({ iModelId: params.iModelId, briefcaseId: params.briefcaseId }),
      headers: params.headers
    });
    const result = this.appendRelatedEntityCallbacks(params.authorization, response.body.briefcase, params.headers);
    return result;
  }
  appendRelatedEntityCallbacks(authorization, briefcase, headers) {
    const getOwner = async () => getUser(authorization, this._iModelsClient.users, this._options.urlFormatter, briefcase._links.owner?.href, headers);
    const checkpointLink = briefcase._links.checkpoint;
    assertLink(checkpointLink);
    const getCheckpoint = async () => {
      const response = await this.sendGetRequest({
        authorization,
        url: checkpointLink.href,
        headers
      });
      return response.body.checkpoint;
    };
    const result = {
      ...briefcase,
      getOwner,
      getCheckpoint
    };
    return result;
  }
};
let ChangesetOperations$2 = class ChangesetOperations extends OperationsBase$1 {
  constructor(options, _iModelsClient) {
    super(options);
    this._iModelsClient = _iModelsClient;
  }
  /**
   * Gets Changesets for a specific iModel. This method returns Changesets in their minimal representation. The
   * returned iterator internally queries entities in pages. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changesets/ Get iModel Changesets}
   * operation from iModels API.
   * @param {GetChangesetListParams} params parameters for this operation. See {@link GetChangesetListParams}.
   * @returns {EntityListIterator<MinimalChangeset>} iterator for Changeset list. See {@link EntityListIterator},
   * {@link MinimalChangeset}.
   */
  getMinimalList(params) {
    const entityCollectionAccessor = (response) => {
      const changesets = response.body.changesets;
      const mappedChangesets = changesets.map((changeset) => this.appendRelatedMinimalEntityCallbacks(params.authorization, changeset, params.headers));
      return mappedChangesets;
    };
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getChangesetListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
      preferReturn: PreferReturn.Minimal,
      entityCollectionAccessor,
      headers: params.headers
    }));
  }
  /**
   * Gets Changesets for a specific iModel. This method returns Changesets in their full representation. The returned
   * iterator internally queries entities in pages. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changesets/ Get iModel Changesets}
   * operation from iModels API.
   * @param {GetChangesetListParams} params parameters for this operation. See {@link GetChangesetListParams}.
   * @returns {EntityListIterator<Changeset>} iterator for Changeset list. See {@link EntityListIterator},
   * {@link Changeset}.
   */
  getRepresentationList(params) {
    const entityCollectionAccessor = (response) => {
      const changesets = response.body.changesets;
      const mappedChangesets = changesets.map((changeset) => this.appendRelatedEntityCallbacks(params.authorization, changeset, params.headers));
      return mappedChangesets;
    };
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getChangesetListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
      preferReturn: PreferReturn.Representation,
      entityCollectionAccessor,
      headers: params.headers
    }));
  }
  /**
   * Gets a single Changeset identified by either index or id. This method returns a Changeset in its full representation.
   * Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changeset-details/ Get iModel Changeset}
   * operation from iModels API.
   * @param {GetSingleChangesetParams} params parameters for this operation. See {@link GetSingleChangesetParams}.
   * @returns {Promise<Changeset>} a Changeset with specified id or index. See {@link Changeset}.
   */
  async getSingle(params) {
    const changeset = await this.querySingleInternal(params);
    return changeset;
  }
  async querySingleInternal(params) {
    const { authorization, iModelId, headers, ...changesetIdOrIndex } = params;
    const response = await this.sendGetRequest({
      authorization,
      url: this._options.urlFormatter.getSingleChangesetUrl({ iModelId, ...changesetIdOrIndex }),
      headers
    });
    const result = this.appendRelatedEntityCallbacks(params.authorization, response.body.changeset, params.headers);
    return result;
  }
  appendRelatedMinimalEntityCallbacks(authorization, changeset, headers) {
    const getCreator = async () => getUser(authorization, this._iModelsClient.users, this._options.urlFormatter, changeset._links.creator?.href, headers);
    const result = {
      ...changeset,
      getCreator
    };
    return result;
  }
  appendRelatedEntityCallbacks(authorization, changeset, headers) {
    const getNamedVersion = async () => this.getNamedVersion(authorization, changeset._links.namedVersion?.href, headers);
    const getCurrentOrPrecedingCheckpoint = async () => this.getCurrentOrPrecedingCheckpoint(authorization, changeset._links.currentOrPrecedingCheckpoint?.href, headers);
    const changesetWithMinimalCallbacks = this.appendRelatedMinimalEntityCallbacks(authorization, changeset, headers);
    const result = {
      ...changesetWithMinimalCallbacks,
      getNamedVersion,
      getCurrentOrPrecedingCheckpoint
    };
    return result;
  }
  async getNamedVersion(authorization, namedVersionLink, headers) {
    if (!namedVersionLink)
      return void 0;
    const { iModelId, namedVersionId } = this._options.urlFormatter.parseNamedVersionUrl(namedVersionLink);
    return this._iModelsClient.namedVersions.getSingle({
      authorization,
      iModelId,
      namedVersionId,
      headers
    });
  }
  async getCurrentOrPrecedingCheckpoint(authorization, currentOrPrecedingCheckpointLink, headers) {
    if (!currentOrPrecedingCheckpointLink)
      return void 0;
    const entityIds = this._options.urlFormatter.parseCheckpointUrl(currentOrPrecedingCheckpointLink);
    return this._iModelsClient.checkpoints.getSingle({
      authorization,
      ...entityIds,
      headers
    });
  }
};
let ChangesetExtendedDataOperations$2 = class ChangesetExtendedDataOperations extends OperationsBase$1 {
  constructor(options) {
    super(options);
  }
  /**
   * Gets Changesets Extended Data for a specific iModel. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changesets-extended-data/ Get iModel Changesets Extended Data}
   * operation from iModels API.
   * @param {GetChangesetExtendedDataListParams} params parameters for this operation. See {@link GetChangesetExtendedDataListParams}.
   * @returns {EntityListIterator<ChangesetExtendedData>} iterator for Changeset Extended Data list. See {@link EntityListIterator}.
   */
  getList(params) {
    const entityCollectionAccessor = (response) => {
      const apiResponse = response.body.extendedData;
      const mappedChangesetExtendedData = apiResponse.map((extendedData) => this.convertToChangesetExtendedData(extendedData));
      return mappedChangesetExtendedData;
    };
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getChangesetExtendedDataListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
      entityCollectionAccessor,
      headers: params.headers
    }));
  }
  /**
   * Gets a single Changeset Extended Data identified by either Changeset index or id. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changeset-extended-data-details/ Get iModel Changeset Extended Data}
   * operation from iModels API.
   * @param {GetSingleChangesetExtendedDataParams} params parameters for this operation. See {@link GetSingleChangesetExtendedDataParams}.
   * @returns {Promise<ChangesetExtendedData>} a Changeset Extended Data with the specified changeset id or index. See {@link ChangesetExtendedData}.
   */
  async getSingle(params) {
    const { authorization, iModelId, headers, ...changesetIdOrIndex } = params;
    const response = await this.sendGetRequest({
      authorization,
      url: this._options.urlFormatter.getSingleChangesetExtendedDataUrl({ iModelId, ...changesetIdOrIndex }),
      headers
    });
    return this.convertToChangesetExtendedData(response.body.extendedData);
  }
  convertToChangesetExtendedData(changesetExtendedDataApiResponse) {
    return {
      changesetId: changesetExtendedDataApiResponse.changesetId,
      changesetIndex: changesetExtendedDataApiResponse.changesetIndex,
      data: this.convertBase64StringToObject(changesetExtendedDataApiResponse.data)
    };
  }
  convertBase64StringToObject(input) {
    if (typeof window !== "undefined") {
      const binString = atob(input);
      const bytes = Uint8Array.from(binString, (m) => m.charCodeAt(0));
      return JSON.parse(new TextDecoder().decode(bytes));
    } else {
      const decodedString = Buffer.from(input, "base64").toString("utf8");
      return JSON.parse(decodedString);
    }
  }
};
let ChangesetGroupOperations$2 = class ChangesetGroupOperations extends OperationsBase$1 {
  constructor(options, _iModelsClient) {
    super(options);
    this._iModelsClient = _iModelsClient;
  }
  /**
   * Gets Changeset Groups for a specific iModel. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changeset-groups/ Get iModel Changeset Groups}
   * operation from iModels API.
   * @param {GetChangesetGroupListParams} params parameters for this operation. See {@link GetChangesetGroupListParams}.
   * @returns {EntityListIterator<ChangesetGroup>} iterator for Changeset Group list, which internally queries entities in pages.
   * See {@link EntityListIterator}, {@link ChangesetGroup}.
   */
  getList(params) {
    const entityCollectionAccessor = (response) => {
      const changesetGroups = response.body.changesetGroups;
      const mappedChangesetGroups = changesetGroups.map((changesetGroup) => this.appendRelatedEntityCallbacks(params.authorization, changesetGroup, params.headers));
      return mappedChangesetGroups;
    };
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getChangesetGroupListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
      entityCollectionAccessor,
      headers: params.headers
    }));
  }
  /**
   * Gets a single Changeset Group identified by id. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changeset-group-details/ Get iModel Changeset Group}
   * operation from iModels API.
   * @param {GetSingleChangesetGroupParams} params parameters for this operation. See {@link GetSingleChangesetGroupParams}.
   * @returns {Promise<ChangesetGroup>} a Changeset Group with the specified id. See {@link ChangesetGroup}.
   */
  async getSingle(params) {
    const response = await this.sendGetRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getSingleChangesetGroupUrl({ iModelId: params.iModelId, changesetGroupId: params.changesetGroupId }),
      headers: params.headers
    });
    const result = this.appendRelatedEntityCallbacks(params.authorization, response.body.changesetGroup, params.headers);
    return result;
  }
  appendRelatedEntityCallbacks(authorization, changesetGroup, headers) {
    const getCreator = async () => getUser(authorization, this._iModelsClient.users, this._options.urlFormatter, changesetGroup._links.creator?.href, headers);
    const result = {
      ...changesetGroup,
      getCreator
    };
    return result;
  }
};
let NamedVersionOperations$1 = class NamedVersionOperations extends OperationsBase$1 {
  constructor(options, _iModelsClient) {
    super(options);
    this._iModelsClient = _iModelsClient;
  }
  /**
   * Gets Named Versions of a specific iModel. This method returns Named Versions in their minimal representation. The
   * returned iterator internally queries entities in pages. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-named-versions/ Get iModel Named Versions}
   * operation from iModels API.
   * @param {GetNamedVersionListParams} params parameters for this operation. See {@link GetNamedVersionListParams}.
   * @returns {EntityListIterator<MinimalNamedVersion>} iterator for Named Version list. See {@link EntityListIterator},
   * {@link MinimalNamedVersion}.
   */
  getMinimalList(params) {
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getNamedVersionListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
      preferReturn: PreferReturn.Minimal,
      entityCollectionAccessor: (response) => response.body.namedVersions,
      headers: params.headers
    }));
  }
  /**
   * Gets Named Versions of a specific iModel. This method returns Named Versions in their full representation. The
   * returned iterator internally queries entities in pages. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-named-versions/
   * Get iModel Named Versions} operation from iModels API.
   * @param {GetNamedVersionListParams} params parameters for this operation. See {@link GetNamedVersionListParams}.
   * @returns {EntityListIterator<NamedVersion>} iterator for Named Version list. See {@link EntityListIterator},
   * {@link NamedVersion}.
   */
  getRepresentationList(params) {
    const entityCollectionAccessor = (response) => {
      const namedVersions = response.body.namedVersions;
      const mappedNamedVersions = namedVersions.map((namedVersion) => this.appendRelatedEntityCallbacks(params.authorization, namedVersion, params.headers));
      return mappedNamedVersions;
    };
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getNamedVersionListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
      preferReturn: PreferReturn.Representation,
      entityCollectionAccessor,
      headers: params.headers
    }));
  }
  /**
   * Gets a single Named Version by its id. This method returns a Named Version in its full representation. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-named-version-details/
   * Get iModel Named Version} operation from iModels API.
   * @param {GetSingleNamedVersionParams} params parameters for this operation. See {@link GetSingleNamedVersionParams}.
   * @returns {Promise<NamedVersion>} a Named Version with specified id. See {@link NamedVersion}.
   */
  async getSingle(params) {
    const response = await this.sendGetRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getSingleNamedVersionUrl({ iModelId: params.iModelId, namedVersionId: params.namedVersionId }),
      headers: params.headers
    });
    const result = this.appendRelatedEntityCallbacks(params.authorization, response.body.namedVersion, params.headers);
    return result;
  }
  /**
   * Creates a Named Version with specified properties. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel-named-version/
   * Create iModel Named Version} operation from iModels API.
   * @param {CreateNamedVersionParams} params parameters for this operation. See {@link CreateNamedVersionParams}.
   * @returns {Promise<NamedVersion>} newly created Named Version. See {@link NamedVersion}.
   */
  async create(params) {
    const createNamedVersionBody = this.getCreateNamedVersionRequestBody(params.namedVersionProperties);
    const createNamedVersionResponse = await this.sendPostRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getNamedVersionListUrl({ iModelId: params.iModelId }),
      body: createNamedVersionBody,
      headers: params.headers
    });
    const result = this.appendRelatedEntityCallbacks(params.authorization, createNamedVersionResponse.body.namedVersion, params.headers);
    return result;
  }
  /**
   * Updates Named Version with specified properties. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/update-imodel-named-version/
   * Update iModel Named Version} operation from iModels API.
   * @param {UpdateNamedVersionParams} params parameters for this operation. See {@link UpdateNamedVersionParams}.
   * @returns {Promise<NamedVersion>} updated Named Version. See {@link NamedVersion}.
   */
  async update(params) {
    const updateNamedVersionBody = this.getUpdateNamedVersionRequestBody(params.namedVersionProperties);
    const updateNamedVersionResponse = await this.sendPatchRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getSingleNamedVersionUrl({ iModelId: params.iModelId, namedVersionId: params.namedVersionId }),
      body: updateNamedVersionBody,
      headers: params.headers
    });
    const result = this.appendRelatedEntityCallbacks(params.authorization, updateNamedVersionResponse.body.namedVersion, params.headers);
    return result;
  }
  getCreateNamedVersionRequestBody(namedVersionProperties) {
    return {
      name: namedVersionProperties.name,
      description: namedVersionProperties.description,
      changesetId: namedVersionProperties.changesetId
    };
  }
  getUpdateNamedVersionRequestBody(namedVersionProperties) {
    return {
      name: namedVersionProperties.name,
      description: namedVersionProperties.description,
      state: namedVersionProperties.state
    };
  }
  appendRelatedEntityCallbacks(authorization, namedVersion, headers) {
    const getCreator = async () => getUser(authorization, this._iModelsClient.users, this._options.urlFormatter, namedVersion._links.creator?.href, headers);
    const getChangeset = async () => this.getChangeset(authorization, namedVersion._links.changeset?.href, headers);
    const result = {
      ...namedVersion,
      getCreator,
      getChangeset
    };
    return result;
  }
  async getChangeset(authorization, changesetLink, headers) {
    if (!changesetLink)
      return void 0;
    const entityIds = this._options.urlFormatter.parseChangesetUrl(changesetLink);
    return this._iModelsClient.changesets.getSingle({
      authorization,
      ...entityIds,
      headers
    });
  }
};
let CheckpointOperations$1 = class CheckpointOperations extends OperationsBase$1 {
  /**
   * Gets a single Checkpoint generated either on a specific Changeset or for a specific Named Version. This method
   * returns a Checkpoint in its full representation. Wraps
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-changeset-checkpoint/ Get Changeset Checkpoint},
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-named-version-checkpoint/ Get Named Version Checkpoint} and
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-briefcase-checkpoint/ Get Briefcase Checkpoint}
   * operations from iModels API.
   * @param {GetSingleCheckpointParams} params parameters for this operation. See {@link GetSingleCheckpointParams}.
   * @returns {Promise<Checkpoint>} a Checkpoint for the specified parent entity. See {@link Checkpoint}.
   */
  async getSingle(params) {
    const { authorization, iModelId, headers, ...parentEntityId } = params;
    const response = await this.sendGetRequest({
      authorization,
      url: this._options.urlFormatter.getCheckpointUrl({ iModelId, ...parentEntityId }),
      headers
    });
    return response.body.checkpoint;
  }
};
let ThumbnailOperations$1 = class ThumbnailOperations extends OperationsBase$1 {
  /**
   * Downloads a thumbnail for a specific iModel. The Thumbnail returned is either a default one or a custom
   * uploaded one. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-thumbnail/ Download iModel Thumbnail}
   * operation from iModels API.
   * @param {DownloadThumbnailParams} params parameters for this operation. See {@link DownloadThumbnailParams}.
   * @returns {Promise<Thumbnail>} downloaded Thumbnail. See {@link Thumbnail}. The method returns the data in binary
   * form which can then be consumed depending on the environment.
   * @example
   * Save data to local file (Node.js):
   * ```
   *  const thumbnail: Thumbnail = await iModelsClient.thumbnails.download({ ... });
   *  await fs.promises.writeFile("thumbnail.png", Buffer.from(thumbnail.data.buffer), "binary");
   * ```
   */
  async download(params) {
    const urlParams = {
      ...params.urlParams,
      size: params.urlParams?.size ?? ThumbnailSize.Small
    };
    const url2 = this._options.urlFormatter.getThumbnailUrl({ iModelId: params.iModelId, urlParams });
    const response = await this.sendGetRequest({
      authorization: params.authorization,
      url: url2,
      responseType: ContentType.Png,
      headers: params.headers
    });
    return {
      size: urlParams.size,
      imageType: ContentType.Png,
      image: response.body
    };
  }
  /**
   * Uploads a custom iModel Thumbnail. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/upload-imodel-thumbnail/ Upload iModel Thumbnail}
   * operation from iModels API.
   * @param {UploadThumbnailParams} params parameters for this operation. See {@link UploadThumbnailParams}.
   * @returns {Promise<void>} a promise that resolves after operation completes.
   */
  async upload(params) {
    const url2 = this._options.urlFormatter.getThumbnailUrl({ iModelId: params.iModelId });
    await this.sendPutRequest({
      authorization: params.authorization,
      url: url2,
      contentType: params.thumbnailProperties.imageType,
      body: params.thumbnailProperties.image,
      headers: params.headers
    });
  }
};
let UserOperations$1 = class UserOperations extends OperationsBase$1 {
  /** Gets Users who have ever been connected to the iModel specified by the iModel id. This method returns Users in
   * their minimal representation. The returned iterator internally queries entities in pages. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-users/ Get iModel Users}
   * operation from iModels API.
   * @param {GetUserListParams} params parameters for this operation. See {@link GetUserListParams}.
   * @returns {EntityListIterator<MinimalUser>} iterator for User list. See {@link EntityListIterator}, {@link MinimalUser}.
   */
  getMinimalList(params) {
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getUserListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
      preferReturn: PreferReturn.Minimal,
      entityCollectionAccessor: (response) => response.body.users,
      headers: params.headers
    }));
  }
  /**
   * Gets Users who have ever been connected to the iModel specified by the iModel id. This method returns Users in their
   * full representation. The returned iterator internally queries entities in pages. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-users/ Get iModel Users}
   * operation from iModels API.
   * @param {GetUserListParams} params parameters for this operation. See {@link GetUserListParams}.
   * @returns {EntityListIterator<User>} iterator for User list. See {@link EntityListIterator}, {@link User}.
   */
  getRepresentationList(params) {
    return new EntityListIteratorImpl$1(async () => this.getEntityCollectionPage({
      authorization: params.authorization,
      url: this._options.urlFormatter.getUserListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
      preferReturn: PreferReturn.Representation,
      entityCollectionAccessor: (response) => response.body.users,
      headers: params.headers
    }));
  }
  /**
   * Gets a single User by its id. This method returns a User in its full representation. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-user-details/ Get iModel User}
   * operation from iModels API.
   * @param {GetSingleUserParams} params parameters for this operation. See {@link GetSingleUserParams}.
   * @returns {Promise<User>} a User with specified id. See {@link User}.
   */
  async getSingle(params) {
    const response = await this.sendGetRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getSingleUserUrl({ iModelId: params.iModelId, userId: params.userId }),
      headers: params.headers
    });
    return response.body.user;
  }
};
let UserPermissionOperations$1 = class UserPermissionOperations extends OperationsBase$1 {
  /**
   * Retrieves Permissions the current user has for the specified iModel. The current user is determined based on
   * passed authorization information. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-user-permissions/ Get iModel User Permissions}
   * operation from iModels API. iModels Permissions may be configured on a iTwin level or an iModel level.
   * This operation will return Permissions configured for this specific iModel or iTwin Permissions if iModel
   * Permissions are not configured.
   * @param {GetUserPermissionsParams} params parameters for this operation. See {@link GetUserPermissionsParams}.
   * @returns {Promise<UserPermissions>} User Permissions. See {@link UserPermissions}.
   */
  async get(params) {
    const response = await this.sendGetRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getUserPermissionsUrl({ iModelId: params.iModelId }),
      headers: params.headers
    });
    return response.body;
  }
};
let OperationOperations$1 = class OperationOperations extends OperationsBase$1 {
  constructor(options) {
    super(options);
  }
  /**
   * Returns the information about iModel creation process. Wraps the
   * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-create-imodel-operation-details/ Get Create iModel Operation Details}
   * operation from iModels API.
   * @param {GetCreateIModelOperationDetailsParams} params parameters for this operation. See {@link GetCreateIModelOperationDetailsParams}.
   * @returns {Promise<CreateIModelOperationDetails>} iModel creation details. See {@link CreateIModelOperationDetails}.
   */
  async getCreateIModelDetails(params) {
    const response = await this.sendGetRequest({
      authorization: params.authorization,
      url: this._options.urlFormatter.getCreateIModelOperationDetailsUrl({ iModelId: params.iModelId }),
      headers: params.headers
    });
    return response.body.createOperation;
  }
};
let IModelsApiUrlFormatter$2 = class IModelsApiUrlFormatter {
  constructor(baseUrl) {
    this.baseUrl = baseUrl;
    this._regexIgnoreCaseOption = "i";
    this._groupNames = {
      iModelId: "iModelId",
      changesetIdOrIndex: "changesetIdOrIndex",
      namedVersionId: "namedVersionId",
      userId: "userId"
    };
    this._numericRegex = new RegExp("^\\d+$");
    this._changesetUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/changesets/(?<${this._groupNames.changesetIdOrIndex}>[^/]*)`, this._regexIgnoreCaseOption);
    this._checkpointUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/changesets/(?<${this._groupNames.changesetIdOrIndex}>.*)/checkpoint`, this._regexIgnoreCaseOption);
    this._namedVersionUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/namedversions/(?<${this._groupNames.namedVersionId}>[^/]*)`, this._regexIgnoreCaseOption);
    this._userUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/users/(?<${this._groupNames.userId}>[^/]*)`, this._regexIgnoreCaseOption);
    this._iModelUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>[^/]*)`, this._regexIgnoreCaseOption);
  }
  getCreateIModelUrl() {
    return this.baseUrl;
  }
  getCloneIModelUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/clone`;
  }
  getForkIModelUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/fork`;
  }
  getSingleIModelUrl(params) {
    return `${this.baseUrl}/${params.iModelId}`;
  }
  getIModelListUrl(params) {
    return `${this.baseUrl}${this.formQueryString({ ...params.urlParams })}`;
  }
  getSingleBriefcaseUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/briefcases/${params.briefcaseId}`;
  }
  getBriefcaseListUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/briefcases${this.formQueryString({ ...params.urlParams })}`;
  }
  getSingleChangesetUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/changesets/${params.changesetId ?? params.changesetIndex}`;
  }
  getChangesetListUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/changesets${this.formQueryString({ ...params.urlParams })}`;
  }
  getSingleChangesetExtendedDataUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/changesets/${params.changesetId ?? params.changesetIndex}/extendeddata`;
  }
  getChangesetExtendedDataListUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/changesets/extendeddata${this.formQueryString({ ...params.urlParams })}`;
  }
  getSingleChangesetGroupUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/changesetgroups/${params.changesetGroupId}`;
  }
  getChangesetGroupListUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/changesetgroups${this.formQueryString({ ...params.urlParams })}`;
  }
  parseChangesetUrl(url2) {
    const matchedGroups = this._changesetUrlRegex.exec(url2).groups;
    return {
      iModelId: matchedGroups[this._groupNames.iModelId],
      ...this.parseChangesetIdOrIndex(matchedGroups[this._groupNames.changesetIdOrIndex])
    };
  }
  getSingleNamedVersionUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/namedversions/${params.namedVersionId}`;
  }
  getNamedVersionListUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/namedversions${this.formQueryString({ ...params.urlParams })}`;
  }
  getCheckpointUrl(params) {
    let parentEntityUrlPath;
    if (params.namedVersionId)
      parentEntityUrlPath = `namedversions/${params.namedVersionId}`;
    else if (params.changesetId || params.changesetIndex != null)
      parentEntityUrlPath = `changesets/${params.changesetId ?? params.changesetIndex}`;
    else
      parentEntityUrlPath = "briefcases";
    return `${this.baseUrl}/${params.iModelId}/${parentEntityUrlPath}/checkpoint`;
  }
  getThumbnailUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/thumbnail${this.formQueryString({ ...params.urlParams })}`;
  }
  getUserListUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/users${this.formQueryString({ ...params.urlParams })}`;
  }
  getSingleUserUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/users/${params.userId}`;
  }
  getUserPermissionsUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/permissions`;
  }
  getCreateIModelOperationDetailsUrl(params) {
    return `${this.baseUrl}/${params.iModelId}/operations/create`;
  }
  parseCheckpointUrl(url2) {
    const matchedGroups = this._checkpointUrlRegex.exec(url2).groups;
    return {
      iModelId: matchedGroups[this._groupNames.iModelId],
      ...this.parseChangesetIdOrIndex(matchedGroups[this._groupNames.changesetIdOrIndex])
    };
  }
  parseNamedVersionUrl(url2) {
    const matchedGroups = this._namedVersionUrlRegex.exec(url2).groups;
    return {
      iModelId: matchedGroups[this._groupNames.iModelId],
      namedVersionId: matchedGroups[this._groupNames.namedVersionId]
    };
  }
  parseUserUrl(url2) {
    const matchedGroups = this._userUrlRegex.exec(url2).groups;
    return {
      iModelId: matchedGroups[this._groupNames.iModelId],
      userId: matchedGroups[this._groupNames.userId]
    };
  }
  parseIModelUrl(url2) {
    const matchedGroups = this._iModelUrlRegex.exec(url2).groups;
    return {
      iModelId: matchedGroups[this._groupNames.iModelId]
    };
  }
  formQueryString(urlParameters) {
    let queryString = "";
    for (const urlParameterKey in urlParameters) {
      if (!Object.prototype.hasOwnProperty.call(urlParameters, urlParameterKey))
        continue;
      const urlParameterValue = urlParameters[urlParameterKey];
      if (!this.shouldAppendToUrl(urlParameterValue))
        continue;
      queryString = this.appendToQueryString(queryString, urlParameterKey, urlParameterValue);
    }
    return queryString;
  }
  /**
   * API could return Changeset urls that either contain id or index since both are valid identifiers
   * so here we handle both scenarios. We assume if the value contains only digits and is shorter than 40
   * symbols it is a numeric index, otherwise, it is a string id.
   */
  parseChangesetIdOrIndex(changesetIdOrIndex) {
    const containsOnlyDigits = this._numericRegex.test(changesetIdOrIndex);
    if (containsOnlyDigits && changesetIdOrIndex.length < 40)
      return {
        changesetIndex: parseInt(changesetIdOrIndex, 10)
      };
    return {
      changesetId: changesetIdOrIndex
    };
  }
  shouldAppendToUrl(urlParameterValue) {
    if (urlParameterValue === null || urlParameterValue === void 0)
      return false;
    if (typeof urlParameterValue === "string" && !urlParameterValue.trim())
      return false;
    return true;
  }
  appendToQueryString(existingQueryString, parameterKey, parameterValue) {
    const separator = existingQueryString.length === 0 ? "?" : "&";
    return `${existingQueryString}${separator}${parameterKey}=${this.stringify(parameterValue)}`;
  }
  stringify(urlParameterValue) {
    if (this.isSingleOrderBy(urlParameterValue)) {
      return this.stringifyOrderByParameterValue([urlParameterValue]);
    } else if (this.isMultipleOrderBy(urlParameterValue)) {
      return this.stringifyOrderByParameterValue(urlParameterValue);
    }
    return urlParameterValue.toString();
  }
  isSingleOrderBy(parameterValue) {
    return parameterValue.property !== void 0;
  }
  isMultipleOrderBy(parameterValue) {
    return parameterValue?.[0]?.property !== void 0;
  }
  stringifyOrderByParameterValue(orderByCriteria) {
    let result = "";
    for (let i = 0; i < orderByCriteria.length; i++) {
      if (i !== 0)
        result += ",";
      const criterion = orderByCriteria[i];
      result += criterion.property;
      if (criterion.operator !== void 0)
        result += ` ${criterion.operator}`;
    }
    return result;
  }
};
let IModelsClient$1 = class IModelsClient {
  /**
   * Class constructor.
   * @param {iModelsClientOptions} options client options. If `options` are `undefined` or if some of the properties
   * are `undefined` the client uses defaults. See {@link iModelsClientOptions}.
   */
  constructor(options) {
    const filledIModelsClientOptions = IModelsClient.fillManagementClientConfiguration(options);
    this._operationsOptions = {
      ...filledIModelsClientOptions,
      urlFormatter: new IModelsApiUrlFormatter$2(filledIModelsClientOptions.api.baseUrl)
    };
  }
  /** iModel operations. See {@link iModelOperations}. */
  get iModels() {
    return new IModelOperations$2(this._operationsOptions, this);
  }
  /** Briefcase operations. See {@link BriefcaseOperations}. */
  get briefcases() {
    return new BriefcaseOperations$2(this._operationsOptions, this);
  }
  /** Changeset operations. See {@link ChangesetOperations}. */
  get changesets() {
    return new ChangesetOperations$2(this._operationsOptions, this);
  }
  /** Changeset Extended Data operations. See {@link ChangesetExtendedDataOperations}. */
  get changesetExtendedData() {
    return new ChangesetExtendedDataOperations$2(this._operationsOptions);
  }
  /** Changeset Group operations. See {@link ChangesetGroupOperations}. */
  get changesetGroups() {
    return new ChangesetGroupOperations$2(this._operationsOptions, this);
  }
  /** Named version operations. See {@link NamedVersionOperations}. */
  get namedVersions() {
    return new NamedVersionOperations$1(this._operationsOptions, this);
  }
  /** Checkpoint operations. See {@link CheckpointOperations}. */
  get checkpoints() {
    return new CheckpointOperations$1(this._operationsOptions);
  }
  /** Thumbnail operations. See {@link ThumbnailOperations}. */
  get thumbnails() {
    return new ThumbnailOperations$1(this._operationsOptions);
  }
  /** User operations. See {@link UserOperations}. */
  get users() {
    return new UserOperations$1(this._operationsOptions);
  }
  /** User Permission operations. See {@link UserPermissionOperations}. */
  get userPermissions() {
    return new UserPermissionOperations$1(this._operationsOptions);
  }
  /** Operation operations. See {@link OperationOperations}. */
  get operations() {
    return new OperationOperations$1(this._operationsOptions);
  }
  static fillManagementClientConfiguration(options) {
    const retryPolicy2 = options?.retryPolicy ?? new AxiosRetryPolicy$1({
      maxRetries: Constants$3.retryPolicy.maxRetries,
      backoffAlgorithm: new ExponentialBackoffAlgorithm$1({
        baseDelayInMs: Constants$3.retryPolicy.baseDelayInMs,
        factor: Constants$3.retryPolicy.delayFactor
      })
    });
    return {
      api: this.fillApiConfiguration(options?.api),
      restClient: options?.restClient ?? new AxiosRestClient$1(IModelsErrorParser$2.parse, retryPolicy2),
      headers: options?.headers ?? {},
      retryPolicy: retryPolicy2
    };
  }
  static fillApiConfiguration(apiOptions) {
    return {
      baseUrl: apiOptions?.baseUrl ?? Constants$3.api.baseUrl,
      version: apiOptions?.version ?? Constants$3.api.version
    };
  }
};
const esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  get BriefcaseOrderByProperty() {
    return BriefcaseOrderByProperty;
  },
  get ChangesetGroupState() {
    return ChangesetGroupState;
  },
  get ChangesetOrderByProperty() {
    return ChangesetOrderByProperty;
  },
  get ChangesetState() {
    return ChangesetState;
  },
  get CheckpointState() {
    return CheckpointState;
  },
  get ContainerTypes() {
    return ContainerTypes;
  },
  get ContainingChanges() {
    return ContainingChanges;
  },
  get ContentType() {
    return ContentType;
  },
  get IModelCreationState() {
    return IModelCreationState;
  },
  get IModelOrderByProperty() {
    return IModelOrderByProperty;
  },
  get IModelPermission() {
    return IModelPermission;
  },
  get IModelState() {
    return IModelState;
  },
  IModelsClient: IModelsClient$1,
  get IModelsErrorCode() {
    return IModelsErrorCode;
  },
  get NamedVersionOrderByProperty() {
    return NamedVersionOrderByProperty;
  },
  get NamedVersionState() {
    return NamedVersionState;
  },
  get OrderByOperator() {
    return OrderByOperator;
  },
  get PreferReturn() {
    return PreferReturn;
  },
  SPECIAL_VALUES_ME,
  get ThumbnailSize() {
    return ThumbnailSize;
  },
  get UserOrderByProperty() {
    return UserOrderByProperty;
  },
  flatten,
  isIModelsApiError,
  map,
  take,
  toArray: toArray$1
}, Symbol.toStringTag, { value: "Module" }));
const require$$4 = /* @__PURE__ */ getAugmentedNamespace(esm);
var ErrorHandlingFunctions = {};
var ErrorAdapter = {};
var hasRequiredErrorAdapter;
function requireErrorAdapter() {
  if (hasRequiredErrorAdapter) return ErrorAdapter;
  hasRequiredErrorAdapter = 1;
  Object.defineProperty(ErrorAdapter, "__esModule", { value: true });
  ErrorAdapter.ErrorAdapter = void 0;
  const core_bentley_1 = require$$0$2;
  const core_common_1 = require$$1;
  const imodels_client_management_1 = require$$4;
  let ErrorAdapter$1 = class ErrorAdapter2 {
    static toIModelError(error, operationName) {
      if (!(0, imodels_client_management_1.isIModelsApiError)(error))
        return error;
      if (error.code === imodels_client_management_1.IModelsErrorCode.Unrecognized)
        return error;
      if (ErrorAdapter2.isAPIAuthError(error.code))
        return error;
      if (ErrorAdapter2.isIncorrectAPIUsageError(error.code))
        return error;
      if (ErrorAdapter2.isAPIErrorWithoutCorrespondingStatus(error.code))
        return error;
      if (error.code === imodels_client_management_1.IModelsErrorCode.InvalidIModelsRequest)
        return ErrorAdapter2.adaptInvalidRequestErrorIfPossible(error);
      let errorNumber = ErrorAdapter2.tryMapGenericErrorCode(error.code, operationName);
      if (!errorNumber)
        errorNumber = ErrorAdapter2.mapErrorCode(error.code);
      return new core_common_1.IModelError(errorNumber, error.message);
    }
    static isAPIAuthError(apiErrorCode) {
      switch (apiErrorCode) {
        case imodels_client_management_1.IModelsErrorCode.Unauthorized:
        case imodels_client_management_1.IModelsErrorCode.InsufficientPermissions:
          return true;
        default:
          return false;
      }
    }
    static isIncorrectAPIUsageError(apiErrorCode) {
      switch (apiErrorCode) {
        case imodels_client_management_1.IModelsErrorCode.TooManyRequests:
        case imodels_client_management_1.IModelsErrorCode.RequestTooLarge:
        case imodels_client_management_1.IModelsErrorCode.InvalidValue:
        case imodels_client_management_1.IModelsErrorCode.InvalidHeaderValue:
        case imodels_client_management_1.IModelsErrorCode.InvalidRequestBody:
        case imodels_client_management_1.IModelsErrorCode.InvalidThumbnailFormat:
        case imodels_client_management_1.IModelsErrorCode.MutuallyExclusivePropertiesProvided:
        case imodels_client_management_1.IModelsErrorCode.MutuallyExclusiveParametersProvided:
        case imodels_client_management_1.IModelsErrorCode.MissingRequestBody:
        case imodels_client_management_1.IModelsErrorCode.MissingRequiredProperty:
        case imodels_client_management_1.IModelsErrorCode.MissingRequiredParameter:
        case imodels_client_management_1.IModelsErrorCode.MissingRequiredHeader:
        case imodels_client_management_1.IModelsErrorCode.InvalidChange:
        // returned when, for example, user attempts to complete Baseline file upload while it is not in progress
        case imodels_client_management_1.IModelsErrorCode.DataConflict:
          return true;
        default:
          return false;
      }
    }
    static isAPIErrorWithoutCorrespondingStatus(apiErrorCode) {
      switch (apiErrorCode) {
        case imodels_client_management_1.IModelsErrorCode.NamedVersionNotFound:
        case imodels_client_management_1.IModelsErrorCode.UserNotFound:
        case imodels_client_management_1.IModelsErrorCode.ChangesetGroupNotFound:
        case imodels_client_management_1.IModelsErrorCode.BaselineFileNotFound:
        case imodels_client_management_1.IModelsErrorCode.BaselineFileInitializationFailed:
        case imodels_client_management_1.IModelsErrorCode.IModelFromTemplateInitializationFailed:
        case imodels_client_management_1.IModelsErrorCode.EmptyIModelInitializationFailed:
        case imodels_client_management_1.IModelsErrorCode.ClonedIModelInitializationFailed:
        case imodels_client_management_1.IModelsErrorCode.ChangesetDownloadFailed:
          return true;
        default:
          return false;
      }
    }
    static adaptInvalidRequestErrorIfPossible(originalError) {
      if (!originalError.details)
        return originalError;
      for (const errorDetail of originalError.details)
        if (errorDetail.innerError?.code === imodels_client_management_1.IModelsErrorCode.MaximumNumberOfBriefcasesPerUser)
          return new core_common_1.IModelError(core_bentley_1.IModelHubStatus.MaximumNumberOfBriefcasesPerUser, originalError.message);
      return originalError;
    }
    static tryMapGenericErrorCode(apiErrorCode, operationName) {
      if (!operationName)
        return;
      if (apiErrorCode === imodels_client_management_1.IModelsErrorCode.RateLimitExceeded && operationName === "acquireBriefcase")
        return core_bentley_1.IModelHubStatus.MaximumNumberOfBriefcasesPerUserPerMinute;
      if (apiErrorCode === imodels_client_management_1.IModelsErrorCode.DownloadAborted && operationName === "downloadChangesets")
        return core_bentley_1.ChangeSetStatus.DownloadCancelled;
      if (apiErrorCode === imodels_client_management_1.IModelsErrorCode.ConflictWithAnotherUser) {
        if (operationName === "createChangeset")
          return core_bentley_1.IModelHubStatus.AnotherUserPushing;
        else if (operationName === "updateLocks")
          return core_bentley_1.IModelHubStatus.LockOwnedByAnotherBriefcase;
      }
      return void 0;
    }
    static mapErrorCode(apiErrorCode) {
      switch (apiErrorCode) {
        case imodels_client_management_1.IModelsErrorCode.Unknown:
          return core_bentley_1.IModelHubStatus.OperationFailed;
        case imodels_client_management_1.IModelsErrorCode.ITwinNotFound:
          return core_bentley_1.IModelHubStatus.ITwinDoesNotExist;
        case imodels_client_management_1.IModelsErrorCode.IModelNotFound:
          return core_bentley_1.IModelHubStatus.iModelDoesNotExist;
        case imodels_client_management_1.IModelsErrorCode.ChangesetNotFound:
          return core_bentley_1.IModelHubStatus.ChangeSetDoesNotExist;
        case imodels_client_management_1.IModelsErrorCode.BriefcaseNotFound:
          return core_bentley_1.IModelHubStatus.BriefcaseDoesNotExist;
        case imodels_client_management_1.IModelsErrorCode.FileNotFound:
          return core_bentley_1.IModelHubStatus.FileDoesNotExist;
        case imodels_client_management_1.IModelsErrorCode.CheckpointNotFound:
          return core_bentley_1.IModelHubStatus.CheckpointDoesNotExist;
        case imodels_client_management_1.IModelsErrorCode.LockNotFound:
          return core_bentley_1.IModelHubStatus.LockDoesNotExist;
        case imodels_client_management_1.IModelsErrorCode.IModelExists:
          return core_bentley_1.IModelHubStatus.iModelAlreadyExists;
        case imodels_client_management_1.IModelsErrorCode.VersionExists:
          return core_bentley_1.IModelHubStatus.VersionAlreadyExists;
        case imodels_client_management_1.IModelsErrorCode.ChangesetExists:
          return core_bentley_1.IModelHubStatus.ChangeSetAlreadyExists;
        case imodels_client_management_1.IModelsErrorCode.NamedVersionOnChangesetExists:
          return core_bentley_1.IModelHubStatus.ChangeSetAlreadyHasVersion;
        case imodels_client_management_1.IModelsErrorCode.NewerChangesExist:
          return core_bentley_1.IModelHubStatus.PullIsRequired;
        case imodels_client_management_1.IModelsErrorCode.BaselineFileInitializationTimedOut:
        case imodels_client_management_1.IModelsErrorCode.IModelFromTemplateInitializationTimedOut:
        case imodels_client_management_1.IModelsErrorCode.ClonedIModelInitializationTimedOut:
          return core_bentley_1.IModelHubStatus.InitializationTimeout;
        default:
          return core_bentley_1.IModelHubStatus.Unknown;
      }
    }
  };
  ErrorAdapter.ErrorAdapter = ErrorAdapter$1;
  return ErrorAdapter;
}
var hasRequiredErrorHandlingFunctions;
function requireErrorHandlingFunctions() {
  if (hasRequiredErrorHandlingFunctions) return ErrorHandlingFunctions;
  hasRequiredErrorHandlingFunctions = 1;
  Object.defineProperty(ErrorHandlingFunctions, "__esModule", { value: true });
  ErrorHandlingFunctions.handleAPIErrors = void 0;
  const ErrorAdapter_1 = requireErrorAdapter();
  async function handleAPIErrors(func, operationName) {
    try {
      const result = await func();
      return result;
    } catch (error) {
      throw ErrorAdapter_1.ErrorAdapter.toIModelError(error, operationName);
    }
  }
  ErrorHandlingFunctions.handleAPIErrors = handleAPIErrors;
  return ErrorHandlingFunctions;
}
var hasRequiredChangesetFunctions;
function requireChangesetFunctions() {
  if (hasRequiredChangesetFunctions) return ChangesetFunctions;
  hasRequiredChangesetFunctions = 1;
  Object.defineProperty(ChangesetFunctions, "__esModule", { value: true });
  ChangesetFunctions.getNamedVersionChangeset = ChangesetFunctions.getLatestMinimalChangesetIfExists = ChangesetFunctions.getLatestFullChangesetIfExists = void 0;
  const core_bentley_1 = require$$0$2;
  const core_common_1 = require$$1;
  const imodels_client_management_1 = require$$4;
  const ErrorHandlingFunctions_1 = requireErrorHandlingFunctions();
  async function getLatestFullChangesetIfExists(iModelsClient, iModelScopedOperationParams) {
    return getLatestChangeset((getChangesetListParams) => iModelsClient.changesets.getRepresentationList(getChangesetListParams), iModelScopedOperationParams);
  }
  ChangesetFunctions.getLatestFullChangesetIfExists = getLatestFullChangesetIfExists;
  async function getLatestMinimalChangesetIfExists(iModelsClient, iModelScopedOperationParams) {
    return getLatestChangeset((getChangesetListParams) => iModelsClient.changesets.getMinimalList(getChangesetListParams), iModelScopedOperationParams);
  }
  ChangesetFunctions.getLatestMinimalChangesetIfExists = getLatestMinimalChangesetIfExists;
  async function getNamedVersionChangeset(iModelsClient, iModelScopedOperationParams, versionName) {
    const getNamedVersionListParams = {
      ...iModelScopedOperationParams,
      urlParams: {
        name: versionName
      }
    };
    const namedVersionsIterator = iModelsClient.namedVersions.getMinimalList(getNamedVersionListParams);
    const namedVersions = await (0, ErrorHandlingFunctions_1.handleAPIErrors)(async () => (0, imodels_client_management_1.toArray)(namedVersionsIterator));
    if (namedVersions.length === 0 || !namedVersions[0].changesetId)
      throw new core_common_1.IModelError(core_bentley_1.IModelStatus.NotFound, `Named version ${versionName} not found`);
    return { id: namedVersions[0].changesetId, index: namedVersions[0].changesetIndex };
  }
  ChangesetFunctions.getNamedVersionChangeset = getNamedVersionChangeset;
  async function getLatestChangeset(changesetQueryFunc, iModelScopedOperationParams) {
    const getChangesetListParams = {
      ...iModelScopedOperationParams,
      urlParams: {
        $top: 1,
        $orderBy: {
          property: imodels_client_management_1.ChangesetOrderByProperty.Index,
          operator: imodels_client_management_1.OrderByOperator.Descending
        }
      }
    };
    const changesetsIterator = changesetQueryFunc(getChangesetListParams);
    const changesets = await (0, ErrorHandlingFunctions_1.handleAPIErrors)(async () => (0, imodels_client_management_1.take)(changesetsIterator, 1));
    if (changesets.length === 0)
      return void 0;
    return changesets[0];
  }
  return ChangesetFunctions;
}
var ChangesetFunctionsExports = requireChangesetFunctions();
var Constants$2 = {};
var hasRequiredConstants$1;
function requireConstants$1() {
  if (hasRequiredConstants$1) return Constants$2;
  hasRequiredConstants$1 = 1;
  Object.defineProperty(Constants$2, "__esModule", { value: true });
  Constants$2.Constants = void 0;
  class Constants3 {
  }
  Constants$2.Constants = Constants3;
  Constants3.ChangeSet0 = { id: "", changesType: 0, description: "initialChangeset", parentId: "", briefcaseId: 0, pushDate: "", userCreated: "", index: 0, size: 0 };
  return Constants$2;
}
var ConstantsExports = requireConstants$1();
var ErrorHandlingFunctionsExports = requireErrorHandlingFunctions();
class FrontendIModelsAccess {
  constructor(iModelsClient) {
    this._emptyChangeset = { index: ConstantsExports.Constants.ChangeSet0.index, id: ConstantsExports.Constants.ChangeSet0.id };
    this._iModelsClient = iModelsClient ?? new IModelsClient$1();
  }
  async getChangesetFromId(arg) {
    const getSingleChangesetParams = {
      ...this.getIModelScopedOperationParams(arg),
      changesetId: arg.changeSetId
    };
    const changeset = await ErrorHandlingFunctionsExports.handleAPIErrors(async () => this._iModelsClient.changesets.getSingle(getSingleChangesetParams));
    if (!changeset)
      throw new IModelError(IModelStatus.NotFound, `Changeset ${arg.changeSetId} not found`);
    return { index: changeset.index, id: changeset.id };
  }
  async getLatestChangeset(arg) {
    const latestChangeset = await ChangesetFunctionsExports.getLatestMinimalChangesetIfExists(this._iModelsClient, this.getIModelScopedOperationParams(arg));
    if (!latestChangeset)
      return this._emptyChangeset;
    return { index: latestChangeset.index, id: latestChangeset.id };
  }
  async getChangesetFromVersion(arg) {
    const version2 = arg.version;
    if (version2.isFirst)
      return this._emptyChangeset;
    const namedVersionChangesetId = version2.getAsOfChangeSet();
    if (namedVersionChangesetId)
      return this.getChangesetFromId({ ...arg, changeSetId: namedVersionChangesetId });
    const namedVersionName = version2.getName();
    if (namedVersionName)
      return this.getChangesetFromNamedVersion({ ...arg, versionName: namedVersionName });
    return this.getLatestChangeset(arg);
  }
  async getChangesetFromNamedVersion(arg) {
    if (!arg.versionName)
      return this.getChangesetFromLatestNamedVersion(arg);
    return ChangesetFunctionsExports.getNamedVersionChangeset(this._iModelsClient, this.getIModelScopedOperationParams(arg), arg.versionName);
  }
  getIModelScopedOperationParams(arg) {
    const authorizationCallback = arg.accessToken ? async () => AccessTokenAdapterExports.AccessTokenAdapter.toAuthorization(arg.accessToken) : AccessTokenAdapterExports.AccessTokenAdapter.toAuthorizationCallback(IModelApp.getAccessToken);
    return {
      authorization: authorizationCallback,
      iModelId: arg.iModelId
    };
  }
  async getChangesetFromLatestNamedVersion(arg) {
    const getNamedVersionListParams = {
      ...this.getIModelScopedOperationParams(arg),
      urlParams: {
        $top: 1,
        $orderBy: {
          property: NamedVersionOrderByProperty.ChangesetIndex,
          operator: OrderByOperator.Descending
        }
      }
    };
    const namedVersionsIterator = this._iModelsClient.namedVersions.getMinimalList(getNamedVersionListParams);
    const namedVersions = await ErrorHandlingFunctionsExports.handleAPIErrors(async () => take(namedVersionsIterator, 1));
    if (namedVersions.length === 0 || !namedVersions[0].changesetIndex || !namedVersions[0].changesetId)
      throw new IModelError(IModelStatus.NotFound, "No named versions found");
    return { index: namedVersions[0].changesetIndex, id: namedVersions[0].changesetId };
  }
}
var lib$3 = {};
var types$1 = {};
var IModelInterfaces = {};
var hasRequiredIModelInterfaces;
function requireIModelInterfaces() {
  if (hasRequiredIModelInterfaces) return IModelInterfaces;
  hasRequiredIModelInterfaces = 1;
  Object.defineProperty(IModelInterfaces, "__esModule", { value: true });
  IModelInterfaces.ContainerTypes = IModelInterfaces.IModelState = void 0;
  var IModelState2;
  (function(IModelState3) {
    IModelState3["NotInitialized"] = "notInitialized";
    IModelState3["Initialized"] = "initialized";
  })(IModelState2 || (IModelInterfaces.IModelState = IModelState2 = {}));
  var ContainerTypes2;
  (function(ContainerTypes3) {
    ContainerTypes3[ContainerTypes3["None"] = 0] = "None";
    ContainerTypes3[ContainerTypes3["SchemaSync"] = 1] = "SchemaSync";
    ContainerTypes3[ContainerTypes3["CodeStore"] = 2] = "CodeStore";
    ContainerTypes3[ContainerTypes3["ViewStore"] = 4] = "ViewStore";
  })(ContainerTypes2 || (IModelInterfaces.ContainerTypes = ContainerTypes2 = {}));
  return IModelInterfaces;
}
var BriefcaseInterfaces = {};
var hasRequiredBriefcaseInterfaces;
function requireBriefcaseInterfaces() {
  if (hasRequiredBriefcaseInterfaces) return BriefcaseInterfaces;
  hasRequiredBriefcaseInterfaces = 1;
  Object.defineProperty(BriefcaseInterfaces, "__esModule", { value: true });
  return BriefcaseInterfaces;
}
var ChangesetInterfaces$1 = {};
var hasRequiredChangesetInterfaces$1;
function requireChangesetInterfaces$1() {
  if (hasRequiredChangesetInterfaces$1) return ChangesetInterfaces$1;
  hasRequiredChangesetInterfaces$1 = 1;
  Object.defineProperty(ChangesetInterfaces$1, "__esModule", { value: true });
  ChangesetInterfaces$1.ContainingChanges = ChangesetInterfaces$1.ChangesetState = void 0;
  var ChangesetState2;
  (function(ChangesetState3) {
    ChangesetState3["WaitingForFile"] = "waitingForFile";
    ChangesetState3["FileUploaded"] = "fileUploaded";
  })(ChangesetState2 || (ChangesetInterfaces$1.ChangesetState = ChangesetState2 = {}));
  var ContainingChanges2;
  (function(ContainingChanges3) {
    ContainingChanges3[ContainingChanges3["Regular"] = 0] = "Regular";
    ContainingChanges3[ContainingChanges3["Schema"] = 1] = "Schema";
    ContainingChanges3[ContainingChanges3["Definition"] = 2] = "Definition";
    ContainingChanges3[ContainingChanges3["SpatialData"] = 4] = "SpatialData";
    ContainingChanges3[ContainingChanges3["SheetsAndDrawings"] = 8] = "SheetsAndDrawings";
    ContainingChanges3[ContainingChanges3["ViewsAndModels"] = 16] = "ViewsAndModels";
    ContainingChanges3[ContainingChanges3["GlobalProperties"] = 32] = "GlobalProperties";
    ContainingChanges3[ContainingChanges3["SchemaSync"] = 64] = "SchemaSync";
  })(ContainingChanges2 || (ChangesetInterfaces$1.ContainingChanges = ContainingChanges2 = {}));
  return ChangesetInterfaces$1;
}
var ChangesetExtendedDataInterfaces = {};
var hasRequiredChangesetExtendedDataInterfaces;
function requireChangesetExtendedDataInterfaces() {
  if (hasRequiredChangesetExtendedDataInterfaces) return ChangesetExtendedDataInterfaces;
  hasRequiredChangesetExtendedDataInterfaces = 1;
  Object.defineProperty(ChangesetExtendedDataInterfaces, "__esModule", { value: true });
  return ChangesetExtendedDataInterfaces;
}
var ChangesetGroupInterfaces = {};
var hasRequiredChangesetGroupInterfaces;
function requireChangesetGroupInterfaces() {
  if (hasRequiredChangesetGroupInterfaces) return ChangesetGroupInterfaces;
  hasRequiredChangesetGroupInterfaces = 1;
  Object.defineProperty(ChangesetGroupInterfaces, "__esModule", { value: true });
  ChangesetGroupInterfaces.ChangesetGroupState = void 0;
  var ChangesetGroupState2;
  (function(ChangesetGroupState3) {
    ChangesetGroupState3["InProgress"] = "inProgress";
    ChangesetGroupState3["Completed"] = "completed";
    ChangesetGroupState3["TimedOut"] = "timedOut";
    ChangesetGroupState3["ForciblyClosed"] = "forciblyClosed";
  })(ChangesetGroupState2 || (ChangesetGroupInterfaces.ChangesetGroupState = ChangesetGroupState2 = {}));
  return ChangesetGroupInterfaces;
}
var NamedVersionInterfaces = {};
var hasRequiredNamedVersionInterfaces;
function requireNamedVersionInterfaces() {
  if (hasRequiredNamedVersionInterfaces) return NamedVersionInterfaces;
  hasRequiredNamedVersionInterfaces = 1;
  Object.defineProperty(NamedVersionInterfaces, "__esModule", { value: true });
  NamedVersionInterfaces.NamedVersionState = void 0;
  var NamedVersionState2;
  (function(NamedVersionState3) {
    NamedVersionState3["Visible"] = "visible";
    NamedVersionState3["Hidden"] = "hidden";
  })(NamedVersionState2 || (NamedVersionInterfaces.NamedVersionState = NamedVersionState2 = {}));
  return NamedVersionInterfaces;
}
var CheckpointInterfaces = {};
var hasRequiredCheckpointInterfaces;
function requireCheckpointInterfaces() {
  if (hasRequiredCheckpointInterfaces) return CheckpointInterfaces;
  hasRequiredCheckpointInterfaces = 1;
  Object.defineProperty(CheckpointInterfaces, "__esModule", { value: true });
  CheckpointInterfaces.CheckpointState = void 0;
  var CheckpointState2;
  (function(CheckpointState3) {
    CheckpointState3["Successful"] = "successful";
    CheckpointState3["Scheduled"] = "scheduled";
    CheckpointState3["Failed"] = "failed";
    CheckpointState3["NotGenerated"] = "notGenerated";
  })(CheckpointState2 || (CheckpointInterfaces.CheckpointState = CheckpointState2 = {}));
  return CheckpointInterfaces;
}
var ThumbnailInterfaces = {};
var hasRequiredThumbnailInterfaces;
function requireThumbnailInterfaces() {
  if (hasRequiredThumbnailInterfaces) return ThumbnailInterfaces;
  hasRequiredThumbnailInterfaces = 1;
  Object.defineProperty(ThumbnailInterfaces, "__esModule", { value: true });
  ThumbnailInterfaces.ThumbnailSize = void 0;
  var ThumbnailSize2;
  (function(ThumbnailSize3) {
    ThumbnailSize3["Small"] = "small";
    ThumbnailSize3["Large"] = "large";
  })(ThumbnailSize2 || (ThumbnailInterfaces.ThumbnailSize = ThumbnailSize2 = {}));
  return ThumbnailInterfaces;
}
var UserInterfaces = {};
var hasRequiredUserInterfaces;
function requireUserInterfaces() {
  if (hasRequiredUserInterfaces) return UserInterfaces;
  hasRequiredUserInterfaces = 1;
  Object.defineProperty(UserInterfaces, "__esModule", { value: true });
  return UserInterfaces;
}
var UserPermissionInterfaces = {};
var hasRequiredUserPermissionInterfaces;
function requireUserPermissionInterfaces() {
  if (hasRequiredUserPermissionInterfaces) return UserPermissionInterfaces;
  hasRequiredUserPermissionInterfaces = 1;
  Object.defineProperty(UserPermissionInterfaces, "__esModule", { value: true });
  UserPermissionInterfaces.IModelPermission = void 0;
  var IModelPermission2;
  (function(IModelPermission3) {
    IModelPermission3["WebView"] = "imodels_webview";
    IModelPermission3["Read"] = "imodels_read";
    IModelPermission3["Write"] = "imodels_write";
    IModelPermission3["Manage"] = "imodels_manage";
    IModelPermission3["Delete"] = "imodels-delete";
  })(IModelPermission2 || (UserPermissionInterfaces.IModelPermission = IModelPermission2 = {}));
  return UserPermissionInterfaces;
}
var OperationInterfaces = {};
var hasRequiredOperationInterfaces;
function requireOperationInterfaces() {
  if (hasRequiredOperationInterfaces) return OperationInterfaces;
  hasRequiredOperationInterfaces = 1;
  Object.defineProperty(OperationInterfaces, "__esModule", { value: true });
  OperationInterfaces.IModelCreationState = void 0;
  var IModelCreationState2;
  (function(IModelCreationState3) {
    IModelCreationState3["Successful"] = "successful";
    IModelCreationState3["WaitingForFile"] = "waitingForFile";
    IModelCreationState3["Scheduled"] = "scheduled";
    IModelCreationState3["Failed"] = "failed";
    IModelCreationState3["MainIModelIsMissingFederationGuids"] = "mainIModelIsMissingFederationGuids";
  })(IModelCreationState2 || (OperationInterfaces.IModelCreationState = IModelCreationState2 = {}));
  return OperationInterfaces;
}
var EntityListIterator = {};
var hasRequiredEntityListIterator;
function requireEntityListIterator() {
  if (hasRequiredEntityListIterator) return EntityListIterator;
  hasRequiredEntityListIterator = 1;
  Object.defineProperty(EntityListIterator, "__esModule", { value: true });
  return EntityListIterator;
}
var IteratorUtilFunctions = {};
var hasRequiredIteratorUtilFunctions;
function requireIteratorUtilFunctions() {
  if (hasRequiredIteratorUtilFunctions) return IteratorUtilFunctions;
  hasRequiredIteratorUtilFunctions = 1;
  Object.defineProperty(IteratorUtilFunctions, "__esModule", { value: true });
  IteratorUtilFunctions.take = IteratorUtilFunctions.toArray = IteratorUtilFunctions.flatten = IteratorUtilFunctions.map = void 0;
  async function* map2(iterator2, mapFunc) {
    for await (const entity of iterator2)
      yield mapFunc(entity);
  }
  IteratorUtilFunctions.map = map2;
  async function* flatten2(pagedIterator) {
    for await (const entityChunk of pagedIterator)
      for (const entity of entityChunk)
        yield entity;
  }
  IteratorUtilFunctions.flatten = flatten2;
  async function toArray2(iterator2) {
    const result = [];
    for await (const entity of iterator2)
      result.push(entity);
    return result;
  }
  IteratorUtilFunctions.toArray = toArray2;
  async function take2(iterator2, entityCount) {
    const result = [];
    for await (const entity of iterator2) {
      result.push(entity);
      if (result.length === entityCount)
        break;
    }
    return result;
  }
  IteratorUtilFunctions.take = take2;
  return IteratorUtilFunctions;
}
var RestClient = {};
var hasRequiredRestClient;
function requireRestClient() {
  if (hasRequiredRestClient) return RestClient;
  hasRequiredRestClient = 1;
  Object.defineProperty(RestClient, "__esModule", { value: true });
  RestClient.ContentType = void 0;
  var ContentType2;
  (function(ContentType3) {
    ContentType3["Json"] = "application/json";
    ContentType3["Png"] = "image/png";
    ContentType3["Jpeg"] = "image/jpeg";
  })(ContentType2 || (RestClient.ContentType = ContentType2 = {}));
  return RestClient;
}
var CommonInterfaces$1 = {};
var hasRequiredCommonInterfaces$1;
function requireCommonInterfaces$1() {
  if (hasRequiredCommonInterfaces$1) return CommonInterfaces$1;
  hasRequiredCommonInterfaces$1 = 1;
  Object.defineProperty(CommonInterfaces$1, "__esModule", { value: true });
  CommonInterfaces$1.PreferReturn = CommonInterfaces$1.OrderByOperator = void 0;
  var OrderByOperator2;
  (function(OrderByOperator3) {
    OrderByOperator3["Ascending"] = "asc";
    OrderByOperator3["Descending"] = "desc";
  })(OrderByOperator2 || (CommonInterfaces$1.OrderByOperator = OrderByOperator2 = {}));
  var PreferReturn2;
  (function(PreferReturn3) {
    PreferReturn3["Minimal"] = "minimal";
    PreferReturn3["Representation"] = "representation";
  })(PreferReturn2 || (CommonInterfaces$1.PreferReturn = PreferReturn2 = {}));
  return CommonInterfaces$1;
}
var UtilityTypes$1 = {};
var hasRequiredUtilityTypes$1;
function requireUtilityTypes$1() {
  if (hasRequiredUtilityTypes$1) return UtilityTypes$1;
  hasRequiredUtilityTypes$1 = 1;
  Object.defineProperty(UtilityTypes$1, "__esModule", { value: true });
  return UtilityTypes$1;
}
var IModelsErrorInterfaces = {};
var hasRequiredIModelsErrorInterfaces;
function requireIModelsErrorInterfaces() {
  if (hasRequiredIModelsErrorInterfaces) return IModelsErrorInterfaces;
  hasRequiredIModelsErrorInterfaces = 1;
  Object.defineProperty(IModelsErrorInterfaces, "__esModule", { value: true });
  IModelsErrorInterfaces.isIModelsApiError = IModelsErrorInterfaces.IModelsErrorCode = void 0;
  var IModelsErrorCode2;
  (function(IModelsErrorCode3) {
    IModelsErrorCode3["BaselineFileInitializationFailed"] = "BaselineFileInitializationFailed";
    IModelsErrorCode3["BaselineFileInitializationTimedOut"] = "BaselineFileInitializationTimedOut";
    IModelsErrorCode3["BaselineFileNotFound"] = "BaselineFileNotFound";
    IModelsErrorCode3["BriefcaseNotFound"] = "BriefcaseNotFound";
    IModelsErrorCode3["ChangesetDownloadFailed"] = "ChangesetDownloadFailed";
    IModelsErrorCode3["ChangesetExists"] = "ChangesetExists";
    IModelsErrorCode3["ChangesetExtendedDataNotFound"] = "ChangesetExtendedDataNotFound";
    IModelsErrorCode3["ChangesetGroupNotFound"] = "ChangesetGroupNotFound";
    IModelsErrorCode3["ChangesetNotFound"] = "ChangesetNotFound";
    IModelsErrorCode3["CheckpointNotFound"] = "CheckpointNotFound";
    IModelsErrorCode3["ClonedIModelInitializationFailed"] = "ClonedIModelInitializationFailed";
    IModelsErrorCode3["ClonedIModelInitializationTimedOut"] = "ClonedIModelInitializationTimedOut";
    IModelsErrorCode3["ConflictWithAnotherUser"] = "ConflictWithAnotherUser";
    IModelsErrorCode3["DataConflict"] = "DataConflict";
    IModelsErrorCode3["DownloadAborted"] = "DownloadAborted";
    IModelsErrorCode3["EmptyIModelInitializationFailed"] = "EmptyIModelInitializationFailed";
    IModelsErrorCode3["FileNotFound"] = "FileNotFound";
    IModelsErrorCode3["IModelExists"] = "iModelExists";
    IModelsErrorCode3["IModelForkInitializationFailed"] = "IModelForkInitializationFailed";
    IModelsErrorCode3["IModelForkInitializationTimedOut"] = "IModelForkInitializationTimedOut";
    IModelsErrorCode3["IModelFromTemplateInitializationFailed"] = "IModelFromTemplateInitializationFailed";
    IModelsErrorCode3["IModelFromTemplateInitializationTimedOut"] = "IModelFromTemplateInitializationTimedOut";
    IModelsErrorCode3["IModelNotFound"] = "iModelNotFound";
    IModelsErrorCode3["InsufficientPermissions"] = "InsufficientPermissions";
    IModelsErrorCode3["InvalidChange"] = "InvalidChange";
    IModelsErrorCode3["InvalidHeaderValue"] = "InvalidHeaderValue";
    IModelsErrorCode3["InvalidIModelGCSCreationMode"] = "InvalidIModelGCSCreationMode";
    IModelsErrorCode3["InvalidIModelsRequest"] = "InvalidiModelsRequest";
    IModelsErrorCode3["InvalidRequestBody"] = "InvalidRequestBody";
    IModelsErrorCode3["InvalidThumbnailFormat"] = "InvalidThumbnailFormat";
    IModelsErrorCode3["InvalidValue"] = "InvalidValue";
    IModelsErrorCode3["ITwinNotFound"] = "iTwinNotFound";
    IModelsErrorCode3["LockNotFound"] = "LockNotFound";
    IModelsErrorCode3["MainIModelIsMissingFederationGuids"] = "MainIModelIsMissingFederationGuids";
    IModelsErrorCode3["MaximumNumberOfBriefcasesPerUser"] = "MaximumNumberOfBriefcasesPerUser";
    IModelsErrorCode3["MissingRequestBody"] = "MissingRequestBody";
    IModelsErrorCode3["MissingRequiredHeader"] = "MissingRequiredHeader";
    IModelsErrorCode3["MissingRequiredParameter"] = "MissingRequiredParameter";
    IModelsErrorCode3["MissingRequiredProperty"] = "MissingRequiredProperty";
    IModelsErrorCode3["MutuallyExclusiveParametersProvided"] = "MutuallyExclusiveParametersProvided";
    IModelsErrorCode3["MutuallyExclusivePropertiesProvided"] = "MutuallyExclusivePropertiesProvided";
    IModelsErrorCode3["NamedVersionNotFound"] = "NamedVersionNotFound";
    IModelsErrorCode3["NamedVersionOnChangesetExists"] = "NamedVersionOnChangesetExists";
    IModelsErrorCode3["NewerChangesExist"] = "NewerChangesExist";
    IModelsErrorCode3["RateLimitExceeded"] = "RateLimitExceeded";
    IModelsErrorCode3["RequestTooLarge"] = "RequestTooLarge";
    IModelsErrorCode3["ResourceQuotaExceeded"] = "ResourceQuotaExceeded";
    IModelsErrorCode3["TooManyRequests"] = "TooManyRequests";
    IModelsErrorCode3["Unauthorized"] = "Unauthorized";
    IModelsErrorCode3["Unknown"] = "Unknown";
    IModelsErrorCode3["Unrecognized"] = "Unrecognized";
    IModelsErrorCode3["UserNotFound"] = "UserNotFound";
    IModelsErrorCode3["VersionExists"] = "NamedVersionExists";
  })(IModelsErrorCode2 || (IModelsErrorInterfaces.IModelsErrorCode = IModelsErrorCode2 = {}));
  function isIModelsApiError2(error) {
    const errorCode = error?.code;
    return errorCode !== void 0 && typeof errorCode === "string";
  }
  IModelsErrorInterfaces.isIModelsApiError = isIModelsApiError2;
  return IModelsErrorInterfaces;
}
var HttpRequestRetryPolicy = {};
var hasRequiredHttpRequestRetryPolicy;
function requireHttpRequestRetryPolicy() {
  if (hasRequiredHttpRequestRetryPolicy) return HttpRequestRetryPolicy;
  hasRequiredHttpRequestRetryPolicy = 1;
  Object.defineProperty(HttpRequestRetryPolicy, "__esModule", { value: true });
  return HttpRequestRetryPolicy;
}
var hasRequiredTypes$4;
function requireTypes$4() {
  if (hasRequiredTypes$4) return types$1;
  hasRequiredTypes$4 = 1;
  (function(exports) {
    var __createBinding = types$1 && types$1.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = types$1 && types$1.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireIModelInterfaces(), exports);
    __exportStar(requireBriefcaseInterfaces(), exports);
    __exportStar(requireChangesetInterfaces$1(), exports);
    __exportStar(requireChangesetExtendedDataInterfaces(), exports);
    __exportStar(requireChangesetGroupInterfaces(), exports);
    __exportStar(requireNamedVersionInterfaces(), exports);
    __exportStar(requireCheckpointInterfaces(), exports);
    __exportStar(requireThumbnailInterfaces(), exports);
    __exportStar(requireUserInterfaces(), exports);
    __exportStar(requireUserPermissionInterfaces(), exports);
    __exportStar(requireOperationInterfaces(), exports);
    __exportStar(requireEntityListIterator(), exports);
    __exportStar(requireIteratorUtilFunctions(), exports);
    __exportStar(requireRestClient(), exports);
    __exportStar(requireCommonInterfaces$1(), exports);
    __exportStar(requireUtilityTypes$1(), exports);
    __exportStar(requireIModelsErrorInterfaces(), exports);
    __exportStar(requireHttpRequestRetryPolicy(), exports);
  })(types$1);
  return types$1;
}
var OperationParamExports$1 = {};
var IModelOperationParams$1 = {};
var hasRequiredIModelOperationParams$1;
function requireIModelOperationParams$1() {
  if (hasRequiredIModelOperationParams$1) return IModelOperationParams$1;
  hasRequiredIModelOperationParams$1 = 1;
  Object.defineProperty(IModelOperationParams$1, "__esModule", { value: true });
  IModelOperationParams$1.IModelOrderByProperty = void 0;
  var IModelOrderByProperty2;
  (function(IModelOrderByProperty3) {
    IModelOrderByProperty3["Name"] = "name";
    IModelOrderByProperty3["CreatedDateTime"] = "createdDateTime";
  })(IModelOrderByProperty2 || (IModelOperationParams$1.IModelOrderByProperty = IModelOrderByProperty2 = {}));
  return IModelOperationParams$1;
}
var BriefcaseOperationParams$1 = {};
var hasRequiredBriefcaseOperationParams$1;
function requireBriefcaseOperationParams$1() {
  if (hasRequiredBriefcaseOperationParams$1) return BriefcaseOperationParams$1;
  hasRequiredBriefcaseOperationParams$1 = 1;
  Object.defineProperty(BriefcaseOperationParams$1, "__esModule", { value: true });
  BriefcaseOperationParams$1.BriefcaseOrderByProperty = BriefcaseOperationParams$1.SPECIAL_VALUES_ME = void 0;
  BriefcaseOperationParams$1.SPECIAL_VALUES_ME = "me";
  var BriefcaseOrderByProperty2;
  (function(BriefcaseOrderByProperty3) {
    BriefcaseOrderByProperty3["AcquiredDateTime"] = "acquiredDateTime";
  })(BriefcaseOrderByProperty2 || (BriefcaseOperationParams$1.BriefcaseOrderByProperty = BriefcaseOrderByProperty2 = {}));
  return BriefcaseOperationParams$1;
}
var ChangesetOperationParams$1 = {};
var hasRequiredChangesetOperationParams$1;
function requireChangesetOperationParams$1() {
  if (hasRequiredChangesetOperationParams$1) return ChangesetOperationParams$1;
  hasRequiredChangesetOperationParams$1 = 1;
  Object.defineProperty(ChangesetOperationParams$1, "__esModule", { value: true });
  ChangesetOperationParams$1.ChangesetOrderByProperty = void 0;
  var ChangesetOrderByProperty2;
  (function(ChangesetOrderByProperty3) {
    ChangesetOrderByProperty3["Index"] = "index";
  })(ChangesetOrderByProperty2 || (ChangesetOperationParams$1.ChangesetOrderByProperty = ChangesetOrderByProperty2 = {}));
  return ChangesetOperationParams$1;
}
var ChangesetExtendedDataOperationParams = {};
var hasRequiredChangesetExtendedDataOperationParams;
function requireChangesetExtendedDataOperationParams() {
  if (hasRequiredChangesetExtendedDataOperationParams) return ChangesetExtendedDataOperationParams;
  hasRequiredChangesetExtendedDataOperationParams = 1;
  Object.defineProperty(ChangesetExtendedDataOperationParams, "__esModule", { value: true });
  return ChangesetExtendedDataOperationParams;
}
var ChangesetGroupOperationParams$1 = {};
var hasRequiredChangesetGroupOperationParams$1;
function requireChangesetGroupOperationParams$1() {
  if (hasRequiredChangesetGroupOperationParams$1) return ChangesetGroupOperationParams$1;
  hasRequiredChangesetGroupOperationParams$1 = 1;
  Object.defineProperty(ChangesetGroupOperationParams$1, "__esModule", { value: true });
  return ChangesetGroupOperationParams$1;
}
var NamedVersionOperationParams = {};
var hasRequiredNamedVersionOperationParams;
function requireNamedVersionOperationParams() {
  if (hasRequiredNamedVersionOperationParams) return NamedVersionOperationParams;
  hasRequiredNamedVersionOperationParams = 1;
  Object.defineProperty(NamedVersionOperationParams, "__esModule", { value: true });
  NamedVersionOperationParams.NamedVersionOrderByProperty = void 0;
  var NamedVersionOrderByProperty2;
  (function(NamedVersionOrderByProperty3) {
    NamedVersionOrderByProperty3["ChangesetIndex"] = "changesetIndex";
    NamedVersionOrderByProperty3["CreatedDateTime"] = "createdDateTime";
  })(NamedVersionOrderByProperty2 || (NamedVersionOperationParams.NamedVersionOrderByProperty = NamedVersionOrderByProperty2 = {}));
  return NamedVersionOperationParams;
}
var CheckpointOperationParams = {};
var hasRequiredCheckpointOperationParams;
function requireCheckpointOperationParams() {
  if (hasRequiredCheckpointOperationParams) return CheckpointOperationParams;
  hasRequiredCheckpointOperationParams = 1;
  Object.defineProperty(CheckpointOperationParams, "__esModule", { value: true });
  return CheckpointOperationParams;
}
var ThumbnailOperationParams = {};
var hasRequiredThumbnailOperationParams;
function requireThumbnailOperationParams() {
  if (hasRequiredThumbnailOperationParams) return ThumbnailOperationParams;
  hasRequiredThumbnailOperationParams = 1;
  Object.defineProperty(ThumbnailOperationParams, "__esModule", { value: true });
  return ThumbnailOperationParams;
}
var UserOperationParams = {};
var hasRequiredUserOperationParams;
function requireUserOperationParams() {
  if (hasRequiredUserOperationParams) return UserOperationParams;
  hasRequiredUserOperationParams = 1;
  Object.defineProperty(UserOperationParams, "__esModule", { value: true });
  UserOperationParams.UserOrderByProperty = void 0;
  var UserOrderByProperty2;
  (function(UserOrderByProperty3) {
    UserOrderByProperty3["GivenName"] = "givenName";
    UserOrderByProperty3["Surname"] = "surname";
  })(UserOrderByProperty2 || (UserOperationParams.UserOrderByProperty = UserOrderByProperty2 = {}));
  return UserOperationParams;
}
var UserPermissionOperationParams = {};
var hasRequiredUserPermissionOperationParams;
function requireUserPermissionOperationParams() {
  if (hasRequiredUserPermissionOperationParams) return UserPermissionOperationParams;
  hasRequiredUserPermissionOperationParams = 1;
  Object.defineProperty(UserPermissionOperationParams, "__esModule", { value: true });
  return UserPermissionOperationParams;
}
var OperationParams = {};
var hasRequiredOperationParams;
function requireOperationParams() {
  if (hasRequiredOperationParams) return OperationParams;
  hasRequiredOperationParams = 1;
  Object.defineProperty(OperationParams, "__esModule", { value: true });
  return OperationParams;
}
var hasRequiredOperationParamExports$1;
function requireOperationParamExports$1() {
  if (hasRequiredOperationParamExports$1) return OperationParamExports$1;
  hasRequiredOperationParamExports$1 = 1;
  (function(exports) {
    var __createBinding = OperationParamExports$1 && OperationParamExports$1.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = OperationParamExports$1 && OperationParamExports$1.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireIModelOperationParams$1(), exports);
    __exportStar(requireBriefcaseOperationParams$1(), exports);
    __exportStar(requireChangesetOperationParams$1(), exports);
    __exportStar(requireChangesetExtendedDataOperationParams(), exports);
    __exportStar(requireChangesetGroupOperationParams$1(), exports);
    __exportStar(requireNamedVersionOperationParams(), exports);
    __exportStar(requireCheckpointOperationParams(), exports);
    __exportStar(requireThumbnailOperationParams(), exports);
    __exportStar(requireUserOperationParams(), exports);
    __exportStar(requireUserPermissionOperationParams(), exports);
    __exportStar(requireOperationParams(), exports);
  })(OperationParamExports$1);
  return OperationParamExports$1;
}
var types = {};
var BaselineFileInterfaces = {};
var hasRequiredBaselineFileInterfaces;
function requireBaselineFileInterfaces() {
  if (hasRequiredBaselineFileInterfaces) return BaselineFileInterfaces;
  hasRequiredBaselineFileInterfaces = 1;
  Object.defineProperty(BaselineFileInterfaces, "__esModule", { value: true });
  BaselineFileInterfaces.BaselineFileState = void 0;
  var BaselineFileState;
  (function(BaselineFileState2) {
    BaselineFileState2["Initialized"] = "initialized";
    BaselineFileState2["WaitingForFile"] = "waitingForFile";
    BaselineFileState2["InitializationScheduled"] = "initializationScheduled";
    BaselineFileState2["InitializationFailed"] = "initializationFailed";
    BaselineFileState2["FileIsBriefcase"] = "fileIsBriefcase";
  })(BaselineFileState || (BaselineFileInterfaces.BaselineFileState = BaselineFileState = {}));
  return BaselineFileInterfaces;
}
var ChangesetInterfaces = {};
var hasRequiredChangesetInterfaces;
function requireChangesetInterfaces() {
  if (hasRequiredChangesetInterfaces) return ChangesetInterfaces;
  hasRequiredChangesetInterfaces = 1;
  Object.defineProperty(ChangesetInterfaces, "__esModule", { value: true });
  return ChangesetInterfaces;
}
var LockErrorInterfaces = {};
var hasRequiredLockErrorInterfaces;
function requireLockErrorInterfaces() {
  if (hasRequiredLockErrorInterfaces) return LockErrorInterfaces;
  hasRequiredLockErrorInterfaces = 1;
  Object.defineProperty(LockErrorInterfaces, "__esModule", { value: true });
  return LockErrorInterfaces;
}
var LockInterfaces = {};
var hasRequiredLockInterfaces;
function requireLockInterfaces() {
  if (hasRequiredLockInterfaces) return LockInterfaces;
  hasRequiredLockInterfaces = 1;
  Object.defineProperty(LockInterfaces, "__esModule", { value: true });
  LockInterfaces.LockLevel = void 0;
  var LockLevel;
  (function(LockLevel2) {
    LockLevel2["None"] = "none";
    LockLevel2["Shared"] = "shared";
    LockLevel2["Exclusive"] = "exclusive";
  })(LockLevel || (LockInterfaces.LockLevel = LockLevel = {}));
  return LockInterfaces;
}
var CommonInterfaces = {};
var _Reflect = {};
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var hasRequired_Reflect;
function require_Reflect() {
  if (hasRequired_Reflect) return _Reflect;
  hasRequired_Reflect = 1;
  var Reflect2;
  (function(Reflect3) {
    (function(factory2) {
      var root = typeof commonjsGlobal === "object" ? commonjsGlobal : typeof self === "object" ? self : typeof this === "object" ? this : Function("return this;")();
      var exporter = makeExporter(Reflect3);
      if (typeof root.Reflect === "undefined") {
        root.Reflect = Reflect3;
      } else {
        exporter = makeExporter(root.Reflect, exporter);
      }
      factory2(exporter);
      function makeExporter(target, previous) {
        return function(key, value) {
          if (typeof target[key] !== "function") {
            Object.defineProperty(target, key, { configurable: true, writable: true, value });
          }
          if (previous)
            previous(key, value);
        };
      }
    })(function(exporter) {
      var hasOwn = Object.prototype.hasOwnProperty;
      var supportsSymbol = typeof Symbol === "function";
      var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
      var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
      var supportsCreate = typeof Object.create === "function";
      var supportsProto = { __proto__: [] } instanceof Array;
      var downLevel = !supportsCreate && !supportsProto;
      var HashMap = {
        // create an object in dictionary mode (a.k.a. "slow" mode in v8)
        create: supportsCreate ? function() {
          return MakeDictionary(/* @__PURE__ */ Object.create(null));
        } : supportsProto ? function() {
          return MakeDictionary({ __proto__: null });
        } : function() {
          return MakeDictionary({});
        },
        has: downLevel ? function(map2, key) {
          return hasOwn.call(map2, key);
        } : function(map2, key) {
          return key in map2;
        },
        get: downLevel ? function(map2, key) {
          return hasOwn.call(map2, key) ? map2[key] : void 0;
        } : function(map2, key) {
          return map2[key];
        }
      };
      var functionPrototype = Object.getPrototypeOf(Function);
      var usePolyfill = typeof process === "object" && process["env"] && process["env"]["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
      var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
      var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
      var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
      var Metadata = new _WeakMap();
      function decorate(decorators, target, propertyKey, attributes) {
        if (!IsUndefined(propertyKey)) {
          if (!IsArray(decorators))
            throw new TypeError();
          if (!IsObject(target))
            throw new TypeError();
          if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
            throw new TypeError();
          if (IsNull(attributes))
            attributes = void 0;
          propertyKey = ToPropertyKey(propertyKey);
          return DecorateProperty(decorators, target, propertyKey, attributes);
        } else {
          if (!IsArray(decorators))
            throw new TypeError();
          if (!IsConstructor(target))
            throw new TypeError();
          return DecorateConstructor(decorators, target);
        }
      }
      exporter("decorate", decorate);
      function metadata2(metadataKey, metadataValue) {
        function decorator(target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
            throw new TypeError();
          OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        return decorator;
      }
      exporter("metadata", metadata2);
      function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
      }
      exporter("defineMetadata", defineMetadata);
      function hasMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasMetadata(metadataKey, target, propertyKey);
      }
      exporter("hasMetadata", hasMetadata);
      function hasOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
      }
      exporter("hasOwnMetadata", hasOwnMetadata);
      function getMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetMetadata(metadataKey, target, propertyKey);
      }
      exporter("getMetadata", getMetadata);
      function getOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
      }
      exporter("getOwnMetadata", getOwnMetadata);
      function getMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryMetadataKeys(target, propertyKey);
      }
      exporter("getMetadataKeys", getMetadataKeys);
      function getOwnMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryOwnMetadataKeys(target, propertyKey);
      }
      exporter("getOwnMetadataKeys", getOwnMetadataKeys);
      function deleteMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        var metadataMap = GetOrCreateMetadataMap(
          target,
          propertyKey,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return false;
        if (!metadataMap.delete(metadataKey))
          return false;
        if (metadataMap.size > 0)
          return true;
        var targetMetadata = Metadata.get(target);
        targetMetadata.delete(propertyKey);
        if (targetMetadata.size > 0)
          return true;
        Metadata.delete(target);
        return true;
      }
      exporter("deleteMetadata", deleteMetadata);
      function DecorateConstructor(decorators, target) {
        for (var i = decorators.length - 1; i >= 0; --i) {
          var decorator = decorators[i];
          var decorated = decorator(target);
          if (!IsUndefined(decorated) && !IsNull(decorated)) {
            if (!IsConstructor(decorated))
              throw new TypeError();
            target = decorated;
          }
        }
        return target;
      }
      function DecorateProperty(decorators, target, propertyKey, descriptor) {
        for (var i = decorators.length - 1; i >= 0; --i) {
          var decorator = decorators[i];
          var decorated = decorator(target, propertyKey, descriptor);
          if (!IsUndefined(decorated) && !IsNull(decorated)) {
            if (!IsObject(decorated))
              throw new TypeError();
            descriptor = decorated;
          }
        }
        return descriptor;
      }
      function GetOrCreateMetadataMap(O, P, Create) {
        var targetMetadata = Metadata.get(O);
        if (IsUndefined(targetMetadata)) {
          if (!Create)
            return void 0;
          targetMetadata = new _Map();
          Metadata.set(O, targetMetadata);
        }
        var metadataMap = targetMetadata.get(P);
        if (IsUndefined(metadataMap)) {
          if (!Create)
            return void 0;
          metadataMap = new _Map();
          targetMetadata.set(P, metadataMap);
        }
        return metadataMap;
      }
      function OrdinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn2)
          return true;
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
          return OrdinaryHasMetadata(MetadataKey, parent, P);
        return false;
      }
      function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return false;
        return ToBoolean(metadataMap.has(MetadataKey));
      }
      function OrdinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn2)
          return OrdinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
          return OrdinaryGetMetadata(MetadataKey, parent, P);
        return void 0;
      }
      function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return void 0;
        return metadataMap.get(MetadataKey);
      }
      function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          true
        );
        metadataMap.set(MetadataKey, MetadataValue);
      }
      function OrdinaryMetadataKeys(O, P) {
        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (parent === null)
          return ownKeys;
        var parentKeys = OrdinaryMetadataKeys(parent, P);
        if (parentKeys.length <= 0)
          return ownKeys;
        if (ownKeys.length <= 0)
          return parentKeys;
        var set = new _Set();
        var keys2 = [];
        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
          var key = ownKeys_1[_i];
          var hasKey = set.has(key);
          if (!hasKey) {
            set.add(key);
            keys2.push(key);
          }
        }
        for (var _a2 = 0, parentKeys_1 = parentKeys; _a2 < parentKeys_1.length; _a2++) {
          var key = parentKeys_1[_a2];
          var hasKey = set.has(key);
          if (!hasKey) {
            set.add(key);
            keys2.push(key);
          }
        }
        return keys2;
      }
      function OrdinaryOwnMetadataKeys(O, P) {
        var keys2 = [];
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return keys2;
        var keysObj = metadataMap.keys();
        var iterator2 = GetIterator(keysObj);
        var k = 0;
        while (true) {
          var next = IteratorStep(iterator2);
          if (!next) {
            keys2.length = k;
            return keys2;
          }
          var nextValue = IteratorValue(next);
          try {
            keys2[k] = nextValue;
          } catch (e2) {
            try {
              IteratorClose(iterator2);
            } finally {
              throw e2;
            }
          }
          k++;
        }
      }
      function Type(x) {
        if (x === null)
          return 1;
        switch (typeof x) {
          case "undefined":
            return 0;
          case "boolean":
            return 2;
          case "string":
            return 3;
          case "symbol":
            return 4;
          case "number":
            return 5;
          case "object":
            return x === null ? 1 : 6;
          default:
            return 6;
        }
      }
      function IsUndefined(x) {
        return x === void 0;
      }
      function IsNull(x) {
        return x === null;
      }
      function IsSymbol(x) {
        return typeof x === "symbol";
      }
      function IsObject(x) {
        return typeof x === "object" ? x !== null : typeof x === "function";
      }
      function ToPrimitive(input, PreferredType) {
        switch (Type(input)) {
          case 0:
            return input;
          case 1:
            return input;
          case 2:
            return input;
          case 3:
            return input;
          case 4:
            return input;
          case 5:
            return input;
        }
        var hint = "string";
        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
        if (exoticToPrim !== void 0) {
          var result = exoticToPrim.call(input, hint);
          if (IsObject(result))
            throw new TypeError();
          return result;
        }
        return OrdinaryToPrimitive(input);
      }
      function OrdinaryToPrimitive(O, hint) {
        var valueOf, result, toString_2;
        {
          var toString_1 = O.toString;
          if (IsCallable(toString_1)) {
            var result = toString_1.call(O);
            if (!IsObject(result))
              return result;
          }
          var valueOf = O.valueOf;
          if (IsCallable(valueOf)) {
            var result = valueOf.call(O);
            if (!IsObject(result))
              return result;
          }
        }
        throw new TypeError();
      }
      function ToBoolean(argument) {
        return !!argument;
      }
      function ToString(argument) {
        return "" + argument;
      }
      function ToPropertyKey(argument) {
        var key = ToPrimitive(argument);
        if (IsSymbol(key))
          return key;
        return ToString(key);
      }
      function IsArray(argument) {
        return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === "[object Array]";
      }
      function IsCallable(argument) {
        return typeof argument === "function";
      }
      function IsConstructor(argument) {
        return typeof argument === "function";
      }
      function IsPropertyKey(argument) {
        switch (Type(argument)) {
          case 3:
            return true;
          case 4:
            return true;
          default:
            return false;
        }
      }
      function GetMethod(V, P) {
        var func = V[P];
        if (func === void 0 || func === null)
          return void 0;
        if (!IsCallable(func))
          throw new TypeError();
        return func;
      }
      function GetIterator(obj) {
        var method = GetMethod(obj, iteratorSymbol);
        if (!IsCallable(method))
          throw new TypeError();
        var iterator2 = method.call(obj);
        if (!IsObject(iterator2))
          throw new TypeError();
        return iterator2;
      }
      function IteratorValue(iterResult) {
        return iterResult.value;
      }
      function IteratorStep(iterator2) {
        var result = iterator2.next();
        return result.done ? false : result;
      }
      function IteratorClose(iterator2) {
        var f = iterator2["return"];
        if (f)
          f.call(iterator2);
      }
      function OrdinaryGetPrototypeOf(O) {
        var proto = Object.getPrototypeOf(O);
        if (typeof O !== "function" || O === functionPrototype)
          return proto;
        if (proto !== functionPrototype)
          return proto;
        var prototype2 = O.prototype;
        var prototypeProto = prototype2 && Object.getPrototypeOf(prototype2);
        if (prototypeProto == null || prototypeProto === Object.prototype)
          return proto;
        var constructor = prototypeProto.constructor;
        if (typeof constructor !== "function")
          return proto;
        if (constructor === O)
          return proto;
        return constructor;
      }
      function CreateMapPolyfill() {
        var cacheSentinel = {};
        var arraySentinel = [];
        var MapIterator = (
          /** @class */
          function() {
            function MapIterator2(keys2, values, selector) {
              this._index = 0;
              this._keys = keys2;
              this._values = values;
              this._selector = selector;
            }
            MapIterator2.prototype["@@iterator"] = function() {
              return this;
            };
            MapIterator2.prototype[iteratorSymbol] = function() {
              return this;
            };
            MapIterator2.prototype.next = function() {
              var index = this._index;
              if (index >= 0 && index < this._keys.length) {
                var result = this._selector(this._keys[index], this._values[index]);
                if (index + 1 >= this._keys.length) {
                  this._index = -1;
                  this._keys = arraySentinel;
                  this._values = arraySentinel;
                } else {
                  this._index++;
                }
                return { value: result, done: false };
              }
              return { value: void 0, done: true };
            };
            MapIterator2.prototype.throw = function(error) {
              if (this._index >= 0) {
                this._index = -1;
                this._keys = arraySentinel;
                this._values = arraySentinel;
              }
              throw error;
            };
            MapIterator2.prototype.return = function(value) {
              if (this._index >= 0) {
                this._index = -1;
                this._keys = arraySentinel;
                this._values = arraySentinel;
              }
              return { value, done: true };
            };
            return MapIterator2;
          }()
        );
        return (
          /** @class */
          function() {
            function Map2() {
              this._keys = [];
              this._values = [];
              this._cacheKey = cacheSentinel;
              this._cacheIndex = -2;
            }
            Object.defineProperty(Map2.prototype, "size", {
              get: function() {
                return this._keys.length;
              },
              enumerable: true,
              configurable: true
            });
            Map2.prototype.has = function(key) {
              return this._find(
                key,
                /*insert*/
                false
              ) >= 0;
            };
            Map2.prototype.get = function(key) {
              var index = this._find(
                key,
                /*insert*/
                false
              );
              return index >= 0 ? this._values[index] : void 0;
            };
            Map2.prototype.set = function(key, value) {
              var index = this._find(
                key,
                /*insert*/
                true
              );
              this._values[index] = value;
              return this;
            };
            Map2.prototype.delete = function(key) {
              var index = this._find(
                key,
                /*insert*/
                false
              );
              if (index >= 0) {
                var size = this._keys.length;
                for (var i = index + 1; i < size; i++) {
                  this._keys[i - 1] = this._keys[i];
                  this._values[i - 1] = this._values[i];
                }
                this._keys.length--;
                this._values.length--;
                if (key === this._cacheKey) {
                  this._cacheKey = cacheSentinel;
                  this._cacheIndex = -2;
                }
                return true;
              }
              return false;
            };
            Map2.prototype.clear = function() {
              this._keys.length = 0;
              this._values.length = 0;
              this._cacheKey = cacheSentinel;
              this._cacheIndex = -2;
            };
            Map2.prototype.keys = function() {
              return new MapIterator(this._keys, this._values, getKey);
            };
            Map2.prototype.values = function() {
              return new MapIterator(this._keys, this._values, getValue);
            };
            Map2.prototype.entries = function() {
              return new MapIterator(this._keys, this._values, getEntry);
            };
            Map2.prototype["@@iterator"] = function() {
              return this.entries();
            };
            Map2.prototype[iteratorSymbol] = function() {
              return this.entries();
            };
            Map2.prototype._find = function(key, insert) {
              if (this._cacheKey !== key) {
                this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
              }
              if (this._cacheIndex < 0 && insert) {
                this._cacheIndex = this._keys.length;
                this._keys.push(key);
                this._values.push(void 0);
              }
              return this._cacheIndex;
            };
            return Map2;
          }()
        );
        function getKey(key, _) {
          return key;
        }
        function getValue(_, value) {
          return value;
        }
        function getEntry(key, value) {
          return [key, value];
        }
      }
      function CreateSetPolyfill() {
        return (
          /** @class */
          function() {
            function Set2() {
              this._map = new _Map();
            }
            Object.defineProperty(Set2.prototype, "size", {
              get: function() {
                return this._map.size;
              },
              enumerable: true,
              configurable: true
            });
            Set2.prototype.has = function(value) {
              return this._map.has(value);
            };
            Set2.prototype.add = function(value) {
              return this._map.set(value, value), this;
            };
            Set2.prototype.delete = function(value) {
              return this._map.delete(value);
            };
            Set2.prototype.clear = function() {
              this._map.clear();
            };
            Set2.prototype.keys = function() {
              return this._map.keys();
            };
            Set2.prototype.values = function() {
              return this._map.values();
            };
            Set2.prototype.entries = function() {
              return this._map.entries();
            };
            Set2.prototype["@@iterator"] = function() {
              return this.keys();
            };
            Set2.prototype[iteratorSymbol] = function() {
              return this.keys();
            };
            return Set2;
          }()
        );
      }
      function CreateWeakMapPolyfill() {
        var UUID_SIZE = 16;
        var keys2 = HashMap.create();
        var rootKey = CreateUniqueKey();
        return (
          /** @class */
          function() {
            function WeakMap2() {
              this._key = CreateUniqueKey();
            }
            WeakMap2.prototype.has = function(target) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                false
              );
              return table !== void 0 ? HashMap.has(table, this._key) : false;
            };
            WeakMap2.prototype.get = function(target) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                false
              );
              return table !== void 0 ? HashMap.get(table, this._key) : void 0;
            };
            WeakMap2.prototype.set = function(target, value) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                true
              );
              table[this._key] = value;
              return this;
            };
            WeakMap2.prototype.delete = function(target) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                false
              );
              return table !== void 0 ? delete table[this._key] : false;
            };
            WeakMap2.prototype.clear = function() {
              this._key = CreateUniqueKey();
            };
            return WeakMap2;
          }()
        );
        function CreateUniqueKey() {
          var key;
          do
            key = "@@WeakMap@@" + CreateUUID();
          while (HashMap.has(keys2, key));
          keys2[key] = true;
          return key;
        }
        function GetOrCreateWeakMapTable(target, create) {
          if (!hasOwn.call(target, rootKey)) {
            if (!create)
              return void 0;
            Object.defineProperty(target, rootKey, { value: HashMap.create() });
          }
          return target[rootKey];
        }
        function FillRandomBytes(buffer, size) {
          for (var i = 0; i < size; ++i)
            buffer[i] = Math.random() * 255 | 0;
          return buffer;
        }
        function GenRandomBytes(size) {
          if (typeof Uint8Array === "function") {
            if (typeof crypto !== "undefined")
              return crypto.getRandomValues(new Uint8Array(size));
            if (typeof msCrypto !== "undefined")
              return msCrypto.getRandomValues(new Uint8Array(size));
            return FillRandomBytes(new Uint8Array(size), size);
          }
          return FillRandomBytes(new Array(size), size);
        }
        function CreateUUID() {
          var data = GenRandomBytes(UUID_SIZE);
          data[6] = data[6] & 79 | 64;
          data[8] = data[8] & 191 | 128;
          var result = "";
          for (var offset = 0; offset < UUID_SIZE; ++offset) {
            var byte = data[offset];
            if (offset === 4 || offset === 6 || offset === 8)
              result += "-";
            if (byte < 16)
              result += "0";
            result += byte.toString(16).toLowerCase();
          }
          return result;
        }
      }
      function MakeDictionary(obj) {
        obj.__ = void 0;
        delete obj.__;
        return obj;
      }
    });
  })(Reflect2 || (Reflect2 = {}));
  return _Reflect;
}
var hasRequiredCommonInterfaces;
function requireCommonInterfaces() {
  if (hasRequiredCommonInterfaces) return CommonInterfaces;
  hasRequiredCommonInterfaces = 1;
  Object.defineProperty(CommonInterfaces, "__esModule", { value: true });
  require_Reflect();
  return CommonInterfaces;
}
var LocalFileSystem = {};
var hasRequiredLocalFileSystem;
function requireLocalFileSystem() {
  if (hasRequiredLocalFileSystem) return LocalFileSystem;
  hasRequiredLocalFileSystem = 1;
  Object.defineProperty(LocalFileSystem, "__esModule", { value: true });
  return LocalFileSystem;
}
var hasRequiredTypes$3;
function requireTypes$3() {
  if (hasRequiredTypes$3) return types;
  hasRequiredTypes$3 = 1;
  (function(exports) {
    var __createBinding = types && types.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = types && types.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireBaselineFileInterfaces(), exports);
    __exportStar(requireChangesetInterfaces(), exports);
    __exportStar(requireLockErrorInterfaces(), exports);
    __exportStar(requireLockInterfaces(), exports);
    __exportStar(requireCommonInterfaces(), exports);
    __exportStar(requireLocalFileSystem(), exports);
  })(types);
  return types;
}
var OperationParamExports = {};
var BaselineFileOperationParams = {};
var hasRequiredBaselineFileOperationParams;
function requireBaselineFileOperationParams() {
  if (hasRequiredBaselineFileOperationParams) return BaselineFileOperationParams;
  hasRequiredBaselineFileOperationParams = 1;
  Object.defineProperty(BaselineFileOperationParams, "__esModule", { value: true });
  return BaselineFileOperationParams;
}
var IModelOperationParams = {};
var hasRequiredIModelOperationParams;
function requireIModelOperationParams() {
  if (hasRequiredIModelOperationParams) return IModelOperationParams;
  hasRequiredIModelOperationParams = 1;
  Object.defineProperty(IModelOperationParams, "__esModule", { value: true });
  return IModelOperationParams;
}
var BriefcaseOperationParams = {};
var hasRequiredBriefcaseOperationParams;
function requireBriefcaseOperationParams() {
  if (hasRequiredBriefcaseOperationParams) return BriefcaseOperationParams;
  hasRequiredBriefcaseOperationParams = 1;
  Object.defineProperty(BriefcaseOperationParams, "__esModule", { value: true });
  return BriefcaseOperationParams;
}
var ChangesetOperationParams = {};
var hasRequiredChangesetOperationParams;
function requireChangesetOperationParams() {
  if (hasRequiredChangesetOperationParams) return ChangesetOperationParams;
  hasRequiredChangesetOperationParams = 1;
  Object.defineProperty(ChangesetOperationParams, "__esModule", { value: true });
  return ChangesetOperationParams;
}
var ChangesetExtendedDataOperationsParams = {};
var hasRequiredChangesetExtendedDataOperationsParams;
function requireChangesetExtendedDataOperationsParams() {
  if (hasRequiredChangesetExtendedDataOperationsParams) return ChangesetExtendedDataOperationsParams;
  hasRequiredChangesetExtendedDataOperationsParams = 1;
  Object.defineProperty(ChangesetExtendedDataOperationsParams, "__esModule", { value: true });
  return ChangesetExtendedDataOperationsParams;
}
var ChangesetGroupOperationParams = {};
var hasRequiredChangesetGroupOperationParams;
function requireChangesetGroupOperationParams() {
  if (hasRequiredChangesetGroupOperationParams) return ChangesetGroupOperationParams;
  hasRequiredChangesetGroupOperationParams = 1;
  Object.defineProperty(ChangesetGroupOperationParams, "__esModule", { value: true });
  return ChangesetGroupOperationParams;
}
var LockOperationParams = {};
var hasRequiredLockOperationParams;
function requireLockOperationParams() {
  if (hasRequiredLockOperationParams) return LockOperationParams;
  hasRequiredLockOperationParams = 1;
  Object.defineProperty(LockOperationParams, "__esModule", { value: true });
  return LockOperationParams;
}
var hasRequiredOperationParamExports;
function requireOperationParamExports() {
  if (hasRequiredOperationParamExports) return OperationParamExports;
  hasRequiredOperationParamExports = 1;
  (function(exports) {
    var __createBinding = OperationParamExports && OperationParamExports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = OperationParamExports && OperationParamExports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireBaselineFileOperationParams(), exports);
    __exportStar(requireIModelOperationParams(), exports);
    __exportStar(requireBriefcaseOperationParams(), exports);
    __exportStar(requireChangesetOperationParams(), exports);
    __exportStar(requireChangesetExtendedDataOperationsParams(), exports);
    __exportStar(requireChangesetGroupOperationParams(), exports);
    __exportStar(requireLockOperationParams(), exports);
  })(OperationParamExports);
  return OperationParamExports;
}
var IModelsClient2 = {};
var internal$6 = {};
var EntityListIteratorImpl2 = {};
var EntityPageListIterator2 = {};
var hasRequiredEntityPageListIterator;
function requireEntityPageListIterator() {
  if (hasRequiredEntityPageListIterator) return EntityPageListIterator2;
  hasRequiredEntityPageListIterator = 1;
  Object.defineProperty(EntityPageListIterator2, "__esModule", { value: true });
  EntityPageListIterator2.EntityPageListIterator = void 0;
  let EntityPageListIterator$12 = class EntityPageListIterator {
    constructor(pageQueryFunc) {
      this._entityPages = this.queryPages(pageQueryFunc);
    }
    [Symbol.asyncIterator]() {
      return this;
    }
    async next() {
      return this._entityPages.next();
    }
    async *queryPages(pageQueryFunc) {
      let nextPageQueryFunc = pageQueryFunc;
      while (nextPageQueryFunc) {
        const entityPage = await nextPageQueryFunc();
        nextPageQueryFunc = entityPage.next;
        yield entityPage.entities;
      }
    }
  };
  EntityPageListIterator2.EntityPageListIterator = EntityPageListIterator$12;
  return EntityPageListIterator2;
}
var hasRequiredEntityListIteratorImpl;
function requireEntityListIteratorImpl() {
  if (hasRequiredEntityListIteratorImpl) return EntityListIteratorImpl2;
  hasRequiredEntityListIteratorImpl = 1;
  Object.defineProperty(EntityListIteratorImpl2, "__esModule", { value: true });
  EntityListIteratorImpl2.EntityListIteratorImpl = void 0;
  const types_1 = requireTypes$4();
  const EntityPageListIterator_1 = requireEntityPageListIterator();
  let EntityListIteratorImpl$12 = class EntityListIteratorImpl {
    constructor(pageQueryFunc) {
      this._entityPages = new EntityPageListIterator_1.EntityPageListIterator(pageQueryFunc);
      this._entities = (0, types_1.flatten)(this._entityPages);
    }
    [Symbol.asyncIterator]() {
      return this;
    }
    async next() {
      return this._entities.next();
    }
    byPage() {
      return this._entityPages;
    }
  };
  EntityListIteratorImpl2.EntityListIteratorImpl = EntityListIteratorImpl$12;
  return EntityListIteratorImpl2;
}
var ApiResponseInterfaces$1 = {};
var hasRequiredApiResponseInterfaces$1;
function requireApiResponseInterfaces$1() {
  if (hasRequiredApiResponseInterfaces$1) return ApiResponseInterfaces$1;
  hasRequiredApiResponseInterfaces$1 = 1;
  Object.defineProperty(ApiResponseInterfaces$1, "__esModule", { value: true });
  return ApiResponseInterfaces$1;
}
var AxiosRestClient2 = {};
/*! Axios v1.12.0 Copyright (c) 2025 Matt Zabriskie and contributors */
var axios_1;
var hasRequiredAxios;
function requireAxios() {
  if (hasRequiredAxios) return axios_1;
  hasRequiredAxios = 1;
  function bind2(fn, thisArg) {
    return function wrap() {
      return fn.apply(thisArg, arguments);
    };
  }
  const { toString: toString4 } = Object.prototype;
  const { getPrototypeOf: getPrototypeOf2 } = Object;
  const { iterator: iterator2, toStringTag: toStringTag2 } = Symbol;
  const kindOf2 = /* @__PURE__ */ ((cache) => (thing) => {
    const str = toString4.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  })(/* @__PURE__ */ Object.create(null));
  const kindOfTest2 = (type) => {
    type = type.toLowerCase();
    return (thing) => kindOf2(thing) === type;
  };
  const typeOfTest2 = (type) => (thing) => typeof thing === type;
  const { isArray: isArray2 } = Array;
  const isUndefined2 = typeOfTest2("undefined");
  function isBuffer2(val) {
    return val !== null && !isUndefined2(val) && val.constructor !== null && !isUndefined2(val.constructor) && isFunction$12(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }
  const isArrayBuffer2 = kindOfTest2("ArrayBuffer");
  function isArrayBufferView2(val) {
    let result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && isArrayBuffer2(val.buffer);
    }
    return result;
  }
  const isString2 = typeOfTest2("string");
  const isFunction$12 = typeOfTest2("function");
  const isNumber2 = typeOfTest2("number");
  const isObject2 = (thing) => thing !== null && typeof thing === "object";
  const isBoolean2 = (thing) => thing === true || thing === false;
  const isPlainObject2 = (val) => {
    if (kindOf2(val) !== "object") {
      return false;
    }
    const prototype3 = getPrototypeOf2(val);
    return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(toStringTag2 in val) && !(iterator2 in val);
  };
  const isEmptyObject2 = (val) => {
    if (!isObject2(val) || isBuffer2(val)) {
      return false;
    }
    try {
      return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;
    } catch (e2) {
      return false;
    }
  };
  const isDate2 = kindOfTest2("Date");
  const isFile2 = kindOfTest2("File");
  const isBlob2 = kindOfTest2("Blob");
  const isFileList2 = kindOfTest2("FileList");
  const isStream2 = (val) => isObject2(val) && isFunction$12(val.pipe);
  const isFormData2 = (thing) => {
    let kind;
    return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction$12(thing.append) && ((kind = kindOf2(thing)) === "formdata" || // detect form-data instance
    kind === "object" && isFunction$12(thing.toString) && thing.toString() === "[object FormData]"));
  };
  const isURLSearchParams2 = kindOfTest2("URLSearchParams");
  const [isReadableStream2, isRequest2, isResponse2, isHeaders2] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest2);
  const trim2 = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  function forEach2(obj, fn, { allOwnKeys = false } = {}) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    let i;
    let l;
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray2(obj)) {
      for (i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      if (isBuffer2(obj)) {
        return;
      }
      const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys2.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys2[i];
        fn.call(null, obj[key], key, obj);
      }
    }
  }
  function findKey2(obj, key) {
    if (isBuffer2(obj)) {
      return null;
    }
    key = key.toLowerCase();
    const keys2 = Object.keys(obj);
    let i = keys2.length;
    let _key;
    while (i-- > 0) {
      _key = keys2[i];
      if (key === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }
  const _global2 = (() => {
    if (typeof globalThis !== "undefined") return globalThis;
    return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : commonjsGlobal;
  })();
  const isContextDefined2 = (context2) => !isUndefined2(context2) && context2 !== _global2;
  function merge2() {
    const { caseless, skipUndefined } = isContextDefined2(this) && this || {};
    const result = {};
    const assignValue = (val, key) => {
      const targetKey = caseless && findKey2(result, key) || key;
      if (isPlainObject2(result[targetKey]) && isPlainObject2(val)) {
        result[targetKey] = merge2(result[targetKey], val);
      } else if (isPlainObject2(val)) {
        result[targetKey] = merge2({}, val);
      } else if (isArray2(val)) {
        result[targetKey] = val.slice();
      } else {
        if (!skipUndefined || !isUndefined2(val)) {
          result[targetKey] = val;
        }
      }
    };
    for (let i = 0, l = arguments.length; i < l; i++) {
      arguments[i] && forEach2(arguments[i], assignValue);
    }
    return result;
  }
  const extend2 = (a, b, thisArg, { allOwnKeys } = {}) => {
    forEach2(b, (val, key) => {
      if (thisArg && isFunction$12(val)) {
        a[key] = bind2(val, thisArg);
      } else {
        a[key] = val;
      }
    }, { allOwnKeys });
    return a;
  };
  const stripBOM2 = (content) => {
    if (content.charCodeAt(0) === 65279) {
      content = content.slice(1);
    }
    return content;
  };
  const inherits2 = (constructor, superConstructor, props, descriptors3) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors3);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, "super", {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  };
  const toFlatObject2 = (sourceObj, destObj, filter2, propFilter) => {
    let props;
    let i;
    let prop;
    const merged = {};
    destObj = destObj || {};
    if (sourceObj == null) return destObj;
    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i = props.length;
      while (i-- > 0) {
        prop = props[i];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter2 !== false && getPrototypeOf2(sourceObj);
    } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
  };
  const endsWith2 = (str, searchString, position) => {
    str = String(str);
    if (position === void 0 || position > str.length) {
      position = str.length;
    }
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
  const toArray2 = (thing) => {
    if (!thing) return null;
    if (isArray2(thing)) return thing;
    let i = thing.length;
    if (!isNumber2(i)) return null;
    const arr = new Array(i);
    while (i-- > 0) {
      arr[i] = thing[i];
    }
    return arr;
  };
  const isTypedArray2 = /* @__PURE__ */ ((TypedArray) => {
    return (thing) => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== "undefined" && getPrototypeOf2(Uint8Array));
  const forEachEntry2 = (obj, fn) => {
    const generator = obj && obj[iterator2];
    const _iterator = generator.call(obj);
    let result;
    while ((result = _iterator.next()) && !result.done) {
      const pair = result.value;
      fn.call(obj, pair[0], pair[1]);
    }
  };
  const matchAll2 = (regExp, str) => {
    let matches;
    const arr = [];
    while ((matches = regExp.exec(str)) !== null) {
      arr.push(matches);
    }
    return arr;
  };
  const isHTMLForm2 = kindOfTest2("HTMLFormElement");
  const toCamelCase2 = (str) => {
    return str.toLowerCase().replace(
      /[-_\s]([a-z\d])(\w*)/g,
      function replacer2(m, p1, p2) {
        return p1.toUpperCase() + p2;
      }
    );
  };
  const hasOwnProperty2 = (({ hasOwnProperty: hasOwnProperty3 }) => (obj, prop) => hasOwnProperty3.call(obj, prop))(Object.prototype);
  const isRegExp2 = kindOfTest2("RegExp");
  const reduceDescriptors2 = (obj, reducer2) => {
    const descriptors3 = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
    forEach2(descriptors3, (descriptor, name) => {
      let ret;
      if ((ret = reducer2(descriptor, name, obj)) !== false) {
        reducedDescriptors[name] = ret || descriptor;
      }
    });
    Object.defineProperties(obj, reducedDescriptors);
  };
  const freezeMethods2 = (obj) => {
    reduceDescriptors2(obj, (descriptor, name) => {
      if (isFunction$12(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
        return false;
      }
      const value = obj[name];
      if (!isFunction$12(value)) return;
      descriptor.enumerable = false;
      if ("writable" in descriptor) {
        descriptor.writable = false;
        return;
      }
      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error("Can not rewrite read-only method '" + name + "'");
        };
      }
    });
  };
  const toObjectSet2 = (arrayOrString, delimiter2) => {
    const obj = {};
    const define = (arr) => {
      arr.forEach((value) => {
        obj[value] = true;
      });
    };
    isArray2(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter2));
    return obj;
  };
  const noop2 = () => {
  };
  const toFiniteNumber2 = (value, defaultValue) => {
    return value != null && Number.isFinite(value = +value) ? value : defaultValue;
  };
  function isSpecCompliantForm2(thing) {
    return !!(thing && isFunction$12(thing.append) && thing[toStringTag2] === "FormData" && thing[iterator2]);
  }
  const toJSONObject2 = (obj) => {
    const stack = new Array(10);
    const visit = (source, i) => {
      if (isObject2(source)) {
        if (stack.indexOf(source) >= 0) {
          return;
        }
        if (isBuffer2(source)) {
          return source;
        }
        if (!("toJSON" in source)) {
          stack[i] = source;
          const target = isArray2(source) ? [] : {};
          forEach2(source, (value, key) => {
            const reducedValue = visit(value, i + 1);
            !isUndefined2(reducedValue) && (target[key] = reducedValue);
          });
          stack[i] = void 0;
          return target;
        }
      }
      return source;
    };
    return visit(obj, 0);
  };
  const isAsyncFn2 = kindOfTest2("AsyncFunction");
  const isThenable2 = (thing) => thing && (isObject2(thing) || isFunction$12(thing)) && isFunction$12(thing.then) && isFunction$12(thing.catch);
  const _setImmediate2 = ((setImmediateSupported, postMessageSupported) => {
    if (setImmediateSupported) {
      return setImmediate;
    }
    return postMessageSupported ? ((token, callbacks) => {
      _global2.addEventListener("message", ({ source, data }) => {
        if (source === _global2 && data === token) {
          callbacks.length && callbacks.shift()();
        }
      }, false);
      return (cb) => {
        callbacks.push(cb);
        _global2.postMessage(token, "*");
      };
    })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
  })(
    typeof setImmediate === "function",
    isFunction$12(_global2.postMessage)
  );
  const asap2 = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global2) : typeof process !== "undefined" && process.nextTick || _setImmediate2;
  const isIterable2 = (thing) => thing != null && isFunction$12(thing[iterator2]);
  var utils$12 = {
    isArray: isArray2,
    isArrayBuffer: isArrayBuffer2,
    isBuffer: isBuffer2,
    isFormData: isFormData2,
    isArrayBufferView: isArrayBufferView2,
    isString: isString2,
    isNumber: isNumber2,
    isBoolean: isBoolean2,
    isObject: isObject2,
    isPlainObject: isPlainObject2,
    isEmptyObject: isEmptyObject2,
    isReadableStream: isReadableStream2,
    isRequest: isRequest2,
    isResponse: isResponse2,
    isHeaders: isHeaders2,
    isUndefined: isUndefined2,
    isDate: isDate2,
    isFile: isFile2,
    isBlob: isBlob2,
    isRegExp: isRegExp2,
    isFunction: isFunction$12,
    isStream: isStream2,
    isURLSearchParams: isURLSearchParams2,
    isTypedArray: isTypedArray2,
    isFileList: isFileList2,
    forEach: forEach2,
    merge: merge2,
    extend: extend2,
    trim: trim2,
    stripBOM: stripBOM2,
    inherits: inherits2,
    toFlatObject: toFlatObject2,
    kindOf: kindOf2,
    kindOfTest: kindOfTest2,
    endsWith: endsWith2,
    toArray: toArray2,
    forEachEntry: forEachEntry2,
    matchAll: matchAll2,
    isHTMLForm: isHTMLForm2,
    hasOwnProperty: hasOwnProperty2,
    hasOwnProp: hasOwnProperty2,
    // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors: reduceDescriptors2,
    freezeMethods: freezeMethods2,
    toObjectSet: toObjectSet2,
    toCamelCase: toCamelCase2,
    noop: noop2,
    toFiniteNumber: toFiniteNumber2,
    findKey: findKey2,
    global: _global2,
    isContextDefined: isContextDefined2,
    isSpecCompliantForm: isSpecCompliantForm2,
    toJSONObject: toJSONObject2,
    isAsyncFn: isAsyncFn2,
    isThenable: isThenable2,
    setImmediate: _setImmediate2,
    asap: asap2,
    isIterable: isIterable2
  };
  function AxiosError2(message, code, config, request2, response) {
    Error.call(this);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack;
    }
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request2 && (this.request = request2);
    if (response) {
      this.response = response;
      this.status = response.status ? response.status : null;
    }
  }
  utils$12.inherits(AxiosError2, Error, {
    toJSON: function toJSON2() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: utils$12.toJSONObject(this.config),
        code: this.code,
        status: this.status
      };
    }
  });
  const prototype$12 = AxiosError2.prototype;
  const descriptors2 = {};
  [
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED",
    "ERR_NOT_SUPPORT",
    "ERR_INVALID_URL"
    // eslint-disable-next-line func-names
  ].forEach((code) => {
    descriptors2[code] = { value: code };
  });
  Object.defineProperties(AxiosError2, descriptors2);
  Object.defineProperty(prototype$12, "isAxiosError", { value: true });
  AxiosError2.from = (error, code, config, request2, response, customProps) => {
    const axiosError = Object.create(prototype$12);
    utils$12.toFlatObject(error, axiosError, function filter2(obj) {
      return obj !== Error.prototype;
    }, (prop) => {
      return prop !== "isAxiosError";
    });
    const msg = error && error.message ? error.message : "Error";
    const errCode = code == null && error ? error.code : code;
    AxiosError2.call(axiosError, msg, errCode, config, request2, response);
    if (error && axiosError.cause == null) {
      Object.defineProperty(axiosError, "cause", { value: error, configurable: true });
    }
    axiosError.name = error && error.name || "Error";
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
  };
  var httpAdapter2 = null;
  function isVisitable2(thing) {
    return utils$12.isPlainObject(thing) || utils$12.isArray(thing);
  }
  function removeBrackets2(key) {
    return utils$12.endsWith(key, "[]") ? key.slice(0, -2) : key;
  }
  function renderKey2(path, key, dots) {
    if (!path) return key;
    return path.concat(key).map(function each(token, i) {
      token = removeBrackets2(token);
      return !dots && i ? "[" + token + "]" : token;
    }).join(dots ? "." : "");
  }
  function isFlatArray2(arr) {
    return utils$12.isArray(arr) && !arr.some(isVisitable2);
  }
  const predicates2 = utils$12.toFlatObject(utils$12, {}, null, function filter2(prop) {
    return /^is[A-Z]/.test(prop);
  });
  function toFormData2(obj, formData, options) {
    if (!utils$12.isObject(obj)) {
      throw new TypeError("target must be an object");
    }
    formData = formData || new FormData();
    options = utils$12.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      return !utils$12.isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && utils$12.isSpecCompliantForm(formData);
    if (!utils$12.isFunction(visitor)) {
      throw new TypeError("visitor must be a function");
    }
    function convertValue(value) {
      if (value === null) return "";
      if (utils$12.isDate(value)) {
        return value.toISOString();
      }
      if (utils$12.isBoolean(value)) {
        return value.toString();
      }
      if (!useBlob && utils$12.isBlob(value)) {
        throw new AxiosError2("Blob is not supported. Use a Buffer instead.");
      }
      if (utils$12.isArrayBuffer(value) || utils$12.isTypedArray(value)) {
        return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
      }
      return value;
    }
    function defaultVisitor(value, key, path) {
      let arr = value;
      if (value && !path && typeof value === "object") {
        if (utils$12.endsWith(key, "{}")) {
          key = metaTokens ? key : key.slice(0, -2);
          value = JSON.stringify(value);
        } else if (utils$12.isArray(value) && isFlatArray2(value) || (utils$12.isFileList(value) || utils$12.endsWith(key, "[]")) && (arr = utils$12.toArray(value))) {
          key = removeBrackets2(key);
          arr.forEach(function each(el, index) {
            !(utils$12.isUndefined(el) || el === null) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey2([key], index, dots) : indexes === null ? key : key + "[]",
              convertValue(el)
            );
          });
          return false;
        }
      }
      if (isVisitable2(value)) {
        return true;
      }
      formData.append(renderKey2(path, key, dots), convertValue(value));
      return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign(predicates2, {
      defaultVisitor,
      convertValue,
      isVisitable: isVisitable2
    });
    function build(value, path) {
      if (utils$12.isUndefined(value)) return;
      if (stack.indexOf(value) !== -1) {
        throw Error("Circular reference detected in " + path.join("."));
      }
      stack.push(value);
      utils$12.forEach(value, function each(el, key) {
        const result = !(utils$12.isUndefined(el) || el === null) && visitor.call(
          formData,
          el,
          utils$12.isString(key) ? key.trim() : key,
          path,
          exposedHelpers
        );
        if (result === true) {
          build(el, path ? path.concat(key) : [key]);
        }
      });
      stack.pop();
    }
    if (!utils$12.isObject(obj)) {
      throw new TypeError("data must be an object");
    }
    build(obj);
    return formData;
  }
  function encode$12(str) {
    const charMap = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+",
      "%00": "\0"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer2(match) {
      return charMap[match];
    });
  }
  function AxiosURLSearchParams2(params, options) {
    this._pairs = [];
    params && toFormData2(params, this, options);
  }
  const prototype2 = AxiosURLSearchParams2.prototype;
  prototype2.append = function append2(name, value) {
    this._pairs.push([name, value]);
  };
  prototype2.toString = function toString5(encoder) {
    const _encode = encoder ? function(value) {
      return encoder.call(this, value, encode$12);
    } : encode$12;
    return this._pairs.map(function each(pair) {
      return _encode(pair[0]) + "=" + _encode(pair[1]);
    }, "").join("&");
  };
  function encode2(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+");
  }
  function buildURL2(url2, params, options) {
    if (!params) {
      return url2;
    }
    const _encode = options && options.encode || encode2;
    if (utils$12.isFunction(options)) {
      options = {
        serialize: options
      };
    }
    const serializeFn = options && options.serialize;
    let serializedParams;
    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils$12.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams2(params, options).toString(_encode);
    }
    if (serializedParams) {
      const hashmarkIndex = url2.indexOf("#");
      if (hashmarkIndex !== -1) {
        url2 = url2.slice(0, hashmarkIndex);
      }
      url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url2;
  }
  class InterceptorManager2 {
    constructor() {
      this.handlers = [];
    }
    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }
    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id2) {
      if (this.handlers[id2]) {
        this.handlers[id2] = null;
      }
    }
    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }
    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn) {
      utils$12.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    }
  }
  var InterceptorManager$1 = InterceptorManager2;
  var transitionalDefaults2 = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };
  var URLSearchParams$12 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams2;
  var FormData$12 = typeof FormData !== "undefined" ? FormData : null;
  var Blob$12 = typeof Blob !== "undefined" ? Blob : null;
  var platform$12 = {
    isBrowser: true,
    classes: {
      URLSearchParams: URLSearchParams$12,
      FormData: FormData$12,
      Blob: Blob$12
    },
    protocols: ["http", "https", "file", "blob", "url", "data"]
  };
  const hasBrowserEnv2 = typeof window !== "undefined" && typeof document !== "undefined";
  const _navigator2 = typeof navigator === "object" && navigator || void 0;
  const hasStandardBrowserEnv2 = hasBrowserEnv2 && (!_navigator2 || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator2.product) < 0);
  const hasStandardBrowserWebWorkerEnv2 = (() => {
    return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
  })();
  const origin2 = hasBrowserEnv2 && window.location.href || "http://localhost";
  var utils2 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    hasBrowserEnv: hasBrowserEnv2,
    hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv2,
    hasStandardBrowserEnv: hasStandardBrowserEnv2,
    navigator: _navigator2,
    origin: origin2
  });
  var platform2 = {
    ...utils2,
    ...platform$12
  };
  function toURLEncodedForm2(data, options) {
    return toFormData2(data, new platform2.classes.URLSearchParams(), {
      visitor: function(value, key, path, helpers) {
        if (platform2.isNode && utils$12.isBuffer(value)) {
          this.append(key, value.toString("base64"));
          return false;
        }
        return helpers.defaultVisitor.apply(this, arguments);
      },
      ...options
    });
  }
  function parsePropPath2(name) {
    return utils$12.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
      return match[0] === "[]" ? "" : match[1] || match[0];
    });
  }
  function arrayToObject2(arr) {
    const obj = {};
    const keys2 = Object.keys(arr);
    let i;
    const len = keys2.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys2[i];
      obj[key] = arr[key];
    }
    return obj;
  }
  function formDataToJSON2(formData) {
    function buildPath(path, value, target, index) {
      let name = path[index++];
      if (name === "__proto__") return true;
      const isNumericKey = Number.isFinite(+name);
      const isLast = index >= path.length;
      name = !name && utils$12.isArray(target) ? target.length : name;
      if (isLast) {
        if (utils$12.hasOwnProp(target, name)) {
          target[name] = [target[name], value];
        } else {
          target[name] = value;
        }
        return !isNumericKey;
      }
      if (!target[name] || !utils$12.isObject(target[name])) {
        target[name] = [];
      }
      const result = buildPath(path, value, target[name], index);
      if (result && utils$12.isArray(target[name])) {
        target[name] = arrayToObject2(target[name]);
      }
      return !isNumericKey;
    }
    if (utils$12.isFormData(formData) && utils$12.isFunction(formData.entries)) {
      const obj = {};
      utils$12.forEachEntry(formData, (name, value) => {
        buildPath(parsePropPath2(name), value, obj, 0);
      });
      return obj;
    }
    return null;
  }
  function stringifySafely2(rawValue, parser2, encoder) {
    if (utils$12.isString(rawValue)) {
      try {
        (parser2 || JSON.parse)(rawValue);
        return utils$12.trim(rawValue);
      } catch (e2) {
        if (e2.name !== "SyntaxError") {
          throw e2;
        }
      }
    }
    return (encoder || JSON.stringify)(rawValue);
  }
  const defaults2 = {
    transitional: transitionalDefaults2,
    adapter: ["xhr", "http", "fetch"],
    transformRequest: [function transformRequest2(data, headers) {
      const contentType2 = headers.getContentType() || "";
      const hasJSONContentType = contentType2.indexOf("application/json") > -1;
      const isObjectPayload = utils$12.isObject(data);
      if (isObjectPayload && utils$12.isHTMLForm(data)) {
        data = new FormData(data);
      }
      const isFormData3 = utils$12.isFormData(data);
      if (isFormData3) {
        return hasJSONContentType ? JSON.stringify(formDataToJSON2(data)) : data;
      }
      if (utils$12.isArrayBuffer(data) || utils$12.isBuffer(data) || utils$12.isStream(data) || utils$12.isFile(data) || utils$12.isBlob(data) || utils$12.isReadableStream(data)) {
        return data;
      }
      if (utils$12.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils$12.isURLSearchParams(data)) {
        headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
        return data.toString();
      }
      let isFileList3;
      if (isObjectPayload) {
        if (contentType2.indexOf("application/x-www-form-urlencoded") > -1) {
          return toURLEncodedForm2(data, this.formSerializer).toString();
        }
        if ((isFileList3 = utils$12.isFileList(data)) || contentType2.indexOf("multipart/form-data") > -1) {
          const _FormData = this.env && this.env.FormData;
          return toFormData2(
            isFileList3 ? { "files[]": data } : data,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }
      if (isObjectPayload || hasJSONContentType) {
        headers.setContentType("application/json", false);
        return stringifySafely2(data);
      }
      return data;
    }],
    transformResponse: [function transformResponse2(data) {
      const transitional2 = this.transitional || defaults2.transitional;
      const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
      const JSONRequested = this.responseType === "json";
      if (utils$12.isResponse(data) || utils$12.isReadableStream(data)) {
        return data;
      }
      if (data && utils$12.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
        const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;
        try {
          return JSON.parse(data, this.parseReviver);
        } catch (e2) {
          if (strictJSONParsing) {
            if (e2.name === "SyntaxError") {
              throw AxiosError2.from(e2, AxiosError2.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e2;
          }
        }
      }
      return data;
    }],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: platform2.classes.FormData,
      Blob: platform2.classes.Blob
    },
    validateStatus: function validateStatus2(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        "Accept": "application/json, text/plain, */*",
        "Content-Type": void 0
      }
    }
  };
  utils$12.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
    defaults2.headers[method] = {};
  });
  var defaults$1 = defaults2;
  const ignoreDuplicateOf2 = utils$12.toObjectSet([
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ]);
  var parseHeaders2 = (rawHeaders) => {
    const parsed = {};
    let key;
    let val;
    let i;
    rawHeaders && rawHeaders.split("\n").forEach(function parser2(line) {
      i = line.indexOf(":");
      key = line.substring(0, i).trim().toLowerCase();
      val = line.substring(i + 1).trim();
      if (!key || parsed[key] && ignoreDuplicateOf2[key]) {
        return;
      }
      if (key === "set-cookie") {
        if (parsed[key]) {
          parsed[key].push(val);
        } else {
          parsed[key] = [val];
        }
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
      }
    });
    return parsed;
  };
  const $internals2 = Symbol("internals");
  function normalizeHeader2(header) {
    return header && String(header).trim().toLowerCase();
  }
  function normalizeValue2(value) {
    if (value === false || value == null) {
      return value;
    }
    return utils$12.isArray(value) ? value.map(normalizeValue2) : String(value);
  }
  function parseTokens2(str) {
    const tokens = /* @__PURE__ */ Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;
    while (match = tokensRE.exec(str)) {
      tokens[match[1]] = match[2];
    }
    return tokens;
  }
  const isValidHeaderName2 = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
  function matchHeaderValue2(context2, value, header, filter2, isHeaderNameFilter) {
    if (utils$12.isFunction(filter2)) {
      return filter2.call(this, value, header);
    }
    if (isHeaderNameFilter) {
      value = header;
    }
    if (!utils$12.isString(value)) return;
    if (utils$12.isString(filter2)) {
      return value.indexOf(filter2) !== -1;
    }
    if (utils$12.isRegExp(filter2)) {
      return filter2.test(value);
    }
  }
  function formatHeader2(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
  }
  function buildAccessors2(obj, header) {
    const accessorName = utils$12.toCamelCase(" " + header);
    ["get", "set", "has"].forEach((methodName) => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }
  class AxiosHeaders3 {
    constructor(headers) {
      headers && this.set(headers);
    }
    set(header, valueOrRewrite, rewrite) {
      const self2 = this;
      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader2(_header);
        if (!lHeader) {
          throw new Error("header name must be a non-empty string");
        }
        const key = utils$12.findKey(self2, lHeader);
        if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
          self2[key || _header] = normalizeValue2(_value);
        }
      }
      const setHeaders = (headers, _rewrite) => utils$12.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
      if (utils$12.isPlainObject(header) || header instanceof this.constructor) {
        setHeaders(header, valueOrRewrite);
      } else if (utils$12.isString(header) && (header = header.trim()) && !isValidHeaderName2(header)) {
        setHeaders(parseHeaders2(header), valueOrRewrite);
      } else if (utils$12.isObject(header) && utils$12.isIterable(header)) {
        let obj = {}, dest, key;
        for (const entry of header) {
          if (!utils$12.isArray(entry)) {
            throw TypeError("Object iterator must return a key-value pair");
          }
          obj[key = entry[0]] = (dest = obj[key]) ? utils$12.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
        }
        setHeaders(obj, valueOrRewrite);
      } else {
        header != null && setHeader(valueOrRewrite, header, rewrite);
      }
      return this;
    }
    get(header, parser2) {
      header = normalizeHeader2(header);
      if (header) {
        const key = utils$12.findKey(this, header);
        if (key) {
          const value = this[key];
          if (!parser2) {
            return value;
          }
          if (parser2 === true) {
            return parseTokens2(value);
          }
          if (utils$12.isFunction(parser2)) {
            return parser2.call(this, value, key);
          }
          if (utils$12.isRegExp(parser2)) {
            return parser2.exec(value);
          }
          throw new TypeError("parser must be boolean|regexp|function");
        }
      }
    }
    has(header, matcher) {
      header = normalizeHeader2(header);
      if (header) {
        const key = utils$12.findKey(this, header);
        return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue2(this, this[key], key, matcher)));
      }
      return false;
    }
    delete(header, matcher) {
      const self2 = this;
      let deleted = false;
      function deleteHeader(_header) {
        _header = normalizeHeader2(_header);
        if (_header) {
          const key = utils$12.findKey(self2, _header);
          if (key && (!matcher || matchHeaderValue2(self2, self2[key], key, matcher))) {
            delete self2[key];
            deleted = true;
          }
        }
      }
      if (utils$12.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }
      return deleted;
    }
    clear(matcher) {
      const keys2 = Object.keys(this);
      let i = keys2.length;
      let deleted = false;
      while (i--) {
        const key = keys2[i];
        if (!matcher || matchHeaderValue2(this, this[key], key, matcher, true)) {
          delete this[key];
          deleted = true;
        }
      }
      return deleted;
    }
    normalize(format) {
      const self2 = this;
      const headers = {};
      utils$12.forEach(this, (value, header) => {
        const key = utils$12.findKey(headers, header);
        if (key) {
          self2[key] = normalizeValue2(value);
          delete self2[header];
          return;
        }
        const normalized = format ? formatHeader2(header) : String(header).trim();
        if (normalized !== header) {
          delete self2[header];
        }
        self2[normalized] = normalizeValue2(value);
        headers[normalized] = true;
      });
      return this;
    }
    concat(...targets) {
      return this.constructor.concat(this, ...targets);
    }
    toJSON(asStrings) {
      const obj = /* @__PURE__ */ Object.create(null);
      utils$12.forEach(this, (value, header) => {
        value != null && value !== false && (obj[header] = asStrings && utils$12.isArray(value) ? value.join(", ") : value);
      });
      return obj;
    }
    [Symbol.iterator]() {
      return Object.entries(this.toJSON())[Symbol.iterator]();
    }
    toString() {
      return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
    }
    getSetCookie() {
      return this.get("set-cookie") || [];
    }
    get [Symbol.toStringTag]() {
      return "AxiosHeaders";
    }
    static from(thing) {
      return thing instanceof this ? thing : new this(thing);
    }
    static concat(first, ...targets) {
      const computed = new this(first);
      targets.forEach((target) => computed.set(target));
      return computed;
    }
    static accessor(header) {
      const internals = this[$internals2] = this[$internals2] = {
        accessors: {}
      };
      const accessors = internals.accessors;
      const prototype3 = this.prototype;
      function defineAccessor(_header) {
        const lHeader = normalizeHeader2(_header);
        if (!accessors[lHeader]) {
          buildAccessors2(prototype3, _header);
          accessors[lHeader] = true;
        }
      }
      utils$12.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
      return this;
    }
  }
  AxiosHeaders3.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
  utils$12.reduceDescriptors(AxiosHeaders3.prototype, ({ value }, key) => {
    let mapped = key[0].toUpperCase() + key.slice(1);
    return {
      get: () => value,
      set(headerValue) {
        this[mapped] = headerValue;
      }
    };
  });
  utils$12.freezeMethods(AxiosHeaders3);
  var AxiosHeaders$12 = AxiosHeaders3;
  function transformData2(fns, response) {
    const config = this || defaults$1;
    const context2 = response || config;
    const headers = AxiosHeaders$12.from(context2.headers);
    let data = context2.data;
    utils$12.forEach(fns, function transform(fn) {
      data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
    });
    headers.normalize();
    return data;
  }
  function isCancel2(value) {
    return !!(value && value.__CANCEL__);
  }
  function CanceledError2(message, config, request2) {
    AxiosError2.call(this, message == null ? "canceled" : message, AxiosError2.ERR_CANCELED, config, request2);
    this.name = "CanceledError";
  }
  utils$12.inherits(CanceledError2, AxiosError2, {
    __CANCEL__: true
  });
  function settle2(resolve, reject, response) {
    const validateStatus2 = response.config.validateStatus;
    if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
      resolve(response);
    } else {
      reject(new AxiosError2(
        "Request failed with status code " + response.status,
        [AxiosError2.ERR_BAD_REQUEST, AxiosError2.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      ));
    }
  }
  function parseProtocol2(url2) {
    const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
    return match && match[1] || "";
  }
  function speedometer2(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min = min !== void 0 ? min : 1e3;
    return function push(chunkLength) {
      const now = Date.now();
      const startedAt = timestamps[tail];
      if (!firstSampleTS) {
        firstSampleTS = now;
      }
      bytes[head] = chunkLength;
      timestamps[head] = now;
      let i = tail;
      let bytesCount = 0;
      while (i !== head) {
        bytesCount += bytes[i++];
        i = i % samplesCount;
      }
      head = (head + 1) % samplesCount;
      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }
      if (now - firstSampleTS < min) {
        return;
      }
      const passed = startedAt && now - startedAt;
      return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
    };
  }
  function throttle2(fn, freq) {
    let timestamp = 0;
    let threshold = 1e3 / freq;
    let lastArgs;
    let timer;
    const invoke = (args, now = Date.now()) => {
      timestamp = now;
      lastArgs = null;
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      fn(...args);
    };
    const throttled = (...args) => {
      const now = Date.now();
      const passed = now - timestamp;
      if (passed >= threshold) {
        invoke(args, now);
      } else {
        lastArgs = args;
        if (!timer) {
          timer = setTimeout(() => {
            timer = null;
            invoke(lastArgs);
          }, threshold - passed);
        }
      }
    };
    const flush = () => lastArgs && invoke(lastArgs);
    return [throttled, flush];
  }
  const progressEventReducer2 = (listener, isDownloadStream, freq = 3) => {
    let bytesNotified = 0;
    const _speedometer = speedometer2(50, 250);
    return throttle2((e2) => {
      const loaded = e2.loaded;
      const total = e2.lengthComputable ? e2.total : void 0;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;
      bytesNotified = loaded;
      const data = {
        loaded,
        total,
        progress: total ? loaded / total : void 0,
        bytes: progressBytes,
        rate: rate ? rate : void 0,
        estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
        event: e2,
        lengthComputable: total != null,
        [isDownloadStream ? "download" : "upload"]: true
      };
      listener(data);
    }, freq);
  };
  const progressEventDecorator2 = (total, throttled) => {
    const lengthComputable = total != null;
    return [(loaded) => throttled[0]({
      lengthComputable,
      total,
      loaded
    }), throttled[1]];
  };
  const asyncDecorator2 = (fn) => (...args) => utils$12.asap(() => fn(...args));
  var isURLSameOrigin2 = platform2.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin3, isMSIE) => (url2) => {
    url2 = new URL(url2, platform2.origin);
    return origin3.protocol === url2.protocol && origin3.host === url2.host && (isMSIE || origin3.port === url2.port);
  })(
    new URL(platform2.origin),
    platform2.navigator && /(msie|trident)/i.test(platform2.navigator.userAgent)
  ) : () => true;
  var cookies2 = platform2.hasStandardBrowserEnv ? (
    // Standard browser envs support document.cookie
    {
      write(name, value, expires, path, domain, secure) {
        const cookie = [name + "=" + encodeURIComponent(value)];
        utils$12.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
        utils$12.isString(path) && cookie.push("path=" + path);
        utils$12.isString(domain) && cookie.push("domain=" + domain);
        secure === true && cookie.push("secure");
        document.cookie = cookie.join("; ");
      },
      read(name) {
        const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
        return match ? decodeURIComponent(match[3]) : null;
      },
      remove(name) {
        this.write(name, "", Date.now() - 864e5);
      }
    }
  ) : (
    // Non-standard browser env (web workers, react-native) lack needed support.
    {
      write() {
      },
      read() {
        return null;
      },
      remove() {
      }
    }
  );
  function isAbsoluteURL2(url2) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
  }
  function combineURLs2(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  }
  function buildFullPath2(baseURL, requestedURL, allowAbsoluteUrls) {
    let isRelativeUrl = !isAbsoluteURL2(requestedURL);
    if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
      return combineURLs2(baseURL, requestedURL);
    }
    return requestedURL;
  }
  const headersToObject2 = (thing) => thing instanceof AxiosHeaders$12 ? { ...thing } : thing;
  function mergeConfig2(config1, config2) {
    config2 = config2 || {};
    const config = {};
    function getMergedValue(target, source, prop, caseless) {
      if (utils$12.isPlainObject(target) && utils$12.isPlainObject(source)) {
        return utils$12.merge.call({ caseless }, target, source);
      } else if (utils$12.isPlainObject(source)) {
        return utils$12.merge({}, source);
      } else if (utils$12.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    function mergeDeepProperties(a, b, prop, caseless) {
      if (!utils$12.isUndefined(b)) {
        return getMergedValue(a, b, prop, caseless);
      } else if (!utils$12.isUndefined(a)) {
        return getMergedValue(void 0, a, prop, caseless);
      }
    }
    function valueFromConfig2(a, b) {
      if (!utils$12.isUndefined(b)) {
        return getMergedValue(void 0, b);
      }
    }
    function defaultToConfig2(a, b) {
      if (!utils$12.isUndefined(b)) {
        return getMergedValue(void 0, b);
      } else if (!utils$12.isUndefined(a)) {
        return getMergedValue(void 0, a);
      }
    }
    function mergeDirectKeys(a, b, prop) {
      if (prop in config2) {
        return getMergedValue(a, b);
      } else if (prop in config1) {
        return getMergedValue(void 0, a);
      }
    }
    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      withXSRFToken: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a, b, prop) => mergeDeepProperties(headersToObject2(a), headersToObject2(b), prop, true)
    };
    utils$12.forEach(Object.keys({ ...config1, ...config2 }), function computeConfigValue(prop) {
      const merge3 = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge3(config1[prop], config2[prop], prop);
      utils$12.isUndefined(configValue) && merge3 !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
  }
  var resolveConfig2 = (config) => {
    const newConfig = mergeConfig2({}, config);
    let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
    newConfig.headers = headers = AxiosHeaders$12.from(headers);
    newConfig.url = buildURL2(buildFullPath2(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
    if (auth) {
      headers.set(
        "Authorization",
        "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
      );
    }
    if (utils$12.isFormData(data)) {
      if (platform2.hasStandardBrowserEnv || platform2.hasStandardBrowserWebWorkerEnv) {
        headers.setContentType(void 0);
      } else if (utils$12.isFunction(data.getHeaders)) {
        const formHeaders = data.getHeaders();
        const allowedHeaders = ["content-type", "content-length"];
        Object.entries(formHeaders).forEach(([key, val]) => {
          if (allowedHeaders.includes(key.toLowerCase())) {
            headers.set(key, val);
          }
        });
      }
    }
    if (platform2.hasStandardBrowserEnv) {
      withXSRFToken && utils$12.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin2(newConfig.url)) {
        const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies2.read(xsrfCookieName);
        if (xsrfValue) {
          headers.set(xsrfHeaderName, xsrfValue);
        }
      }
    }
    return newConfig;
  };
  const isXHRAdapterSupported2 = typeof XMLHttpRequest !== "undefined";
  var xhrAdapter2 = isXHRAdapterSupported2 && function(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      const _config = resolveConfig2(config);
      let requestData = _config.data;
      const requestHeaders = AxiosHeaders$12.from(_config.headers).normalize();
      let { responseType, onUploadProgress, onDownloadProgress } = _config;
      let onCanceled;
      let uploadThrottled, downloadThrottled;
      let flushUpload, flushDownload;
      function done() {
        flushUpload && flushUpload();
        flushDownload && flushDownload();
        _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
        _config.signal && _config.signal.removeEventListener("abort", onCanceled);
      }
      let request2 = new XMLHttpRequest();
      request2.open(_config.method.toUpperCase(), _config.url, true);
      request2.timeout = _config.timeout;
      function onloadend() {
        if (!request2) {
          return;
        }
        const responseHeaders = AxiosHeaders$12.from(
          "getAllResponseHeaders" in request2 && request2.getAllResponseHeaders()
        );
        const responseData = !responseType || responseType === "text" || responseType === "json" ? request2.responseText : request2.response;
        const response = {
          data: responseData,
          status: request2.status,
          statusText: request2.statusText,
          headers: responseHeaders,
          config,
          request: request2
        };
        settle2(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);
        request2 = null;
      }
      if ("onloadend" in request2) {
        request2.onloadend = onloadend;
      } else {
        request2.onreadystatechange = function handleLoad() {
          if (!request2 || request2.readyState !== 4) {
            return;
          }
          if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request2.onabort = function handleAbort() {
        if (!request2) {
          return;
        }
        reject(new AxiosError2("Request aborted", AxiosError2.ECONNABORTED, config, request2));
        request2 = null;
      };
      request2.onerror = function handleError(event) {
        const msg = event && event.message ? event.message : "Network Error";
        const err = new AxiosError2(msg, AxiosError2.ERR_NETWORK, config, request2);
        err.event = event || null;
        reject(err);
        request2 = null;
      };
      request2.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
        const transitional2 = _config.transitional || transitionalDefaults2;
        if (_config.timeoutErrorMessage) {
          timeoutErrorMessage = _config.timeoutErrorMessage;
        }
        reject(new AxiosError2(
          timeoutErrorMessage,
          transitional2.clarifyTimeoutError ? AxiosError2.ETIMEDOUT : AxiosError2.ECONNABORTED,
          config,
          request2
        ));
        request2 = null;
      };
      requestData === void 0 && requestHeaders.setContentType(null);
      if ("setRequestHeader" in request2) {
        utils$12.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
          request2.setRequestHeader(key, val);
        });
      }
      if (!utils$12.isUndefined(_config.withCredentials)) {
        request2.withCredentials = !!_config.withCredentials;
      }
      if (responseType && responseType !== "json") {
        request2.responseType = _config.responseType;
      }
      if (onDownloadProgress) {
        [downloadThrottled, flushDownload] = progressEventReducer2(onDownloadProgress, true);
        request2.addEventListener("progress", downloadThrottled);
      }
      if (onUploadProgress && request2.upload) {
        [uploadThrottled, flushUpload] = progressEventReducer2(onUploadProgress);
        request2.upload.addEventListener("progress", uploadThrottled);
        request2.upload.addEventListener("loadend", flushUpload);
      }
      if (_config.cancelToken || _config.signal) {
        onCanceled = (cancel3) => {
          if (!request2) {
            return;
          }
          reject(!cancel3 || cancel3.type ? new CanceledError2(null, config, request2) : cancel3);
          request2.abort();
          request2 = null;
        };
        _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
        if (_config.signal) {
          _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
        }
      }
      const protocol = parseProtocol2(_config.url);
      if (protocol && platform2.protocols.indexOf(protocol) === -1) {
        reject(new AxiosError2("Unsupported protocol " + protocol + ":", AxiosError2.ERR_BAD_REQUEST, config));
        return;
      }
      request2.send(requestData || null);
    });
  };
  const composeSignals2 = (signals, timeout) => {
    const { length } = signals = signals ? signals.filter(Boolean) : [];
    if (timeout || length) {
      let controller = new AbortController();
      let aborted;
      const onabort = function(reason) {
        if (!aborted) {
          aborted = true;
          unsubscribe();
          const err = reason instanceof Error ? reason : this.reason;
          controller.abort(err instanceof AxiosError2 ? err : new CanceledError2(err instanceof Error ? err.message : err));
        }
      };
      let timer = timeout && setTimeout(() => {
        timer = null;
        onabort(new AxiosError2(`timeout ${timeout} of ms exceeded`, AxiosError2.ETIMEDOUT));
      }, timeout);
      const unsubscribe = () => {
        if (signals) {
          timer && clearTimeout(timer);
          timer = null;
          signals.forEach((signal2) => {
            signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
          });
          signals = null;
        }
      };
      signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
      const { signal } = controller;
      signal.unsubscribe = () => utils$12.asap(unsubscribe);
      return signal;
    }
  };
  var composeSignals$1 = composeSignals2;
  const streamChunk2 = function* (chunk, chunkSize) {
    let len = chunk.byteLength;
    if (len < chunkSize) {
      yield chunk;
      return;
    }
    let pos = 0;
    let end;
    while (pos < len) {
      end = pos + chunkSize;
      yield chunk.slice(pos, end);
      pos = end;
    }
  };
  const readBytes2 = async function* (iterable, chunkSize) {
    for await (const chunk of readStream2(iterable)) {
      yield* streamChunk2(chunk, chunkSize);
    }
  };
  const readStream2 = async function* (stream) {
    if (stream[Symbol.asyncIterator]) {
      yield* stream;
      return;
    }
    const reader = stream.getReader();
    try {
      for (; ; ) {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        yield value;
      }
    } finally {
      await reader.cancel();
    }
  };
  const trackStream2 = (stream, chunkSize, onProgress, onFinish) => {
    const iterator3 = readBytes2(stream, chunkSize);
    let bytes = 0;
    let done;
    let _onFinish = (e2) => {
      if (!done) {
        done = true;
        onFinish && onFinish(e2);
      }
    };
    return new ReadableStream({
      async pull(controller) {
        try {
          const { done: done2, value } = await iterator3.next();
          if (done2) {
            _onFinish();
            controller.close();
            return;
          }
          let len = value.byteLength;
          if (onProgress) {
            let loadedBytes = bytes += len;
            onProgress(loadedBytes);
          }
          controller.enqueue(new Uint8Array(value));
        } catch (err) {
          _onFinish(err);
          throw err;
        }
      },
      cancel(reason) {
        _onFinish(reason);
        return iterator3.return();
      }
    }, {
      highWaterMark: 2
    });
  };
  const DEFAULT_CHUNK_SIZE2 = 64 * 1024;
  const { isFunction: isFunction2 } = utils$12;
  const globalFetchAPI2 = (({ fetch: fetch2, Request: Request2, Response: Response2 }) => ({
    fetch: fetch2,
    Request: Request2,
    Response: Response2
  }))(utils$12.global);
  const {
    ReadableStream: ReadableStream$12,
    TextEncoder: TextEncoder2
  } = utils$12.global;
  const test2 = (fn, ...args) => {
    try {
      return !!fn(...args);
    } catch (e2) {
      return false;
    }
  };
  const factory2 = (env) => {
    const { fetch: fetch2, Request: Request2, Response: Response2 } = Object.assign({}, globalFetchAPI2, env);
    const isFetchSupported = isFunction2(fetch2);
    const isRequestSupported = isFunction2(Request2);
    const isResponseSupported = isFunction2(Response2);
    if (!isFetchSupported) {
      return false;
    }
    const isReadableStreamSupported = isFetchSupported && isFunction2(ReadableStream$12);
    const encodeText = isFetchSupported && (typeof TextEncoder2 === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder2()) : async (str) => new Uint8Array(await new Request2(str).arrayBuffer()));
    const supportsRequestStream = isRequestSupported && isReadableStreamSupported && test2(() => {
      let duplexAccessed = false;
      const hasContentType = new Request2(platform2.origin, {
        body: new ReadableStream$12(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    const supportsResponseStream = isResponseSupported && isReadableStreamSupported && test2(() => utils$12.isReadableStream(new Response2("").body));
    const resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && (() => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
        !resolvers[type] && (resolvers[type] = (res, config) => {
          let method = res && res[type];
          if (method) {
            return method.call(res);
          }
          throw new AxiosError2(`Response type '${type}' is not supported`, AxiosError2.ERR_NOT_SUPPORT, config);
        });
      });
    })();
    const getBodyLength = async (body2) => {
      if (body2 == null) {
        return 0;
      }
      if (utils$12.isBlob(body2)) {
        return body2.size;
      }
      if (utils$12.isSpecCompliantForm(body2)) {
        const _request = new Request2(platform2.origin, {
          method: "POST",
          body: body2
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$12.isArrayBufferView(body2) || utils$12.isArrayBuffer(body2)) {
        return body2.byteLength;
      }
      if (utils$12.isURLSearchParams(body2)) {
        body2 = body2 + "";
      }
      if (utils$12.isString(body2)) {
        return (await encodeText(body2)).byteLength;
      }
    };
    const resolveBodyLength = async (headers, body2) => {
      const length = utils$12.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body2) : length;
    };
    return async (config) => {
      let {
        url: url2,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig2(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
      let request2 = null;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request2(url2, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$12.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator2(
              requestContentLength,
              progressEventReducer2(asyncDecorator2(onUploadProgress))
            );
            data = trackStream2(_request.body, DEFAULT_CHUNK_SIZE2, onProgress, flush);
          }
        }
        if (!utils$12.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = isRequestSupported && "credentials" in Request2.prototype;
        const resolvedOptions = {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        };
        request2 = isRequestSupported && new Request2(url2, resolvedOptions);
        let response = await (isRequestSupported ? fetch2(request2, fetchOptions) : fetch2(url2, resolvedOptions));
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$12.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator2(
            responseContentLength,
            progressEventReducer2(asyncDecorator2(onDownloadProgress), true)
          ) || [];
          response = new Response2(
            trackStream2(response.body, DEFAULT_CHUNK_SIZE2, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$12.findKey(resolvers, responseType) || "text"](response, config);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle2(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$12.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request: request2
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError2("Network Error", AxiosError2.ERR_NETWORK, config, request2),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError2.from(err, err && err.code, config, request2);
      }
    };
  };
  const seedCache2 = /* @__PURE__ */ new Map();
  const getFetch2 = (config) => {
    let env = utils$12.merge.call({
      skipUndefined: true
    }, globalFetchAPI2, config ? config.env : null);
    const { fetch: fetch2, Request: Request2, Response: Response2 } = env;
    const seeds = [
      Request2,
      Response2,
      fetch2
    ];
    let len = seeds.length, i = len, seed, target, map2 = seedCache2;
    while (i--) {
      seed = seeds[i];
      target = map2.get(seed);
      target === void 0 && map2.set(seed, target = i ? /* @__PURE__ */ new Map() : factory2(env));
      map2 = target;
    }
    return target;
  };
  getFetch2();
  const knownAdapters2 = {
    http: httpAdapter2,
    xhr: xhrAdapter2,
    fetch: {
      get: getFetch2
    }
  };
  utils$12.forEach(knownAdapters2, (fn, value) => {
    if (fn) {
      try {
        Object.defineProperty(fn, "name", { value });
      } catch (e2) {
      }
      Object.defineProperty(fn, "adapterName", { value });
    }
  });
  const renderReason2 = (reason) => `- ${reason}`;
  const isResolvedHandle2 = (adapter) => utils$12.isFunction(adapter) || adapter === null || adapter === false;
  var adapters2 = {
    getAdapter: (adapters3, config) => {
      adapters3 = utils$12.isArray(adapters3) ? adapters3 : [adapters3];
      const { length } = adapters3;
      let nameOrAdapter;
      let adapter;
      const rejectedReasons = {};
      for (let i = 0; i < length; i++) {
        nameOrAdapter = adapters3[i];
        let id2;
        adapter = nameOrAdapter;
        if (!isResolvedHandle2(nameOrAdapter)) {
          adapter = knownAdapters2[(id2 = String(nameOrAdapter)).toLowerCase()];
          if (adapter === void 0) {
            throw new AxiosError2(`Unknown adapter '${id2}'`);
          }
        }
        if (adapter && (utils$12.isFunction(adapter) || (adapter = adapter.get(config)))) {
          break;
        }
        rejectedReasons[id2 || "#" + i] = adapter;
      }
      if (!adapter) {
        const reasons = Object.entries(rejectedReasons).map(
          ([id2, state2]) => `adapter ${id2} ` + (state2 === false ? "is not supported by the environment" : "is not available in the build")
        );
        let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason2).join("\n") : " " + renderReason2(reasons[0]) : "as no adapter specified";
        throw new AxiosError2(
          `There is no suitable adapter to dispatch the request ` + s,
          "ERR_NOT_SUPPORT"
        );
      }
      return adapter;
    },
    adapters: knownAdapters2
  };
  function throwIfCancellationRequested2(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
    if (config.signal && config.signal.aborted) {
      throw new CanceledError2(null, config);
    }
  }
  function dispatchRequest2(config) {
    throwIfCancellationRequested2(config);
    config.headers = AxiosHeaders$12.from(config.headers);
    config.data = transformData2.call(
      config,
      config.transformRequest
    );
    if (["post", "put", "patch"].indexOf(config.method) !== -1) {
      config.headers.setContentType("application/x-www-form-urlencoded", false);
    }
    const adapter = adapters2.getAdapter(config.adapter || defaults$1.adapter, config);
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested2(config);
      response.data = transformData2.call(
        config,
        config.transformResponse,
        response
      );
      response.headers = AxiosHeaders$12.from(response.headers);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel2(reason)) {
        throwIfCancellationRequested2(config);
        if (reason && reason.response) {
          reason.response.data = transformData2.call(
            config,
            config.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders$12.from(reason.response.headers);
        }
      }
      return Promise.reject(reason);
    });
  }
  const VERSION2 = "1.12.0";
  const validators$12 = {};
  ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
    validators$12[type] = function validator3(thing) {
      return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
  });
  const deprecatedWarnings2 = {};
  validators$12.transitional = function transitional2(validator3, version2, message) {
    function formatMessage(opt, desc) {
      return "[Axios v" + VERSION2 + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    return (value, opt, opts) => {
      if (validator3 === false) {
        throw new AxiosError2(
          formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
          AxiosError2.ERR_DEPRECATED
        );
      }
      if (version2 && !deprecatedWarnings2[opt]) {
        deprecatedWarnings2[opt] = true;
        console.warn(
          formatMessage(
            opt,
            " has been deprecated since v" + version2 + " and will be removed in the near future"
          )
        );
      }
      return validator3 ? validator3(value, opt, opts) : true;
    };
  };
  validators$12.spelling = function spelling2(correctSpelling) {
    return (value, opt) => {
      console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
      return true;
    };
  };
  function assertOptions2(options, schema, allowUnknown) {
    if (typeof options !== "object") {
      throw new AxiosError2("options must be an object", AxiosError2.ERR_BAD_OPTION_VALUE);
    }
    const keys2 = Object.keys(options);
    let i = keys2.length;
    while (i-- > 0) {
      const opt = keys2[i];
      const validator3 = schema[opt];
      if (validator3) {
        const value = options[opt];
        const result = value === void 0 || validator3(value, opt, options);
        if (result !== true) {
          throw new AxiosError2("option " + opt + " must be " + result, AxiosError2.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError2("Unknown option " + opt, AxiosError2.ERR_BAD_OPTION);
      }
    }
  }
  var validator2 = {
    assertOptions: assertOptions2,
    validators: validators$12
  };
  const validators2 = validator2.validators;
  class Axios3 {
    constructor(instanceConfig) {
      this.defaults = instanceConfig || {};
      this.interceptors = {
        request: new InterceptorManager$1(),
        response: new InterceptorManager$1()
      };
    }
    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    async request(configOrUrl, config) {
      try {
        return await this._request(configOrUrl, config);
      } catch (err) {
        if (err instanceof Error) {
          let dummy = {};
          Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
          const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
          try {
            if (!err.stack) {
              err.stack = stack;
            } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
              err.stack += "\n" + stack;
            }
          } catch (e2) {
          }
        }
        throw err;
      }
    }
    _request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig2(this.defaults, config);
      const { transitional: transitional2, paramsSerializer, headers } = config;
      if (transitional2 !== void 0) {
        validator2.assertOptions(transitional2, {
          silentJSONParsing: validators2.transitional(validators2.boolean),
          forcedJSONParsing: validators2.transitional(validators2.boolean),
          clarifyTimeoutError: validators2.transitional(validators2.boolean)
        }, false);
      }
      if (paramsSerializer != null) {
        if (utils$12.isFunction(paramsSerializer)) {
          config.paramsSerializer = {
            serialize: paramsSerializer
          };
        } else {
          validator2.assertOptions(paramsSerializer, {
            encode: validators2.function,
            serialize: validators2.function
          }, true);
        }
      }
      if (config.allowAbsoluteUrls !== void 0) ;
      else if (this.defaults.allowAbsoluteUrls !== void 0) {
        config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
      } else {
        config.allowAbsoluteUrls = true;
      }
      validator2.assertOptions(config, {
        baseUrl: validators2.spelling("baseURL"),
        withXsrfToken: validators2.spelling("withXSRFToken")
      }, true);
      config.method = (config.method || this.defaults.method || "get").toLowerCase();
      let contextHeaders = headers && utils$12.merge(
        headers.common,
        headers[config.method]
      );
      headers && utils$12.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        (method) => {
          delete headers[method];
        }
      );
      config.headers = AxiosHeaders$12.concat(contextHeaders, headers);
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      let promise;
      let i = 0;
      let len;
      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest2.bind(this), void 0];
        chain.unshift(...requestInterceptorChain);
        chain.push(...responseInterceptorChain);
        len = chain.length;
        promise = Promise.resolve(config);
        while (i < len) {
          promise = promise.then(chain[i++], chain[i++]);
        }
        return promise;
      }
      len = requestInterceptorChain.length;
      let newConfig = config;
      i = 0;
      while (i < len) {
        const onFulfilled = requestInterceptorChain[i++];
        const onRejected = requestInterceptorChain[i++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected.call(this, error);
          break;
        }
      }
      try {
        promise = dispatchRequest2.call(this, newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      i = 0;
      len = responseInterceptorChain.length;
      while (i < len) {
        promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
      }
      return promise;
    }
    getUri(config) {
      config = mergeConfig2(this.defaults, config);
      const fullPath = buildFullPath2(config.baseURL, config.url, config.allowAbsoluteUrls);
      return buildURL2(fullPath, config.params, config.paramsSerializer);
    }
  }
  utils$12.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
    Axios3.prototype[method] = function(url2, config) {
      return this.request(mergeConfig2(config || {}, {
        method,
        url: url2,
        data: (config || {}).data
      }));
    };
  });
  utils$12.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
    function generateHTTPMethod(isForm) {
      return function httpMethod(url2, data, config) {
        return this.request(mergeConfig2(config || {}, {
          method,
          headers: isForm ? {
            "Content-Type": "multipart/form-data"
          } : {},
          url: url2,
          data
        }));
      };
    }
    Axios3.prototype[method] = generateHTTPMethod();
    Axios3.prototype[method + "Form"] = generateHTTPMethod(true);
  });
  var Axios$12 = Axios3;
  class CancelToken3 {
    constructor(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      let resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      const token = this;
      this.promise.then((cancel3) => {
        if (!token._listeners) return;
        let i = token._listeners.length;
        while (i-- > 0) {
          token._listeners[i](cancel3);
        }
        token._listeners = null;
      });
      this.promise.then = (onfulfilled) => {
        let _resolve;
        const promise = new Promise((resolve) => {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel3(message, config, request2) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError2(message, config, request2);
        resolvePromise(token.reason);
      });
    }
    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }
    /**
     * Subscribe to the cancel signal
     */
    subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }
    /**
     * Unsubscribe from the cancel signal
     */
    unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      const index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    }
    toAbortSignal() {
      const controller = new AbortController();
      const abort = (err) => {
        controller.abort(err);
      };
      this.subscribe(abort);
      controller.signal.unsubscribe = () => this.unsubscribe(abort);
      return controller.signal;
    }
    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
      let cancel3;
      const token = new CancelToken3(function executor(c) {
        cancel3 = c;
      });
      return {
        token,
        cancel: cancel3
      };
    }
  }
  var CancelToken$12 = CancelToken3;
  function spread2(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }
  function isAxiosError2(payload) {
    return utils$12.isObject(payload) && payload.isAxiosError === true;
  }
  const HttpStatusCode2 = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511
  };
  Object.entries(HttpStatusCode2).forEach(([key, value]) => {
    HttpStatusCode2[value] = key;
  });
  var HttpStatusCode$12 = HttpStatusCode2;
  function createInstance2(defaultConfig) {
    const context2 = new Axios$12(defaultConfig);
    const instance = bind2(Axios$12.prototype.request, context2);
    utils$12.extend(instance, Axios$12.prototype, context2, { allOwnKeys: true });
    utils$12.extend(instance, context2, null, { allOwnKeys: true });
    instance.create = function create(instanceConfig) {
      return createInstance2(mergeConfig2(defaultConfig, instanceConfig));
    };
    return instance;
  }
  const axios2 = createInstance2(defaults$1);
  axios2.Axios = Axios$12;
  axios2.CanceledError = CanceledError2;
  axios2.CancelToken = CancelToken$12;
  axios2.isCancel = isCancel2;
  axios2.VERSION = VERSION2;
  axios2.toFormData = toFormData2;
  axios2.AxiosError = AxiosError2;
  axios2.Cancel = axios2.CanceledError;
  axios2.all = function all3(promises) {
    return Promise.all(promises);
  };
  axios2.spread = spread2;
  axios2.isAxiosError = isAxiosError2;
  axios2.mergeConfig = mergeConfig2;
  axios2.AxiosHeaders = AxiosHeaders$12;
  axios2.formToJSON = (thing) => formDataToJSON2(utils$12.isHTMLForm(thing) ? new FormData(thing) : thing);
  axios2.getAdapter = adapters2.getAdapter;
  axios2.HttpStatusCode = HttpStatusCode$12;
  axios2.default = axios2;
  axios_1 = axios2;
  return axios_1;
}
var AxiosResponseHeadersAdapter2 = {};
var hasRequiredAxiosResponseHeadersAdapter;
function requireAxiosResponseHeadersAdapter() {
  if (hasRequiredAxiosResponseHeadersAdapter) return AxiosResponseHeadersAdapter2;
  hasRequiredAxiosResponseHeadersAdapter = 1;
  Object.defineProperty(AxiosResponseHeadersAdapter2, "__esModule", { value: true });
  AxiosResponseHeadersAdapter2.AxiosResponseHeadersAdapter = void 0;
  let AxiosResponseHeadersAdapter$12 = class AxiosResponseHeadersAdapter {
    constructor(response) {
      this._response = response;
    }
    get(headerName) {
      if (this._response.headers.get instanceof Function)
        return this._response.headers.get(headerName);
      return this._response.headers[headerName.toLowerCase()];
    }
    getAll() {
      return this._response.headers;
    }
  };
  AxiosResponseHeadersAdapter2.AxiosResponseHeadersAdapter = AxiosResponseHeadersAdapter$12;
  return AxiosResponseHeadersAdapter2;
}
var UtilityFunctions = {};
var Constants$1 = {};
var hasRequiredConstants;
function requireConstants() {
  if (hasRequiredConstants) return Constants$1;
  hasRequiredConstants = 1;
  Object.defineProperty(Constants$1, "__esModule", { value: true });
  Constants$1.Constants = void 0;
  class Constants3 {
  }
  Constants$1.Constants = Constants3;
  Constants3.api = {
    baseUrl: "https://api.bentley.com/imodels",
    version: "itwin-platform.v2"
  };
  Constants3.headers = {
    accept: "Accept",
    authorization: "Authorization",
    contentType: "Content-Type",
    prefer: "Prefer",
    location: "Location"
  };
  Constants3.time = {
    sleepPeriodInMs: 1e3,
    iModelInitializationTimeOutInMs: 5 * 60 * 1e3
  };
  Constants3.httpStatusCodes = {
    internalServerError: 500
  };
  Constants3.retryPolicy = {
    maxRetries: 3,
    baseDelayInMs: 300,
    delayFactor: 3
  };
  return Constants$1;
}
var hasRequiredUtilityFunctions;
function requireUtilityFunctions() {
  if (hasRequiredUtilityFunctions) return UtilityFunctions;
  hasRequiredUtilityFunctions = 1;
  Object.defineProperty(UtilityFunctions, "__esModule", { value: true });
  UtilityFunctions.waitForCondition = UtilityFunctions.sleep = void 0;
  const Constants_1 = requireConstants();
  async function sleep2(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  UtilityFunctions.sleep = sleep2;
  async function waitForCondition2(params) {
    const sleepPeriodInMs = Constants_1.Constants.time.sleepPeriodInMs;
    const timeOutInMs = params.timeOutInMs ?? Constants_1.Constants.time.iModelInitializationTimeOutInMs;
    for (let retries = Math.ceil(timeOutInMs / sleepPeriodInMs); retries > 0; --retries) {
      const isTargetStateReached = await params.conditionToSatisfy();
      if (isTargetStateReached)
        return;
      await sleep2(sleepPeriodInMs);
    }
    const timeoutError = params.timeoutErrorFactory();
    throw timeoutError;
  }
  UtilityFunctions.waitForCondition = waitForCondition2;
  return UtilityFunctions;
}
var hasRequiredAxiosRestClient;
function requireAxiosRestClient() {
  if (hasRequiredAxiosRestClient) return AxiosRestClient2;
  hasRequiredAxiosRestClient = 1;
  Object.defineProperty(AxiosRestClient2, "__esModule", { value: true });
  AxiosRestClient2.AxiosRestClient = void 0;
  const axios_12 = /* @__PURE__ */ requireAxios();
  const RestClient_1 = requireRestClient();
  const AxiosResponseHeadersAdapter_1 = requireAxiosResponseHeadersAdapter();
  const UtilityFunctions_1 = requireUtilityFunctions();
  let AxiosRestClient$12 = class AxiosRestClient3 {
    constructor(parseErrorFunc, retryPolicy2) {
      this._parseErrorFunc = parseErrorFunc;
      this._retryPolicy = retryPolicy2;
    }
    async sendGetRequest(params) {
      const requestConfig = {
        headers: params.headers
      };
      if (params.responseType === RestClient_1.ContentType.Png) {
        requestConfig.responseType = "arraybuffer";
        const response = await this.executeRequest(async () => axios_12.default.get(params.url, requestConfig));
        const data = response.body;
        if (data instanceof ArrayBuffer)
          return { ...response, body: new Uint8Array(data) };
        return response;
      }
      return this.executeRequest(async () => axios_12.default.get(params.url, requestConfig));
    }
    async sendPostRequest(params) {
      const requestConfig = {
        headers: params.headers
      };
      return this.executeRequest(async () => axios_12.default.post(params.url, params.body.content ?? {}, requestConfig));
    }
    async sendPutRequest(params) {
      const requestConfig = {
        headers: params.headers
      };
      return this.executeRequest(async () => axios_12.default.put(params.url, params.body.content, requestConfig));
    }
    async sendPatchRequest(params) {
      const requestConfig = {
        headers: params.headers
      };
      return this.executeRequest(async () => axios_12.default.patch(params.url, params.body.content ?? {}, requestConfig));
    }
    async sendDeleteRequest(params) {
      const requestConfig = {
        headers: params.headers
      };
      return this.executeRequest(async () => axios_12.default.delete(params.url, requestConfig));
    }
    async executeRequest(requestFunc) {
      try {
        const response = await this.executeWithRetry(requestFunc);
        return {
          body: response.data,
          headers: new AxiosResponseHeadersAdapter_1.AxiosResponseHeadersAdapter(response)
        };
      } catch (error) {
        if (axios_12.default.isAxiosError(error)) {
          const parsedError = this._parseErrorFunc({ statusCode: error.response?.status, body: error.response?.data }, error);
          throw parsedError;
        }
        throw error;
      }
    }
    async executeWithRetry(requestFunc) {
      let retriesInvoked = 0;
      for (; ; ) {
        try {
          return await requestFunc();
        } catch (error) {
          if (this._retryPolicy === null || retriesInvoked >= this._retryPolicy.maxRetries || retriesInvoked >= AxiosRestClient3.retryCountUpperBound || !await this._retryPolicy.shouldRetry({ retriesInvoked, error })) {
            throw error;
          }
          const sleepDurationInMs = this._retryPolicy.getSleepDurationInMs({ retriesInvoked: retriesInvoked++ });
          if (sleepDurationInMs > 0) {
            await (0, UtilityFunctions_1.sleep)(sleepDurationInMs);
          }
        }
      }
    }
  };
  AxiosRestClient2.AxiosRestClient = AxiosRestClient$12;
  AxiosRestClient$12.retryCountUpperBound = 10;
  return AxiosRestClient2;
}
var IModelsErrorParser$1 = {};
var hasRequiredIModelsErrorParser$1;
function requireIModelsErrorParser$1() {
  if (hasRequiredIModelsErrorParser$1) return IModelsErrorParser$1;
  hasRequiredIModelsErrorParser$1 = 1;
  Object.defineProperty(IModelsErrorParser$1, "__esModule", { value: true });
  IModelsErrorParser$1.IModelsErrorParser = IModelsErrorParser$1.IModelsErrorImpl = IModelsErrorParser$1.IModelsErrorBaseImpl = void 0;
  const types_1 = requireTypes$4();
  class IModelsErrorBaseImpl2 extends Error {
    constructor(params) {
      super();
      this.name = this.code = params.code;
      this.message = params.message;
      this.originalError = params.originalError;
    }
  }
  IModelsErrorParser$1.IModelsErrorBaseImpl = IModelsErrorBaseImpl2;
  class IModelsErrorImpl2 extends IModelsErrorBaseImpl2 {
    constructor(params) {
      super(params);
      this.details = params.details;
      this.statusCode = params.statusCode;
    }
  }
  IModelsErrorParser$1.IModelsErrorImpl = IModelsErrorImpl2;
  class IModelsErrorParser3 {
    static parse(response, originalError) {
      if (!response.body)
        return IModelsErrorParser3.createUnrecognizedError(response, originalError);
      if (response.statusCode === 401)
        return IModelsErrorParser3.createUnauthorizedError(response, originalError);
      const errorFromApi = response.body;
      const errorCode = IModelsErrorParser3.parseCode(errorFromApi?.error?.code);
      if (errorCode === types_1.IModelsErrorCode.Unrecognized)
        return IModelsErrorParser3.createUnrecognizedError(response, originalError);
      const errorDetails = IModelsErrorParser3.parseDetails(errorFromApi.error?.details);
      const errorMessage2 = IModelsErrorParser3.parseAndFormatMessage(errorFromApi?.error?.message, errorDetails);
      return new IModelsErrorImpl2({
        code: errorCode,
        statusCode: response.statusCode,
        originalError,
        message: errorMessage2,
        details: errorDetails
      });
    }
    static parseCode(errorCode) {
      if (!errorCode)
        return types_1.IModelsErrorCode.Unrecognized;
      const adjustedErrorCode = IModelsErrorParser3.adjustErrorCodeCaseToMatchEnum(errorCode);
      let parsedCode = types_1.IModelsErrorCode[adjustedErrorCode];
      if (!parsedCode)
        parsedCode = types_1.IModelsErrorCode.Unrecognized;
      return parsedCode;
    }
    static adjustErrorCodeCaseToMatchEnum(errorCode) {
      return errorCode.replace("iModel", "IModel").replace("iTwin", "ITwin");
    }
    static parseDetails(details) {
      if (!details)
        return void 0;
      return details.map((unparsedDetail) => {
        return { ...unparsedDetail, code: this.parseCode(unparsedDetail.code) };
      });
    }
    static parseAndFormatMessage(message, errorDetails) {
      let result = message ?? IModelsErrorParser3._defaultErrorMessage;
      if (!errorDetails || errorDetails.length === 0)
        return result;
      result += " Details:\n";
      for (let i = 0; i < errorDetails.length; i++) {
        result += `${i + 1}. ${errorDetails[i].code}: ${errorDetails[i].message}`;
        if (errorDetails[i].target)
          result += ` Target: ${errorDetails[i].target}.`;
        result += "\n";
      }
      return result;
    }
    static createUnrecognizedError(response, originalError) {
      return new IModelsErrorImpl2({
        code: types_1.IModelsErrorCode.Unrecognized,
        statusCode: response.statusCode,
        originalError,
        message: `${IModelsErrorParser3._defaultErrorMessage}.
Original error message: ${originalError.message},
original error code: ${originalError.code},
response status code: ${response.statusCode},
response body: ${JSON.stringify(response.body)}`,
        details: void 0
      });
    }
    static createUnauthorizedError(response, originalError) {
      const errorMessage2 = response.body?.error?.message ?? response.body?.message ?? IModelsErrorParser3._defaultUnauthorizedMessage;
      return new IModelsErrorImpl2({
        code: types_1.IModelsErrorCode.Unauthorized,
        statusCode: response.statusCode,
        originalError,
        message: errorMessage2,
        details: void 0
      });
    }
  }
  IModelsErrorParser$1.IModelsErrorParser = IModelsErrorParser3;
  IModelsErrorParser3._defaultErrorMessage = "Unknown error occurred";
  IModelsErrorParser3._defaultUnauthorizedMessage = "Authorization failed";
  return IModelsErrorParser$1;
}
var OperationsBase2 = {};
var hasRequiredOperationsBase;
function requireOperationsBase() {
  if (hasRequiredOperationsBase) return OperationsBase2;
  hasRequiredOperationsBase = 1;
  Object.defineProperty(OperationsBase2, "__esModule", { value: true });
  OperationsBase2.OperationsBase = void 0;
  const Constants_1 = requireConstants();
  const types_1 = requireTypes$4();
  let OperationsBase$12 = class OperationsBase {
    constructor(_options) {
      this._options = _options;
    }
    async sendGetRequest(params) {
      const urlAndHeaders = {
        url: params.url,
        headers: await this.formHeaders(params)
      };
      if (params.responseType === types_1.ContentType.Png)
        return this._options.restClient.sendGetRequest({
          responseType: types_1.ContentType.Png,
          ...urlAndHeaders
        });
      return this._options.restClient.sendGetRequest({
        responseType: params.responseType ?? types_1.ContentType.Json,
        ...urlAndHeaders
      });
    }
    async sendPostRequest(params) {
      return this._options.restClient.sendPostRequest({
        url: params.url,
        body: {
          contentType: types_1.ContentType.Json,
          content: params.body
        },
        headers: await this.formHeaders({ ...params, contentType: types_1.ContentType.Json })
      });
    }
    async sendPutRequest(params) {
      return this._options.restClient.sendPutRequest({
        url: params.url,
        body: {
          contentType: params.contentType,
          content: params.body
        },
        headers: await this.formHeaders({ ...params, contentType: params.contentType })
      });
    }
    async sendPatchRequest(params) {
      return this._options.restClient.sendPatchRequest({
        url: params.url,
        body: {
          contentType: types_1.ContentType.Json,
          content: params.body
        },
        headers: await this.formHeaders({ ...params, contentType: types_1.ContentType.Json })
      });
    }
    async sendDeleteRequest(params) {
      return this._options.restClient.sendDeleteRequest({
        url: params.url,
        headers: await this.formHeaders(params)
      });
    }
    async getEntityCollectionPage(params) {
      const response = await this.sendGetRequest(params);
      return {
        entities: params.entityCollectionAccessor(response),
        next: response.body._links.next ? async () => this.getEntityCollectionPage({ ...params, url: response.body._links.next.href }) : void 0
      };
    }
    resolveHeaderValue(headerOrHeaderFactory) {
      if (typeof headerOrHeaderFactory === "function")
        return headerOrHeaderFactory();
      return headerOrHeaderFactory;
    }
    addOrUpdateHeaders(existingHeaders, additionalHeaders) {
      if (!additionalHeaders)
        return;
      for (const headerName in additionalHeaders) {
        if (Object.prototype.hasOwnProperty.call(additionalHeaders, headerName)) {
          const headerValue = this.resolveHeaderValue(additionalHeaders[headerName]);
          if (typeof headerValue === "string")
            existingHeaders[headerName] = headerValue;
          else
            delete existingHeaders[headerName];
        }
      }
    }
    async formHeaders(params) {
      const headers = {};
      const authorizationInfo = await params.authorization();
      headers[Constants_1.Constants.headers.authorization] = `${authorizationInfo.scheme} ${authorizationInfo.token}`;
      headers[Constants_1.Constants.headers.accept] = `application/vnd.bentley.${this._options.api.version}+json`;
      if (params.preferReturn)
        headers[Constants_1.Constants.headers.prefer] = `return=${params.preferReturn}`;
      if (params.contentType)
        headers[Constants_1.Constants.headers.contentType] = params.contentType;
      this.addOrUpdateHeaders(headers, this._options.headers);
      this.addOrUpdateHeaders(headers, params.headers);
      return headers;
    }
  };
  OperationsBase2.OperationsBase = OperationsBase$12;
  return OperationsBase2;
}
var UtilityTypes = {};
var hasRequiredUtilityTypes;
function requireUtilityTypes() {
  if (hasRequiredUtilityTypes) return UtilityTypes;
  hasRequiredUtilityTypes = 1;
  Object.defineProperty(UtilityTypes, "__esModule", { value: true });
  return UtilityTypes;
}
var AxiosRetryPolicy2 = {};
var hasRequiredAxiosRetryPolicy;
function requireAxiosRetryPolicy() {
  if (hasRequiredAxiosRetryPolicy) return AxiosRetryPolicy2;
  hasRequiredAxiosRetryPolicy = 1;
  Object.defineProperty(AxiosRetryPolicy2, "__esModule", { value: true });
  AxiosRetryPolicy2.AxiosRetryPolicy = void 0;
  const axios_12 = /* @__PURE__ */ requireAxios();
  const Constants_1 = requireConstants();
  let AxiosRetryPolicy$12 = class AxiosRetryPolicy {
    constructor(params) {
      this.maxRetries = params.maxRetries;
      this._backoffAlgorithm = params.backoffAlgorithm;
    }
    shouldRetry(params) {
      if ((0, axios_12.isAxiosError)(params.error) && params.error.response?.status != null) {
        return params.error.response.status >= Constants_1.Constants.httpStatusCodes.internalServerError;
      }
      return true;
    }
    getSleepDurationInMs(params) {
      return this._backoffAlgorithm.getSleepDurationInMs(params.retriesInvoked);
    }
  };
  AxiosRetryPolicy2.AxiosRetryPolicy = AxiosRetryPolicy$12;
  return AxiosRetryPolicy2;
}
var ExponentialBackoffAlgorithm2 = {};
var hasRequiredExponentialBackoffAlgorithm;
function requireExponentialBackoffAlgorithm() {
  if (hasRequiredExponentialBackoffAlgorithm) return ExponentialBackoffAlgorithm2;
  hasRequiredExponentialBackoffAlgorithm = 1;
  Object.defineProperty(ExponentialBackoffAlgorithm2, "__esModule", { value: true });
  ExponentialBackoffAlgorithm2.ExponentialBackoffAlgorithm = void 0;
  let ExponentialBackoffAlgorithm$12 = class ExponentialBackoffAlgorithm {
    constructor(params) {
      this._baseDelayInMs = params.baseDelayInMs;
      this._factor = params.factor;
    }
    getSleepDurationInMs(attempt) {
      return Math.pow(this._factor, attempt) * this._baseDelayInMs;
    }
  };
  ExponentialBackoffAlgorithm2.ExponentialBackoffAlgorithm = ExponentialBackoffAlgorithm$12;
  return ExponentialBackoffAlgorithm2;
}
var hasRequiredInternal$6;
function requireInternal$6() {
  if (hasRequiredInternal$6) return internal$6;
  hasRequiredInternal$6 = 1;
  (function(exports) {
    var __createBinding = internal$6 && internal$6.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = internal$6 && internal$6.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireEntityListIteratorImpl(), exports);
    __exportStar(requireEntityPageListIterator(), exports);
    __exportStar(requireApiResponseInterfaces$1(), exports);
    __exportStar(requireAxiosRestClient(), exports);
    __exportStar(requireIModelsErrorParser$1(), exports);
    __exportStar(requireOperationsBase(), exports);
    __exportStar(requireUtilityTypes(), exports);
    __exportStar(requireUtilityFunctions(), exports);
    __exportStar(requireAxiosRetryPolicy(), exports);
    __exportStar(requireExponentialBackoffAlgorithm(), exports);
  })(internal$6);
  return internal$6;
}
var lib$2 = {};
var common$1 = {};
var Types$2 = {};
var hasRequiredTypes$2;
function requireTypes$2() {
  if (hasRequiredTypes$2) return Types$2;
  hasRequiredTypes$2 = 1;
  Object.defineProperty(Types$2, "__esModule", { value: true });
  Types$2.Types = void 0;
  const types2 = {
    AzureServer: {
      config: Symbol.for("Types.AzureServer.Config")
    }
  };
  Types$2.Types = types2;
  return Types$2;
}
var Interfaces$3 = {};
var hasRequiredInterfaces$3;
function requireInterfaces$3() {
  if (hasRequiredInterfaces$3) return Interfaces$3;
  hasRequiredInterfaces$3 = 1;
  Object.defineProperty(Interfaces$3, "__esModule", { value: true });
  return Interfaces$3;
}
var hasRequiredCommon$1;
function requireCommon$1() {
  if (hasRequiredCommon$1) return common$1;
  hasRequiredCommon$1 = 1;
  (function(exports) {
    var __createBinding = common$1 && common$1.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = common$1 && common$1.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireTypes$2(), exports);
    __exportStar(requireInterfaces$3(), exports);
  })(common$1);
  return common$1;
}
var client$1 = {};
var AzureClientStorage = {};
const __viteBrowserExternal = {};
const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
const require$$0$1 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
var cjs$3 = {};
var cjs$2 = {};
var stringifyServiceIdentifier = {};
var hasRequiredStringifyServiceIdentifier;
function requireStringifyServiceIdentifier() {
  if (hasRequiredStringifyServiceIdentifier) return stringifyServiceIdentifier;
  hasRequiredStringifyServiceIdentifier = 1;
  Object.defineProperty(stringifyServiceIdentifier, "__esModule", { value: true });
  stringifyServiceIdentifier.stringifyServiceIdentifier = stringifyServiceIdentifier$1;
  function stringifyServiceIdentifier$1(serviceIdentifier) {
    switch (typeof serviceIdentifier) {
      case "string":
      case "symbol":
        return serviceIdentifier.toString();
      case "function":
        return serviceIdentifier.name;
      default:
        throw new Error(`Unexpected ${typeof serviceIdentifier} service id type`);
    }
  }
  return stringifyServiceIdentifier;
}
var LazyServiceIdentifier = {};
var hasRequiredLazyServiceIdentifier;
function requireLazyServiceIdentifier() {
  if (hasRequiredLazyServiceIdentifier) return LazyServiceIdentifier;
  hasRequiredLazyServiceIdentifier = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyServiceIdentifier = exports.islazyServiceIdentifierSymbol = void 0;
    exports.islazyServiceIdentifierSymbol = Symbol.for("@inversifyjs/common/islazyServiceIdentifier");
    class LazyServiceIdentifier2 {
      [exports.islazyServiceIdentifierSymbol];
      #buildServiceId;
      constructor(buildServiceId) {
        this.#buildServiceId = buildServiceId;
        this[exports.islazyServiceIdentifierSymbol] = true;
      }
      static is(value) {
        return typeof value === "object" && value !== null && value[exports.islazyServiceIdentifierSymbol] === true;
      }
      unwrap() {
        return this.#buildServiceId();
      }
    }
    exports.LazyServiceIdentifier = LazyServiceIdentifier2;
  })(LazyServiceIdentifier);
  return LazyServiceIdentifier;
}
var hasRequiredCjs$3;
function requireCjs$3() {
  if (hasRequiredCjs$3) return cjs$2;
  hasRequiredCjs$3 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringifyServiceIdentifier = exports.LazyServiceIdentifier = void 0;
    const stringifyServiceIdentifier_1 = requireStringifyServiceIdentifier();
    Object.defineProperty(exports, "stringifyServiceIdentifier", { enumerable: true, get: function() {
      return stringifyServiceIdentifier_1.stringifyServiceIdentifier;
    } });
    const LazyServiceIdentifier_1 = requireLazyServiceIdentifier();
    Object.defineProperty(exports, "LazyServiceIdentifier", { enumerable: true, get: function() {
      return LazyServiceIdentifier_1.LazyServiceIdentifier;
    } });
  })(cjs$2);
  return cjs$2;
}
var metadata_keys = {};
var hasRequiredMetadata_keys;
function requireMetadata_keys() {
  if (hasRequiredMetadata_keys) return metadata_keys;
  hasRequiredMetadata_keys = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NON_CUSTOM_TAG_KEYS = exports.PRE_DESTROY = exports.POST_CONSTRUCT = exports.DESIGN_PARAM_TYPES = exports.PARAM_TYPES = exports.TAGGED_PROP = exports.TAGGED = exports.MULTI_INJECT_TAG = exports.INJECT_TAG = exports.OPTIONAL_TAG = exports.UNMANAGED_TAG = exports.NAME_TAG = exports.NAMED_TAG = void 0;
    exports.NAMED_TAG = "named";
    exports.NAME_TAG = "name";
    exports.UNMANAGED_TAG = "unmanaged";
    exports.OPTIONAL_TAG = "optional";
    exports.INJECT_TAG = "inject";
    exports.MULTI_INJECT_TAG = "multi_inject";
    exports.TAGGED = "inversify:tagged";
    exports.TAGGED_PROP = "inversify:tagged_props";
    exports.PARAM_TYPES = "inversify:paramtypes";
    exports.DESIGN_PARAM_TYPES = "design:paramtypes";
    exports.POST_CONSTRUCT = "post_construct";
    exports.PRE_DESTROY = "pre_destroy";
    function getNonCustomTagKeys() {
      return [
        exports.INJECT_TAG,
        exports.MULTI_INJECT_TAG,
        exports.NAME_TAG,
        exports.UNMANAGED_TAG,
        exports.NAMED_TAG,
        exports.OPTIONAL_TAG
      ];
    }
    exports.NON_CUSTOM_TAG_KEYS = getNonCustomTagKeys();
  })(metadata_keys);
  return metadata_keys;
}
var container = {};
var binding = {};
var literal_types = {};
var hasRequiredLiteral_types;
function requireLiteral_types() {
  if (hasRequiredLiteral_types) return literal_types;
  hasRequiredLiteral_types = 1;
  Object.defineProperty(literal_types, "__esModule", { value: true });
  literal_types.TargetTypeEnum = literal_types.BindingTypeEnum = literal_types.BindingScopeEnum = void 0;
  const BindingScopeEnum = {
    Request: "Request",
    Singleton: "Singleton",
    Transient: "Transient"
  };
  literal_types.BindingScopeEnum = BindingScopeEnum;
  const BindingTypeEnum = {
    ConstantValue: "ConstantValue",
    Constructor: "Constructor",
    DynamicValue: "DynamicValue",
    Factory: "Factory",
    Function: "Function",
    Instance: "Instance",
    Invalid: "Invalid",
    Provider: "Provider"
  };
  literal_types.BindingTypeEnum = BindingTypeEnum;
  const TargetTypeEnum = {
    ClassProperty: "ClassProperty",
    ConstructorArgument: "ConstructorArgument",
    Variable: "Variable"
  };
  literal_types.TargetTypeEnum = TargetTypeEnum;
  return literal_types;
}
var id = {};
var hasRequiredId;
function requireId() {
  if (hasRequiredId) return id;
  hasRequiredId = 1;
  Object.defineProperty(id, "__esModule", { value: true });
  id.id = id$1;
  let idCounter = 0;
  function id$1() {
    return idCounter++;
  }
  return id;
}
var hasRequiredBinding;
function requireBinding() {
  if (hasRequiredBinding) return binding;
  hasRequiredBinding = 1;
  Object.defineProperty(binding, "__esModule", { value: true });
  binding.Binding = void 0;
  const literal_types_1 = requireLiteral_types();
  const id_1 = requireId();
  class Binding {
    id;
    moduleId;
    // Determines weather the bindings has been already activated
    // The activation action takes place when an instance is resolved
    // If the scope is singleton it only happens once
    activated;
    // A runtime identifier because at runtime we don't have interfaces
    serviceIdentifier;
    // constructor from binding to or toConstructor
    implementationType;
    // Cache used to allow singleton scope and BindingType.ConstantValue bindings
    cache;
    // Cache used to allow BindingType.DynamicValue bindings
    dynamicValue;
    // The scope mode to be used
    scope;
    // The kind of binding
    type;
    // A factory method used in BindingType.Factory bindings
    factory;
    // An async factory method used in BindingType.Provider bindings
    provider;
    // A constraint used to limit the contexts in which this binding is applicable
    constraint;
    // On activation handler (invoked just before an instance is added to cache and injected)
    onActivation;
    // On deactivation handler (invoked just before an instance is unbinded and removed from container)
    onDeactivation;
    constructor(serviceIdentifier, scope2) {
      this.id = (0, id_1.id)();
      this.activated = false;
      this.serviceIdentifier = serviceIdentifier;
      this.scope = scope2;
      this.type = literal_types_1.BindingTypeEnum.Invalid;
      this.constraint = (_request) => true;
      this.implementationType = null;
      this.cache = null;
      this.factory = null;
      this.provider = null;
      this.onActivation = null;
      this.onDeactivation = null;
      this.dynamicValue = null;
    }
    clone() {
      const clone = new Binding(this.serviceIdentifier, this.scope);
      clone.activated = clone.scope === literal_types_1.BindingScopeEnum.Singleton ? this.activated : false;
      clone.implementationType = this.implementationType;
      clone.dynamicValue = this.dynamicValue;
      clone.scope = this.scope;
      clone.type = this.type;
      clone.factory = this.factory;
      clone.provider = this.provider;
      clone.constraint = this.constraint;
      clone.onActivation = this.onActivation;
      clone.onDeactivation = this.onDeactivation;
      clone.cache = this.cache;
      return clone;
    }
  }
  binding.Binding = Binding;
  return binding;
}
var error_msgs = {};
var hasRequiredError_msgs;
function requireError_msgs() {
  if (hasRequiredError_msgs) return error_msgs;
  hasRequiredError_msgs = 1;
  Object.defineProperty(error_msgs, "__esModule", { value: true });
  error_msgs.STACK_OVERFLOW = error_msgs.CIRCULAR_DEPENDENCY_IN_FACTORY = error_msgs.ON_DEACTIVATION_ERROR = error_msgs.PRE_DESTROY_ERROR = error_msgs.POST_CONSTRUCT_ERROR = error_msgs.ASYNC_UNBIND_REQUIRED = error_msgs.MULTIPLE_POST_CONSTRUCT_METHODS = error_msgs.MULTIPLE_PRE_DESTROY_METHODS = error_msgs.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = error_msgs.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = error_msgs.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = error_msgs.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = error_msgs.ARGUMENTS_LENGTH_MISMATCH = error_msgs.INVALID_DECORATOR_OPERATION = error_msgs.INVALID_TO_SELF_VALUE = error_msgs.LAZY_IN_SYNC = error_msgs.INVALID_FUNCTION_BINDING = error_msgs.INVALID_MIDDLEWARE_RETURN = error_msgs.NO_MORE_SNAPSHOTS_AVAILABLE = error_msgs.INVALID_BINDING_TYPE = error_msgs.CIRCULAR_DEPENDENCY = error_msgs.UNDEFINED_INJECT_ANNOTATION = error_msgs.TRYING_TO_RESOLVE_BINDINGS = error_msgs.NOT_REGISTERED = error_msgs.CANNOT_UNBIND = error_msgs.AMBIGUOUS_MATCH = error_msgs.KEY_NOT_FOUND = error_msgs.NULL_ARGUMENT = error_msgs.DUPLICATED_METADATA = error_msgs.DUPLICATED_INJECTABLE_DECORATOR = void 0;
  error_msgs.DUPLICATED_INJECTABLE_DECORATOR = "Cannot apply @injectable decorator multiple times.";
  error_msgs.DUPLICATED_METADATA = "Metadata key was used more than once in a parameter:";
  error_msgs.NULL_ARGUMENT = "NULL argument";
  error_msgs.KEY_NOT_FOUND = "Key Not Found";
  error_msgs.AMBIGUOUS_MATCH = "Ambiguous match found for serviceIdentifier:";
  error_msgs.CANNOT_UNBIND = "Could not unbind serviceIdentifier:";
  error_msgs.NOT_REGISTERED = "No matching bindings found for serviceIdentifier:";
  const TRYING_TO_RESOLVE_BINDINGS = (name) => `Trying to resolve bindings for "${name}"`;
  error_msgs.TRYING_TO_RESOLVE_BINDINGS = TRYING_TO_RESOLVE_BINDINGS;
  const UNDEFINED_INJECT_ANNOTATION = (name) => `@inject called with undefined this could mean that the class ${name} has a circular dependency problem. You can use a LazyServiceIdentifer to overcome this limitation.`;
  error_msgs.UNDEFINED_INJECT_ANNOTATION = UNDEFINED_INJECT_ANNOTATION;
  error_msgs.CIRCULAR_DEPENDENCY = "Circular dependency found:";
  error_msgs.INVALID_BINDING_TYPE = "Invalid binding type:";
  error_msgs.NO_MORE_SNAPSHOTS_AVAILABLE = "No snapshot available to restore.";
  error_msgs.INVALID_MIDDLEWARE_RETURN = "Invalid return type in middleware. Middleware must return!";
  error_msgs.INVALID_FUNCTION_BINDING = "Value provided to function binding must be a function!";
  const LAZY_IN_SYNC = (key) => `You are attempting to construct ${keyToString(key)} in a synchronous way but it has asynchronous dependencies.`;
  error_msgs.LAZY_IN_SYNC = LAZY_IN_SYNC;
  error_msgs.INVALID_TO_SELF_VALUE = "The toSelf function can only be applied when a constructor is used as service identifier";
  error_msgs.INVALID_DECORATOR_OPERATION = "The @inject @multiInject @tagged and @named decorators must be applied to the parameters of a class constructor or a class property.";
  const ARGUMENTS_LENGTH_MISMATCH = (name) => `The number of constructor arguments in the derived class ${name} must be >= than the number of constructor arguments of its base class.`;
  error_msgs.ARGUMENTS_LENGTH_MISMATCH = ARGUMENTS_LENGTH_MISMATCH;
  error_msgs.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = "Invalid Container constructor argument. Container options must be an object.";
  error_msgs.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = 'Invalid Container option. Default scope must be a string ("singleton" or "transient").';
  error_msgs.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = "Invalid Container option. Auto bind injectable must be a boolean";
  error_msgs.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = "Invalid Container option. Skip base check must be a boolean";
  error_msgs.MULTIPLE_PRE_DESTROY_METHODS = "Cannot apply @preDestroy decorator multiple times in the same class";
  error_msgs.MULTIPLE_POST_CONSTRUCT_METHODS = "Cannot apply @postConstruct decorator multiple times in the same class";
  error_msgs.ASYNC_UNBIND_REQUIRED = "Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)";
  const POST_CONSTRUCT_ERROR = (clazz, errorMessage2) => `@postConstruct error in class ${clazz}: ${errorMessage2}`;
  error_msgs.POST_CONSTRUCT_ERROR = POST_CONSTRUCT_ERROR;
  const PRE_DESTROY_ERROR = (clazz, errorMessage2) => `@preDestroy error in class ${clazz}: ${errorMessage2}`;
  error_msgs.PRE_DESTROY_ERROR = PRE_DESTROY_ERROR;
  const ON_DEACTIVATION_ERROR = (clazz, errorMessage2) => `onDeactivation() error in class ${clazz}: ${errorMessage2}`;
  error_msgs.ON_DEACTIVATION_ERROR = ON_DEACTIVATION_ERROR;
  const CIRCULAR_DEPENDENCY_IN_FACTORY = (factoryType, serviceIdentifier) => `It looks like there is a circular dependency in one of the '${factoryType}' bindings. Please investigate bindings with service identifier '${serviceIdentifier}'.`;
  error_msgs.CIRCULAR_DEPENDENCY_IN_FACTORY = CIRCULAR_DEPENDENCY_IN_FACTORY;
  error_msgs.STACK_OVERFLOW = "Maximum call stack size exceeded";
  function keyToString(key) {
    if (typeof key === "function") {
      return `[function/class ${key.name || "<anonymous>"}]`;
    }
    if (typeof key === "symbol") {
      return key.toString();
    }
    return `'${key}'`;
  }
  return error_msgs;
}
var metadata_reader = {};
var hasRequiredMetadata_reader;
function requireMetadata_reader() {
  if (hasRequiredMetadata_reader) return metadata_reader;
  hasRequiredMetadata_reader = 1;
  var __createBinding = metadata_reader && metadata_reader.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = metadata_reader && metadata_reader.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = metadata_reader && metadata_reader.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(metadata_reader, "__esModule", { value: true });
  metadata_reader.MetadataReader = void 0;
  const METADATA_KEY = __importStar(requireMetadata_keys());
  class MetadataReader {
    getConstructorMetadata(constructorFunc) {
      const compilerGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, constructorFunc) ?? [];
      const userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED, constructorFunc);
      return {
        compilerGeneratedMetadata,
        userGeneratedMetadata: userGeneratedMetadata ?? {}
      };
    }
    getPropertiesMetadata(constructorFunc) {
      const userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED_PROP, constructorFunc) ?? {};
      return userGeneratedMetadata;
    }
  }
  metadata_reader.MetadataReader = MetadataReader;
  return metadata_reader;
}
var planner = {};
var cjs$1 = {};
var getTargets = {};
var getClassMetadata = {};
var cjs = {};
var getReflectMetadata = {};
var hasRequiredGetReflectMetadata;
function requireGetReflectMetadata() {
  if (hasRequiredGetReflectMetadata) return getReflectMetadata;
  hasRequiredGetReflectMetadata = 1;
  Object.defineProperty(getReflectMetadata, "__esModule", { value: true });
  getReflectMetadata.getReflectMetadata = getReflectMetadata$1;
  function getReflectMetadata$1(target, metadataKey) {
    return Reflect.getMetadata(metadataKey, target);
  }
  return getReflectMetadata;
}
var updateReflectMetadata = {};
var hasRequiredUpdateReflectMetadata;
function requireUpdateReflectMetadata() {
  if (hasRequiredUpdateReflectMetadata) return updateReflectMetadata;
  hasRequiredUpdateReflectMetadata = 1;
  Object.defineProperty(updateReflectMetadata, "__esModule", { value: true });
  updateReflectMetadata.updateReflectMetadata = updateReflectMetadata$1;
  const getReflectMetadata_1 = requireGetReflectMetadata();
  function updateReflectMetadata$1(target, metadataKey, defaultValue, callback) {
    const metadata2 = (0, getReflectMetadata_1.getReflectMetadata)(target, metadataKey) ?? defaultValue;
    const updatedMetadata = callback(metadata2);
    Reflect.defineMetadata(metadataKey, updatedMetadata, target);
  }
  return updateReflectMetadata;
}
var hasRequiredCjs$2;
function requireCjs$2() {
  if (hasRequiredCjs$2) return cjs;
  hasRequiredCjs$2 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateReflectMetadata = exports.getReflectMetadata = void 0;
    const getReflectMetadata_1 = requireGetReflectMetadata();
    Object.defineProperty(exports, "getReflectMetadata", { enumerable: true, get: function() {
      return getReflectMetadata_1.getReflectMetadata;
    } });
    const updateReflectMetadata_1 = requireUpdateReflectMetadata();
    Object.defineProperty(exports, "updateReflectMetadata", { enumerable: true, get: function() {
      return updateReflectMetadata_1.updateReflectMetadata;
    } });
  })(cjs);
  return cjs;
}
var keys = {};
var hasRequiredKeys;
function requireKeys() {
  if (hasRequiredKeys) return keys;
  hasRequiredKeys = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NON_CUSTOM_TAG_KEYS = exports.PRE_DESTROY = exports.POST_CONSTRUCT = exports.DESIGN_PARAM_TYPES = exports.PARAM_TYPES = exports.TAGGED_PROP = exports.TAGGED = exports.MULTI_INJECT_TAG = exports.INJECT_TAG = exports.OPTIONAL_TAG = exports.UNMANAGED_TAG = exports.NAME_TAG = exports.NAMED_TAG = void 0;
    exports.NAMED_TAG = "named";
    exports.NAME_TAG = "name";
    exports.UNMANAGED_TAG = "unmanaged";
    exports.OPTIONAL_TAG = "optional";
    exports.INJECT_TAG = "inject";
    exports.MULTI_INJECT_TAG = "multi_inject";
    exports.TAGGED = "inversify:tagged";
    exports.TAGGED_PROP = "inversify:tagged_props";
    exports.PARAM_TYPES = "inversify:paramtypes";
    exports.DESIGN_PARAM_TYPES = "design:paramtypes";
    exports.POST_CONSTRUCT = "post_construct";
    exports.PRE_DESTROY = "pre_destroy";
    function getNonCustomTagKeys() {
      return [
        exports.INJECT_TAG,
        exports.MULTI_INJECT_TAG,
        exports.NAME_TAG,
        exports.UNMANAGED_TAG,
        exports.NAMED_TAG,
        exports.OPTIONAL_TAG
      ];
    }
    exports.NON_CUSTOM_TAG_KEYS = getNonCustomTagKeys();
  })(keys);
  return keys;
}
var getClassMetadataConstructorArguments = {};
var assertConstructorMetadataArrayFilled = {};
var InversifyCoreError = {};
var hasRequiredInversifyCoreError;
function requireInversifyCoreError() {
  if (hasRequiredInversifyCoreError) return InversifyCoreError;
  hasRequiredInversifyCoreError = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InversifyCoreError = exports.isAppErrorSymbol = void 0;
    exports.isAppErrorSymbol = Symbol.for("@inversifyjs/core/InversifyCoreError");
    class InversifyCoreError2 extends Error {
      [exports.isAppErrorSymbol];
      kind;
      constructor(kind, message, options) {
        super(message, options);
        this[exports.isAppErrorSymbol] = true;
        this.kind = kind;
      }
      static is(value) {
        return typeof value === "object" && value !== null && value[exports.isAppErrorSymbol] === true;
      }
      static isErrorOfKind(value, kind) {
        return InversifyCoreError2.is(value) && value.kind === kind;
      }
    }
    exports.InversifyCoreError = InversifyCoreError2;
  })(InversifyCoreError);
  return InversifyCoreError;
}
var InversifyCoreErrorKind = {};
var hasRequiredInversifyCoreErrorKind;
function requireInversifyCoreErrorKind() {
  if (hasRequiredInversifyCoreErrorKind) return InversifyCoreErrorKind;
  hasRequiredInversifyCoreErrorKind = 1;
  Object.defineProperty(InversifyCoreErrorKind, "__esModule", { value: true });
  InversifyCoreErrorKind.InversifyCoreErrorKind = void 0;
  var InversifyCoreErrorKind$1;
  (function(InversifyCoreErrorKind2) {
    InversifyCoreErrorKind2[InversifyCoreErrorKind2["injectionDecoratorConflict"] = 0] = "injectionDecoratorConflict";
    InversifyCoreErrorKind2[InversifyCoreErrorKind2["missingInjectionDecorator"] = 1] = "missingInjectionDecorator";
    InversifyCoreErrorKind2[InversifyCoreErrorKind2["planning"] = 2] = "planning";
    InversifyCoreErrorKind2[InversifyCoreErrorKind2["unknown"] = 3] = "unknown";
  })(InversifyCoreErrorKind$1 || (InversifyCoreErrorKind.InversifyCoreErrorKind = InversifyCoreErrorKind$1 = {}));
  return InversifyCoreErrorKind;
}
var hasRequiredAssertConstructorMetadataArrayFilled;
function requireAssertConstructorMetadataArrayFilled() {
  if (hasRequiredAssertConstructorMetadataArrayFilled) return assertConstructorMetadataArrayFilled;
  hasRequiredAssertConstructorMetadataArrayFilled = 1;
  Object.defineProperty(assertConstructorMetadataArrayFilled, "__esModule", { value: true });
  assertConstructorMetadataArrayFilled.assertConstructorMetadataArrayFilled = assertConstructorMetadataArrayFilled$1;
  const InversifyCoreError_1 = requireInversifyCoreError();
  const InversifyCoreErrorKind_1 = requireInversifyCoreErrorKind();
  function assertConstructorMetadataArrayFilled$1(type, value) {
    const undefinedIndexes = [];
    for (let i = 0; i < value.length; ++i) {
      const element = value[i];
      if (element === void 0) {
        undefinedIndexes.push(i);
      }
    }
    if (undefinedIndexes.length > 0) {
      throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, `Found unexpected missing metadata on type "${type.name}" at constructor indexes "${undefinedIndexes.join('", "')}".

Are you using @inject, @multiInject or @unmanaged decorators at those indexes?

If you're using typescript and want to rely on auto injection, set "emitDecoratorMetadata" compiler option to true`);
    }
  }
  return assertConstructorMetadataArrayFilled;
}
var getClassElementMetadataFromNewable = {};
var ClassElementMetadataKind = {};
var hasRequiredClassElementMetadataKind;
function requireClassElementMetadataKind() {
  if (hasRequiredClassElementMetadataKind) return ClassElementMetadataKind;
  hasRequiredClassElementMetadataKind = 1;
  Object.defineProperty(ClassElementMetadataKind, "__esModule", { value: true });
  ClassElementMetadataKind.ClassElementMetadataKind = void 0;
  var ClassElementMetadataKind$1;
  (function(ClassElementMetadataKind2) {
    ClassElementMetadataKind2[ClassElementMetadataKind2["multipleInjection"] = 0] = "multipleInjection";
    ClassElementMetadataKind2[ClassElementMetadataKind2["singleInjection"] = 1] = "singleInjection";
    ClassElementMetadataKind2[ClassElementMetadataKind2["unmanaged"] = 2] = "unmanaged";
  })(ClassElementMetadataKind$1 || (ClassElementMetadataKind.ClassElementMetadataKind = ClassElementMetadataKind$1 = {}));
  return ClassElementMetadataKind;
}
var hasRequiredGetClassElementMetadataFromNewable;
function requireGetClassElementMetadataFromNewable() {
  if (hasRequiredGetClassElementMetadataFromNewable) return getClassElementMetadataFromNewable;
  hasRequiredGetClassElementMetadataFromNewable = 1;
  Object.defineProperty(getClassElementMetadataFromNewable, "__esModule", { value: true });
  getClassElementMetadataFromNewable.getClassElementMetadataFromNewable = getClassElementMetadataFromNewable$1;
  const ClassElementMetadataKind_1 = requireClassElementMetadataKind();
  function getClassElementMetadataFromNewable$1(type) {
    return {
      kind: ClassElementMetadataKind_1.ClassElementMetadataKind.singleInjection,
      name: void 0,
      optional: false,
      tags: /* @__PURE__ */ new Map(),
      targetName: void 0,
      value: type
    };
  }
  return getClassElementMetadataFromNewable;
}
var getConstructorArgumentMetadataFromLegacyMetadata = {};
var getClassElementMetadataFromLegacyMetadata = {};
var hasRequiredGetClassElementMetadataFromLegacyMetadata;
function requireGetClassElementMetadataFromLegacyMetadata() {
  if (hasRequiredGetClassElementMetadataFromLegacyMetadata) return getClassElementMetadataFromLegacyMetadata;
  hasRequiredGetClassElementMetadataFromLegacyMetadata = 1;
  Object.defineProperty(getClassElementMetadataFromLegacyMetadata, "__esModule", { value: true });
  getClassElementMetadataFromLegacyMetadata.getClassElementMetadataFromLegacyMetadata = getClassElementMetadataFromLegacyMetadata$1;
  const InversifyCoreError_1 = requireInversifyCoreError();
  const InversifyCoreErrorKind_1 = requireInversifyCoreErrorKind();
  const keys_1 = requireKeys();
  const ClassElementMetadataKind_1 = requireClassElementMetadataKind();
  function getClassElementMetadataFromLegacyMetadata$1(metadataList) {
    const injectMetadata = metadataList.find((metadata2) => metadata2.key === keys_1.INJECT_TAG);
    const multiInjectMetadata = metadataList.find((metadata2) => metadata2.key === keys_1.MULTI_INJECT_TAG);
    const unmanagedMetadata = metadataList.find((metadata2) => metadata2.key === keys_1.UNMANAGED_TAG);
    if (unmanagedMetadata !== void 0) {
      return getUnmanagedClassElementMetadata(injectMetadata, multiInjectMetadata);
    }
    if (multiInjectMetadata === void 0 && injectMetadata === void 0) {
      throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, "Expected @inject, @multiInject or @unmanaged metadata");
    }
    const nameMetadata = metadataList.find((metadata2) => metadata2.key === keys_1.NAMED_TAG);
    const optionalMetadata = metadataList.find((metadata2) => metadata2.key === keys_1.OPTIONAL_TAG);
    const targetNameMetadata = metadataList.find((metadata2) => metadata2.key === keys_1.NAME_TAG);
    const managedClassElementMetadata = {
      kind: injectMetadata === void 0 ? ClassElementMetadataKind_1.ClassElementMetadataKind.multipleInjection : ClassElementMetadataKind_1.ClassElementMetadataKind.singleInjection,
      name: nameMetadata?.value,
      optional: optionalMetadata !== void 0,
      tags: new Map(metadataList.filter((metadata2) => keys_1.NON_CUSTOM_TAG_KEYS.every((customTagKey) => metadata2.key !== customTagKey)).map((metadata2) => [
        metadata2.key,
        metadata2.value
      ])),
      targetName: targetNameMetadata?.value,
      value: injectMetadata === void 0 ? multiInjectMetadata?.value : injectMetadata.value
    };
    return managedClassElementMetadata;
  }
  function getUnmanagedClassElementMetadata(injectMetadata, multiInjectMetadata) {
    if (multiInjectMetadata !== void 0 || injectMetadata !== void 0) {
      throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, "Expected a single @inject, @multiInject or @unmanaged metadata");
    }
    return {
      kind: ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged
    };
  }
  return getClassElementMetadataFromLegacyMetadata;
}
var hasRequiredGetConstructorArgumentMetadataFromLegacyMetadata;
function requireGetConstructorArgumentMetadataFromLegacyMetadata() {
  if (hasRequiredGetConstructorArgumentMetadataFromLegacyMetadata) return getConstructorArgumentMetadataFromLegacyMetadata;
  hasRequiredGetConstructorArgumentMetadataFromLegacyMetadata = 1;
  Object.defineProperty(getConstructorArgumentMetadataFromLegacyMetadata, "__esModule", { value: true });
  getConstructorArgumentMetadataFromLegacyMetadata.getConstructorArgumentMetadataFromLegacyMetadata = getConstructorArgumentMetadataFromLegacyMetadata$1;
  const InversifyCoreError_1 = requireInversifyCoreError();
  const InversifyCoreErrorKind_1 = requireInversifyCoreErrorKind();
  const getClassElementMetadataFromLegacyMetadata_1 = requireGetClassElementMetadataFromLegacyMetadata();
  function getConstructorArgumentMetadataFromLegacyMetadata$1(type, index, metadataList) {
    try {
      return (0, getClassElementMetadataFromLegacyMetadata_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
    } catch (error) {
      if (InversifyCoreError_1.InversifyCoreError.isErrorOfKind(error, InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator)) {
        throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, `Expected a single @inject, @multiInject or @unmanaged decorator at type "${type.name}" at constructor arguments at index "${index.toString()}"`, { cause: error });
      } else {
        throw error;
      }
    }
  }
  return getConstructorArgumentMetadataFromLegacyMetadata;
}
var hasRequiredGetClassMetadataConstructorArguments;
function requireGetClassMetadataConstructorArguments() {
  if (hasRequiredGetClassMetadataConstructorArguments) return getClassMetadataConstructorArguments;
  hasRequiredGetClassMetadataConstructorArguments = 1;
  Object.defineProperty(getClassMetadataConstructorArguments, "__esModule", { value: true });
  getClassMetadataConstructorArguments.getClassMetadataConstructorArguments = getClassMetadataConstructorArguments$1;
  const reflect_metadata_utils_1 = /* @__PURE__ */ requireCjs$2();
  const keys_1 = requireKeys();
  const assertConstructorMetadataArrayFilled_1 = requireAssertConstructorMetadataArrayFilled();
  const getClassElementMetadataFromNewable_1 = requireGetClassElementMetadataFromNewable();
  const getConstructorArgumentMetadataFromLegacyMetadata_1 = requireGetConstructorArgumentMetadataFromLegacyMetadata();
  function getClassMetadataConstructorArguments$1(type) {
    const typescriptMetadataList = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.DESIGN_PARAM_TYPES);
    const constructorParametersLegacyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.TAGGED);
    const constructorArgumentsMetadata = [];
    if (constructorParametersLegacyMetadata !== void 0) {
      for (const [stringifiedIndex, metadataList] of Object.entries(constructorParametersLegacyMetadata)) {
        const index = parseInt(stringifiedIndex);
        constructorArgumentsMetadata[index] = (0, getConstructorArgumentMetadataFromLegacyMetadata_1.getConstructorArgumentMetadataFromLegacyMetadata)(type, index, metadataList);
      }
    }
    if (typescriptMetadataList !== void 0) {
      for (let i = 0; i < typescriptMetadataList.length; ++i) {
        if (constructorArgumentsMetadata[i] === void 0) {
          const typescriptMetadata = typescriptMetadataList[i];
          constructorArgumentsMetadata[i] = (0, getClassElementMetadataFromNewable_1.getClassElementMetadataFromNewable)(typescriptMetadata);
        }
      }
    }
    (0, assertConstructorMetadataArrayFilled_1.assertConstructorMetadataArrayFilled)(type, constructorArgumentsMetadata);
    return constructorArgumentsMetadata;
  }
  return getClassMetadataConstructorArguments;
}
var getClassMetadataProperties = {};
var getPropertyMetadataFromLegacyMetadata = {};
var hasRequiredGetPropertyMetadataFromLegacyMetadata;
function requireGetPropertyMetadataFromLegacyMetadata() {
  if (hasRequiredGetPropertyMetadataFromLegacyMetadata) return getPropertyMetadataFromLegacyMetadata;
  hasRequiredGetPropertyMetadataFromLegacyMetadata = 1;
  Object.defineProperty(getPropertyMetadataFromLegacyMetadata, "__esModule", { value: true });
  getPropertyMetadataFromLegacyMetadata.getPropertyMetadataFromLegacyMetadata = getPropertyMetadataFromLegacyMetadata$1;
  const InversifyCoreError_1 = requireInversifyCoreError();
  const InversifyCoreErrorKind_1 = requireInversifyCoreErrorKind();
  const getClassElementMetadataFromLegacyMetadata_1 = requireGetClassElementMetadataFromLegacyMetadata();
  function getPropertyMetadataFromLegacyMetadata$1(type, key, metadataList) {
    try {
      return (0, getClassElementMetadataFromLegacyMetadata_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
    } catch (error) {
      if (InversifyCoreError_1.InversifyCoreError.isErrorOfKind(error, InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator)) {
        throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, `Expected a single @inject, @multiInject or @unmanaged decorator at type "${type.name}" at property "${key.toString()}"`, { cause: error });
      } else {
        throw error;
      }
    }
  }
  return getPropertyMetadataFromLegacyMetadata;
}
var hasRequiredGetClassMetadataProperties;
function requireGetClassMetadataProperties() {
  if (hasRequiredGetClassMetadataProperties) return getClassMetadataProperties;
  hasRequiredGetClassMetadataProperties = 1;
  Object.defineProperty(getClassMetadataProperties, "__esModule", { value: true });
  getClassMetadataProperties.getClassMetadataProperties = getClassMetadataProperties$1;
  const reflect_metadata_utils_1 = /* @__PURE__ */ requireCjs$2();
  const keys_1 = requireKeys();
  const getPropertyMetadataFromLegacyMetadata_1 = requireGetPropertyMetadataFromLegacyMetadata();
  function getClassMetadataProperties$1(type) {
    const propertiesLegacyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.TAGGED_PROP);
    const propertiesMetadata = /* @__PURE__ */ new Map();
    if (propertiesLegacyMetadata !== void 0) {
      for (const property of Reflect.ownKeys(propertiesLegacyMetadata)) {
        const legacyMetadata = propertiesLegacyMetadata[property];
        propertiesMetadata.set(property, (0, getPropertyMetadataFromLegacyMetadata_1.getPropertyMetadataFromLegacyMetadata)(type, property, legacyMetadata));
      }
    }
    return propertiesMetadata;
  }
  return getClassMetadataProperties;
}
var hasRequiredGetClassMetadata;
function requireGetClassMetadata() {
  if (hasRequiredGetClassMetadata) return getClassMetadata;
  hasRequiredGetClassMetadata = 1;
  Object.defineProperty(getClassMetadata, "__esModule", { value: true });
  getClassMetadata.getClassMetadata = getClassMetadata$1;
  const reflect_metadata_utils_1 = /* @__PURE__ */ requireCjs$2();
  const keys_1 = requireKeys();
  const getClassMetadataConstructorArguments_1 = requireGetClassMetadataConstructorArguments();
  const getClassMetadataProperties_1 = requireGetClassMetadataProperties();
  function getClassMetadata$1(type) {
    const postConstructMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.POST_CONSTRUCT);
    const preDestroyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.PRE_DESTROY);
    const classMetadata = {
      constructorArguments: (0, getClassMetadataConstructorArguments_1.getClassMetadataConstructorArguments)(type),
      lifecycle: {
        postConstructMethodName: postConstructMetadata?.value,
        preDestroyMethodName: preDestroyMetadata?.value
      },
      properties: (0, getClassMetadataProperties_1.getClassMetadataProperties)(type)
    };
    return classMetadata;
  }
  return getClassMetadata;
}
var getClassMetadataFromMetadataReader = {};
var getClassMetadataConstructorArgumentsFromMetadataReader = {};
var hasRequiredGetClassMetadataConstructorArgumentsFromMetadataReader;
function requireGetClassMetadataConstructorArgumentsFromMetadataReader() {
  if (hasRequiredGetClassMetadataConstructorArgumentsFromMetadataReader) return getClassMetadataConstructorArgumentsFromMetadataReader;
  hasRequiredGetClassMetadataConstructorArgumentsFromMetadataReader = 1;
  Object.defineProperty(getClassMetadataConstructorArgumentsFromMetadataReader, "__esModule", { value: true });
  getClassMetadataConstructorArgumentsFromMetadataReader.getClassMetadataConstructorArgumentsFromMetadataReader = getClassMetadataConstructorArgumentsFromMetadataReader$1;
  const assertConstructorMetadataArrayFilled_1 = requireAssertConstructorMetadataArrayFilled();
  const getClassElementMetadataFromNewable_1 = requireGetClassElementMetadataFromNewable();
  const getConstructorArgumentMetadataFromLegacyMetadata_1 = requireGetConstructorArgumentMetadataFromLegacyMetadata();
  function getClassMetadataConstructorArgumentsFromMetadataReader$1(type, metadataReader) {
    const legacyConstructorMetadata = metadataReader.getConstructorMetadata(type);
    const constructorArgumentsMetadata = [];
    for (const [stringifiedIndex, metadataList] of Object.entries(legacyConstructorMetadata.userGeneratedMetadata)) {
      const index = parseInt(stringifiedIndex);
      constructorArgumentsMetadata[index] = (0, getConstructorArgumentMetadataFromLegacyMetadata_1.getConstructorArgumentMetadataFromLegacyMetadata)(type, index, metadataList);
    }
    if (legacyConstructorMetadata.compilerGeneratedMetadata !== void 0) {
      for (let i = 0; i < legacyConstructorMetadata.compilerGeneratedMetadata.length; ++i) {
        if (constructorArgumentsMetadata[i] === void 0) {
          const typescriptMetadata = legacyConstructorMetadata.compilerGeneratedMetadata[i];
          constructorArgumentsMetadata[i] = (0, getClassElementMetadataFromNewable_1.getClassElementMetadataFromNewable)(typescriptMetadata);
        }
      }
    }
    (0, assertConstructorMetadataArrayFilled_1.assertConstructorMetadataArrayFilled)(type, constructorArgumentsMetadata);
    return constructorArgumentsMetadata;
  }
  return getClassMetadataConstructorArgumentsFromMetadataReader;
}
var getClassMetadataPropertiesFromMetadataReader = {};
var hasRequiredGetClassMetadataPropertiesFromMetadataReader;
function requireGetClassMetadataPropertiesFromMetadataReader() {
  if (hasRequiredGetClassMetadataPropertiesFromMetadataReader) return getClassMetadataPropertiesFromMetadataReader;
  hasRequiredGetClassMetadataPropertiesFromMetadataReader = 1;
  Object.defineProperty(getClassMetadataPropertiesFromMetadataReader, "__esModule", { value: true });
  getClassMetadataPropertiesFromMetadataReader.getClassMetadataPropertiesFromMetadataReader = getClassMetadataPropertiesFromMetadataReader$1;
  const getPropertyMetadataFromLegacyMetadata_1 = requireGetPropertyMetadataFromLegacyMetadata();
  function getClassMetadataPropertiesFromMetadataReader$1(type, metadataReader) {
    const propertiesLegacyMetadata = metadataReader.getPropertiesMetadata(type);
    const propertiesMetadata = /* @__PURE__ */ new Map();
    for (const property of Reflect.ownKeys(propertiesLegacyMetadata)) {
      const legacyMetadata = propertiesLegacyMetadata[property];
      propertiesMetadata.set(property, (0, getPropertyMetadataFromLegacyMetadata_1.getPropertyMetadataFromLegacyMetadata)(type, property, legacyMetadata));
    }
    return propertiesMetadata;
  }
  return getClassMetadataPropertiesFromMetadataReader;
}
var hasRequiredGetClassMetadataFromMetadataReader;
function requireGetClassMetadataFromMetadataReader() {
  if (hasRequiredGetClassMetadataFromMetadataReader) return getClassMetadataFromMetadataReader;
  hasRequiredGetClassMetadataFromMetadataReader = 1;
  Object.defineProperty(getClassMetadataFromMetadataReader, "__esModule", { value: true });
  getClassMetadataFromMetadataReader.getClassMetadataFromMetadataReader = getClassMetadataFromMetadataReader$1;
  const reflect_metadata_utils_1 = /* @__PURE__ */ requireCjs$2();
  const keys_1 = requireKeys();
  const getClassMetadataConstructorArgumentsFromMetadataReader_1 = requireGetClassMetadataConstructorArgumentsFromMetadataReader();
  const getClassMetadataPropertiesFromMetadataReader_1 = requireGetClassMetadataPropertiesFromMetadataReader();
  function getClassMetadataFromMetadataReader$1(type, metadataReader) {
    const postConstructMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.POST_CONSTRUCT);
    const preDestroyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.PRE_DESTROY);
    const classMetadata = {
      constructorArguments: (0, getClassMetadataConstructorArgumentsFromMetadataReader_1.getClassMetadataConstructorArgumentsFromMetadataReader)(type, metadataReader),
      lifecycle: {
        postConstructMethodName: postConstructMetadata?.value,
        preDestroyMethodName: preDestroyMetadata?.value
      },
      properties: (0, getClassMetadataPropertiesFromMetadataReader_1.getClassMetadataPropertiesFromMetadataReader)(type, metadataReader)
    };
    return classMetadata;
  }
  return getClassMetadataFromMetadataReader;
}
var getTargetsFromMetadataProviders = {};
var getBaseType = {};
var hasRequiredGetBaseType;
function requireGetBaseType() {
  if (hasRequiredGetBaseType) return getBaseType;
  hasRequiredGetBaseType = 1;
  Object.defineProperty(getBaseType, "__esModule", { value: true });
  getBaseType.getBaseType = getBaseType$1;
  function getBaseType$1(type) {
    const prototype2 = Object.getPrototypeOf(type.prototype);
    const baseType = prototype2?.constructor;
    return baseType;
  }
  return getBaseType;
}
var LegacyTargetImpl = {};
var getLegacyMetadata = {};
var hasRequiredGetLegacyMetadata;
function requireGetLegacyMetadata() {
  if (hasRequiredGetLegacyMetadata) return getLegacyMetadata;
  hasRequiredGetLegacyMetadata = 1;
  Object.defineProperty(getLegacyMetadata, "__esModule", { value: true });
  getLegacyMetadata.getLegacyMetadata = getLegacyMetadata$1;
  const keys_1 = requireKeys();
  const ClassElementMetadataKind_1 = requireClassElementMetadataKind();
  function getLegacyMetadata$1(classElementMetadata) {
    switch (classElementMetadata.kind) {
      case ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged:
        return getUnmanagedLegacyMetadata();
      default:
        return getManagedLegacyMetadata(classElementMetadata);
    }
  }
  function getManagedLegacyMetadata(classElementMetadata) {
    const legacyMetadataList = [
      getManagedKindLegacyMetadata(classElementMetadata)
    ];
    if (classElementMetadata.name !== void 0) {
      legacyMetadataList.push({
        key: keys_1.NAMED_TAG,
        value: classElementMetadata.name
      });
    }
    if (classElementMetadata.optional) {
      legacyMetadataList.push({
        key: keys_1.OPTIONAL_TAG,
        value: true
      });
    }
    for (const [tagKey, tagValue] of classElementMetadata.tags) {
      legacyMetadataList.push({
        key: tagKey,
        value: tagValue
      });
    }
    if (classElementMetadata.targetName !== void 0) {
      legacyMetadataList.push({
        key: keys_1.NAME_TAG,
        value: classElementMetadata.targetName
      });
    }
    return legacyMetadataList;
  }
  function getManagedKindLegacyMetadata(classElementMetadata) {
    let kindLegacyMetadata;
    switch (classElementMetadata.kind) {
      case ClassElementMetadataKind_1.ClassElementMetadataKind.multipleInjection:
        kindLegacyMetadata = {
          key: keys_1.MULTI_INJECT_TAG,
          value: classElementMetadata.value
        };
        break;
      case ClassElementMetadataKind_1.ClassElementMetadataKind.singleInjection:
        kindLegacyMetadata = {
          key: keys_1.INJECT_TAG,
          value: classElementMetadata.value
        };
        break;
    }
    return kindLegacyMetadata;
  }
  function getUnmanagedLegacyMetadata() {
    return [
      {
        key: keys_1.UNMANAGED_TAG,
        value: true
      }
    ];
  }
  return getLegacyMetadata;
}
var LegacyQueryableStringImpl = {};
var hasRequiredLegacyQueryableStringImpl;
function requireLegacyQueryableStringImpl() {
  if (hasRequiredLegacyQueryableStringImpl) return LegacyQueryableStringImpl;
  hasRequiredLegacyQueryableStringImpl = 1;
  Object.defineProperty(LegacyQueryableStringImpl, "__esModule", { value: true });
  LegacyQueryableStringImpl.LegacyQueryableStringImpl = void 0;
  let LegacyQueryableStringImpl$1 = class LegacyQueryableStringImpl {
    #str;
    constructor(str) {
      this.#str = str;
    }
    startsWith(searchString) {
      return this.#str.startsWith(searchString);
    }
    endsWith(searchString) {
      return this.#str.endsWith(searchString);
    }
    contains(searchString) {
      return this.#str.includes(searchString);
    }
    equals(compareString) {
      return this.#str === compareString;
    }
    value() {
      return this.#str;
    }
  };
  LegacyQueryableStringImpl.LegacyQueryableStringImpl = LegacyQueryableStringImpl$1;
  return LegacyQueryableStringImpl;
}
var getDescription = {};
var hasRequiredGetDescription;
function requireGetDescription() {
  if (hasRequiredGetDescription) return getDescription;
  hasRequiredGetDescription = 1;
  Object.defineProperty(getDescription, "__esModule", { value: true });
  getDescription.getDescription = getDescription$1;
  const SYMBOL_INDEX_START = 7;
  const SYMBOL_INDEX_END = -1;
  function getDescription$1(symbol) {
    return symbol.toString().slice(SYMBOL_INDEX_START, SYMBOL_INDEX_END);
  }
  return getDescription;
}
var getTargetId = {};
var hasRequiredGetTargetId;
function requireGetTargetId() {
  if (hasRequiredGetTargetId) return getTargetId;
  hasRequiredGetTargetId = 1;
  Object.defineProperty(getTargetId, "__esModule", { value: true });
  getTargetId.getTargetId = getTargetId$1;
  const reflect_metadata_utils_1 = /* @__PURE__ */ requireCjs$2();
  const ID_METADATA = "@inversifyjs/core/targetId";
  function getTargetId$1() {
    const targetId = (0, reflect_metadata_utils_1.getReflectMetadata)(Object, ID_METADATA) ?? 0;
    if (targetId === Number.MAX_SAFE_INTEGER) {
      (0, reflect_metadata_utils_1.updateReflectMetadata)(Object, ID_METADATA, targetId, () => Number.MIN_SAFE_INTEGER);
    } else {
      (0, reflect_metadata_utils_1.updateReflectMetadata)(Object, ID_METADATA, targetId, (id2) => id2 + 1);
    }
    return targetId;
  }
  return getTargetId;
}
var hasRequiredLegacyTargetImpl;
function requireLegacyTargetImpl() {
  if (hasRequiredLegacyTargetImpl) return LegacyTargetImpl;
  hasRequiredLegacyTargetImpl = 1;
  Object.defineProperty(LegacyTargetImpl, "__esModule", { value: true });
  LegacyTargetImpl.LegacyTargetImpl = void 0;
  const common_1 = /* @__PURE__ */ requireCjs$3();
  const getLegacyMetadata_1 = requireGetLegacyMetadata();
  const ClassElementMetadataKind_1 = requireClassElementMetadataKind();
  const keys_1 = requireKeys();
  const LegacyQueryableStringImpl_1 = requireLegacyQueryableStringImpl();
  const getDescription_1 = requireGetDescription();
  const getTargetId_1 = requireGetTargetId();
  let LegacyTargetImpl$1 = class LegacyTargetImpl {
    #metadata;
    #id;
    #identifier;
    #lazyLegacyMetadata;
    #name;
    #type;
    constructor(identifier, metadata2, type) {
      this.#id = (0, getTargetId_1.getTargetId)();
      this.#identifier = identifier;
      this.#lazyLegacyMetadata = void 0;
      this.#metadata = metadata2;
      this.#name = new LegacyQueryableStringImpl_1.LegacyQueryableStringImpl(typeof identifier === "string" ? identifier : (0, getDescription_1.getDescription)(identifier));
      this.#type = type;
    }
    get id() {
      return this.#id;
    }
    /**
     * If this is a class property target, this is the name of the property to be injected
     */
    get identifier() {
      return this.#identifier;
    }
    get metadata() {
      if (this.#lazyLegacyMetadata === void 0) {
        this.#lazyLegacyMetadata = (0, getLegacyMetadata_1.getLegacyMetadata)(this.#metadata);
      }
      return this.#lazyLegacyMetadata;
    }
    get name() {
      return this.#name;
    }
    get type() {
      return this.#type;
    }
    get serviceIdentifier() {
      if (common_1.LazyServiceIdentifier.is(this.#metadata.value)) {
        return this.#metadata.value.unwrap();
      } else {
        return this.#metadata.value;
      }
    }
    getCustomTags() {
      return [...this.#metadata.tags.entries()].map(([key, value]) => ({
        key,
        value
      }));
    }
    getNamedTag() {
      return this.#metadata.name === void 0 ? null : {
        key: keys_1.NAMED_TAG,
        value: this.#metadata.name
      };
    }
    hasTag(key) {
      return this.metadata.some((metadata2) => metadata2.key === key);
    }
    isArray() {
      return this.#metadata.kind === ClassElementMetadataKind_1.ClassElementMetadataKind.multipleInjection;
    }
    isNamed() {
      return this.#metadata.name !== void 0;
    }
    isOptional() {
      return this.#metadata.optional;
    }
    isTagged() {
      return this.#metadata.tags.size > 0;
    }
    matchesArray(name) {
      return this.isArray() && this.#metadata.value === name;
    }
    matchesNamedTag(name) {
      return this.#metadata.name === name;
    }
    matchesTag(key) {
      return (value) => this.metadata.some((metadata2) => metadata2.key === key && metadata2.value === value);
    }
  };
  LegacyTargetImpl.LegacyTargetImpl = LegacyTargetImpl$1;
  return LegacyTargetImpl;
}
var hasRequiredGetTargetsFromMetadataProviders;
function requireGetTargetsFromMetadataProviders() {
  if (hasRequiredGetTargetsFromMetadataProviders) return getTargetsFromMetadataProviders;
  hasRequiredGetTargetsFromMetadataProviders = 1;
  Object.defineProperty(getTargetsFromMetadataProviders, "__esModule", { value: true });
  getTargetsFromMetadataProviders.getTargetsFromMetadataProviders = getTargetsFromMetadataProviders$1;
  const ClassElementMetadataKind_1 = requireClassElementMetadataKind();
  const getBaseType_1 = requireGetBaseType();
  const LegacyTargetImpl_1 = requireLegacyTargetImpl();
  function getTargetsFromMetadataProviders$1(getClassMetadata2, getClassMetadataProperties2) {
    return function getTagets(type) {
      const classMetadata = getClassMetadata2(type);
      let baseType = (0, getBaseType_1.getBaseType)(type);
      while (baseType !== void 0 && baseType !== Object) {
        const classMetadataProperties = getClassMetadataProperties2(baseType);
        for (const [propertyKey, propertyValue] of classMetadataProperties) {
          if (!classMetadata.properties.has(propertyKey)) {
            classMetadata.properties.set(propertyKey, propertyValue);
          }
        }
        baseType = (0, getBaseType_1.getBaseType)(baseType);
      }
      const targets = [];
      for (const constructorArgument of classMetadata.constructorArguments) {
        if (constructorArgument.kind !== ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged) {
          const targetName = constructorArgument.targetName ?? "";
          targets.push(new LegacyTargetImpl_1.LegacyTargetImpl(targetName, constructorArgument, "ConstructorArgument"));
        }
      }
      for (const [property, metadata2] of classMetadata.properties) {
        if (metadata2.kind !== ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged) {
          const targetName = metadata2.targetName ?? property;
          targets.push(new LegacyTargetImpl_1.LegacyTargetImpl(targetName, metadata2, "ClassProperty"));
        }
      }
      return targets;
    };
  }
  return getTargetsFromMetadataProviders;
}
var hasRequiredGetTargets;
function requireGetTargets() {
  if (hasRequiredGetTargets) return getTargets;
  hasRequiredGetTargets = 1;
  Object.defineProperty(getTargets, "__esModule", { value: true });
  getTargets.getTargets = void 0;
  const getClassMetadata_1 = requireGetClassMetadata();
  const getClassMetadataFromMetadataReader_1 = requireGetClassMetadataFromMetadataReader();
  const getClassMetadataProperties_1 = requireGetClassMetadataProperties();
  const getClassMetadataPropertiesFromMetadataReader_1 = requireGetClassMetadataPropertiesFromMetadataReader();
  const getTargetsFromMetadataProviders_1 = requireGetTargetsFromMetadataProviders();
  const getTargets$1 = (metadataReader) => {
    const getClassMetadataFn = metadataReader === void 0 ? getClassMetadata_1.getClassMetadata : (type) => (0, getClassMetadataFromMetadataReader_1.getClassMetadataFromMetadataReader)(type, metadataReader);
    const getClassMetadataPropertiesFn = metadataReader === void 0 ? getClassMetadataProperties_1.getClassMetadataProperties : (type) => (0, getClassMetadataPropertiesFromMetadataReader_1.getClassMetadataPropertiesFromMetadataReader)(type, metadataReader);
    return (0, getTargetsFromMetadataProviders_1.getTargetsFromMetadataProviders)(getClassMetadataFn, getClassMetadataPropertiesFn);
  };
  getTargets.getTargets = getTargets$1;
  return getTargets;
}
var hasRequiredCjs$1;
function requireCjs$1() {
  if (hasRequiredCjs$1) return cjs$1;
  hasRequiredCjs$1 = 1;
  (function(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LegacyTargetImpl = exports.getTargets = exports.getClassMetadataFromMetadataReader = exports.getClassMetadata = exports.getClassElementMetadataFromLegacyMetadata = exports.ClassElementMetadataKind = void 0;
    const getTargets_1 = requireGetTargets();
    Object.defineProperty(exports, "getTargets", { enumerable: true, get: function() {
      return getTargets_1.getTargets;
    } });
    const LegacyTargetImpl_1 = requireLegacyTargetImpl();
    Object.defineProperty(exports, "LegacyTargetImpl", { enumerable: true, get: function() {
      return LegacyTargetImpl_1.LegacyTargetImpl;
    } });
    const getClassElementMetadataFromLegacyMetadata_1 = requireGetClassElementMetadataFromLegacyMetadata();
    Object.defineProperty(exports, "getClassElementMetadataFromLegacyMetadata", { enumerable: true, get: function() {
      return getClassElementMetadataFromLegacyMetadata_1.getClassElementMetadataFromLegacyMetadata;
    } });
    const getClassMetadata_1 = requireGetClassMetadata();
    Object.defineProperty(exports, "getClassMetadata", { enumerable: true, get: function() {
      return getClassMetadata_1.getClassMetadata;
    } });
    const getClassMetadataFromMetadataReader_1 = requireGetClassMetadataFromMetadataReader();
    Object.defineProperty(exports, "getClassMetadataFromMetadataReader", { enumerable: true, get: function() {
      return getClassMetadataFromMetadataReader_1.getClassMetadataFromMetadataReader;
    } });
    const ClassElementMetadataKind_1 = requireClassElementMetadataKind();
    Object.defineProperty(exports, "ClassElementMetadataKind", { enumerable: true, get: function() {
      return ClassElementMetadataKind_1.ClassElementMetadataKind;
    } });
  })(cjs$1);
  return cjs$1;
}
var binding_count = {};
var hasRequiredBinding_count;
function requireBinding_count() {
  if (hasRequiredBinding_count) return binding_count;
  hasRequiredBinding_count = 1;
  Object.defineProperty(binding_count, "__esModule", { value: true });
  binding_count.BindingCount = void 0;
  var BindingCount;
  (function(BindingCount2) {
    BindingCount2[BindingCount2["MultipleBindingsAvailable"] = 2] = "MultipleBindingsAvailable";
    BindingCount2[BindingCount2["NoBindingsAvailable"] = 0] = "NoBindingsAvailable";
    BindingCount2[BindingCount2["OnlyOneBindingAvailable"] = 1] = "OnlyOneBindingAvailable";
  })(BindingCount || (binding_count.BindingCount = BindingCount = {}));
  return binding_count;
}
var exceptions = {};
var hasRequiredExceptions;
function requireExceptions() {
  if (hasRequiredExceptions) return exceptions;
  hasRequiredExceptions = 1;
  var __createBinding = exceptions && exceptions.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exceptions && exceptions.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exceptions && exceptions.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(exceptions, "__esModule", { value: true });
  exceptions.tryAndThrowErrorIfStackOverflow = void 0;
  exceptions.isStackOverflowException = isStackOverflowException;
  const ERROR_MSGS = __importStar(requireError_msgs());
  function isStackOverflowException(error) {
    return error instanceof RangeError || error.message === ERROR_MSGS.STACK_OVERFLOW;
  }
  const tryAndThrowErrorIfStackOverflow = (fn, errorCallback) => {
    try {
      return fn();
    } catch (error) {
      if (isStackOverflowException(error)) {
        throw errorCallback();
      }
      throw error;
    }
  };
  exceptions.tryAndThrowErrorIfStackOverflow = tryAndThrowErrorIfStackOverflow;
  return exceptions;
}
var serialization = {};
var hasRequiredSerialization;
function requireSerialization() {
  if (hasRequiredSerialization) return serialization;
  hasRequiredSerialization = 1;
  var __createBinding = serialization && serialization.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = serialization && serialization.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = serialization && serialization.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(serialization, "__esModule", { value: true });
  serialization.getFunctionName = getFunctionName;
  serialization.getServiceIdentifierAsString = getServiceIdentifierAsString;
  serialization.listRegisteredBindingsForServiceIdentifier = listRegisteredBindingsForServiceIdentifier;
  serialization.listMetadataForTarget = listMetadataForTarget;
  serialization.circularDependencyToException = circularDependencyToException;
  serialization.getSymbolDescription = getSymbolDescription;
  const ERROR_MSGS = __importStar(requireError_msgs());
  function getServiceIdentifierAsString(serviceIdentifier) {
    if (typeof serviceIdentifier === "function") {
      return serviceIdentifier.name;
    } else if (typeof serviceIdentifier === "symbol") {
      return serviceIdentifier.toString();
    } else {
      return serviceIdentifier;
    }
  }
  function listRegisteredBindingsForServiceIdentifier(container2, serviceIdentifier, getBindings) {
    let registeredBindingsList = "";
    const registeredBindings = getBindings(container2, serviceIdentifier);
    if (registeredBindings.length !== 0) {
      registeredBindingsList = "\nRegistered bindings:";
      registeredBindings.forEach((binding2) => {
        let name = "Object";
        if (binding2.implementationType !== null) {
          name = getFunctionName(binding2.implementationType);
        }
        registeredBindingsList = `${registeredBindingsList}
 ${name}`;
        if (binding2.constraint.metaData) {
          registeredBindingsList = `${registeredBindingsList} - ${binding2.constraint.metaData}`;
        }
      });
    }
    return registeredBindingsList;
  }
  function alreadyDependencyChain(request2, serviceIdentifier) {
    if (request2.parentRequest === null) {
      return false;
    } else if (request2.parentRequest.serviceIdentifier === serviceIdentifier) {
      return true;
    } else {
      return alreadyDependencyChain(request2.parentRequest, serviceIdentifier);
    }
  }
  function dependencyChainToString(request2) {
    function _createStringArr(req, result = []) {
      const serviceIdentifier = getServiceIdentifierAsString(req.serviceIdentifier);
      result.push(serviceIdentifier);
      if (req.parentRequest !== null) {
        return _createStringArr(req.parentRequest, result);
      }
      return result;
    }
    const stringArr = _createStringArr(request2);
    return stringArr.reverse().join(" --> ");
  }
  function circularDependencyToException(request2) {
    request2.childRequests.forEach((childRequest) => {
      if (alreadyDependencyChain(request2, childRequest.serviceIdentifier)) {
        const services = dependencyChainToString(childRequest);
        throw new Error(`${ERROR_MSGS.CIRCULAR_DEPENDENCY} ${services}`);
      } else {
        circularDependencyToException(childRequest);
      }
    });
  }
  function listMetadataForTarget(serviceIdentifierString, target) {
    if (target.isTagged() || target.isNamed()) {
      let m = "";
      const namedTag = target.getNamedTag();
      const otherTags = target.getCustomTags();
      if (namedTag !== null) {
        m += stringifyMetadata(namedTag) + "\n";
      }
      if (otherTags !== null) {
        otherTags.forEach((tag) => {
          m += stringifyMetadata(tag) + "\n";
        });
      }
      return ` ${serviceIdentifierString}
 ${serviceIdentifierString} - ${m}`;
    } else {
      return ` ${serviceIdentifierString}`;
    }
  }
  function getFunctionName(func) {
    if (func.name != null && func.name !== "") {
      return func.name;
    } else {
      const name = func.toString();
      const match = name.match(/^function\s*([^\s(]+)/);
      return match === null ? `Anonymous function: ${name}` : match[1];
    }
  }
  function getSymbolDescription(symbol) {
    return symbol.toString().slice(7, -1);
  }
  function stringifyMetadata(metadata2) {
    return `{"key":"${metadata2.key.toString()}","value":"${metadata2.value.toString()}"}`;
  }
  return serialization;
}
var context = {};
var hasRequiredContext;
function requireContext() {
  if (hasRequiredContext) return context;
  hasRequiredContext = 1;
  Object.defineProperty(context, "__esModule", { value: true });
  context.Context = void 0;
  const id_1 = requireId();
  class Context {
    id;
    container;
    plan;
    currentRequest;
    constructor(container2) {
      this.id = (0, id_1.id)();
      this.container = container2;
    }
    addPlan(plan2) {
      this.plan = plan2;
    }
    setCurrentRequest(currentRequest) {
      this.currentRequest = currentRequest;
    }
  }
  context.Context = Context;
  return context;
}
var metadata$1 = {};
var hasRequiredMetadata;
function requireMetadata() {
  if (hasRequiredMetadata) return metadata$1;
  hasRequiredMetadata = 1;
  var __createBinding = metadata$1 && metadata$1.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = metadata$1 && metadata$1.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = metadata$1 && metadata$1.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(metadata$1, "__esModule", { value: true });
  metadata$1.Metadata = void 0;
  const METADATA_KEY = __importStar(requireMetadata_keys());
  class Metadata {
    key;
    value;
    constructor(key, value) {
      this.key = key;
      this.value = value;
    }
    toString() {
      if (this.key === METADATA_KEY.NAMED_TAG) {
        return `named: ${String(this.value).toString()} `;
      } else {
        return `tagged: { key:${this.key.toString()}, value: ${String(this.value)} }`;
      }
    }
  }
  metadata$1.Metadata = Metadata;
  return metadata$1;
}
var plan = {};
var hasRequiredPlan;
function requirePlan() {
  if (hasRequiredPlan) return plan;
  hasRequiredPlan = 1;
  Object.defineProperty(plan, "__esModule", { value: true });
  plan.Plan = void 0;
  class Plan {
    parentContext;
    rootRequest;
    constructor(parentContext, rootRequest) {
      this.parentContext = parentContext;
      this.rootRequest = rootRequest;
    }
  }
  plan.Plan = Plan;
  return plan;
}
var reflection_utils = {};
var get_base_type = {};
var hasRequiredGet_base_type;
function requireGet_base_type() {
  if (hasRequiredGet_base_type) return get_base_type;
  hasRequiredGet_base_type = 1;
  Object.defineProperty(get_base_type, "__esModule", { value: true });
  get_base_type.getBaseType = getBaseType2;
  function getBaseType2(type) {
    const prototype2 = Object.getPrototypeOf(type.prototype);
    const baseType = prototype2?.constructor;
    return baseType;
  }
  return get_base_type;
}
var hasRequiredReflection_utils;
function requireReflection_utils() {
  if (hasRequiredReflection_utils) return reflection_utils;
  hasRequiredReflection_utils = 1;
  (function(exports) {
    var __createBinding = reflection_utils && reflection_utils.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = reflection_utils && reflection_utils.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = reflection_utils && reflection_utils.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFunctionName = void 0;
    exports.getDependencies = getDependencies;
    exports.getBaseClassDependencyCount = getBaseClassDependencyCount;
    const core_1 = /* @__PURE__ */ requireCjs$1();
    const METADATA_KEY = __importStar(requireMetadata_keys());
    const get_base_type_1 = requireGet_base_type();
    const serialization_1 = requireSerialization();
    Object.defineProperty(exports, "getFunctionName", { enumerable: true, get: function() {
      return serialization_1.getFunctionName;
    } });
    function getDependencies(metadataReader, func) {
      return (0, core_1.getTargets)(metadataReader)(func);
    }
    function getBaseClassDependencyCount(metadataReader, func) {
      const baseConstructor = (0, get_base_type_1.getBaseType)(func);
      if (baseConstructor === void 0 || baseConstructor === Object) {
        return 0;
      }
      const targets = (0, core_1.getTargets)(metadataReader)(baseConstructor);
      const metadata2 = targets.map((t) => t.metadata.filter((m) => m.key === METADATA_KEY.UNMANAGED_TAG));
      const unmanagedCount = [].concat.apply([], metadata2).length;
      const dependencyCount = targets.length - unmanagedCount;
      if (dependencyCount > 0) {
        return dependencyCount;
      } else {
        return getBaseClassDependencyCount(metadataReader, baseConstructor);
      }
    }
  })(reflection_utils);
  return reflection_utils;
}
var request = {};
var hasRequiredRequest;
function requireRequest() {
  if (hasRequiredRequest) return request;
  hasRequiredRequest = 1;
  Object.defineProperty(request, "__esModule", { value: true });
  request.Request = void 0;
  const id_1 = requireId();
  class Request2 {
    id;
    serviceIdentifier;
    parentContext;
    parentRequest;
    bindings;
    childRequests;
    target;
    requestScope;
    constructor(serviceIdentifier, parentContext, parentRequest, bindings, target) {
      this.id = (0, id_1.id)();
      this.serviceIdentifier = serviceIdentifier;
      this.parentContext = parentContext;
      this.parentRequest = parentRequest;
      this.target = target;
      this.childRequests = [];
      this.bindings = Array.isArray(bindings) ? bindings : [bindings];
      this.requestScope = parentRequest === null ? /* @__PURE__ */ new Map() : null;
    }
    addChildRequest(serviceIdentifier, bindings, target) {
      const child = new Request2(serviceIdentifier, this.parentContext, this, bindings, target);
      this.childRequests.push(child);
      return child;
    }
  }
  request.Request = Request2;
  return request;
}
var hasRequiredPlanner;
function requirePlanner() {
  if (hasRequiredPlanner) return planner;
  hasRequiredPlanner = 1;
  var __createBinding = planner && planner.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = planner && planner.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = planner && planner.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(planner, "__esModule", { value: true });
  planner.getBindingDictionary = getBindingDictionary;
  planner.plan = plan2;
  planner.createMockRequest = createMockRequest;
  const core_1 = /* @__PURE__ */ requireCjs$1();
  const binding_count_1 = requireBinding_count();
  const ERROR_MSGS = __importStar(requireError_msgs());
  const literal_types_1 = requireLiteral_types();
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const exceptions_1 = requireExceptions();
  const serialization_1 = requireSerialization();
  const context_1 = requireContext();
  const metadata_1 = requireMetadata();
  const plan_1 = requirePlan();
  const reflection_utils_1 = requireReflection_utils();
  const request_1 = requireRequest();
  function getBindingDictionary(cntnr) {
    return cntnr._bindingDictionary;
  }
  function _createTarget(targetType, serviceIdentifier, metadata2) {
    const metadataList = _getTargetMetadata(serviceIdentifier, metadata2);
    const classElementMetadata = (0, core_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
    if (classElementMetadata.kind === core_1.ClassElementMetadataKind.unmanaged) {
      throw new Error("Unexpected metadata when creating target");
    }
    const target = new core_1.LegacyTargetImpl("", classElementMetadata, targetType);
    return target;
  }
  function _getActiveBindings(metadataReader, avoidConstraints, context2, parentRequest, target) {
    let bindings = getBindings(context2.container, target.serviceIdentifier);
    let activeBindings = [];
    if (bindings.length === binding_count_1.BindingCount.NoBindingsAvailable && context2.container.options.autoBindInjectable === true && typeof target.serviceIdentifier === "function" && metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {
      context2.container.bind(target.serviceIdentifier).toSelf();
      bindings = getBindings(context2.container, target.serviceIdentifier);
    }
    if (!avoidConstraints) {
      activeBindings = bindings.filter((binding2) => {
        const request2 = new request_1.Request(binding2.serviceIdentifier, context2, parentRequest, binding2, target);
        return binding2.constraint(request2);
      });
    } else {
      activeBindings = bindings;
    }
    _validateActiveBindingCount(target.serviceIdentifier, activeBindings, parentRequest, target, context2.container);
    return activeBindings;
  }
  function _getTargetMetadata(serviceIdentifier, metadata2) {
    const metadataKey = metadata2.isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;
    const metadataList = [
      new metadata_1.Metadata(metadataKey, serviceIdentifier)
    ];
    if (metadata2.customTag !== void 0) {
      metadataList.push(new metadata_1.Metadata(metadata2.customTag.key, metadata2.customTag.value));
    }
    if (metadata2.isOptional === true) {
      metadataList.push(new metadata_1.Metadata(METADATA_KEY.OPTIONAL_TAG, true));
    }
    return metadataList;
  }
  function _validateActiveBindingCount(serviceIdentifier, bindings, parentRequest, target, container2) {
    switch (bindings.length) {
      case binding_count_1.BindingCount.NoBindingsAvailable:
        if (target.isOptional()) {
          return bindings;
        } else {
          const serviceIdentifierString = (0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier);
          let msg = ERROR_MSGS.NOT_REGISTERED;
          msg += (0, serialization_1.listMetadataForTarget)(serviceIdentifierString, target);
          msg += (0, serialization_1.listRegisteredBindingsForServiceIdentifier)(container2, serviceIdentifierString, getBindings);
          if (parentRequest !== null) {
            msg += `
${ERROR_MSGS.TRYING_TO_RESOLVE_BINDINGS((0, serialization_1.getServiceIdentifierAsString)(parentRequest.serviceIdentifier))}`;
          }
          throw new Error(msg);
        }
      case binding_count_1.BindingCount.OnlyOneBindingAvailable:
        return bindings;
      case binding_count_1.BindingCount.MultipleBindingsAvailable:
      default:
        if (!target.isArray()) {
          const serviceIdentifierString = (0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier);
          let msg = `${ERROR_MSGS.AMBIGUOUS_MATCH} ${serviceIdentifierString}`;
          msg += (0, serialization_1.listRegisteredBindingsForServiceIdentifier)(container2, serviceIdentifierString, getBindings);
          throw new Error(msg);
        } else {
          return bindings;
        }
    }
  }
  function _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context2, parentRequest, target) {
    let activeBindings;
    let childRequest;
    if (parentRequest === null) {
      activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context2, null, target);
      childRequest = new request_1.Request(serviceIdentifier, context2, null, activeBindings, target);
      const thePlan = new plan_1.Plan(context2, childRequest);
      context2.addPlan(thePlan);
    } else {
      activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context2, parentRequest, target);
      childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);
    }
    activeBindings.forEach((binding2) => {
      let subChildRequest = null;
      if (target.isArray()) {
        subChildRequest = childRequest.addChildRequest(binding2.serviceIdentifier, binding2, target);
      } else {
        if (binding2.cache !== null) {
          return;
        }
        subChildRequest = childRequest;
      }
      if (binding2.type === literal_types_1.BindingTypeEnum.Instance && binding2.implementationType !== null) {
        const dependencies = (0, reflection_utils_1.getDependencies)(metadataReader, binding2.implementationType);
        if (context2.container.options.skipBaseClassChecks !== true) {
          const baseClassDependencyCount = (0, reflection_utils_1.getBaseClassDependencyCount)(metadataReader, binding2.implementationType);
          if (dependencies.length < baseClassDependencyCount) {
            const error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH((0, reflection_utils_1.getFunctionName)(binding2.implementationType));
            throw new Error(error);
          }
        }
        dependencies.forEach((dependency) => {
          _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context2, subChildRequest, dependency);
        });
      }
    });
  }
  function getBindings(container2, serviceIdentifier) {
    let bindings = [];
    const bindingDictionary = getBindingDictionary(container2);
    if (bindingDictionary.hasKey(serviceIdentifier)) {
      bindings = bindingDictionary.get(serviceIdentifier);
    } else if (container2.parent !== null) {
      bindings = getBindings(container2.parent, serviceIdentifier);
    }
    return bindings;
  }
  function plan2(metadataReader, container2, targetType, serviceIdentifier, metadata2, avoidConstraints = false) {
    const context2 = new context_1.Context(container2);
    const target = _createTarget(targetType, serviceIdentifier, metadata2);
    try {
      _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context2, null, target);
      return context2;
    } catch (error) {
      if ((0, exceptions_1.isStackOverflowException)(error)) {
        (0, serialization_1.circularDependencyToException)(context2.plan.rootRequest);
      }
      throw error;
    }
  }
  function createMockRequest(container2, serviceIdentifier, metadata2) {
    const metadataList = _getTargetMetadata(serviceIdentifier, metadata2);
    const classElementMetadata = (0, core_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
    if (classElementMetadata.kind === core_1.ClassElementMetadataKind.unmanaged) {
      throw new Error("Unexpected metadata when creating target");
    }
    const target = new core_1.LegacyTargetImpl("", classElementMetadata, "Variable");
    const context2 = new context_1.Context(container2);
    const request2 = new request_1.Request(serviceIdentifier, context2, null, [], target);
    return request2;
  }
  return planner;
}
var resolver = {};
var scope = {};
var async = {};
var hasRequiredAsync;
function requireAsync() {
  if (hasRequiredAsync) return async;
  hasRequiredAsync = 1;
  Object.defineProperty(async, "__esModule", { value: true });
  async.isPromise = isPromise;
  async.isPromiseOrContainsPromise = isPromiseOrContainsPromise;
  function isPromise(object) {
    const isObjectOrFunction = typeof object === "object" && object !== null || typeof object === "function";
    return isObjectOrFunction && typeof object.then === "function";
  }
  function isPromiseOrContainsPromise(object) {
    if (isPromise(object)) {
      return true;
    }
    return Array.isArray(object) && object.some(isPromise);
  }
  return async;
}
var hasRequiredScope;
function requireScope() {
  if (hasRequiredScope) return scope;
  hasRequiredScope = 1;
  Object.defineProperty(scope, "__esModule", { value: true });
  scope.saveToScope = scope.tryGetFromScope = void 0;
  const literal_types_1 = requireLiteral_types();
  const async_1 = requireAsync();
  const tryGetFromScope = (requestScope, binding2) => {
    if (binding2.scope === literal_types_1.BindingScopeEnum.Singleton && binding2.activated) {
      return binding2.cache;
    }
    if (binding2.scope === literal_types_1.BindingScopeEnum.Request && requestScope.has(binding2.id)) {
      return requestScope.get(binding2.id);
    }
    return null;
  };
  scope.tryGetFromScope = tryGetFromScope;
  const saveToScope = (requestScope, binding2, result) => {
    if (binding2.scope === literal_types_1.BindingScopeEnum.Singleton) {
      _saveToSingletonScope(binding2, result);
    }
    if (binding2.scope === literal_types_1.BindingScopeEnum.Request) {
      _saveToRequestScope(requestScope, binding2, result);
    }
  };
  scope.saveToScope = saveToScope;
  const _saveToRequestScope = (requestScope, binding2, result) => {
    if (!requestScope.has(binding2.id)) {
      requestScope.set(binding2.id, result);
    }
  };
  const _saveToSingletonScope = (binding2, result) => {
    binding2.cache = result;
    binding2.activated = true;
    if ((0, async_1.isPromise)(result)) {
      void _saveAsyncResultToSingletonScope(binding2, result);
    }
  };
  const _saveAsyncResultToSingletonScope = async (binding2, asyncResult) => {
    try {
      const result = await asyncResult;
      binding2.cache = result;
    } catch (ex) {
      binding2.cache = null;
      binding2.activated = false;
      throw ex;
    }
  };
  return scope;
}
var binding_utils = {};
var factory_type = {};
var hasRequiredFactory_type;
function requireFactory_type() {
  if (hasRequiredFactory_type) return factory_type;
  hasRequiredFactory_type = 1;
  Object.defineProperty(factory_type, "__esModule", { value: true });
  factory_type.FactoryType = void 0;
  var FactoryType;
  (function(FactoryType2) {
    FactoryType2["DynamicValue"] = "toDynamicValue";
    FactoryType2["Factory"] = "toFactory";
    FactoryType2["Provider"] = "toProvider";
  })(FactoryType || (factory_type.FactoryType = FactoryType = {}));
  return factory_type;
}
var hasRequiredBinding_utils;
function requireBinding_utils() {
  if (hasRequiredBinding_utils) return binding_utils;
  hasRequiredBinding_utils = 1;
  var __createBinding = binding_utils && binding_utils.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = binding_utils && binding_utils.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = binding_utils && binding_utils.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(binding_utils, "__esModule", { value: true });
  binding_utils.getFactoryDetails = binding_utils.ensureFullyBound = binding_utils.multiBindToService = void 0;
  const ERROR_MSGS = __importStar(requireError_msgs());
  const literal_types_1 = requireLiteral_types();
  const serialization_1 = requireSerialization();
  const factory_type_1 = requireFactory_type();
  const multiBindToService = (container2) => (service) => (...types2) => {
    types2.forEach((t) => {
      container2.bind(t).toService(service);
    });
  };
  binding_utils.multiBindToService = multiBindToService;
  const ensureFullyBound = (binding2) => {
    let boundValue = null;
    switch (binding2.type) {
      case literal_types_1.BindingTypeEnum.ConstantValue:
      case literal_types_1.BindingTypeEnum.Function:
        boundValue = binding2.cache;
        break;
      case literal_types_1.BindingTypeEnum.Constructor:
      case literal_types_1.BindingTypeEnum.Instance:
        boundValue = binding2.implementationType;
        break;
      case literal_types_1.BindingTypeEnum.DynamicValue:
        boundValue = binding2.dynamicValue;
        break;
      case literal_types_1.BindingTypeEnum.Provider:
        boundValue = binding2.provider;
        break;
      case literal_types_1.BindingTypeEnum.Factory:
        boundValue = binding2.factory;
        break;
    }
    if (boundValue === null) {
      const serviceIdentifierAsString = (0, serialization_1.getServiceIdentifierAsString)(binding2.serviceIdentifier);
      throw new Error(`${ERROR_MSGS.INVALID_BINDING_TYPE} ${serviceIdentifierAsString}`);
    }
  };
  binding_utils.ensureFullyBound = ensureFullyBound;
  const getFactoryDetails = (binding2) => {
    switch (binding2.type) {
      case literal_types_1.BindingTypeEnum.Factory:
        return { factory: binding2.factory, factoryType: factory_type_1.FactoryType.Factory };
      case literal_types_1.BindingTypeEnum.Provider:
        return { factory: binding2.provider, factoryType: factory_type_1.FactoryType.Provider };
      case literal_types_1.BindingTypeEnum.DynamicValue:
        return {
          factory: binding2.dynamicValue,
          factoryType: factory_type_1.FactoryType.DynamicValue
        };
      default:
        throw new Error(`Unexpected factory type ${binding2.type}`);
    }
  };
  binding_utils.getFactoryDetails = getFactoryDetails;
  return binding_utils;
}
var instantiation = {};
var hasRequiredInstantiation;
function requireInstantiation() {
  if (hasRequiredInstantiation) return instantiation;
  hasRequiredInstantiation = 1;
  var __createBinding = instantiation && instantiation.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = instantiation && instantiation.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = instantiation && instantiation.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(instantiation, "__esModule", { value: true });
  instantiation.resolveInstance = resolveInstance;
  const error_msgs_1 = requireError_msgs();
  const literal_types_1 = requireLiteral_types();
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const async_1 = requireAsync();
  function _resolveRequests(childRequests, resolveRequest) {
    return childRequests.reduce((resolvedRequests, childRequest) => {
      const injection = resolveRequest(childRequest);
      const targetType = childRequest.target.type;
      if (targetType === literal_types_1.TargetTypeEnum.ConstructorArgument) {
        resolvedRequests.constructorInjections.push(injection);
      } else {
        resolvedRequests.propertyRequests.push(childRequest);
        resolvedRequests.propertyInjections.push(injection);
      }
      if (!resolvedRequests.isAsync) {
        resolvedRequests.isAsync = (0, async_1.isPromiseOrContainsPromise)(injection);
      }
      return resolvedRequests;
    }, {
      constructorInjections: [],
      isAsync: false,
      propertyInjections: [],
      propertyRequests: []
    });
  }
  function _createInstance(constr, childRequests, resolveRequest) {
    let result;
    if (childRequests.length > 0) {
      const resolved = _resolveRequests(childRequests, resolveRequest);
      const createInstanceWithInjectionsArg = {
        ...resolved,
        constr
      };
      if (resolved.isAsync) {
        result = createInstanceWithInjectionsAsync(createInstanceWithInjectionsArg);
      } else {
        result = createInstanceWithInjections(createInstanceWithInjectionsArg);
      }
    } else {
      result = new constr();
    }
    return result;
  }
  function createInstanceWithInjections(args) {
    const instance = new args.constr(...args.constructorInjections);
    args.propertyRequests.forEach((r, index) => {
      const property = r.target.identifier;
      const injection = args.propertyInjections[index];
      if (!r.target.isOptional() || injection !== void 0) {
        instance[property] = injection;
      }
    });
    return instance;
  }
  async function createInstanceWithInjectionsAsync(args) {
    const constructorInjections = await possiblyWaitInjections(args.constructorInjections);
    const propertyInjections = await possiblyWaitInjections(args.propertyInjections);
    return createInstanceWithInjections({
      ...args,
      constructorInjections,
      propertyInjections
    });
  }
  async function possiblyWaitInjections(possiblePromiseinjections) {
    const injections = [];
    for (const injection of possiblePromiseinjections) {
      if (Array.isArray(injection)) {
        injections.push(Promise.all(injection));
      } else {
        injections.push(injection);
      }
    }
    return Promise.all(injections);
  }
  function _getInstanceAfterPostConstruct(constr, result) {
    const postConstructResult = _postConstruct(constr, result);
    if ((0, async_1.isPromise)(postConstructResult)) {
      return postConstructResult.then(() => result);
    } else {
      return result;
    }
  }
  function _postConstruct(constr, instance) {
    if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {
      const data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);
      try {
        return instance[data.value]?.();
      } catch (e2) {
        if (e2 instanceof Error) {
          throw new Error((0, error_msgs_1.POST_CONSTRUCT_ERROR)(constr.name, e2.message));
        }
      }
    }
  }
  function _validateInstanceResolution(binding2, constr) {
    if (binding2.scope !== literal_types_1.BindingScopeEnum.Singleton) {
      _throwIfHandlingDeactivation(binding2, constr);
    }
  }
  function _throwIfHandlingDeactivation(binding2, constr) {
    const scopeErrorMessage = `Class cannot be instantiated in ${binding2.scope === literal_types_1.BindingScopeEnum.Request ? "request" : "transient"} scope.`;
    if (typeof binding2.onDeactivation === "function") {
      throw new Error((0, error_msgs_1.ON_DEACTIVATION_ERROR)(constr.name, scopeErrorMessage));
    }
    if (Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constr)) {
      throw new Error((0, error_msgs_1.PRE_DESTROY_ERROR)(constr.name, scopeErrorMessage));
    }
  }
  function resolveInstance(binding2, constr, childRequests, resolveRequest) {
    _validateInstanceResolution(binding2, constr);
    const result = _createInstance(constr, childRequests, resolveRequest);
    if ((0, async_1.isPromise)(result)) {
      return result.then((resolvedResult) => _getInstanceAfterPostConstruct(constr, resolvedResult));
    } else {
      return _getInstanceAfterPostConstruct(constr, result);
    }
  }
  return instantiation;
}
var hasRequiredResolver;
function requireResolver() {
  if (hasRequiredResolver) return resolver;
  hasRequiredResolver = 1;
  var __createBinding = resolver && resolver.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = resolver && resolver.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = resolver && resolver.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(resolver, "__esModule", { value: true });
  resolver.resolve = resolve;
  const ERROR_MSGS = __importStar(requireError_msgs());
  const literal_types_1 = requireLiteral_types();
  const planner_1 = requirePlanner();
  const scope_1 = requireScope();
  const async_1 = requireAsync();
  const binding_utils_1 = requireBinding_utils();
  const exceptions_1 = requireExceptions();
  const instantiation_1 = requireInstantiation();
  const _resolveRequest = (requestScope) => (request2) => {
    request2.parentContext.setCurrentRequest(request2);
    const bindings = request2.bindings;
    const childRequests = request2.childRequests;
    const targetIsAnArray = request2.target && request2.target.isArray();
    const targetParentIsNotAnArray = !request2.parentRequest || // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions
    !request2.parentRequest.target || // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions
    !request2.target || !request2.parentRequest.target.matchesArray(request2.target.serviceIdentifier);
    if (targetIsAnArray && targetParentIsNotAnArray) {
      return childRequests.map((childRequest) => {
        const resolveRequest = _resolveRequest(requestScope);
        return resolveRequest(childRequest);
      });
    } else {
      if (request2.target.isOptional() && bindings.length === 0) {
        return void 0;
      }
      const binding2 = bindings[0];
      return _resolveBinding(requestScope, request2, binding2);
    }
  };
  const _resolveFactoryFromBinding = (binding2, context2) => {
    const factoryDetails = (0, binding_utils_1.getFactoryDetails)(binding2);
    return (0, exceptions_1.tryAndThrowErrorIfStackOverflow)(() => factoryDetails.factory.bind(binding2)(context2), () => new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY_IN_FACTORY(factoryDetails.factoryType, context2.currentRequest.serviceIdentifier.toString())));
  };
  const _getResolvedFromBinding = (requestScope, request2, binding2) => {
    let result;
    const childRequests = request2.childRequests;
    (0, binding_utils_1.ensureFullyBound)(binding2);
    switch (binding2.type) {
      case literal_types_1.BindingTypeEnum.ConstantValue:
      case literal_types_1.BindingTypeEnum.Function:
        result = binding2.cache;
        break;
      case literal_types_1.BindingTypeEnum.Constructor:
        result = binding2.implementationType;
        break;
      case literal_types_1.BindingTypeEnum.Instance:
        result = (0, instantiation_1.resolveInstance)(binding2, binding2.implementationType, childRequests, _resolveRequest(requestScope));
        break;
      default:
        result = _resolveFactoryFromBinding(binding2, request2.parentContext);
    }
    return result;
  };
  const _resolveInScope = (requestScope, binding2, resolveFromBinding) => {
    let result = (0, scope_1.tryGetFromScope)(requestScope, binding2);
    if (result !== null) {
      return result;
    }
    result = resolveFromBinding();
    (0, scope_1.saveToScope)(requestScope, binding2, result);
    return result;
  };
  const _resolveBinding = (requestScope, request2, binding2) => {
    return _resolveInScope(requestScope, binding2, () => {
      let result = _getResolvedFromBinding(requestScope, request2, binding2);
      if ((0, async_1.isPromise)(result)) {
        result = result.then((resolved) => _onActivation(request2, binding2, resolved));
      } else {
        result = _onActivation(request2, binding2, result);
      }
      return result;
    });
  };
  function _onActivation(request2, binding2, resolved) {
    let result = _bindingActivation(request2.parentContext, binding2, resolved);
    const containersIterator = _getContainersIterator(request2.parentContext.container);
    let container2;
    let containersIteratorResult = containersIterator.next();
    do {
      container2 = containersIteratorResult.value;
      const context2 = request2.parentContext;
      const serviceIdentifier = request2.serviceIdentifier;
      const activationsIterator = _getContainerActivationsForService(container2, serviceIdentifier);
      if ((0, async_1.isPromise)(result)) {
        result = _activateContainerAsync(activationsIterator, context2, result);
      } else {
        result = _activateContainer(activationsIterator, context2, result);
      }
      containersIteratorResult = containersIterator.next();
    } while (containersIteratorResult.done !== true && !(0, planner_1.getBindingDictionary)(container2).hasKey(request2.serviceIdentifier));
    return result;
  }
  const _bindingActivation = (context2, binding2, previousResult) => {
    let result;
    if (typeof binding2.onActivation === "function") {
      result = binding2.onActivation(context2, previousResult);
    } else {
      result = previousResult;
    }
    return result;
  };
  const _activateContainer = (activationsIterator, context2, result) => {
    let activation = activationsIterator.next();
    while (activation.done !== true) {
      result = activation.value(context2, result);
      if ((0, async_1.isPromise)(result)) {
        return _activateContainerAsync(activationsIterator, context2, result);
      }
      activation = activationsIterator.next();
    }
    return result;
  };
  const _activateContainerAsync = async (activationsIterator, context2, resultPromise) => {
    let result = await resultPromise;
    let activation = activationsIterator.next();
    while (activation.done !== true) {
      result = await activation.value(context2, result);
      activation = activationsIterator.next();
    }
    return result;
  };
  const _getContainerActivationsForService = (container2, serviceIdentifier) => {
    const activations = container2._activations;
    return activations.hasKey(serviceIdentifier) ? activations.get(serviceIdentifier).values() : [].values();
  };
  const _getContainersIterator = (container2) => {
    const containersStack = [container2];
    let parent = container2.parent;
    while (parent !== null) {
      containersStack.push(parent);
      parent = parent.parent;
    }
    const getNextContainer = () => {
      const nextContainer = containersStack.pop();
      if (nextContainer !== void 0) {
        return { done: false, value: nextContainer };
      } else {
        return { done: true, value: void 0 };
      }
    };
    const containersIterator = {
      next: getNextContainer
    };
    return containersIterator;
  };
  function resolve(context2) {
    const resolveRequestFunction = _resolveRequest(context2.plan.rootRequest.requestScope);
    return resolveRequestFunction(context2.plan.rootRequest);
  }
  return resolver;
}
var binding_to_syntax = {};
var binding_in_when_on_syntax = {};
var binding_in_syntax = {};
var binding_when_on_syntax = {};
var binding_on_syntax = {};
var binding_when_syntax = {};
var constraint_helpers = {};
var hasRequiredConstraint_helpers;
function requireConstraint_helpers() {
  if (hasRequiredConstraint_helpers) return constraint_helpers;
  hasRequiredConstraint_helpers = 1;
  var __createBinding = constraint_helpers && constraint_helpers.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = constraint_helpers && constraint_helpers.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = constraint_helpers && constraint_helpers.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(constraint_helpers, "__esModule", { value: true });
  constraint_helpers.typeConstraint = constraint_helpers.namedConstraint = constraint_helpers.taggedConstraint = constraint_helpers.traverseAncerstors = void 0;
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const metadata_1 = requireMetadata();
  const traverseAncerstors = (request2, constraint) => {
    const parent = request2.parentRequest;
    if (parent !== null) {
      return constraint(parent) ? true : traverseAncerstors(parent, constraint);
    } else {
      return false;
    }
  };
  constraint_helpers.traverseAncerstors = traverseAncerstors;
  const taggedConstraint = (key) => (value) => {
    const constraint = (request2) => request2 !== null && // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    request2.target !== null && request2.target.matchesTag(key)(value);
    constraint.metaData = new metadata_1.Metadata(key, value);
    return constraint;
  };
  constraint_helpers.taggedConstraint = taggedConstraint;
  const namedConstraint = taggedConstraint(METADATA_KEY.NAMED_TAG);
  constraint_helpers.namedConstraint = namedConstraint;
  const typeConstraint = (type) => (request2) => {
    let binding2 = null;
    if (request2 !== null) {
      binding2 = request2.bindings[0];
      if (typeof type === "string") {
        return binding2.serviceIdentifier === type;
      } else {
        const constructor = request2.bindings[0].implementationType;
        return type === constructor;
      }
    }
    return false;
  };
  constraint_helpers.typeConstraint = typeConstraint;
  return constraint_helpers;
}
var hasRequiredBinding_when_syntax;
function requireBinding_when_syntax() {
  if (hasRequiredBinding_when_syntax) return binding_when_syntax;
  hasRequiredBinding_when_syntax = 1;
  Object.defineProperty(binding_when_syntax, "__esModule", { value: true });
  binding_when_syntax.BindingWhenSyntax = void 0;
  const binding_on_syntax_1 = requireBinding_on_syntax();
  const constraint_helpers_1 = requireConstraint_helpers();
  class BindingWhenSyntax {
    _binding;
    constructor(binding2) {
      this._binding = binding2;
    }
    when(constraint) {
      this._binding.constraint = constraint;
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenTargetNamed(name) {
      this._binding.constraint = (0, constraint_helpers_1.namedConstraint)(name);
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenTargetIsDefault() {
      this._binding.constraint = (request2) => {
        if (request2 === null) {
          return false;
        }
        const targetIsDefault = (
          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
          request2.target !== null && !request2.target.isNamed() && !request2.target.isTagged()
        );
        return targetIsDefault;
      };
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenTargetTagged(tag, value) {
      this._binding.constraint = (0, constraint_helpers_1.taggedConstraint)(tag)(value);
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenInjectedInto(parent) {
      this._binding.constraint = (request2) => request2 !== null && (0, constraint_helpers_1.typeConstraint)(parent)(request2.parentRequest);
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenParentNamed(name) {
      this._binding.constraint = (request2) => request2 !== null && (0, constraint_helpers_1.namedConstraint)(name)(request2.parentRequest);
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenParentTagged(tag, value) {
      this._binding.constraint = (request2) => request2 !== null && (0, constraint_helpers_1.taggedConstraint)(tag)(value)(request2.parentRequest);
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenAnyAncestorIs(ancestor) {
      this._binding.constraint = (request2) => request2 !== null && (0, constraint_helpers_1.traverseAncerstors)(request2, (0, constraint_helpers_1.typeConstraint)(ancestor));
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenNoAncestorIs(ancestor) {
      this._binding.constraint = (request2) => request2 !== null && !(0, constraint_helpers_1.traverseAncerstors)(request2, (0, constraint_helpers_1.typeConstraint)(ancestor));
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenAnyAncestorNamed(name) {
      this._binding.constraint = (request2) => request2 !== null && (0, constraint_helpers_1.traverseAncerstors)(request2, (0, constraint_helpers_1.namedConstraint)(name));
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenNoAncestorNamed(name) {
      this._binding.constraint = (request2) => request2 !== null && !(0, constraint_helpers_1.traverseAncerstors)(request2, (0, constraint_helpers_1.namedConstraint)(name));
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenAnyAncestorTagged(tag, value) {
      this._binding.constraint = (request2) => request2 !== null && (0, constraint_helpers_1.traverseAncerstors)(request2, (0, constraint_helpers_1.taggedConstraint)(tag)(value));
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenNoAncestorTagged(tag, value) {
      this._binding.constraint = (request2) => request2 !== null && !(0, constraint_helpers_1.traverseAncerstors)(request2, (0, constraint_helpers_1.taggedConstraint)(tag)(value));
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenAnyAncestorMatches(constraint) {
      this._binding.constraint = (request2) => request2 !== null && (0, constraint_helpers_1.traverseAncerstors)(request2, constraint);
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    whenNoAncestorMatches(constraint) {
      this._binding.constraint = (request2) => request2 !== null && !(0, constraint_helpers_1.traverseAncerstors)(request2, constraint);
      return new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
  }
  binding_when_syntax.BindingWhenSyntax = BindingWhenSyntax;
  return binding_when_syntax;
}
var hasRequiredBinding_on_syntax;
function requireBinding_on_syntax() {
  if (hasRequiredBinding_on_syntax) return binding_on_syntax;
  hasRequiredBinding_on_syntax = 1;
  Object.defineProperty(binding_on_syntax, "__esModule", { value: true });
  binding_on_syntax.BindingOnSyntax = void 0;
  const binding_when_syntax_1 = requireBinding_when_syntax();
  class BindingOnSyntax {
    _binding;
    constructor(binding2) {
      this._binding = binding2;
    }
    onActivation(handler) {
      this._binding.onActivation = handler;
      return new binding_when_syntax_1.BindingWhenSyntax(this._binding);
    }
    onDeactivation(handler) {
      this._binding.onDeactivation = handler;
      return new binding_when_syntax_1.BindingWhenSyntax(this._binding);
    }
  }
  binding_on_syntax.BindingOnSyntax = BindingOnSyntax;
  return binding_on_syntax;
}
var hasRequiredBinding_when_on_syntax;
function requireBinding_when_on_syntax() {
  if (hasRequiredBinding_when_on_syntax) return binding_when_on_syntax;
  hasRequiredBinding_when_on_syntax = 1;
  Object.defineProperty(binding_when_on_syntax, "__esModule", { value: true });
  binding_when_on_syntax.BindingWhenOnSyntax = void 0;
  const binding_on_syntax_1 = requireBinding_on_syntax();
  const binding_when_syntax_1 = requireBinding_when_syntax();
  class BindingWhenOnSyntax {
    _bindingWhenSyntax;
    _bindingOnSyntax;
    _binding;
    constructor(binding2) {
      this._binding = binding2;
      this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);
      this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);
    }
    when(constraint) {
      return this._bindingWhenSyntax.when(constraint);
    }
    whenTargetNamed(name) {
      return this._bindingWhenSyntax.whenTargetNamed(name);
    }
    whenTargetIsDefault() {
      return this._bindingWhenSyntax.whenTargetIsDefault();
    }
    whenTargetTagged(tag, value) {
      return this._bindingWhenSyntax.whenTargetTagged(tag, value);
    }
    whenInjectedInto(parent) {
      return this._bindingWhenSyntax.whenInjectedInto(parent);
    }
    whenParentNamed(name) {
      return this._bindingWhenSyntax.whenParentNamed(name);
    }
    whenParentTagged(tag, value) {
      return this._bindingWhenSyntax.whenParentTagged(tag, value);
    }
    whenAnyAncestorIs(ancestor) {
      return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);
    }
    whenNoAncestorIs(ancestor) {
      return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);
    }
    whenAnyAncestorNamed(name) {
      return this._bindingWhenSyntax.whenAnyAncestorNamed(name);
    }
    whenAnyAncestorTagged(tag, value) {
      return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);
    }
    whenNoAncestorNamed(name) {
      return this._bindingWhenSyntax.whenNoAncestorNamed(name);
    }
    whenNoAncestorTagged(tag, value) {
      return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);
    }
    whenAnyAncestorMatches(constraint) {
      return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);
    }
    whenNoAncestorMatches(constraint) {
      return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);
    }
    onActivation(handler) {
      return this._bindingOnSyntax.onActivation(handler);
    }
    onDeactivation(handler) {
      return this._bindingOnSyntax.onDeactivation(handler);
    }
  }
  binding_when_on_syntax.BindingWhenOnSyntax = BindingWhenOnSyntax;
  return binding_when_on_syntax;
}
var hasRequiredBinding_in_syntax;
function requireBinding_in_syntax() {
  if (hasRequiredBinding_in_syntax) return binding_in_syntax;
  hasRequiredBinding_in_syntax = 1;
  Object.defineProperty(binding_in_syntax, "__esModule", { value: true });
  binding_in_syntax.BindingInSyntax = void 0;
  const literal_types_1 = requireLiteral_types();
  const binding_when_on_syntax_1 = requireBinding_when_on_syntax();
  class BindingInSyntax {
    _binding;
    constructor(binding2) {
      this._binding = binding2;
    }
    inRequestScope() {
      this._binding.scope = literal_types_1.BindingScopeEnum.Request;
      return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    }
    inSingletonScope() {
      this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
      return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    }
    inTransientScope() {
      this._binding.scope = literal_types_1.BindingScopeEnum.Transient;
      return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    }
  }
  binding_in_syntax.BindingInSyntax = BindingInSyntax;
  return binding_in_syntax;
}
var hasRequiredBinding_in_when_on_syntax;
function requireBinding_in_when_on_syntax() {
  if (hasRequiredBinding_in_when_on_syntax) return binding_in_when_on_syntax;
  hasRequiredBinding_in_when_on_syntax = 1;
  Object.defineProperty(binding_in_when_on_syntax, "__esModule", { value: true });
  binding_in_when_on_syntax.BindingInWhenOnSyntax = void 0;
  const binding_in_syntax_1 = requireBinding_in_syntax();
  const binding_on_syntax_1 = requireBinding_on_syntax();
  const binding_when_syntax_1 = requireBinding_when_syntax();
  class BindingInWhenOnSyntax {
    _bindingInSyntax;
    _bindingWhenSyntax;
    _bindingOnSyntax;
    _binding;
    constructor(binding2) {
      this._binding = binding2;
      this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);
      this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);
      this._bindingInSyntax = new binding_in_syntax_1.BindingInSyntax(binding2);
    }
    inRequestScope() {
      return this._bindingInSyntax.inRequestScope();
    }
    inSingletonScope() {
      return this._bindingInSyntax.inSingletonScope();
    }
    inTransientScope() {
      return this._bindingInSyntax.inTransientScope();
    }
    when(constraint) {
      return this._bindingWhenSyntax.when(constraint);
    }
    whenTargetNamed(name) {
      return this._bindingWhenSyntax.whenTargetNamed(name);
    }
    whenTargetIsDefault() {
      return this._bindingWhenSyntax.whenTargetIsDefault();
    }
    whenTargetTagged(tag, value) {
      return this._bindingWhenSyntax.whenTargetTagged(tag, value);
    }
    whenInjectedInto(parent) {
      return this._bindingWhenSyntax.whenInjectedInto(parent);
    }
    whenParentNamed(name) {
      return this._bindingWhenSyntax.whenParentNamed(name);
    }
    whenParentTagged(tag, value) {
      return this._bindingWhenSyntax.whenParentTagged(tag, value);
    }
    whenAnyAncestorIs(ancestor) {
      return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);
    }
    whenNoAncestorIs(ancestor) {
      return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);
    }
    whenAnyAncestorNamed(name) {
      return this._bindingWhenSyntax.whenAnyAncestorNamed(name);
    }
    whenAnyAncestorTagged(tag, value) {
      return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);
    }
    whenNoAncestorNamed(name) {
      return this._bindingWhenSyntax.whenNoAncestorNamed(name);
    }
    whenNoAncestorTagged(tag, value) {
      return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);
    }
    whenAnyAncestorMatches(constraint) {
      return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);
    }
    whenNoAncestorMatches(constraint) {
      return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);
    }
    onActivation(handler) {
      return this._bindingOnSyntax.onActivation(handler);
    }
    onDeactivation(handler) {
      return this._bindingOnSyntax.onDeactivation(handler);
    }
  }
  binding_in_when_on_syntax.BindingInWhenOnSyntax = BindingInWhenOnSyntax;
  return binding_in_when_on_syntax;
}
var hasRequiredBinding_to_syntax;
function requireBinding_to_syntax() {
  if (hasRequiredBinding_to_syntax) return binding_to_syntax;
  hasRequiredBinding_to_syntax = 1;
  var __createBinding = binding_to_syntax && binding_to_syntax.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = binding_to_syntax && binding_to_syntax.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = binding_to_syntax && binding_to_syntax.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(binding_to_syntax, "__esModule", { value: true });
  binding_to_syntax.BindingToSyntax = void 0;
  const ERROR_MSGS = __importStar(requireError_msgs());
  const literal_types_1 = requireLiteral_types();
  const binding_in_when_on_syntax_1 = requireBinding_in_when_on_syntax();
  const binding_when_on_syntax_1 = requireBinding_when_on_syntax();
  class BindingToSyntax {
    // TODO: Implement an internal type `_BindingToSyntax<T>` wherein this member
    // can be public. Let `BindingToSyntax<T>` be the presentational type that
    // depends on it, and does not expose this member as public.
    _binding;
    constructor(binding2) {
      this._binding = binding2;
    }
    to(constructor) {
      this._binding.type = literal_types_1.BindingTypeEnum.Instance;
      this._binding.implementationType = constructor;
      return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);
    }
    toSelf() {
      if (typeof this._binding.serviceIdentifier !== "function") {
        throw new Error(ERROR_MSGS.INVALID_TO_SELF_VALUE);
      }
      const self2 = this._binding.serviceIdentifier;
      return this.to(self2);
    }
    toConstantValue(value) {
      this._binding.type = literal_types_1.BindingTypeEnum.ConstantValue;
      this._binding.cache = value;
      this._binding.dynamicValue = null;
      this._binding.implementationType = null;
      this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
      return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    }
    toDynamicValue(func) {
      this._binding.type = literal_types_1.BindingTypeEnum.DynamicValue;
      this._binding.cache = null;
      this._binding.dynamicValue = func;
      this._binding.implementationType = null;
      return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);
    }
    toConstructor(constructor) {
      this._binding.type = literal_types_1.BindingTypeEnum.Constructor;
      this._binding.implementationType = constructor;
      this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
      return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    }
    toFactory(factory2) {
      this._binding.type = literal_types_1.BindingTypeEnum.Factory;
      this._binding.factory = factory2;
      this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
      return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    }
    toFunction(func) {
      if (typeof func !== "function") {
        throw new Error(ERROR_MSGS.INVALID_FUNCTION_BINDING);
      }
      const bindingWhenOnSyntax = this.toConstantValue(func);
      this._binding.type = literal_types_1.BindingTypeEnum.Function;
      this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
      return bindingWhenOnSyntax;
    }
    toAutoFactory(serviceIdentifier) {
      this._binding.type = literal_types_1.BindingTypeEnum.Factory;
      this._binding.factory = (context2) => {
        const autofactory = () => context2.container.get(serviceIdentifier);
        return autofactory;
      };
      this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
      return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    }
    toAutoNamedFactory(serviceIdentifier) {
      this._binding.type = literal_types_1.BindingTypeEnum.Factory;
      this._binding.factory = (context2) => {
        return (named2) => context2.container.getNamed(serviceIdentifier, named2);
      };
      return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    }
    toProvider(provider) {
      this._binding.type = literal_types_1.BindingTypeEnum.Provider;
      this._binding.provider = provider;
      this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
      return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
    }
    toService(service) {
      this._binding.type = literal_types_1.BindingTypeEnum.DynamicValue;
      Object.defineProperty(this._binding, "cache", {
        configurable: true,
        enumerable: true,
        get() {
          return null;
        },
        set(_value) {
        }
      });
      this._binding.dynamicValue = (context2) => {
        try {
          return context2.container.get(service);
        } catch (_error) {
          return context2.container.getAsync(service);
        }
      };
      this._binding.implementationType = null;
    }
  }
  binding_to_syntax.BindingToSyntax = BindingToSyntax;
  return binding_to_syntax;
}
var container_snapshot = {};
var hasRequiredContainer_snapshot;
function requireContainer_snapshot() {
  if (hasRequiredContainer_snapshot) return container_snapshot;
  hasRequiredContainer_snapshot = 1;
  Object.defineProperty(container_snapshot, "__esModule", { value: true });
  container_snapshot.ContainerSnapshot = void 0;
  class ContainerSnapshot {
    bindings;
    activations;
    deactivations;
    middleware;
    moduleActivationStore;
    static of(bindings, middleware, activations, deactivations, moduleActivationStore) {
      const snapshot2 = new ContainerSnapshot();
      snapshot2.bindings = bindings;
      snapshot2.middleware = middleware;
      snapshot2.deactivations = deactivations;
      snapshot2.activations = activations;
      snapshot2.moduleActivationStore = moduleActivationStore;
      return snapshot2;
    }
  }
  container_snapshot.ContainerSnapshot = ContainerSnapshot;
  return container_snapshot;
}
var lookup = {};
var clonable = {};
var hasRequiredClonable;
function requireClonable() {
  if (hasRequiredClonable) return clonable;
  hasRequiredClonable = 1;
  Object.defineProperty(clonable, "__esModule", { value: true });
  clonable.isClonable = isClonable;
  function isClonable(obj) {
    return typeof obj === "object" && obj !== null && "clone" in obj && typeof obj.clone === "function";
  }
  return clonable;
}
var hasRequiredLookup;
function requireLookup() {
  if (hasRequiredLookup) return lookup;
  hasRequiredLookup = 1;
  var __createBinding = lookup && lookup.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = lookup && lookup.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = lookup && lookup.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(lookup, "__esModule", { value: true });
  lookup.Lookup = void 0;
  const ERROR_MSGS = __importStar(requireError_msgs());
  const clonable_1 = requireClonable();
  class Lookup {
    // dictionary used store multiple values for each key <key>
    _map;
    constructor() {
      this._map = /* @__PURE__ */ new Map();
    }
    getMap() {
      return this._map;
    }
    // adds a new entry to _map
    add(serviceIdentifier, value) {
      this._checkNonNulish(serviceIdentifier);
      if (value === null || value === void 0) {
        throw new Error(ERROR_MSGS.NULL_ARGUMENT);
      }
      const entry = this._map.get(serviceIdentifier);
      if (entry !== void 0) {
        entry.push(value);
      } else {
        this._map.set(serviceIdentifier, [value]);
      }
    }
    // gets the value of a entry by its key (serviceIdentifier)
    get(serviceIdentifier) {
      this._checkNonNulish(serviceIdentifier);
      const entry = this._map.get(serviceIdentifier);
      if (entry !== void 0) {
        return entry;
      } else {
        throw new Error(ERROR_MSGS.KEY_NOT_FOUND);
      }
    }
    // removes a entry from _map by its key (serviceIdentifier)
    remove(serviceIdentifier) {
      this._checkNonNulish(serviceIdentifier);
      if (!this._map.delete(serviceIdentifier)) {
        throw new Error(ERROR_MSGS.KEY_NOT_FOUND);
      }
    }
    removeIntersection(lookup2) {
      this.traverse((serviceIdentifier, value) => {
        const lookupActivations = lookup2.hasKey(serviceIdentifier) ? lookup2.get(serviceIdentifier) : void 0;
        if (lookupActivations !== void 0) {
          const filteredValues = value.filter((lookupValue) => !lookupActivations.some((moduleActivation) => lookupValue === moduleActivation));
          this._setValue(serviceIdentifier, filteredValues);
        }
      });
    }
    removeByCondition(condition) {
      const removals = [];
      this._map.forEach((entries, key) => {
        const updatedEntries = [];
        for (const entry of entries) {
          const remove = condition(entry);
          if (remove) {
            removals.push(entry);
          } else {
            updatedEntries.push(entry);
          }
        }
        this._setValue(key, updatedEntries);
      });
      return removals;
    }
    // returns true if _map contains a key (serviceIdentifier)
    hasKey(serviceIdentifier) {
      this._checkNonNulish(serviceIdentifier);
      return this._map.has(serviceIdentifier);
    }
    // returns a new Lookup instance; note: this is not a deep clone, only Lookup related data structure (dictionary) is
    // cloned, content remains the same
    clone() {
      const copy = new Lookup();
      this._map.forEach((value, key) => {
        value.forEach((b) => {
          copy.add(key, (0, clonable_1.isClonable)(b) ? b.clone() : b);
        });
      });
      return copy;
    }
    traverse(func) {
      this._map.forEach((value, key) => {
        func(key, value);
      });
    }
    _checkNonNulish(value) {
      if (value == null) {
        throw new Error(ERROR_MSGS.NULL_ARGUMENT);
      }
    }
    _setValue(serviceIdentifier, value) {
      if (value.length > 0) {
        this._map.set(serviceIdentifier, value);
      } else {
        this._map.delete(serviceIdentifier);
      }
    }
  }
  lookup.Lookup = Lookup;
  return lookup;
}
var module_activation_store = {};
var hasRequiredModule_activation_store;
function requireModule_activation_store() {
  if (hasRequiredModule_activation_store) return module_activation_store;
  hasRequiredModule_activation_store = 1;
  Object.defineProperty(module_activation_store, "__esModule", { value: true });
  module_activation_store.ModuleActivationStore = void 0;
  const lookup_1 = requireLookup();
  class ModuleActivationStore {
    _map = /* @__PURE__ */ new Map();
    remove(moduleId) {
      const handlers = this._map.get(moduleId);
      if (handlers === void 0) {
        return this._getEmptyHandlersStore();
      }
      this._map.delete(moduleId);
      return handlers;
    }
    addDeactivation(moduleId, serviceIdentifier, onDeactivation) {
      this._getModuleActivationHandlers(moduleId).onDeactivations.add(serviceIdentifier, onDeactivation);
    }
    addActivation(moduleId, serviceIdentifier, onActivation) {
      this._getModuleActivationHandlers(moduleId).onActivations.add(serviceIdentifier, onActivation);
    }
    clone() {
      const clone = new ModuleActivationStore();
      this._map.forEach((handlersStore, moduleId) => {
        clone._map.set(moduleId, {
          onActivations: handlersStore.onActivations.clone(),
          onDeactivations: handlersStore.onDeactivations.clone()
        });
      });
      return clone;
    }
    _getModuleActivationHandlers(moduleId) {
      let moduleActivationHandlers = this._map.get(moduleId);
      if (moduleActivationHandlers === void 0) {
        moduleActivationHandlers = this._getEmptyHandlersStore();
        this._map.set(moduleId, moduleActivationHandlers);
      }
      return moduleActivationHandlers;
    }
    _getEmptyHandlersStore() {
      const handlersStore = {
        onActivations: new lookup_1.Lookup(),
        onDeactivations: new lookup_1.Lookup()
      };
      return handlersStore;
    }
  }
  module_activation_store.ModuleActivationStore = ModuleActivationStore;
  return module_activation_store;
}
var hasRequiredContainer;
function requireContainer() {
  if (hasRequiredContainer) return container;
  hasRequiredContainer = 1;
  var __createBinding = container && container.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = container && container.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = container && container.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(container, "__esModule", { value: true });
  container.Container = void 0;
  const binding_1 = requireBinding();
  const ERROR_MSGS = __importStar(requireError_msgs());
  const literal_types_1 = requireLiteral_types();
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const metadata_reader_1 = requireMetadata_reader();
  const planner_1 = requirePlanner();
  const resolver_1 = requireResolver();
  const binding_to_syntax_1 = requireBinding_to_syntax();
  const async_1 = requireAsync();
  const id_1 = requireId();
  const serialization_1 = requireSerialization();
  const container_snapshot_1 = requireContainer_snapshot();
  const lookup_1 = requireLookup();
  const module_activation_store_1 = requireModule_activation_store();
  class Container {
    id;
    parent;
    options;
    _middleware;
    _bindingDictionary;
    _activations;
    _deactivations;
    _snapshots;
    _metadataReader;
    _moduleActivationStore;
    constructor(containerOptions) {
      const options = containerOptions || {};
      if (typeof options !== "object") {
        throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);
      }
      if (options.defaultScope === void 0) {
        options.defaultScope = literal_types_1.BindingScopeEnum.Transient;
      } else if (options.defaultScope !== literal_types_1.BindingScopeEnum.Singleton && options.defaultScope !== literal_types_1.BindingScopeEnum.Transient && options.defaultScope !== literal_types_1.BindingScopeEnum.Request) {
        throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);
      }
      if (options.autoBindInjectable === void 0) {
        options.autoBindInjectable = false;
      } else if (typeof options.autoBindInjectable !== "boolean") {
        throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);
      }
      if (options.skipBaseClassChecks === void 0) {
        options.skipBaseClassChecks = false;
      } else if (typeof options.skipBaseClassChecks !== "boolean") {
        throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);
      }
      this.options = {
        autoBindInjectable: options.autoBindInjectable,
        defaultScope: options.defaultScope,
        skipBaseClassChecks: options.skipBaseClassChecks
      };
      this.id = (0, id_1.id)();
      this._bindingDictionary = new lookup_1.Lookup();
      this._snapshots = [];
      this._middleware = null;
      this._activations = new lookup_1.Lookup();
      this._deactivations = new lookup_1.Lookup();
      this.parent = null;
      this._metadataReader = new metadata_reader_1.MetadataReader();
      this._moduleActivationStore = new module_activation_store_1.ModuleActivationStore();
    }
    static merge(container1, container2, ...containers) {
      const container3 = new Container();
      const targetContainers = [
        container1,
        container2,
        ...containers
      ].map((targetContainer) => (0, planner_1.getBindingDictionary)(targetContainer));
      const bindingDictionary = (0, planner_1.getBindingDictionary)(container3);
      function copyDictionary(origin2, destination) {
        origin2.traverse((_key, value) => {
          value.forEach((binding2) => {
            destination.add(binding2.serviceIdentifier, binding2.clone());
          });
        });
      }
      targetContainers.forEach((targetBindingDictionary) => {
        copyDictionary(targetBindingDictionary, bindingDictionary);
      });
      return container3;
    }
    load(...modules) {
      const getHelpers = this._getContainerModuleHelpersFactory();
      for (const currentModule of modules) {
        const containerModuleHelpers = getHelpers(currentModule.id);
        currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction);
      }
    }
    async loadAsync(...modules) {
      const getHelpers = this._getContainerModuleHelpersFactory();
      for (const currentModule of modules) {
        const containerModuleHelpers = getHelpers(currentModule.id);
        await currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction);
      }
    }
    unload(...modules) {
      modules.forEach((module) => {
        const deactivations = this._removeModuleBindings(module.id);
        this._deactivateSingletons(deactivations);
        this._removeModuleHandlers(module.id);
      });
    }
    async unloadAsync(...modules) {
      for (const module of modules) {
        const deactivations = this._removeModuleBindings(module.id);
        await this._deactivateSingletonsAsync(deactivations);
        this._removeModuleHandlers(module.id);
      }
    }
    // Registers a type binding
    bind(serviceIdentifier) {
      return this._bind(this._buildBinding(serviceIdentifier));
    }
    rebind(serviceIdentifier) {
      this.unbind(serviceIdentifier);
      return this.bind(serviceIdentifier);
    }
    async rebindAsync(serviceIdentifier) {
      await this.unbindAsync(serviceIdentifier);
      return this.bind(serviceIdentifier);
    }
    // Removes a type binding from the registry by its key
    unbind(serviceIdentifier) {
      if (this._bindingDictionary.hasKey(serviceIdentifier)) {
        const bindings = this._bindingDictionary.get(serviceIdentifier);
        this._deactivateSingletons(bindings);
      }
      this._removeServiceFromDictionary(serviceIdentifier);
    }
    async unbindAsync(serviceIdentifier) {
      if (this._bindingDictionary.hasKey(serviceIdentifier)) {
        const bindings = this._bindingDictionary.get(serviceIdentifier);
        await this._deactivateSingletonsAsync(bindings);
      }
      this._removeServiceFromDictionary(serviceIdentifier);
    }
    // Removes all the type bindings from the registry
    unbindAll() {
      this._bindingDictionary.traverse((_key, value) => {
        this._deactivateSingletons(value);
      });
      this._bindingDictionary = new lookup_1.Lookup();
    }
    async unbindAllAsync() {
      const promises = [];
      this._bindingDictionary.traverse((_key, value) => {
        promises.push(this._deactivateSingletonsAsync(value));
      });
      await Promise.all(promises);
      this._bindingDictionary = new lookup_1.Lookup();
    }
    onActivation(serviceIdentifier, onActivation) {
      this._activations.add(serviceIdentifier, onActivation);
    }
    onDeactivation(serviceIdentifier, onDeactivation) {
      this._deactivations.add(serviceIdentifier, onDeactivation);
    }
    // Allows to check if there are bindings available for serviceIdentifier
    isBound(serviceIdentifier) {
      let bound = this._bindingDictionary.hasKey(serviceIdentifier);
      if (!bound && this.parent) {
        bound = this.parent.isBound(serviceIdentifier);
      }
      return bound;
    }
    // check binding dependency only in current container
    isCurrentBound(serviceIdentifier) {
      return this._bindingDictionary.hasKey(serviceIdentifier);
    }
    isBoundNamed(serviceIdentifier, named2) {
      return this.isBoundTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named2);
    }
    // Check if a binding with a complex constraint is available without throwing a error. Ancestors are also verified.
    isBoundTagged(serviceIdentifier, key, value) {
      let bound = false;
      if (this._bindingDictionary.hasKey(serviceIdentifier)) {
        const bindings = this._bindingDictionary.get(serviceIdentifier);
        const request2 = (0, planner_1.createMockRequest)(this, serviceIdentifier, {
          customTag: {
            key,
            value
          },
          isMultiInject: false
        });
        bound = bindings.some((b) => b.constraint(request2));
      }
      if (!bound && this.parent) {
        bound = this.parent.isBoundTagged(serviceIdentifier, key, value);
      }
      return bound;
    }
    snapshot() {
      this._snapshots.push(container_snapshot_1.ContainerSnapshot.of(this._bindingDictionary.clone(), this._middleware, this._activations.clone(), this._deactivations.clone(), this._moduleActivationStore.clone()));
    }
    restore() {
      const snapshot2 = this._snapshots.pop();
      if (snapshot2 === void 0) {
        throw new Error(ERROR_MSGS.NO_MORE_SNAPSHOTS_AVAILABLE);
      }
      this._bindingDictionary = snapshot2.bindings;
      this._activations = snapshot2.activations;
      this._deactivations = snapshot2.deactivations;
      this._middleware = snapshot2.middleware;
      this._moduleActivationStore = snapshot2.moduleActivationStore;
    }
    createChild(containerOptions) {
      const child = new Container(containerOptions || this.options);
      child.parent = this;
      return child;
    }
    applyMiddleware(...middlewares) {
      const initial = this._middleware ? this._middleware : this._planAndResolve();
      this._middleware = middlewares.reduce((prev, curr) => curr(prev), initial);
    }
    applyCustomMetadataReader(metadataReader) {
      this._metadataReader = metadataReader;
    }
    // Resolves a dependency by its runtime identifier
    // The runtime identifier must be associated with only one binding
    // use getAll when the runtime identifier is associated with multiple bindings
    get(serviceIdentifier) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, false, false);
      return this._getButThrowIfAsync(getArgs);
    }
    async getAsync(serviceIdentifier) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, false, false);
      return this._get(getArgs);
    }
    getTagged(serviceIdentifier, key, value) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, false, false, key, value);
      return this._getButThrowIfAsync(getArgs);
    }
    async getTaggedAsync(serviceIdentifier, key, value) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, false, false, key, value);
      return this._get(getArgs);
    }
    getNamed(serviceIdentifier, named2) {
      return this.getTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named2);
    }
    async getNamedAsync(serviceIdentifier, named2) {
      return this.getTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named2);
    }
    // Resolves a dependency by its runtime identifier
    // The runtime identifier can be associated with one or multiple bindings
    getAll(serviceIdentifier, options) {
      const getArgs = this._getAllArgs(serviceIdentifier, options, false);
      return this._getButThrowIfAsync(getArgs);
    }
    async getAllAsync(serviceIdentifier, options) {
      const getArgs = this._getAllArgs(serviceIdentifier, options, false);
      return this._getAll(getArgs);
    }
    getAllTagged(serviceIdentifier, key, value) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, true, false, key, value);
      return this._getButThrowIfAsync(getArgs);
    }
    async getAllTaggedAsync(serviceIdentifier, key, value) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, true, false, key, value);
      return this._getAll(getArgs);
    }
    getAllNamed(serviceIdentifier, named2) {
      return this.getAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named2);
    }
    async getAllNamedAsync(serviceIdentifier, named2) {
      return this.getAllTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named2);
    }
    resolve(constructorFunction) {
      const isBound = this.isBound(constructorFunction);
      if (!isBound) {
        this.bind(constructorFunction).toSelf();
      }
      const resolved = this.get(constructorFunction);
      if (!isBound) {
        this.unbind(constructorFunction);
      }
      return resolved;
    }
    tryGet(serviceIdentifier) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, false, true);
      return this._getButThrowIfAsync(getArgs);
    }
    async tryGetAsync(serviceIdentifier) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, false, true);
      return this._get(getArgs);
    }
    tryGetTagged(serviceIdentifier, key, value) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, false, true, key, value);
      return this._getButThrowIfAsync(getArgs);
    }
    async tryGetTaggedAsync(serviceIdentifier, key, value) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, false, true, key, value);
      return this._get(getArgs);
    }
    tryGetNamed(serviceIdentifier, named2) {
      return this.tryGetTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named2);
    }
    async tryGetNamedAsync(serviceIdentifier, named2) {
      return this.tryGetTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named2);
    }
    tryGetAll(serviceIdentifier, options) {
      const getArgs = this._getAllArgs(serviceIdentifier, options, true);
      return this._getButThrowIfAsync(getArgs);
    }
    async tryGetAllAsync(serviceIdentifier, options) {
      const getArgs = this._getAllArgs(serviceIdentifier, options, true);
      return this._getAll(getArgs);
    }
    tryGetAllTagged(serviceIdentifier, key, value) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, true, true, key, value);
      return this._getButThrowIfAsync(getArgs);
    }
    async tryGetAllTaggedAsync(serviceIdentifier, key, value) {
      const getArgs = this._getNotAllArgs(serviceIdentifier, true, true, key, value);
      return this._getAll(getArgs);
    }
    tryGetAllNamed(serviceIdentifier, named2) {
      return this.tryGetAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named2);
    }
    async tryGetAllNamedAsync(serviceIdentifier, named2) {
      return this.tryGetAllTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named2);
    }
    _preDestroy(constructor, instance) {
      if (constructor !== void 0 && Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constructor)) {
        const data = Reflect.getMetadata(METADATA_KEY.PRE_DESTROY, constructor);
        return instance[data.value]?.();
      }
    }
    _removeModuleHandlers(moduleId) {
      const moduleActivationsHandlers = this._moduleActivationStore.remove(moduleId);
      this._activations.removeIntersection(moduleActivationsHandlers.onActivations);
      this._deactivations.removeIntersection(moduleActivationsHandlers.onDeactivations);
    }
    _removeModuleBindings(moduleId) {
      return this._bindingDictionary.removeByCondition((binding2) => binding2.moduleId === moduleId);
    }
    _deactivate(binding2, instance) {
      const constructor = instance == void 0 ? void 0 : (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        Object.getPrototypeOf(instance).constructor
      );
      try {
        if (this._deactivations.hasKey(binding2.serviceIdentifier)) {
          const result = this._deactivateContainer(instance, this._deactivations.get(binding2.serviceIdentifier).values());
          if ((0, async_1.isPromise)(result)) {
            return this._handleDeactivationError(result.then(async () => this._propagateContainerDeactivationThenBindingAndPreDestroyAsync(binding2, instance, constructor)), binding2.serviceIdentifier);
          }
        }
        const propagateDeactivationResult = this._propagateContainerDeactivationThenBindingAndPreDestroy(binding2, instance, constructor);
        if ((0, async_1.isPromise)(propagateDeactivationResult)) {
          return this._handleDeactivationError(propagateDeactivationResult, binding2.serviceIdentifier);
        }
      } catch (ex) {
        if (ex instanceof Error) {
          throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR((0, serialization_1.getServiceIdentifierAsString)(binding2.serviceIdentifier), ex.message));
        }
      }
    }
    async _handleDeactivationError(asyncResult, serviceIdentifier) {
      try {
        await asyncResult;
      } catch (ex) {
        if (ex instanceof Error) {
          throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR((0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier), ex.message));
        }
      }
    }
    _deactivateContainer(instance, deactivationsIterator) {
      let deactivation = deactivationsIterator.next();
      while (typeof deactivation.value === "function") {
        const result = deactivation.value(instance);
        if ((0, async_1.isPromise)(result)) {
          return result.then(async () => this._deactivateContainerAsync(instance, deactivationsIterator));
        }
        deactivation = deactivationsIterator.next();
      }
    }
    async _deactivateContainerAsync(instance, deactivationsIterator) {
      let deactivation = deactivationsIterator.next();
      while (typeof deactivation.value === "function") {
        await deactivation.value(instance);
        deactivation = deactivationsIterator.next();
      }
    }
    _getContainerModuleHelpersFactory() {
      const getBindFunction = (moduleId) => (serviceIdentifier) => {
        const binding2 = this._buildBinding(serviceIdentifier);
        binding2.moduleId = moduleId;
        return this._bind(binding2);
      };
      const getUnbindFunction = () => (serviceIdentifier) => {
        this.unbind(serviceIdentifier);
      };
      const getUnbindAsyncFunction = () => async (serviceIdentifier) => {
        return this.unbindAsync(serviceIdentifier);
      };
      const getIsboundFunction = () => (serviceIdentifier) => {
        return this.isBound(serviceIdentifier);
      };
      const getRebindFunction = (moduleId) => {
        const bind2 = getBindFunction(moduleId);
        return (serviceIdentifier) => {
          this.unbind(serviceIdentifier);
          return bind2(serviceIdentifier);
        };
      };
      const getOnActivationFunction = (moduleId) => (serviceIdentifier, onActivation) => {
        this._moduleActivationStore.addActivation(moduleId, serviceIdentifier, onActivation);
        this.onActivation(serviceIdentifier, onActivation);
      };
      const getOnDeactivationFunction = (moduleId) => (serviceIdentifier, onDeactivation) => {
        this._moduleActivationStore.addDeactivation(moduleId, serviceIdentifier, onDeactivation);
        this.onDeactivation(serviceIdentifier, onDeactivation);
      };
      return (mId) => ({
        bindFunction: getBindFunction(mId),
        isboundFunction: getIsboundFunction(),
        onActivationFunction: getOnActivationFunction(mId),
        onDeactivationFunction: getOnDeactivationFunction(mId),
        rebindFunction: getRebindFunction(mId),
        unbindAsyncFunction: getUnbindAsyncFunction(),
        unbindFunction: getUnbindFunction()
      });
    }
    _bind(binding2) {
      this._bindingDictionary.add(binding2.serviceIdentifier, binding2);
      return new binding_to_syntax_1.BindingToSyntax(binding2);
    }
    _buildBinding(serviceIdentifier) {
      const scope2 = this.options.defaultScope || literal_types_1.BindingScopeEnum.Transient;
      return new binding_1.Binding(serviceIdentifier, scope2);
    }
    async _getAll(getArgs) {
      return Promise.all(this._get(getArgs));
    }
    // Prepares arguments required for resolution and
    // delegates resolution to _middleware if available
    // otherwise it delegates resolution to _planAndResolve
    _get(getArgs) {
      const planAndResolveArgs = {
        ...getArgs,
        contextInterceptor: (context2) => context2,
        targetType: literal_types_1.TargetTypeEnum.Variable
      };
      if (this._middleware) {
        const middlewareResult = this._middleware(planAndResolveArgs);
        if (middlewareResult === void 0 || middlewareResult === null) {
          throw new Error(ERROR_MSGS.INVALID_MIDDLEWARE_RETURN);
        }
        return middlewareResult;
      }
      return this._planAndResolve()(planAndResolveArgs);
    }
    _getButThrowIfAsync(getArgs) {
      const result = this._get(getArgs);
      if ((0, async_1.isPromiseOrContainsPromise)(result)) {
        throw new Error(ERROR_MSGS.LAZY_IN_SYNC(getArgs.serviceIdentifier));
      }
      return result;
    }
    _getAllArgs(serviceIdentifier, options, isOptional) {
      const getAllArgs = {
        avoidConstraints: !(options?.enforceBindingConstraints ?? false),
        isMultiInject: true,
        isOptional,
        serviceIdentifier
      };
      return getAllArgs;
    }
    _getNotAllArgs(serviceIdentifier, isMultiInject, isOptional, key, value) {
      const getNotAllArgs = {
        avoidConstraints: false,
        isMultiInject,
        isOptional,
        key,
        serviceIdentifier,
        value
      };
      return getNotAllArgs;
    }
    _getPlanMetadataFromNextArgs(args) {
      const planMetadata = {
        isMultiInject: args.isMultiInject
      };
      if (args.key !== void 0) {
        planMetadata.customTag = {
          key: args.key,
          value: args.value
        };
      }
      if (args.isOptional === true) {
        planMetadata.isOptional = true;
      }
      return planMetadata;
    }
    // Planner creates a plan and Resolver resolves a plan
    // one of the jobs of the Container is to links the Planner
    // with the Resolver and that is what this function is about
    _planAndResolve() {
      return (args) => {
        let context2 = (0, planner_1.plan)(this._metadataReader, this, args.targetType, args.serviceIdentifier, this._getPlanMetadataFromNextArgs(args), args.avoidConstraints);
        context2 = args.contextInterceptor(context2);
        const result = (0, resolver_1.resolve)(context2);
        return result;
      };
    }
    _deactivateIfSingleton(binding2) {
      if (!binding2.activated) {
        return;
      }
      if ((0, async_1.isPromise)(binding2.cache)) {
        return binding2.cache.then((resolved) => this._deactivate(binding2, resolved));
      }
      return this._deactivate(binding2, binding2.cache);
    }
    _deactivateSingletons(bindings) {
      for (const binding2 of bindings) {
        const result = this._deactivateIfSingleton(binding2);
        if ((0, async_1.isPromise)(result)) {
          throw new Error(ERROR_MSGS.ASYNC_UNBIND_REQUIRED);
        }
      }
    }
    async _deactivateSingletonsAsync(bindings) {
      await Promise.all(bindings.map(async (b) => this._deactivateIfSingleton(b)));
    }
    _propagateContainerDeactivationThenBindingAndPreDestroy(binding2, instance, constructor) {
      if (this.parent) {
        return this._deactivate.bind(this.parent)(binding2, instance);
      } else {
        return this._bindingDeactivationAndPreDestroy(binding2, instance, constructor);
      }
    }
    async _propagateContainerDeactivationThenBindingAndPreDestroyAsync(binding2, instance, constructor) {
      if (this.parent) {
        await this._deactivate.bind(this.parent)(binding2, instance);
      } else {
        await this._bindingDeactivationAndPreDestroyAsync(binding2, instance, constructor);
      }
    }
    _removeServiceFromDictionary(serviceIdentifier) {
      try {
        this._bindingDictionary.remove(serviceIdentifier);
      } catch (_e) {
        throw new Error(`${ERROR_MSGS.CANNOT_UNBIND} ${(0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier)}`);
      }
    }
    _bindingDeactivationAndPreDestroy(binding2, instance, constructor) {
      if (typeof binding2.onDeactivation === "function") {
        const result = binding2.onDeactivation(instance);
        if ((0, async_1.isPromise)(result)) {
          return result.then(() => this._preDestroy(constructor, instance));
        }
      }
      return this._preDestroy(constructor, instance);
    }
    async _bindingDeactivationAndPreDestroyAsync(binding2, instance, constructor) {
      if (typeof binding2.onDeactivation === "function") {
        await binding2.onDeactivation(instance);
      }
      await this._preDestroy(constructor, instance);
    }
  }
  container.Container = Container;
  return container;
}
var container_module = {};
var hasRequiredContainer_module;
function requireContainer_module() {
  if (hasRequiredContainer_module) return container_module;
  hasRequiredContainer_module = 1;
  Object.defineProperty(container_module, "__esModule", { value: true });
  container_module.AsyncContainerModule = container_module.ContainerModule = void 0;
  const id_1 = requireId();
  class ContainerModule {
    id;
    registry;
    constructor(registry) {
      this.id = (0, id_1.id)();
      this.registry = registry;
    }
  }
  container_module.ContainerModule = ContainerModule;
  class AsyncContainerModule {
    id;
    registry;
    constructor(registry) {
      this.id = (0, id_1.id)();
      this.registry = registry;
    }
  }
  container_module.AsyncContainerModule = AsyncContainerModule;
  return container_module;
}
var decorator_utils = {};
var js = {};
var hasRequiredJs;
function requireJs() {
  if (hasRequiredJs) return js;
  hasRequiredJs = 1;
  Object.defineProperty(js, "__esModule", { value: true });
  js.getFirstArrayDuplicate = getFirstArrayDuplicate;
  function getFirstArrayDuplicate(array) {
    const seenValues = /* @__PURE__ */ new Set();
    for (const entry of array) {
      if (seenValues.has(entry)) {
        return entry;
      } else {
        seenValues.add(entry);
      }
    }
    return void 0;
  }
  return js;
}
var hasRequiredDecorator_utils;
function requireDecorator_utils() {
  if (hasRequiredDecorator_utils) return decorator_utils;
  hasRequiredDecorator_utils = 1;
  var __createBinding = decorator_utils && decorator_utils.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = decorator_utils && decorator_utils.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = decorator_utils && decorator_utils.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(decorator_utils, "__esModule", { value: true });
  decorator_utils.decorate = decorate;
  decorator_utils.tagParameter = tagParameter;
  decorator_utils.tagProperty = tagProperty;
  decorator_utils.createTaggedDecorator = createTaggedDecorator;
  const ERROR_MSGS = __importStar(requireError_msgs());
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const js_1 = requireJs();
  function targetIsConstructorFunction(target) {
    return target.prototype !== void 0;
  }
  function _throwIfMethodParameter(parameterName) {
    if (parameterName !== void 0) {
      throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);
    }
  }
  function tagParameter(annotationTarget, parameterName, parameterIndex, metadata2) {
    _throwIfMethodParameter(parameterName);
    _tagParameterOrProperty(METADATA_KEY.TAGGED, annotationTarget, parameterIndex.toString(), metadata2);
  }
  function tagProperty(annotationTarget, propertyName, metadata2) {
    if (targetIsConstructorFunction(annotationTarget)) {
      throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);
    }
    _tagParameterOrProperty(METADATA_KEY.TAGGED_PROP, annotationTarget.constructor, propertyName, metadata2);
  }
  function _ensureNoMetadataKeyDuplicates(metadata2) {
    let metadatas = [];
    if (Array.isArray(metadata2)) {
      metadatas = metadata2;
      const duplicate = (0, js_1.getFirstArrayDuplicate)(metadatas.map((md) => md.key));
      if (duplicate !== void 0) {
        throw new Error(`${ERROR_MSGS.DUPLICATED_METADATA} ${duplicate.toString()}`);
      }
    } else {
      metadatas = [metadata2];
    }
    return metadatas;
  }
  function _tagParameterOrProperty(metadataKey, annotationTarget, key, metadata2) {
    const metadatas = _ensureNoMetadataKeyDuplicates(metadata2);
    let paramsOrPropertiesMetadata = {};
    if (Reflect.hasOwnMetadata(metadataKey, annotationTarget)) {
      paramsOrPropertiesMetadata = Reflect.getMetadata(metadataKey, annotationTarget);
    }
    let paramOrPropertyMetadata = paramsOrPropertiesMetadata[key];
    if (paramOrPropertyMetadata === void 0) {
      paramOrPropertyMetadata = [];
    } else {
      for (const m of paramOrPropertyMetadata) {
        if (metadatas.some((md) => md.key === m.key)) {
          throw new Error(`${ERROR_MSGS.DUPLICATED_METADATA} ${m.key.toString()}`);
        }
      }
    }
    paramOrPropertyMetadata.push(...metadatas);
    paramsOrPropertiesMetadata[key] = paramOrPropertyMetadata;
    Reflect.defineMetadata(metadataKey, paramsOrPropertiesMetadata, annotationTarget);
  }
  function createTaggedDecorator(metadata2) {
    return (target, targetKey, indexOrPropertyDescriptor) => {
      if (typeof indexOrPropertyDescriptor === "number") {
        tagParameter(target, targetKey, indexOrPropertyDescriptor, metadata2);
      } else {
        tagProperty(target, targetKey, metadata2);
      }
    };
  }
  function _decorate(decorators, target) {
    Reflect.decorate(decorators, target);
  }
  function _param(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  }
  function decorate(decorator, target, parameterIndexOrProperty) {
    if (typeof parameterIndexOrProperty === "number") {
      _decorate([_param(parameterIndexOrProperty, decorator)], target);
    } else if (typeof parameterIndexOrProperty === "string") {
      Reflect.decorate([decorator], target, parameterIndexOrProperty);
    } else {
      _decorate([decorator], target);
    }
  }
  return decorator_utils;
}
var injectable = {};
var hasRequiredInjectable;
function requireInjectable() {
  if (hasRequiredInjectable) return injectable;
  hasRequiredInjectable = 1;
  var __createBinding = injectable && injectable.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = injectable && injectable.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = injectable && injectable.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(injectable, "__esModule", { value: true });
  injectable.injectable = injectable$1;
  const ERRORS_MSGS = __importStar(requireError_msgs());
  const METADATA_KEY = __importStar(requireMetadata_keys());
  function injectable$1() {
    return function(target) {
      if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {
        throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);
      }
      const types2 = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];
      Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types2, target);
      return target;
    };
  }
  return injectable;
}
var tagged = {};
var hasRequiredTagged;
function requireTagged() {
  if (hasRequiredTagged) return tagged;
  hasRequiredTagged = 1;
  Object.defineProperty(tagged, "__esModule", { value: true });
  tagged.tagged = tagged$1;
  const metadata_1 = requireMetadata();
  const decorator_utils_1 = requireDecorator_utils();
  function tagged$1(metadataKey, metadataValue) {
    return (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(metadataKey, metadataValue));
  }
  return tagged;
}
var named = {};
var hasRequiredNamed;
function requireNamed() {
  if (hasRequiredNamed) return named;
  hasRequiredNamed = 1;
  var __createBinding = named && named.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = named && named.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = named && named.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(named, "__esModule", { value: true });
  named.named = named$1;
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const metadata_1 = requireMetadata();
  const decorator_utils_1 = requireDecorator_utils();
  function named$1(name) {
    return (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(METADATA_KEY.NAMED_TAG, name));
  }
  return named;
}
var inject = {};
var inject_base = {};
var hasRequiredInject_base;
function requireInject_base() {
  if (hasRequiredInject_base) return inject_base;
  hasRequiredInject_base = 1;
  Object.defineProperty(inject_base, "__esModule", { value: true });
  inject_base.injectBase = injectBase;
  const error_msgs_1 = requireError_msgs();
  const metadata_1 = requireMetadata();
  const decorator_utils_1 = requireDecorator_utils();
  function injectBase(metadataKey) {
    return (serviceIdentifier) => {
      return (target, targetKey, indexOrPropertyDescriptor) => {
        if (serviceIdentifier === void 0) {
          const className2 = typeof target === "function" ? target.name : target.constructor.name;
          throw new Error((0, error_msgs_1.UNDEFINED_INJECT_ANNOTATION)(className2));
        }
        (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(metadataKey, serviceIdentifier))(target, targetKey, indexOrPropertyDescriptor);
      };
    };
  }
  return inject_base;
}
var hasRequiredInject;
function requireInject() {
  if (hasRequiredInject) return inject;
  hasRequiredInject = 1;
  var __createBinding = inject && inject.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = inject && inject.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = inject && inject.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(inject, "__esModule", { value: true });
  inject.inject = void 0;
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const inject_base_1 = requireInject_base();
  const inject$1 = (0, inject_base_1.injectBase)(METADATA_KEY.INJECT_TAG);
  inject.inject = inject$1;
  return inject;
}
var optional = {};
var hasRequiredOptional;
function requireOptional() {
  if (hasRequiredOptional) return optional;
  hasRequiredOptional = 1;
  var __createBinding = optional && optional.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = optional && optional.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = optional && optional.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(optional, "__esModule", { value: true });
  optional.optional = optional$1;
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const metadata_1 = requireMetadata();
  const decorator_utils_1 = requireDecorator_utils();
  function optional$1() {
    return (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(METADATA_KEY.OPTIONAL_TAG, true));
  }
  return optional;
}
var unmanaged = {};
var hasRequiredUnmanaged;
function requireUnmanaged() {
  if (hasRequiredUnmanaged) return unmanaged;
  hasRequiredUnmanaged = 1;
  var __createBinding = unmanaged && unmanaged.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = unmanaged && unmanaged.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = unmanaged && unmanaged.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(unmanaged, "__esModule", { value: true });
  unmanaged.unmanaged = unmanaged$1;
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const metadata_1 = requireMetadata();
  const decorator_utils_1 = requireDecorator_utils();
  function unmanaged$1() {
    return function(target, targetKey, index) {
      const metadata2 = new metadata_1.Metadata(METADATA_KEY.UNMANAGED_TAG, true);
      (0, decorator_utils_1.tagParameter)(target, targetKey, index, metadata2);
    };
  }
  return unmanaged;
}
var multi_inject = {};
var hasRequiredMulti_inject;
function requireMulti_inject() {
  if (hasRequiredMulti_inject) return multi_inject;
  hasRequiredMulti_inject = 1;
  var __createBinding = multi_inject && multi_inject.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = multi_inject && multi_inject.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = multi_inject && multi_inject.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(multi_inject, "__esModule", { value: true });
  multi_inject.multiInject = void 0;
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const inject_base_1 = requireInject_base();
  const multiInject = (0, inject_base_1.injectBase)(METADATA_KEY.MULTI_INJECT_TAG);
  multi_inject.multiInject = multiInject;
  return multi_inject;
}
var target_name = {};
var hasRequiredTarget_name;
function requireTarget_name() {
  if (hasRequiredTarget_name) return target_name;
  hasRequiredTarget_name = 1;
  var __createBinding = target_name && target_name.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = target_name && target_name.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = target_name && target_name.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(target_name, "__esModule", { value: true });
  target_name.targetName = targetName;
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const metadata_1 = requireMetadata();
  const decorator_utils_1 = requireDecorator_utils();
  function targetName(name) {
    return function(target, targetKey, index) {
      const metadata2 = new metadata_1.Metadata(METADATA_KEY.NAME_TAG, name);
      (0, decorator_utils_1.tagParameter)(target, targetKey, index, metadata2);
    };
  }
  return target_name;
}
var post_construct = {};
var property_event_decorator = {};
var hasRequiredProperty_event_decorator;
function requireProperty_event_decorator() {
  if (hasRequiredProperty_event_decorator) return property_event_decorator;
  hasRequiredProperty_event_decorator = 1;
  Object.defineProperty(property_event_decorator, "__esModule", { value: true });
  property_event_decorator.propertyEventDecorator = propertyEventDecorator;
  const metadata_1 = requireMetadata();
  function propertyEventDecorator(eventKey, errorMessage2) {
    return () => {
      return (target, propertyKey) => {
        const metadata2 = new metadata_1.Metadata(eventKey, propertyKey);
        if (Reflect.hasOwnMetadata(eventKey, target.constructor)) {
          throw new Error(errorMessage2);
        }
        Reflect.defineMetadata(eventKey, metadata2, target.constructor);
      };
    };
  }
  return property_event_decorator;
}
var hasRequiredPost_construct;
function requirePost_construct() {
  if (hasRequiredPost_construct) return post_construct;
  hasRequiredPost_construct = 1;
  var __createBinding = post_construct && post_construct.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = post_construct && post_construct.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = post_construct && post_construct.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(post_construct, "__esModule", { value: true });
  post_construct.postConstruct = void 0;
  const ERRORS_MSGS = __importStar(requireError_msgs());
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const property_event_decorator_1 = requireProperty_event_decorator();
  const postConstruct = (0, property_event_decorator_1.propertyEventDecorator)(METADATA_KEY.POST_CONSTRUCT, ERRORS_MSGS.MULTIPLE_POST_CONSTRUCT_METHODS);
  post_construct.postConstruct = postConstruct;
  return post_construct;
}
var pre_destroy = {};
var hasRequiredPre_destroy;
function requirePre_destroy() {
  if (hasRequiredPre_destroy) return pre_destroy;
  hasRequiredPre_destroy = 1;
  var __createBinding = pre_destroy && pre_destroy.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === void 0) k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = pre_destroy && pre_destroy.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = pre_destroy && pre_destroy.__importStar || /* @__PURE__ */ function() {
    var ownKeys = function(o) {
      ownKeys = Object.getOwnPropertyNames || function(o2) {
        var ar = [];
        for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
        return ar;
      };
      return ownKeys(o);
    };
    return function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
      }
      __setModuleDefault(result, mod);
      return result;
    };
  }();
  Object.defineProperty(pre_destroy, "__esModule", { value: true });
  pre_destroy.preDestroy = void 0;
  const ERRORS_MSGS = __importStar(requireError_msgs());
  const METADATA_KEY = __importStar(requireMetadata_keys());
  const property_event_decorator_1 = requireProperty_event_decorator();
  const preDestroy = (0, property_event_decorator_1.propertyEventDecorator)(METADATA_KEY.PRE_DESTROY, ERRORS_MSGS.MULTIPLE_PRE_DESTROY_METHODS);
  pre_destroy.preDestroy = preDestroy;
  return pre_destroy;
}
var hasRequiredCjs;
function requireCjs() {
  if (hasRequiredCjs) return cjs$3;
  hasRequiredCjs = 1;
  (function(exports) {
    var __createBinding = cjs$3 && cjs$3.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = cjs$3 && cjs$3.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = cjs$3 && cjs$3.__importStar || /* @__PURE__ */ function() {
      var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multiBindToService = exports.getServiceIdentifierAsString = exports.typeConstraint = exports.namedConstraint = exports.taggedConstraint = exports.traverseAncerstors = exports.decorate = exports.id = exports.MetadataReader = exports.preDestroy = exports.postConstruct = exports.targetName = exports.multiInject = exports.unmanaged = exports.optional = exports.inject = exports.named = exports.tagged = exports.injectable = exports.createTaggedDecorator = exports.ContainerModule = exports.AsyncContainerModule = exports.TargetTypeEnum = exports.BindingTypeEnum = exports.BindingScopeEnum = exports.Container = exports.METADATA_KEY = exports.LazyServiceIdentifer = exports.LazyServiceIdentifier = void 0;
    require_Reflect();
    const common_1 = /* @__PURE__ */ requireCjs$3();
    const keys2 = __importStar(requireMetadata_keys());
    var common_2 = /* @__PURE__ */ requireCjs$3();
    Object.defineProperty(exports, "LazyServiceIdentifier", { enumerable: true, get: function() {
      return common_2.LazyServiceIdentifier;
    } });
    exports.LazyServiceIdentifer = common_1.LazyServiceIdentifier;
    exports.METADATA_KEY = keys2;
    var container_1 = requireContainer();
    Object.defineProperty(exports, "Container", { enumerable: true, get: function() {
      return container_1.Container;
    } });
    var literal_types_1 = requireLiteral_types();
    Object.defineProperty(exports, "BindingScopeEnum", { enumerable: true, get: function() {
      return literal_types_1.BindingScopeEnum;
    } });
    Object.defineProperty(exports, "BindingTypeEnum", { enumerable: true, get: function() {
      return literal_types_1.BindingTypeEnum;
    } });
    Object.defineProperty(exports, "TargetTypeEnum", { enumerable: true, get: function() {
      return literal_types_1.TargetTypeEnum;
    } });
    var container_module_1 = requireContainer_module();
    Object.defineProperty(exports, "AsyncContainerModule", { enumerable: true, get: function() {
      return container_module_1.AsyncContainerModule;
    } });
    Object.defineProperty(exports, "ContainerModule", { enumerable: true, get: function() {
      return container_module_1.ContainerModule;
    } });
    var decorator_utils_1 = requireDecorator_utils();
    Object.defineProperty(exports, "createTaggedDecorator", { enumerable: true, get: function() {
      return decorator_utils_1.createTaggedDecorator;
    } });
    var injectable_1 = requireInjectable();
    Object.defineProperty(exports, "injectable", { enumerable: true, get: function() {
      return injectable_1.injectable;
    } });
    var tagged_1 = requireTagged();
    Object.defineProperty(exports, "tagged", { enumerable: true, get: function() {
      return tagged_1.tagged;
    } });
    var named_1 = requireNamed();
    Object.defineProperty(exports, "named", { enumerable: true, get: function() {
      return named_1.named;
    } });
    var inject_1 = requireInject();
    Object.defineProperty(exports, "inject", { enumerable: true, get: function() {
      return inject_1.inject;
    } });
    var optional_1 = requireOptional();
    Object.defineProperty(exports, "optional", { enumerable: true, get: function() {
      return optional_1.optional;
    } });
    var unmanaged_1 = requireUnmanaged();
    Object.defineProperty(exports, "unmanaged", { enumerable: true, get: function() {
      return unmanaged_1.unmanaged;
    } });
    var multi_inject_1 = requireMulti_inject();
    Object.defineProperty(exports, "multiInject", { enumerable: true, get: function() {
      return multi_inject_1.multiInject;
    } });
    var target_name_1 = requireTarget_name();
    Object.defineProperty(exports, "targetName", { enumerable: true, get: function() {
      return target_name_1.targetName;
    } });
    var post_construct_1 = requirePost_construct();
    Object.defineProperty(exports, "postConstruct", { enumerable: true, get: function() {
      return post_construct_1.postConstruct;
    } });
    var pre_destroy_1 = requirePre_destroy();
    Object.defineProperty(exports, "preDestroy", { enumerable: true, get: function() {
      return pre_destroy_1.preDestroy;
    } });
    var metadata_reader_1 = requireMetadata_reader();
    Object.defineProperty(exports, "MetadataReader", { enumerable: true, get: function() {
      return metadata_reader_1.MetadataReader;
    } });
    var id_1 = requireId();
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return id_1.id;
    } });
    var decorator_utils_2 = requireDecorator_utils();
    Object.defineProperty(exports, "decorate", { enumerable: true, get: function() {
      return decorator_utils_2.decorate;
    } });
    var constraint_helpers_1 = requireConstraint_helpers();
    Object.defineProperty(exports, "traverseAncerstors", { enumerable: true, get: function() {
      return constraint_helpers_1.traverseAncerstors;
    } });
    Object.defineProperty(exports, "taggedConstraint", { enumerable: true, get: function() {
      return constraint_helpers_1.taggedConstraint;
    } });
    Object.defineProperty(exports, "namedConstraint", { enumerable: true, get: function() {
      return constraint_helpers_1.namedConstraint;
    } });
    Object.defineProperty(exports, "typeConstraint", { enumerable: true, get: function() {
      return constraint_helpers_1.typeConstraint;
    } });
    var serialization_1 = requireSerialization();
    Object.defineProperty(exports, "getServiceIdentifierAsString", { enumerable: true, get: function() {
      return serialization_1.getServiceIdentifierAsString;
    } });
    var binding_utils_1 = requireBinding_utils();
    Object.defineProperty(exports, "multiBindToService", { enumerable: true, get: function() {
      return binding_utils_1.multiBindToService;
    } });
  })(cjs$3);
  return cjs$3;
}
var internal$5 = {};
var Helpers$4 = {};
var internal$4 = {};
var Errors = {};
var hasRequiredErrors;
function requireErrors() {
  if (hasRequiredErrors) return Errors;
  hasRequiredErrors = 1;
  Object.defineProperty(Errors, "__esModule", { value: true });
  Errors.InvalidTypeError = Errors.FalsyValueError = Errors.ConfigError = Errors.DependencyTypeError = Errors.DependencyError = void 0;
  class DependencyError extends Error {
    constructor(message, dependencyType, registered) {
      super(`${dependencyType} ${message}.${registered && registered.length > 0 ? ` Registered dependencies: ${registered.join(", ")}` : ""}`);
      this.dependencyType = dependencyType;
      this.registered = registered;
    }
  }
  Errors.DependencyError = DependencyError;
  class DependencyTypeError extends Error {
    constructor(message, dependencyType) {
      super(`${dependencyType} ${message}.`);
      this.dependencyType = dependencyType;
    }
  }
  Errors.DependencyTypeError = DependencyTypeError;
  class ConfigError extends Error {
    constructor(property) {
      super(`${property} is not defined in configuration`);
    }
  }
  Errors.ConfigError = ConfigError;
  class FalsyValueError extends Error {
    constructor(propertyPath) {
      super(`${propertyPath} is falsy`);
    }
  }
  Errors.FalsyValueError = FalsyValueError;
  class InvalidTypeError extends Error {
    constructor(propertyPath, expectedTypeName) {
      super(`${propertyPath} should be of type '${expectedTypeName}'`);
    }
  }
  Errors.InvalidTypeError = InvalidTypeError;
  return Errors;
}
var Helpers$3 = {};
var hasRequiredHelpers$4;
function requireHelpers$4() {
  if (hasRequiredHelpers$4) return Helpers$3;
  hasRequiredHelpers$4 = 1;
  Object.defineProperty(Helpers$3, "__esModule", { value: true });
  Helpers$3.assertPrimitiveType = assertPrimitiveType;
  Helpers$3.assertInstanceType = assertInstanceType;
  const Errors_1 = requireErrors();
  function assertPrimitiveType(value, valueName, expectedValueType) {
    if (!value)
      throw new Errors_1.FalsyValueError(valueName);
    if (!(typeof value === expectedValueType))
      throw new Errors_1.InvalidTypeError(valueName, expectedValueType);
  }
  function assertInstanceType(value, valueName, instanceConstructor) {
    if (!value)
      throw new Errors_1.FalsyValueError(valueName);
    if (!(value instanceof instanceConstructor))
      throw new Errors_1.InvalidTypeError(valueName, instanceConstructor.name);
  }
  return Helpers$3;
}
var hasRequiredInternal$5;
function requireInternal$5() {
  if (hasRequiredInternal$5) return internal$4;
  hasRequiredInternal$5 = 1;
  (function(exports) {
    var __createBinding = internal$4 && internal$4.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = internal$4 && internal$4.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireErrors(), exports);
    __exportStar(requireHelpers$4(), exports);
  })(internal$4);
  return internal$4;
}
var hasRequiredHelpers$3;
function requireHelpers$3() {
  if (hasRequiredHelpers$3) return Helpers$4;
  hasRequiredHelpers$3 = 1;
  Object.defineProperty(Helpers$4, "__esModule", { value: true });
  Helpers$4.defaultExpiresInSeconds = void 0;
  Helpers$4.metadataToHeaders = metadataToHeaders;
  Helpers$4.buildObjectKey = buildObjectKey;
  Helpers$4.buildObjectReference = buildObjectReference;
  Helpers$4.buildObjectDirectoryString = buildObjectDirectoryString;
  Helpers$4.assertRelativeDirectory = assertRelativeDirectory;
  Helpers$4.assertTransferConfig = assertTransferConfig;
  Helpers$4.instanceOfUrlTransferInput = instanceOfUrlTransferInput;
  Helpers$4.getTransferTimeInSeconds = getTransferTimeInSeconds;
  const internal_1 = requireInternal$5();
  Helpers$4.defaultExpiresInSeconds = 60 * 60;
  function metadataToHeaders(metadata2, prefix2) {
    return Object.keys(metadata2).reduce((acc, suffix) => ({
      ...acc,
      [`${prefix2}${suffix}`.toLowerCase()]: metadata2[suffix]
    }), {});
  }
  function buildObjectKey(ref) {
    const relative = ref.relativeDirectory ? `/${ref.relativeDirectory}` : "";
    return `${ref.baseDirectory}${relative}/${ref.objectName}`;
  }
  function buildObjectReference(objectKey, separator = "/") {
    const parts2 = objectKey.split(separator).filter((key) => key);
    const lastIndex = parts2.length - 1;
    const result = {
      baseDirectory: parts2[0],
      objectName: parts2.length !== 1 ? parts2[lastIndex] : ""
    };
    const relativeDirectory = parts2.slice(1, lastIndex).join("/");
    if (relativeDirectory)
      result.relativeDirectory = relativeDirectory;
    return result;
  }
  function buildObjectDirectoryString(directory) {
    const { baseDirectory, relativeDirectory } = directory;
    return `${baseDirectory}${relativeDirectory ? `/${relativeDirectory}` : ""}`;
  }
  function assertRelativeDirectory(relativeDirectory) {
    if (!relativeDirectory)
      return;
    const backslash = "\\";
    if (relativeDirectory.includes(backslash))
      throw new Error("Relative directory cannot contain backslashes.");
    const separator = "/";
    if (relativeDirectory[0] === separator || relativeDirectory[relativeDirectory.length - 1] === separator)
      throw new Error("Relative directory cannot contain slashes at the beginning or the end of the string.");
  }
  function assertTransferConfig(transferConfig) {
    (0, internal_1.assertPrimitiveType)(transferConfig, "transferConfig", "object");
    (0, internal_1.assertPrimitiveType)(transferConfig.baseUrl, "transferConfig.baseUrl", "string");
    (0, internal_1.assertInstanceType)(transferConfig.expiration, "transferConfig.expiration", Date);
    if (/* @__PURE__ */ new Date() > transferConfig.expiration)
      throw new Error("Transfer config is expired");
  }
  function instanceOfUrlTransferInput(input) {
    return "url" in input;
  }
  function getTransferTimeInSeconds(fileSize, { maxTransferTime = 3600, minTransferSpeedInKbps = 100, padding = 300 } = {}) {
    const bytesPerSecond = minTransferSpeedInKbps * 125;
    const seconds = fileSize / bytesPerSecond + padding;
    return seconds > maxTransferTime ? maxTransferTime : seconds;
  }
  return Helpers$4;
}
var hasRequiredInternal$4;
function requireInternal$4() {
  if (hasRequiredInternal$4) return internal$5;
  hasRequiredInternal$4 = 1;
  (function(exports) {
    var __createBinding = internal$5 && internal$5.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = internal$5 && internal$5.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireHelpers$3(), exports);
  })(internal$5);
  return internal$5;
}
var internal$3 = {};
var Helpers$2 = {};
var hasRequiredHelpers$2;
function requireHelpers$2() {
  if (hasRequiredHelpers$2) return Helpers$2;
  hasRequiredHelpers$2 = 1;
  Object.defineProperty(Helpers$2, "__esModule", { value: true });
  Helpers$2.assertLocalFile = assertLocalFile;
  Helpers$2.assertFileNotEmpty = assertFileNotEmpty;
  Helpers$2.isLocalTransferInput = isLocalTransferInput;
  Helpers$2.streamToBuffer = streamToBuffer2;
  Helpers$2.bufferToStream = bufferToStream;
  Helpers$2.streamToLocalFile = streamToLocalFile;
  Helpers$2.bufferToTransferType = bufferToTransferType;
  Helpers$2.streamToTransferType = streamToTransferType;
  Helpers$2.downloadFromUrl = downloadFromUrl;
  Helpers$2.uploadToUrl = uploadToUrl;
  Helpers$2.getRandomString = getRandomString;
  Helpers$2.getExpiryDate = getExpiryDate;
  const crypto_1 = require$$0$1;
  const fs_1 = require$$0$1;
  const path_1 = require$$0$1;
  const stream_1 = require$$0$1;
  const axios_12 = /* @__PURE__ */ requireAxios();
  const internal_1 = requireInternal$4();
  function assertLocalFile(localPath) {
    if (!localPath)
      throw new Error("Specify localPath");
  }
  async function assertFileNotEmpty(filePath) {
    const fileStats = await fs_1.promises.stat(filePath);
    if (fileStats.size === 0) {
      throw new Error("Provided path is an empty file.");
    }
  }
  function isLocalTransferInput(transfer) {
    if ("localPath" in transfer) {
      const localInput = transfer;
      return localInput.localPath !== void 0;
    }
    return false;
  }
  async function streamToBuffer2(stream) {
    return new Promise((resolve, reject) => {
      const chunks = Array();
      stream.on("data", (data) => (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        chunks.push(data instanceof Buffer ? data : Buffer.from(data))
      ));
      stream.on("end", () => resolve(Buffer.concat(chunks)));
      stream.on("error", reject);
    });
  }
  function bufferToStream(buffer) {
    return stream_1.Readable.from(buffer);
  }
  async function streamToLocalFile(stream, destinationPath) {
    await fs_1.promises.mkdir((0, path_1.dirname)(destinationPath), { recursive: true });
    return new Promise((resolve, reject) => {
      const fileStream = (0, fs_1.createWriteStream)(destinationPath);
      stream.on("error", reject);
      fileStream.on("error", reject);
      fileStream.on("finish", resolve);
      stream.pipe(fileStream);
    });
  }
  function bufferToTransferType(buffer, transferType) {
    switch (transferType) {
      case "stream":
        return bufferToStream(buffer);
      case "buffer":
        return buffer;
      default:
        throw new Error(`Type '${transferType === void 0 ? "undefined" : transferType}' is not supported`);
    }
  }
  async function streamToTransferType(stream, transferType, localPath) {
    switch (transferType) {
      case "local":
        assertLocalFile(localPath);
        await streamToLocalFile(stream, localPath);
        return localPath;
      case "stream":
        return stream;
      case "buffer":
        return streamToBuffer2(stream);
      default:
        throw new Error(`Type '${transferType === void 0 ? "undefined" : transferType}' is not supported`);
    }
  }
  async function downloadFromUrl(input) {
    const { transferType, url: url2 } = input;
    const signal = input.abortSignal;
    switch (transferType) {
      case "buffer":
        return downloadFromUrlAsBuffer(url2, signal);
      case "stream":
        return downloadFromUrlAsStream(url2, signal);
      case "local":
        const localPath = input.localPath;
        assertLocalFile(localPath);
        return downloadFromUrlToLocalFile(url2, localPath, signal);
      default:
        throw new Error(`Type ${input.transferType} is not supported`);
    }
  }
  async function uploadToUrl(url2, data, headers) {
    let dataToUpload;
    if (typeof data === "string") {
      await assertFileNotEmpty(data);
      dataToUpload = (0, fs_1.createReadStream)(data);
    } else {
      dataToUpload = data;
    }
    await axios_12.default.put(url2, dataToUpload, {
      headers
    });
  }
  function getRandomString() {
    return (0, crypto_1.randomBytes)(16).toString("hex");
  }
  async function downloadFromUrlAsBuffer(url2, signal) {
    let promise = axios_12.default.get(url2, {
      responseType: "arraybuffer",
      signal
    });
    promise = convertAbortErrorName(promise);
    return (await promise).data;
  }
  async function downloadFromUrlAsStream(url2, signal) {
    let promise = axios_12.default.get(url2, {
      responseType: "stream",
      signal
    });
    promise = convertAbortErrorName(promise);
    return (await promise).data;
  }
  async function downloadFromUrlToLocalFile(url2, localPath, signal) {
    let promise = axios_12.default.get(url2, {
      responseType: "stream",
      signal
    });
    promise = convertAbortErrorName(promise);
    const stream = (await promise).data;
    await streamToLocalFile(stream, localPath);
    return localPath;
  }
  async function convertAbortErrorName(promise) {
    try {
      return await promise;
    } catch (error) {
      if (error instanceof Error && error.name === "CanceledError")
        error.name = "AbortError";
      throw error;
    }
  }
  function getExpiryDate(options) {
    if (options?.expiresInSeconds && options?.expiresOn) {
      throw new Error("Only one of 'expiresInSeconds' and 'expiresOn' can be specified.");
    }
    if (options?.expiresInSeconds) {
      return new Date(Date.now() + options.expiresInSeconds * 1e3);
    }
    if (options?.expiresOn) {
      return options.expiresOn;
    }
    return new Date(Date.now() + internal_1.defaultExpiresInSeconds * 1e3);
  }
  return Helpers$2;
}
var hasRequiredInternal$3;
function requireInternal$3() {
  if (hasRequiredInternal$3) return internal$3;
  hasRequiredInternal$3 = 1;
  (function(exports) {
    var __createBinding = internal$3 && internal$3.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = internal$3 && internal$3.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireHelpers$2(), exports);
  })(internal$3);
  return internal$3;
}
var lib$1 = {};
var common = {};
var Types$1 = {};
var hasRequiredTypes$1;
function requireTypes$1() {
  if (hasRequiredTypes$1) return Types$1;
  hasRequiredTypes$1 = 1;
  Object.defineProperty(Types$1, "__esModule", { value: true });
  Types$1.Types = void 0;
  const types2 = {
    Client: {
      clientWrapperFactory: Symbol.for("Types.Client.clientWrapperFactory")
    },
    Frontend: {
      clientWrapperFactory: Symbol.for("Types.Frontend.clientWrapperFactory")
    },
    Server: {
      presignedUrlProvider: Symbol.for("Types.Server.PresignedUrlProvider"),
      transferConfigProvider: Symbol.for("Types.Server.TransferConfigProvider")
    }
  };
  Types$1.Types = types2;
  return Types$1;
}
var Interfaces$2 = {};
var hasRequiredInterfaces$2;
function requireInterfaces$2() {
  if (hasRequiredInterfaces$2) return Interfaces$2;
  hasRequiredInterfaces$2 = 1;
  Object.defineProperty(Interfaces$2, "__esModule", { value: true });
  return Interfaces$2;
}
var hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon) return common;
  hasRequiredCommon = 1;
  (function(exports) {
    var __createBinding = common && common.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = common && common.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireTypes$1(), exports);
    __exportStar(requireInterfaces$2(), exports);
  })(common);
  return common;
}
var client = {};
var ClientStorage = {};
var hasRequiredClientStorage;
function requireClientStorage() {
  if (hasRequiredClientStorage) return ClientStorage;
  hasRequiredClientStorage = 1;
  var __decorate = ClientStorage && ClientStorage.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(ClientStorage, "__esModule", { value: true });
  ClientStorage.ClientStorage = void 0;
  const inversify_1 = /* @__PURE__ */ requireCjs();
  let ClientStorage$1 = class ClientStorage {
  };
  ClientStorage.ClientStorage = ClientStorage$1;
  ClientStorage.ClientStorage = ClientStorage$1 = __decorate([
    (0, inversify_1.injectable)()
  ], ClientStorage$1);
  return ClientStorage;
}
var ClientStorageDependency = {};
var lib = {};
var Bindable = {};
var DependencyFactory = {};
var NamedDependency = {};
var Dependency = {};
var hasRequiredDependency;
function requireDependency() {
  if (hasRequiredDependency) return Dependency;
  hasRequiredDependency = 1;
  Object.defineProperty(Dependency, "__esModule", { value: true });
  Dependency.Dependency = void 0;
  let Dependency$1 = class Dependency {
  };
  Dependency.Dependency = Dependency$1;
  return Dependency;
}
var hasRequiredNamedDependency;
function requireNamedDependency() {
  if (hasRequiredNamedDependency) return NamedDependency;
  hasRequiredNamedDependency = 1;
  Object.defineProperty(NamedDependency, "__esModule", { value: true });
  NamedDependency.NamedDependency = NamedDependency.NamedInstance = void 0;
  const Dependency_1 = requireDependency();
  class NamedInstance {
    constructor(instance, instanceName) {
      this.instance = instance;
      this.instanceName = instanceName;
    }
  }
  NamedDependency.NamedInstance = NamedInstance;
  let NamedDependency$1 = class NamedDependency extends Dependency_1.Dependency {
    registerInstance(container2, config) {
      const childContainer = container2.createChild();
      this.register(childContainer, config);
      this._registerInstance(container2, childContainer, config);
    }
    bindNamed(container2, childContainer, serviceIdentifier, instanceName) {
      container2.bind(NamedInstance).toDynamicValue(() => {
        return new NamedInstance(childContainer.get(serviceIdentifier), instanceName);
      }).inSingletonScope();
      container2.bind(serviceIdentifier).toDynamicValue(() => {
        return childContainer.get(serviceIdentifier);
      }).inSingletonScope().whenTargetNamed(instanceName);
    }
  };
  NamedDependency.NamedDependency = NamedDependency$1;
  return NamedDependency;
}
var hasRequiredDependencyFactory;
function requireDependencyFactory() {
  if (hasRequiredDependencyFactory) return DependencyFactory;
  hasRequiredDependencyFactory = 1;
  Object.defineProperty(DependencyFactory, "__esModule", { value: true });
  DependencyFactory.DependencyFactory = void 0;
  const internal_1 = requireInternal$5();
  const NamedDependency_1 = requireNamedDependency();
  let DependencyFactory$1 = class DependencyFactory {
    constructor(dependencyType) {
      this.dependencyType = dependencyType;
      this._dependencyMap = /* @__PURE__ */ new Map();
    }
    addDependency(dependency) {
      this._dependencyMap.set(dependency.dependencyName, dependency);
    }
    getDependency(name) {
      const dependency = this._dependencyMap.get(name);
      if (!dependency)
        throw new internal_1.DependencyError(`dependency "${name}" is not registered`, this.dependencyType, [...this._dependencyMap.keys()]);
      return dependency;
    }
    getNamedDependency(name) {
      const dependency = this.getDependency(name);
      if (!(dependency instanceof NamedDependency_1.NamedDependency))
        throw new internal_1.DependencyTypeError(`dependency "${name}" does not support named dependency instances`, this.dependencyType);
      return dependency;
    }
  };
  DependencyFactory.DependencyFactory = DependencyFactory$1;
  return DependencyFactory;
}
var Types = {};
var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes) return Types;
  hasRequiredTypes = 1;
  Object.defineProperty(Types, "__esModule", { value: true });
  Types.Types = void 0;
  const types2 = {
    dependenciesConfig: Symbol.for("Types.dependenciesConfig")
  };
  Types.Types = types2;
  return Types;
}
var hasRequiredBindable;
function requireBindable() {
  if (hasRequiredBindable) return Bindable;
  hasRequiredBindable = 1;
  Object.defineProperty(Bindable, "__esModule", { value: true });
  Bindable.Bindable = void 0;
  const DependencyFactory_1 = requireDependencyFactory();
  const internal_1 = requireInternal$5();
  const Types_1 = requireTypes();
  let Bindable$1 = class Bindable2 {
    constructor() {
      this._dependencyFactories = /* @__PURE__ */ new Map();
    }
    requireDependency(dependencyType) {
      const factory2 = new DependencyFactory_1.DependencyFactory(dependencyType);
      this._dependencyFactories.set(factory2.dependencyType, factory2);
    }
    useBindings(bindings) {
      const dependencyBindings = new bindings();
      const factory2 = this._dependencyFactories.get(dependencyBindings.dependencyType);
      if (!factory2)
        throw new internal_1.DependencyError(`factory is not registered, use "${Bindable2.prototype.requireDependency.name}" method`, dependencyBindings.dependencyType);
      factory2.addDependency(dependencyBindings);
    }
    bindNamedDependencies(container2, factory2, configs) {
      for (const configInstance of configs) {
        factory2.getNamedDependency(configInstance.dependencyName).registerInstance(container2, configInstance);
      }
    }
    bindDependency(container2, factory2, config) {
      factory2.getDependency(config.dependencyName).register(container2, config);
    }
    bindDependencies(container2) {
      const config = container2.get(Types_1.Types.dependenciesConfig);
      this._dependencyFactories.forEach((factory2) => {
        const dependencyConfig = config[factory2.dependencyType];
        if (Array.isArray(dependencyConfig))
          this.bindNamedDependencies(container2, factory2, dependencyConfig);
        else
          this.bindDependency(container2, factory2, dependencyConfig);
      });
    }
  };
  Bindable.Bindable = Bindable$1;
  return Bindable;
}
var DependencyConfig = {};
var hasRequiredDependencyConfig;
function requireDependencyConfig() {
  if (hasRequiredDependencyConfig) return DependencyConfig;
  hasRequiredDependencyConfig = 1;
  Object.defineProperty(DependencyConfig, "__esModule", { value: true });
  return DependencyConfig;
}
var hasRequiredLib$3;
function requireLib$3() {
  if (hasRequiredLib$3) return lib;
  hasRequiredLib$3 = 1;
  (function(exports) {
    var __createBinding = lib && lib.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = lib && lib.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireBindable(), exports);
    __exportStar(requireDependency(), exports);
    __exportStar(requireNamedDependency(), exports);
    __exportStar(requireDependencyConfig(), exports);
    __exportStar(requireTypes(), exports);
  })(lib);
  return lib;
}
var hasRequiredClientStorageDependency;
function requireClientStorageDependency() {
  if (hasRequiredClientStorageDependency) return ClientStorageDependency;
  hasRequiredClientStorageDependency = 1;
  Object.defineProperty(ClientStorageDependency, "__esModule", { value: true });
  ClientStorageDependency.ClientStorageDependency = void 0;
  const internal_1 = requireInternal$5();
  const cloud_agnostic_core_1 = requireLib$3();
  const ClientStorage_1 = requireClientStorage();
  let ClientStorageDependency$1 = class ClientStorageDependency2 extends cloud_agnostic_core_1.NamedDependency {
    constructor() {
      super(...arguments);
      this.dependencyType = ClientStorageDependency2.dependencyType;
    }
    _registerInstance(container2, childContainer, config) {
      if (!config.instanceName)
        throw new internal_1.ConfigError("instanceName");
      this.bindNamed(container2, childContainer, ClientStorage_1.ClientStorage, config.instanceName);
    }
  };
  ClientStorageDependency.ClientStorageDependency = ClientStorageDependency$1;
  ClientStorageDependency$1.dependencyType = "ClientStorage";
  return ClientStorageDependency;
}
var hasRequiredClient$1;
function requireClient$1() {
  if (hasRequiredClient$1) return client;
  hasRequiredClient$1 = 1;
  (function(exports) {
    var __createBinding = client && client.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = client && client.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireClientStorage(), exports);
    __exportStar(requireClientStorageDependency(), exports);
  })(client);
  return client;
}
var server$1 = {};
var Interfaces$1 = {};
var hasRequiredInterfaces$1;
function requireInterfaces$1() {
  if (hasRequiredInterfaces$1) return Interfaces$1;
  hasRequiredInterfaces$1 = 1;
  Object.defineProperty(Interfaces$1, "__esModule", { value: true });
  Interfaces$1.EntityPageListIterator = void 0;
  class EntityPageListIterator3 {
    constructor(pageQueryFunc) {
      this._entityPages = this.queryPages(pageQueryFunc);
    }
    [Symbol.asyncIterator]() {
      return this;
    }
    async next() {
      return this._entityPages.next();
    }
    async *queryPages(pageQueryFunc) {
      let nextPageQueryFunc = pageQueryFunc;
      while (nextPageQueryFunc) {
        const entityPage = await nextPageQueryFunc();
        nextPageQueryFunc = entityPage.next;
        yield entityPage.entities;
      }
    }
  }
  Interfaces$1.EntityPageListIterator = EntityPageListIterator3;
  return Interfaces$1;
}
var ServerStorage = {};
var hasRequiredServerStorage;
function requireServerStorage() {
  if (hasRequiredServerStorage) return ServerStorage;
  hasRequiredServerStorage = 1;
  var __decorate = ServerStorage && ServerStorage.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(ServerStorage, "__esModule", { value: true });
  ServerStorage.ServerStorage = void 0;
  const inversify_1 = /* @__PURE__ */ requireCjs();
  let ServerStorage$1 = class ServerStorage {
    async listDirectories() {
      const maxPageSize2 = 1e3;
      const directoriesIterator = this.getListDirectoriesPagedIterator(maxPageSize2);
      return await this.listAllEntriesFromIterator(directoriesIterator);
    }
    async listObjects(directory) {
      const maxPageSize2 = 1e3;
      const objectsIterator = this.getListObjectsPagedIterator(directory, maxPageSize2);
      return await this.listAllEntriesFromIterator(objectsIterator);
    }
    async listAllEntriesFromIterator(pageIterator) {
      let allEntries = [];
      for await (const entityPage of pageIterator)
        allEntries = [...allEntries, ...entityPage];
      return allEntries;
    }
    async *listObjectsFiltered(sourceStorage, sourceDirectory, maxPageSize2, predicate) {
      for await (const objectPage of sourceStorage.getListObjectsPagedIterator(sourceDirectory, maxPageSize2)) {
        for (const object of objectPage) {
          if (predicate ? predicate(object) : true) {
            yield object;
          }
        }
      }
    }
    buildTaskKey(sourceReference) {
      return sourceReference.relativeDirectory ? `${sourceReference.baseDirectory}/${sourceReference.relativeDirectory}/${sourceReference.objectName}` : `${sourceReference.baseDirectory}/${sourceReference.objectName}`;
    }
    async copyObjectWithKey(sourceStorage, sourceReference, targetReference) {
      const newTaskKey = this.buildTaskKey(sourceReference);
      try {
        await this.copyObject(sourceStorage, sourceReference, targetReference);
        return newTaskKey;
      } catch (error) {
        throw { key: newTaskKey, error };
      }
    }
    /**
     * Copies objects from a base directory in another {@link ServerStorage} instance to this storage.
     * @param {ServerStorage} sourceStorage source storage. Must be of the same type as this storage.
     * @param {BaseDirectory} sourceDirectory base directory in the source storage that will be copied.
     * @param {BaseDirectory} target base directory in the target storage or a callback to generate object
     * reference in the target storage.
     * @param {Function} predicate optional predicate to filter objects to copy. If not specified, all
     * objects from the sourceDirectory will be copied.
     * @returns {Promise<void>}
     * @note This uses server-side copying. Cross-region copy support depends on the storage provider.
     */
    async copyDirectory(sourceStorage, sourceDirectory, target, predicate, copyOptions = {
      maxPageSize: 100,
      maxConcurrency: 50,
      continueOnError: true
    }) {
      const taskMap = /* @__PURE__ */ new Map();
      const errors = [];
      const handleSingleTask = async () => {
        try {
          const key = await Promise.race(taskMap.values());
          taskMap.delete(key);
        } catch (error) {
          taskMap.delete(error.key);
          if (!copyOptions.continueOnError) {
            throw error;
          }
          errors.push(error);
        }
      };
      for await (const sourceReference of this.listObjectsFiltered(sourceStorage, sourceDirectory, copyOptions.maxPageSize, predicate)) {
        const targetReference = target instanceof Function ? target(sourceReference) : {
          ...sourceReference,
          baseDirectory: target.baseDirectory
        };
        taskMap.set(this.buildTaskKey(sourceReference), this.copyObjectWithKey(sourceStorage, sourceReference, targetReference));
        if (taskMap.size >= copyOptions.maxConcurrency) {
          await handleSingleTask();
        }
      }
      while (taskMap.size > 0) {
        await handleSingleTask();
      }
      if (errors.length > 0) {
        throw new AggregateError(errors);
      }
    }
  };
  ServerStorage.ServerStorage = ServerStorage$1;
  ServerStorage.ServerStorage = ServerStorage$1 = __decorate([
    (0, inversify_1.injectable)()
  ], ServerStorage$1);
  return ServerStorage;
}
var ServerStorageDependency = {};
var hasRequiredServerStorageDependency;
function requireServerStorageDependency() {
  if (hasRequiredServerStorageDependency) return ServerStorageDependency;
  hasRequiredServerStorageDependency = 1;
  Object.defineProperty(ServerStorageDependency, "__esModule", { value: true });
  ServerStorageDependency.ServerStorageDependency = void 0;
  const internal_1 = requireInternal$5();
  const cloud_agnostic_core_1 = requireLib$3();
  const ServerStorage_1 = requireServerStorage();
  let ServerStorageDependency$1 = class ServerStorageDependency2 extends cloud_agnostic_core_1.NamedDependency {
    constructor() {
      super(...arguments);
      this.dependencyType = ServerStorageDependency2.dependencyType;
    }
    _registerInstance(container2, childContainer, config) {
      if (!config.instanceName)
        throw new internal_1.ConfigError("instanceName");
      this.bindNamed(container2, childContainer, ServerStorage_1.ServerStorage, config.instanceName);
    }
  };
  ServerStorageDependency.ServerStorageDependency = ServerStorageDependency$1;
  ServerStorageDependency$1.dependencyType = "ServerStorage";
  return ServerStorageDependency;
}
var hasRequiredServer$1;
function requireServer$1() {
  if (hasRequiredServer$1) return server$1;
  hasRequiredServer$1 = 1;
  (function(exports) {
    var __createBinding = server$1 && server$1.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = server$1 && server$1.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireInterfaces$1(), exports);
    __exportStar(requireServerStorage(), exports);
    __exportStar(requireServerStorageDependency(), exports);
  })(server$1);
  return server$1;
}
var hasRequiredLib$2;
function requireLib$2() {
  if (hasRequiredLib$2) return lib$1;
  hasRequiredLib$2 = 1;
  (function(exports) {
    var __createBinding = lib$1 && lib$1.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = lib$1 && lib$1.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireCommon(), exports);
    __exportStar(requireClient$1(), exports);
    __exportStar(requireServer$1(), exports);
  })(lib$1);
  return lib$1;
}
var wrappers = {};
var BlobServiceClientWrapper = {};
const ValidPhaseNames = /* @__PURE__ */ new Set(["Deserialize", "Serialize", "Retry", "Sign"]);
class HttpPipeline {
  constructor(policies) {
    var _a2;
    this._policies = [];
    this._policies = (_a2 = policies === null || policies === void 0 ? void 0 : policies.slice(0)) !== null && _a2 !== void 0 ? _a2 : [];
    this._orderedPolicies = void 0;
  }
  addPolicy(policy, options = {}) {
    if (options.phase && options.afterPhase) {
      throw new Error("Policies inside a phase cannot specify afterPhase.");
    }
    if (options.phase && !ValidPhaseNames.has(options.phase)) {
      throw new Error(`Invalid phase name: ${options.phase}`);
    }
    if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {
      throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);
    }
    this._policies.push({
      policy,
      options
    });
    this._orderedPolicies = void 0;
  }
  removePolicy(options) {
    const removedPolicies = [];
    this._policies = this._policies.filter((policyDescriptor) => {
      if (options.name && policyDescriptor.policy.name === options.name || options.phase && policyDescriptor.options.phase === options.phase) {
        removedPolicies.push(policyDescriptor.policy);
        return false;
      } else {
        return true;
      }
    });
    this._orderedPolicies = void 0;
    return removedPolicies;
  }
  sendRequest(httpClient, request2) {
    const policies = this.getOrderedPolicies();
    const pipeline = policies.reduceRight((next, policy) => {
      return (req) => {
        return policy.sendRequest(req, next);
      };
    }, (req) => httpClient.sendRequest(req));
    return pipeline(request2);
  }
  getOrderedPolicies() {
    if (!this._orderedPolicies) {
      this._orderedPolicies = this.orderPolicies();
    }
    return this._orderedPolicies;
  }
  clone() {
    return new HttpPipeline(this._policies);
  }
  static create() {
    return new HttpPipeline();
  }
  orderPolicies() {
    const result = [];
    const policyMap = /* @__PURE__ */ new Map();
    function createPhase(name) {
      return {
        name,
        policies: /* @__PURE__ */ new Set(),
        hasRun: false,
        hasAfterPolicies: false
      };
    }
    const serializePhase = createPhase("Serialize");
    const noPhase = createPhase("None");
    const deserializePhase = createPhase("Deserialize");
    const retryPhase = createPhase("Retry");
    const signPhase = createPhase("Sign");
    const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];
    function getPhase(phase) {
      if (phase === "Retry") {
        return retryPhase;
      } else if (phase === "Serialize") {
        return serializePhase;
      } else if (phase === "Deserialize") {
        return deserializePhase;
      } else if (phase === "Sign") {
        return signPhase;
      } else {
        return noPhase;
      }
    }
    for (const descriptor of this._policies) {
      const policy = descriptor.policy;
      const options = descriptor.options;
      const policyName = policy.name;
      if (policyMap.has(policyName)) {
        throw new Error("Duplicate policy names not allowed in pipeline");
      }
      const node = {
        policy,
        dependsOn: /* @__PURE__ */ new Set(),
        dependants: /* @__PURE__ */ new Set()
      };
      if (options.afterPhase) {
        node.afterPhase = getPhase(options.afterPhase);
        node.afterPhase.hasAfterPolicies = true;
      }
      policyMap.set(policyName, node);
      const phase = getPhase(options.phase);
      phase.policies.add(node);
    }
    for (const descriptor of this._policies) {
      const { policy, options } = descriptor;
      const policyName = policy.name;
      const node = policyMap.get(policyName);
      if (!node) {
        throw new Error(`Missing node for policy ${policyName}`);
      }
      if (options.afterPolicies) {
        for (const afterPolicyName of options.afterPolicies) {
          const afterNode = policyMap.get(afterPolicyName);
          if (afterNode) {
            node.dependsOn.add(afterNode);
            afterNode.dependants.add(node);
          }
        }
      }
      if (options.beforePolicies) {
        for (const beforePolicyName of options.beforePolicies) {
          const beforeNode = policyMap.get(beforePolicyName);
          if (beforeNode) {
            beforeNode.dependsOn.add(node);
            node.dependants.add(beforeNode);
          }
        }
      }
    }
    function walkPhase(phase) {
      phase.hasRun = true;
      for (const node of phase.policies) {
        if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {
          continue;
        }
        if (node.dependsOn.size === 0) {
          result.push(node.policy);
          for (const dependant of node.dependants) {
            dependant.dependsOn.delete(node);
          }
          policyMap.delete(node.policy.name);
          phase.policies.delete(node);
        }
      }
    }
    function walkPhases() {
      for (const phase of orderedPhases) {
        walkPhase(phase);
        if (phase.policies.size > 0 && phase !== noPhase) {
          if (!noPhase.hasRun) {
            walkPhase(noPhase);
          }
          return;
        }
        if (phase.hasAfterPolicies) {
          walkPhase(noPhase);
        }
      }
    }
    let iteration = 0;
    while (policyMap.size > 0) {
      iteration++;
      const initialResultLength = result.length;
      walkPhases();
      if (result.length <= initialResultLength && iteration > 1) {
        throw new Error("Cannot satisfy policy dependencies due to requirements cycle.");
      }
    }
    return result;
  }
}
function createEmptyPipeline() {
  return HttpPipeline.create();
}
function log(...args) {
  if (args.length > 0) {
    const firstArg = String(args[0]);
    if (firstArg.includes(":error")) {
      console.error(...args);
    } else if (firstArg.includes(":warning")) {
      console.warn(...args);
    } else if (firstArg.includes(":info")) {
      console.info(...args);
    } else if (firstArg.includes(":verbose")) {
      console.debug(...args);
    } else {
      console.debug(...args);
    }
  }
}
var define_process_env_default$1 = {};
const debugEnvVariable = typeof process !== "undefined" && define_process_env_default$1 && define_process_env_default$1.DEBUG || void 0;
let enabledString;
let enabledNamespaces = [];
let skippedNamespaces = [];
const debuggers = [];
if (debugEnvVariable) {
  enable(debugEnvVariable);
}
const debugObj = Object.assign((namespace) => {
  return createDebugger(namespace);
}, {
  enable,
  enabled,
  disable,
  log
});
function enable(namespaces) {
  enabledString = namespaces;
  enabledNamespaces = [];
  skippedNamespaces = [];
  const wildcard = /\*/g;
  const namespaceList = namespaces.split(",").map((ns) => ns.trim().replace(wildcard, ".*?"));
  for (const ns of namespaceList) {
    if (ns.startsWith("-")) {
      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));
    } else {
      enabledNamespaces.push(new RegExp(`^${ns}$`));
    }
  }
  for (const instance of debuggers) {
    instance.enabled = enabled(instance.namespace);
  }
}
function enabled(namespace) {
  if (namespace.endsWith("*")) {
    return true;
  }
  for (const skipped of skippedNamespaces) {
    if (skipped.test(namespace)) {
      return false;
    }
  }
  for (const enabledNamespace of enabledNamespaces) {
    if (enabledNamespace.test(namespace)) {
      return true;
    }
  }
  return false;
}
function disable() {
  const result = enabledString || "";
  enable("");
  return result;
}
function createDebugger(namespace) {
  const newDebugger = Object.assign(debug, {
    enabled: enabled(namespace),
    destroy,
    log: debugObj.log,
    namespace,
    extend
  });
  function debug(...args) {
    if (!newDebugger.enabled) {
      return;
    }
    if (args.length > 0) {
      args[0] = `${namespace} ${args[0]}`;
    }
    newDebugger.log(...args);
  }
  debuggers.push(newDebugger);
  return newDebugger;
}
function destroy() {
  const index = debuggers.indexOf(this);
  if (index >= 0) {
    debuggers.splice(index, 1);
    return true;
  }
  return false;
}
function extend(namespace) {
  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);
  newDebugger.log = this.log;
  return newDebugger;
}
var define_process_env_default = {};
const registeredLoggers = /* @__PURE__ */ new Set();
const logLevelFromEnv = typeof process !== "undefined" && define_process_env_default && define_process_env_default.AZURE_LOG_LEVEL || void 0;
let azureLogLevel;
const AzureLogger = debugObj("azure");
AzureLogger.log = (...args) => {
  debugObj.log(...args);
};
const AZURE_LOG_LEVELS = ["verbose", "info", "warning", "error"];
if (logLevelFromEnv) {
  if (isAzureLogLevel(logLevelFromEnv)) {
    setLogLevel(logLevelFromEnv);
  } else {
    console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(", ")}.`);
  }
}
function setLogLevel(level) {
  if (level && !isAzureLogLevel(level)) {
    throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(",")}`);
  }
  azureLogLevel = level;
  const enabledNamespaces2 = [];
  for (const logger2 of registeredLoggers) {
    if (shouldEnable(logger2)) {
      enabledNamespaces2.push(logger2.namespace);
    }
  }
  debugObj.enable(enabledNamespaces2.join(","));
}
const levelMap = {
  verbose: 400,
  info: 300,
  warning: 200,
  error: 100
};
function createClientLogger(namespace) {
  const clientRootLogger = AzureLogger.extend(namespace);
  patchLogMethod(AzureLogger, clientRootLogger);
  return {
    error: createLogger(clientRootLogger, "error"),
    warning: createLogger(clientRootLogger, "warning"),
    info: createLogger(clientRootLogger, "info"),
    verbose: createLogger(clientRootLogger, "verbose")
  };
}
function patchLogMethod(parent, child) {
  child.log = (...args) => {
    parent.log(...args);
  };
}
function createLogger(parent, level) {
  const logger2 = Object.assign(parent.extend(level), {
    level
  });
  patchLogMethod(parent, logger2);
  if (shouldEnable(logger2)) {
    const enabledNamespaces2 = debugObj.disable();
    debugObj.enable(enabledNamespaces2 + "," + logger2.namespace);
  }
  registeredLoggers.add(logger2);
  return logger2;
}
function shouldEnable(logger2) {
  return Boolean(azureLogLevel && levelMap[logger2.level] <= levelMap[azureLogLevel]);
}
function isAzureLogLevel(logLevel) {
  return AZURE_LOG_LEVELS.includes(logLevel);
}
const logger$2 = createClientLogger("core-rest-pipeline");
class AbortError extends Error {
  constructor(message) {
    super(message);
    this.name = "AbortError";
  }
}
function createAbortablePromise(buildPromise, options) {
  const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};
  return new Promise((resolve, reject) => {
    function rejectOnAbort() {
      reject(new AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : "The operation was aborted."));
    }
    function removeListeners() {
      abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener("abort", onAbort);
    }
    function onAbort() {
      cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();
      removeListeners();
      rejectOnAbort();
    }
    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
      return rejectOnAbort();
    }
    try {
      buildPromise((x) => {
        removeListeners();
        resolve(x);
      }, (x) => {
        removeListeners();
        reject(x);
      });
    } catch (err) {
      reject(err);
    }
    abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener("abort", onAbort);
  });
}
function getRandomIntegerInclusive(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  const offset = Math.floor(Math.random() * (max - min + 1));
  return offset + min;
}
const StandardAbortMessage$1 = "The delay was aborted.";
function delay$2(timeInMs, options) {
  let token;
  const { abortSignal, abortErrorMsg } = {};
  return createAbortablePromise((resolve) => {
    token = setTimeout(resolve, timeInMs);
  }, {
    cleanupBeforeAbort: () => clearTimeout(token),
    abortSignal,
    abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage$1
  });
}
function calculateRetryDelay(retryAttempt, config) {
  const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);
  const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);
  const retryAfterInMs = clampedDelay / 2 + getRandomIntegerInclusive(0, clampedDelay / 2);
  return { retryAfterInMs };
}
function isObject(input) {
  return typeof input === "object" && input !== null && !Array.isArray(input) && !(input instanceof RegExp) && !(input instanceof Date);
}
function isError(e2) {
  if (isObject(e2)) {
    const hasName = typeof e2.name === "string";
    const hasMessage = typeof e2.message === "string";
    return hasName && hasMessage;
  }
  return false;
}
function getErrorMessage(e2) {
  if (isError(e2)) {
    return e2.message;
  } else {
    let stringified;
    try {
      if (typeof e2 === "object" && e2) {
        stringified = JSON.stringify(e2);
      } else {
        stringified = String(e2);
      }
    } catch (err) {
      stringified = "[unable to stringify input]";
    }
    return `Unknown error ${stringified}`;
  }
}
function stringToUint8Array(value, format) {
  switch (format) {
    case "utf-8":
      return utf8StringToUint8Array(value);
    case "base64":
      return base64ToUint8Array(value);
    case "base64url":
      return base64UrlToUint8Array(value);
    case "hex":
      return hexStringToUint8Array(value);
  }
}
function utf8StringToUint8Array(value) {
  return new TextEncoder().encode(value);
}
function base64ToUint8Array(value) {
  return new Uint8Array([...atob(value)].map((x) => x.charCodeAt(0)));
}
function base64UrlToUint8Array(value) {
  const base64String = value.replace(/-/g, "+").replace(/_/g, "/");
  return base64ToUint8Array(base64String);
}
const hexDigits = new Set("0123456789abcdefABCDEF");
function hexStringToUint8Array(value) {
  const bytes = new Uint8Array(value.length / 2);
  for (let i = 0; i < value.length / 2; ++i) {
    const highNibble = value[2 * i];
    const lowNibble = value[2 * i + 1];
    if (!hexDigits.has(highNibble) || !hexDigits.has(lowNibble)) {
      return bytes.slice(0, i);
    }
    bytes[i] = parseInt(`${highNibble}${lowNibble}`, 16);
  }
  return bytes;
}
function generateUUID() {
  let uuid = "";
  for (let i = 0; i < 32; i++) {
    const randomNumber = Math.floor(Math.random() * 16);
    if (i === 12) {
      uuid += "4";
    } else if (i === 16) {
      uuid += randomNumber & 3 | 8;
    } else {
      uuid += randomNumber.toString(16);
    }
    if (i === 7 || i === 11 || i === 15 || i === 19) {
      uuid += "-";
    }
  }
  return uuid;
}
var _a$1;
const uuidFunction = typeof ((_a$1 = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a$1 === void 0 ? void 0 : _a$1.randomUUID) === "function" ? globalThis.crypto.randomUUID.bind(globalThis.crypto) : generateUUID;
function randomUUID() {
  return uuidFunction();
}
var _a, _b, _c, _d;
typeof self === "object" && typeof (self === null || self === void 0 ? void 0 : self.importScripts) === "function" && (((_a = self.constructor) === null || _a === void 0 ? void 0 : _a.name) === "DedicatedWorkerGlobalScope" || ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === "ServiceWorkerGlobalScope" || ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === "SharedWorkerGlobalScope");
typeof Deno !== "undefined" && typeof Deno.version !== "undefined" && typeof Deno.version.deno !== "undefined";
typeof Bun !== "undefined" && typeof Bun.version !== "undefined";
const isNodeLike = typeof globalThis.process !== "undefined" && Boolean(globalThis.process.version) && Boolean((_d = globalThis.process.versions) === null || _d === void 0 ? void 0 : _d.node);
const isNode = isNodeLike;
const RedactedString = "REDACTED";
const defaultAllowedHeaderNames = [
  "x-ms-client-request-id",
  "x-ms-return-client-request-id",
  "x-ms-useragent",
  "x-ms-correlation-request-id",
  "x-ms-request-id",
  "client-request-id",
  "ms-cv",
  "return-client-request-id",
  "traceparent",
  "Access-Control-Allow-Credentials",
  "Access-Control-Allow-Headers",
  "Access-Control-Allow-Methods",
  "Access-Control-Allow-Origin",
  "Access-Control-Expose-Headers",
  "Access-Control-Max-Age",
  "Access-Control-Request-Headers",
  "Access-Control-Request-Method",
  "Origin",
  "Accept",
  "Accept-Encoding",
  "Cache-Control",
  "Connection",
  "Content-Length",
  "Content-Type",
  "Date",
  "ETag",
  "Expires",
  "If-Match",
  "If-Modified-Since",
  "If-None-Match",
  "If-Unmodified-Since",
  "Last-Modified",
  "Pragma",
  "Request-Id",
  "Retry-After",
  "Server",
  "Transfer-Encoding",
  "User-Agent",
  "WWW-Authenticate"
];
const defaultAllowedQueryParameters = ["api-version"];
class Sanitizer {
  constructor({ additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = [] } = {}) {
    allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);
    allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);
    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));
    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));
  }
  sanitize(obj) {
    const seen = /* @__PURE__ */ new Set();
    return JSON.stringify(obj, (key, value) => {
      if (value instanceof Error) {
        return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });
      }
      if (key === "headers") {
        return this.sanitizeHeaders(value);
      } else if (key === "url") {
        return this.sanitizeUrl(value);
      } else if (key === "query") {
        return this.sanitizeQuery(value);
      } else if (key === "body") {
        return void 0;
      } else if (key === "response") {
        return void 0;
      } else if (key === "operationSpec") {
        return void 0;
      } else if (Array.isArray(value) || isObject(value)) {
        if (seen.has(value)) {
          return "[Circular]";
        }
        seen.add(value);
      }
      return value;
    }, 2);
  }
  sanitizeUrl(value) {
    if (typeof value !== "string" || value === null || value === "") {
      return value;
    }
    const url2 = new URL(value);
    if (!url2.search) {
      return value;
    }
    for (const [key] of url2.searchParams) {
      if (!this.allowedQueryParameters.has(key.toLowerCase())) {
        url2.searchParams.set(key, RedactedString);
      }
    }
    return url2.toString();
  }
  sanitizeHeaders(obj) {
    const sanitized = {};
    for (const key of Object.keys(obj)) {
      if (this.allowedHeaderNames.has(key.toLowerCase())) {
        sanitized[key] = obj[key];
      } else {
        sanitized[key] = RedactedString;
      }
    }
    return sanitized;
  }
  sanitizeQuery(value) {
    if (typeof value !== "object" || value === null) {
      return value;
    }
    const sanitized = {};
    for (const k of Object.keys(value)) {
      if (this.allowedQueryParameters.has(k.toLowerCase())) {
        sanitized[k] = value[k];
      } else {
        sanitized[k] = RedactedString;
      }
    }
    return sanitized;
  }
}
const logPolicyName = "logPolicy";
function logPolicy(options = {}) {
  var _a2;
  const logger2 = (_a2 = options.logger) !== null && _a2 !== void 0 ? _a2 : logger$2.info;
  const sanitizer = new Sanitizer({
    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,
    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters
  });
  return {
    name: logPolicyName,
    async sendRequest(request2, next) {
      if (!logger2.enabled) {
        return next(request2);
      }
      logger2(`Request: ${sanitizer.sanitize(request2)}`);
      const response = await next(request2);
      logger2(`Response status code: ${response.status}`);
      logger2(`Headers: ${sanitizer.sanitize(response.headers)}`);
      return response;
    }
  };
}
const redirectPolicyName = "redirectPolicy";
const allowedRedirect = ["GET", "HEAD"];
function redirectPolicy(options = {}) {
  const { maxRetries = 20 } = options;
  return {
    name: redirectPolicyName,
    async sendRequest(request2, next) {
      const response = await next(request2);
      return handleRedirect(next, response, maxRetries);
    }
  };
}
async function handleRedirect(next, response, maxRetries, currentRetries = 0) {
  const { request: request2, status, headers } = response;
  const locationHeader = headers.get("location");
  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request2.method) || status === 302 && allowedRedirect.includes(request2.method) || status === 303 && request2.method === "POST" || status === 307) && currentRetries < maxRetries) {
    const url2 = new URL(locationHeader, request2.url);
    request2.url = url2.toString();
    if (status === 303) {
      request2.method = "GET";
      request2.headers.delete("Content-Length");
      delete request2.body;
    }
    request2.headers.delete("Authorization");
    const res = await next(request2);
    return handleRedirect(next, res, maxRetries, currentRetries + 1);
  }
  return response;
}
function getHeaderName() {
  return "x-ms-useragent";
}
function getBrowserInfo(userAgent) {
  const browserRegexes = [
    { name: "Firefox", regex: /Firefox\/([\d.]+)/ },
    { name: "Safari", regex: /Version\/([\d.]+).*Safari/ }
  ];
  for (const browser of browserRegexes) {
    const match = userAgent.match(browser.regex);
    if (match) {
      return { brand: browser.name, version: match[1] };
    }
  }
  return void 0;
}
function getBrandVersionString(brands) {
  const brandOrder = ["Google Chrome", "Microsoft Edge", "Opera", "Brave", "Chromium"];
  for (const brand of brandOrder) {
    const foundBrand = brands.find((b) => b.brand === brand);
    if (foundBrand) {
      return foundBrand;
    }
  }
  return void 0;
}
async function setPlatformSpecificData(map2) {
  const localNavigator = globalThis.navigator;
  let osPlatform = "unknown";
  if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.userAgentData) {
    const entropyValues = await localNavigator.userAgentData.getHighEntropyValues([
      "architecture",
      "platformVersion"
    ]);
    osPlatform = `${entropyValues.architecture}-${entropyValues.platform}-${entropyValues.platformVersion}`;
    const brand = getBrandVersionString(localNavigator.userAgentData.brands);
    if (brand) {
      map2.set(brand.brand, brand.version);
    }
  } else if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.platform) {
    osPlatform = localNavigator.platform;
    const brand = getBrowserInfo(localNavigator.userAgent);
    if (brand) {
      map2.set(brand.brand, brand.version);
    }
  } else if (typeof globalThis.EdgeRuntime === "string") {
    map2.set("EdgeRuntime", globalThis.EdgeRuntime);
  }
  map2.set("OS", osPlatform);
}
const SDK_VERSION$1 = "1.19.1";
const DEFAULT_RETRY_POLICY_COUNT = 3;
function getUserAgentString(telemetryInfo) {
  const parts2 = [];
  for (const [key, value] of telemetryInfo) {
    const token = value ? `${key}/${value}` : key;
    parts2.push(token);
  }
  return parts2.join(" ");
}
function getUserAgentHeaderName() {
  return getHeaderName();
}
async function getUserAgentValue(prefix2) {
  const runtimeInfo = /* @__PURE__ */ new Map();
  runtimeInfo.set("core-rest-pipeline", SDK_VERSION$1);
  await setPlatformSpecificData(runtimeInfo);
  const defaultAgent = getUserAgentString(runtimeInfo);
  const userAgentValue = prefix2 ? `${prefix2} ${defaultAgent}` : defaultAgent;
  return userAgentValue;
}
const UserAgentHeaderName = getUserAgentHeaderName();
const userAgentPolicyName = "userAgentPolicy";
function userAgentPolicy(options = {}) {
  const userAgentValue = getUserAgentValue(options.userAgentPrefix);
  return {
    name: userAgentPolicyName,
    async sendRequest(request2, next) {
      if (!request2.headers.has(UserAgentHeaderName)) {
        request2.headers.set(UserAgentHeaderName, await userAgentValue);
      }
      return next(request2);
    }
  };
}
function isNodeReadableStream(x) {
  return Boolean(x && typeof x["pipe"] === "function");
}
function isWebReadableStream(x) {
  return Boolean(x && typeof x.getReader === "function" && typeof x.tee === "function");
}
function isBlob$1(x) {
  return typeof x.stream === "function";
}
const rawContent = Symbol("rawContent");
function hasRawContent(x) {
  return typeof x[rawContent] === "function";
}
function getRawContent(blob) {
  if (hasRawContent(blob)) {
    return blob[rawContent]();
  } else {
    return blob.stream();
  }
}
function drain(stream) {
  return new Response(stream).blob();
}
async function toBlobPart(source) {
  if (source instanceof Blob || source instanceof Uint8Array) {
    return source;
  }
  if (isWebReadableStream(source)) {
    return drain(source);
  }
  const rawContent2 = getRawContent(source);
  if (isNodeReadableStream(rawContent2)) {
    throw new Error("Encountered unexpected type. In the browser, `concat` supports Web ReadableStream, Blob, Uint8Array, and files created using `createFile` only.");
  }
  return toBlobPart(rawContent2);
}
async function concat(sources) {
  const parts2 = [];
  for (const source of sources) {
    parts2.push(await toBlobPart(typeof source === "function" ? source() : source));
  }
  return new Blob(parts2);
}
function generateBoundary() {
  return `----AzSDKFormBoundary${randomUUID()}`;
}
function encodeHeaders(headers) {
  let result = "";
  for (const [key, value] of headers) {
    result += `${key}: ${value}\r
`;
  }
  return result;
}
function getLength(source) {
  if (source instanceof Uint8Array) {
    return source.byteLength;
  } else if (isBlob$1(source)) {
    return source.size === -1 ? void 0 : source.size;
  } else {
    return void 0;
  }
}
function getTotalLength(sources) {
  let total = 0;
  for (const source of sources) {
    const partLength = getLength(source);
    if (partLength === void 0) {
      return void 0;
    } else {
      total += partLength;
    }
  }
  return total;
}
async function buildRequestBody$1(request2, parts2, boundary) {
  const sources = [
    stringToUint8Array(`--${boundary}`, "utf-8"),
    ...parts2.flatMap((part) => [
      stringToUint8Array("\r\n", "utf-8"),
      stringToUint8Array(encodeHeaders(part.headers), "utf-8"),
      stringToUint8Array("\r\n", "utf-8"),
      part.body,
      stringToUint8Array(`\r
--${boundary}`, "utf-8")
    ]),
    stringToUint8Array("--\r\n\r\n", "utf-8")
  ];
  const contentLength2 = getTotalLength(sources);
  if (contentLength2) {
    request2.headers.set("Content-Length", contentLength2);
  }
  request2.body = await concat(sources);
}
const multipartPolicyName = "multipartPolicy";
const maxBoundaryLength = 70;
const validBoundaryCharacters = new Set(`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?`);
function assertValidBoundary(boundary) {
  if (boundary.length > maxBoundaryLength) {
    throw new Error(`Multipart boundary "${boundary}" exceeds maximum length of 70 characters`);
  }
  if (Array.from(boundary).some((x) => !validBoundaryCharacters.has(x))) {
    throw new Error(`Multipart boundary "${boundary}" contains invalid characters`);
  }
}
function multipartPolicy() {
  return {
    name: multipartPolicyName,
    async sendRequest(request2, next) {
      var _a2;
      if (!request2.multipartBody) {
        return next(request2);
      }
      if (request2.body) {
        throw new Error("multipartBody and regular body cannot be set at the same time");
      }
      let boundary = request2.multipartBody.boundary;
      const contentTypeHeader = (_a2 = request2.headers.get("Content-Type")) !== null && _a2 !== void 0 ? _a2 : "multipart/mixed";
      const parsedHeader = contentTypeHeader.match(/^(multipart\/[^ ;]+)(?:; *boundary=(.+))?$/);
      if (!parsedHeader) {
        throw new Error(`Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`);
      }
      const [, contentType2, parsedBoundary] = parsedHeader;
      if (parsedBoundary && boundary && parsedBoundary !== boundary) {
        throw new Error(`Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`);
      }
      boundary !== null && boundary !== void 0 ? boundary : boundary = parsedBoundary;
      if (boundary) {
        assertValidBoundary(boundary);
      } else {
        boundary = generateBoundary();
      }
      request2.headers.set("Content-Type", `${contentType2}; boundary=${boundary}`);
      await buildRequestBody$1(request2, request2.multipartBody.parts, boundary);
      request2.multipartBody = void 0;
      return next(request2);
    }
  };
}
const decompressResponsePolicyName = "decompressResponsePolicy";
function decompressResponsePolicy() {
  throw new Error("decompressResponsePolicy is not supported in browser environment");
}
const StandardAbortMessage = "The operation was aborted.";
function delay$1(delayInMs, value, options) {
  return new Promise((resolve, reject) => {
    let timer = void 0;
    let onAborted = void 0;
    const rejectOnAbort = () => {
      return reject(new AbortError((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage));
    };
    const removeListeners = () => {
      if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {
        options.abortSignal.removeEventListener("abort", onAborted);
      }
    };
    onAborted = () => {
      if (timer) {
        clearTimeout(timer);
      }
      removeListeners();
      return rejectOnAbort();
    };
    if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {
      return rejectOnAbort();
    }
    timer = setTimeout(() => {
      removeListeners();
      resolve(value);
    }, delayInMs);
    if (options === null || options === void 0 ? void 0 : options.abortSignal) {
      options.abortSignal.addEventListener("abort", onAborted);
    }
  });
}
function parseHeaderValueAsNumber(response, headerName) {
  const value = response.headers.get(headerName);
  if (!value)
    return;
  const valueAsNum = Number(value);
  if (Number.isNaN(valueAsNum))
    return;
  return valueAsNum;
}
const RetryAfterHeader = "Retry-After";
const AllRetryAfterHeaders = ["retry-after-ms", "x-ms-retry-after-ms", RetryAfterHeader];
function getRetryAfterInMs(response) {
  if (!(response && [429, 503].includes(response.status)))
    return void 0;
  try {
    for (const header of AllRetryAfterHeaders) {
      const retryAfterValue = parseHeaderValueAsNumber(response, header);
      if (retryAfterValue === 0 || retryAfterValue) {
        const multiplyingFactor = header === RetryAfterHeader ? 1e3 : 1;
        return retryAfterValue * multiplyingFactor;
      }
    }
    const retryAfterHeader = response.headers.get(RetryAfterHeader);
    if (!retryAfterHeader)
      return;
    const date = Date.parse(retryAfterHeader);
    const diff = date - Date.now();
    return Number.isFinite(diff) ? Math.max(0, diff) : void 0;
  } catch (_a2) {
    return void 0;
  }
}
function isThrottlingRetryResponse(response) {
  return Number.isFinite(getRetryAfterInMs(response));
}
function throttlingRetryStrategy() {
  return {
    name: "throttlingRetryStrategy",
    retry({ response }) {
      const retryAfterInMs = getRetryAfterInMs(response);
      if (!Number.isFinite(retryAfterInMs)) {
        return { skipStrategy: true };
      }
      return {
        retryAfterInMs
      };
    }
  };
}
const DEFAULT_CLIENT_RETRY_INTERVAL = 1e3;
const DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1e3 * 64;
function exponentialRetryStrategy(options = {}) {
  var _a2, _b2;
  const retryInterval = (_a2 = options.retryDelayInMs) !== null && _a2 !== void 0 ? _a2 : DEFAULT_CLIENT_RETRY_INTERVAL;
  const maxRetryInterval = (_b2 = options.maxRetryDelayInMs) !== null && _b2 !== void 0 ? _b2 : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;
  return {
    name: "exponentialRetryStrategy",
    retry({ retryCount, response, responseError }) {
      const matchedSystemError = isSystemError(responseError);
      const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;
      const isExponential = isExponentialRetryResponse(response);
      const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;
      const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);
      if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {
        return { skipStrategy: true };
      }
      if (responseError && !matchedSystemError && !isExponential) {
        return { errorToThrow: responseError };
      }
      return calculateRetryDelay(retryCount, {
        retryDelayInMs: retryInterval,
        maxRetryDelayInMs: maxRetryInterval
      });
    }
  };
}
function isExponentialRetryResponse(response) {
  return Boolean(response && response.status !== void 0 && (response.status >= 500 || response.status === 408) && response.status !== 501 && response.status !== 505);
}
function isSystemError(err) {
  if (!err) {
    return false;
  }
  return err.code === "ETIMEDOUT" || err.code === "ESOCKETTIMEDOUT" || err.code === "ECONNREFUSED" || err.code === "ECONNRESET" || err.code === "ENOENT" || err.code === "ENOTFOUND";
}
const retryPolicyLogger = createClientLogger("core-rest-pipeline retryPolicy");
const retryPolicyName = "retryPolicy";
function retryPolicy(strategies, options = { maxRetries: DEFAULT_RETRY_POLICY_COUNT }) {
  const logger2 = options.logger || retryPolicyLogger;
  return {
    name: retryPolicyName,
    async sendRequest(request2, next) {
      var _a2, _b2;
      let response;
      let responseError;
      let retryCount = -1;
      retryRequest: while (true) {
        retryCount += 1;
        response = void 0;
        responseError = void 0;
        try {
          logger2.info(`Retry ${retryCount}: Attempting to send request`, request2.requestId);
          response = await next(request2);
          logger2.info(`Retry ${retryCount}: Received a response from request`, request2.requestId);
        } catch (e2) {
          logger2.error(`Retry ${retryCount}: Received an error from request`, request2.requestId);
          responseError = e2;
          if (!e2 || responseError.name !== "RestError") {
            throw e2;
          }
          response = responseError.response;
        }
        if ((_a2 = request2.abortSignal) === null || _a2 === void 0 ? void 0 : _a2.aborted) {
          logger2.error(`Retry ${retryCount}: Request aborted.`);
          const abortError = new AbortError();
          throw abortError;
        }
        if (retryCount >= ((_b2 = options.maxRetries) !== null && _b2 !== void 0 ? _b2 : DEFAULT_RETRY_POLICY_COUNT)) {
          logger2.info(`Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`);
          if (responseError) {
            throw responseError;
          } else if (response) {
            return response;
          } else {
            throw new Error("Maximum retries reached with no response or error to throw");
          }
        }
        logger2.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);
        strategiesLoop: for (const strategy of strategies) {
          const strategyLogger = strategy.logger || retryPolicyLogger;
          strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);
          const modifiers = strategy.retry({
            retryCount,
            response,
            responseError
          });
          if (modifiers.skipStrategy) {
            strategyLogger.info(`Retry ${retryCount}: Skipped.`);
            continue strategiesLoop;
          }
          const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;
          if (errorToThrow) {
            strategyLogger.error(`Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`, errorToThrow);
            throw errorToThrow;
          }
          if (retryAfterInMs || retryAfterInMs === 0) {
            strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`);
            await delay$1(retryAfterInMs, void 0, { abortSignal: request2.abortSignal });
            continue retryRequest;
          }
          if (redirectTo) {
            strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`);
            request2.url = redirectTo;
            continue retryRequest;
          }
        }
        if (responseError) {
          logger2.info(`None of the retry strategies could work with the received error. Throwing it.`);
          throw responseError;
        }
        if (response) {
          logger2.info(`None of the retry strategies could work with the received response. Returning it.`);
          return response;
        }
      }
    }
  };
}
const defaultRetryPolicyName = "defaultRetryPolicy";
function defaultRetryPolicy(options = {}) {
  var _a2;
  return {
    name: defaultRetryPolicyName,
    sendRequest: retryPolicy([throttlingRetryStrategy(), exponentialRetryStrategy(options)], {
      maxRetries: (_a2 = options.maxRetries) !== null && _a2 !== void 0 ? _a2 : DEFAULT_RETRY_POLICY_COUNT
    }).sendRequest
  };
}
function normalizeName(name) {
  return name.toLowerCase();
}
function* headerIterator(map2) {
  for (const entry of map2.values()) {
    yield [entry.name, entry.value];
  }
}
class HttpHeadersImpl {
  constructor(rawHeaders) {
    this._headersMap = /* @__PURE__ */ new Map();
    if (rawHeaders) {
      for (const headerName of Object.keys(rawHeaders)) {
        this.set(headerName, rawHeaders[headerName]);
      }
    }
  }
  /**
   * Set a header in this collection with the provided name and value. The name is
   * case-insensitive.
   * @param name - The name of the header to set. This value is case-insensitive.
   * @param value - The value of the header to set.
   */
  set(name, value) {
    this._headersMap.set(normalizeName(name), { name, value: String(value).trim() });
  }
  /**
   * Get the header value for the provided header name, or undefined if no header exists in this
   * collection with the provided name.
   * @param name - The name of the header. This value is case-insensitive.
   */
  get(name) {
    var _a2;
    return (_a2 = this._headersMap.get(normalizeName(name))) === null || _a2 === void 0 ? void 0 : _a2.value;
  }
  /**
   * Get whether or not this header collection contains a header entry for the provided header name.
   * @param name - The name of the header to set. This value is case-insensitive.
   */
  has(name) {
    return this._headersMap.has(normalizeName(name));
  }
  /**
   * Remove the header with the provided headerName.
   * @param name - The name of the header to remove.
   */
  delete(name) {
    this._headersMap.delete(normalizeName(name));
  }
  /**
   * Get the JSON object representation of this HTTP header collection.
   */
  toJSON(options = {}) {
    const result = {};
    if (options.preserveCase) {
      for (const entry of this._headersMap.values()) {
        result[entry.name] = entry.value;
      }
    } else {
      for (const [normalizedName, entry] of this._headersMap) {
        result[normalizedName] = entry.value;
      }
    }
    return result;
  }
  /**
   * Get the string representation of this HTTP header collection.
   */
  toString() {
    return JSON.stringify(this.toJSON({ preserveCase: true }));
  }
  /**
   * Iterate over tuples of header [name, value] pairs.
   */
  [Symbol.iterator]() {
    return headerIterator(this._headersMap);
  }
}
function createHttpHeaders(rawHeaders) {
  return new HttpHeadersImpl(rawHeaders);
}
const formDataPolicyName = "formDataPolicy";
function formDataToFormDataMap(formData) {
  var _a2;
  const formDataMap = {};
  for (const [key, value] of formData.entries()) {
    (_a2 = formDataMap[key]) !== null && _a2 !== void 0 ? _a2 : formDataMap[key] = [];
    formDataMap[key].push(value);
  }
  return formDataMap;
}
function formDataPolicy() {
  return {
    name: formDataPolicyName,
    async sendRequest(request2, next) {
      if (isNodeLike && typeof FormData !== "undefined" && request2.body instanceof FormData) {
        request2.formData = formDataToFormDataMap(request2.body);
        request2.body = void 0;
      }
      if (request2.formData) {
        const contentType2 = request2.headers.get("Content-Type");
        if (contentType2 && contentType2.indexOf("application/x-www-form-urlencoded") !== -1) {
          request2.body = wwwFormUrlEncode(request2.formData);
        } else {
          await prepareFormData(request2.formData, request2);
        }
        request2.formData = void 0;
      }
      return next(request2);
    }
  };
}
function wwwFormUrlEncode(formData) {
  const urlSearchParams = new URLSearchParams();
  for (const [key, value] of Object.entries(formData)) {
    if (Array.isArray(value)) {
      for (const subValue of value) {
        urlSearchParams.append(key, subValue.toString());
      }
    } else {
      urlSearchParams.append(key, value.toString());
    }
  }
  return urlSearchParams.toString();
}
async function prepareFormData(formData, request2) {
  const contentType2 = request2.headers.get("Content-Type");
  if (contentType2 && !contentType2.startsWith("multipart/form-data")) {
    return;
  }
  request2.headers.set("Content-Type", contentType2 !== null && contentType2 !== void 0 ? contentType2 : "multipart/form-data");
  const parts2 = [];
  for (const [fieldName, values] of Object.entries(formData)) {
    for (const value of Array.isArray(values) ? values : [values]) {
      if (typeof value === "string") {
        parts2.push({
          headers: createHttpHeaders({
            "Content-Disposition": `form-data; name="${fieldName}"`
          }),
          body: stringToUint8Array(value, "utf-8")
        });
      } else if (value === void 0 || value === null || typeof value !== "object") {
        throw new Error(`Unexpected value for key ${fieldName}: ${value}. Value should be serialized to string first.`);
      } else {
        const fileName = value.name || "blob";
        const headers = createHttpHeaders();
        headers.set("Content-Disposition", `form-data; name="${fieldName}"; filename="${fileName}"`);
        headers.set("Content-Type", value.type || "application/octet-stream");
        parts2.push({
          headers,
          body: value
        });
      }
    }
  }
  request2.multipartBody = { parts: parts2 };
}
const errorMessage = "proxyPolicy is not supported in browser environment";
function getDefaultProxySettings() {
  throw new Error(errorMessage);
}
function proxyPolicy() {
  throw new Error(errorMessage);
}
const setClientRequestIdPolicyName = "setClientRequestIdPolicy";
function setClientRequestIdPolicy(requestIdHeaderName = "x-ms-client-request-id") {
  return {
    name: setClientRequestIdPolicyName,
    async sendRequest(request2, next) {
      if (!request2.headers.has(requestIdHeaderName)) {
        request2.headers.set(requestIdHeaderName, request2.requestId);
      }
      return next(request2);
    }
  };
}
const agentPolicyName = "agentPolicy";
function agentPolicy(agent) {
  return {
    name: agentPolicyName,
    sendRequest: async (req, next) => {
      if (!req.agent) {
        req.agent = agent;
      }
      return next(req);
    }
  };
}
const tlsPolicyName = "tlsPolicy";
function tlsPolicy(tlsSettings) {
  return {
    name: tlsPolicyName,
    sendRequest: async (req, next) => {
      if (!req.tlsSettings) {
        req.tlsSettings = tlsSettings;
      }
      return next(req);
    }
  };
}
const knownContextKeys = {
  span: Symbol.for("@azure/core-tracing span"),
  namespace: Symbol.for("@azure/core-tracing namespace")
};
function createTracingContext(options = {}) {
  let context2 = new TracingContextImpl(options.parentContext);
  if (options.span) {
    context2 = context2.setValue(knownContextKeys.span, options.span);
  }
  if (options.namespace) {
    context2 = context2.setValue(knownContextKeys.namespace, options.namespace);
  }
  return context2;
}
class TracingContextImpl {
  constructor(initialContext) {
    this._contextMap = initialContext instanceof TracingContextImpl ? new Map(initialContext._contextMap) : /* @__PURE__ */ new Map();
  }
  setValue(key, value) {
    const newContext = new TracingContextImpl(this);
    newContext._contextMap.set(key, value);
    return newContext;
  }
  getValue(key) {
    return this._contextMap.get(key);
  }
  deleteValue(key) {
    const newContext = new TracingContextImpl(this);
    newContext._contextMap.delete(key);
    return newContext;
  }
}
const state$1 = {
  instrumenterImplementation: void 0
};
function createDefaultTracingSpan() {
  return {
    end: () => {
    },
    isRecording: () => false,
    recordException: () => {
    },
    setAttribute: () => {
    },
    setStatus: () => {
    },
    addEvent: () => {
    }
  };
}
function createDefaultInstrumenter() {
  return {
    createRequestHeaders: () => {
      return {};
    },
    parseTraceparentHeader: () => {
      return void 0;
    },
    startSpan: (_name, spanOptions) => {
      return {
        span: createDefaultTracingSpan(),
        tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext })
      };
    },
    withContext(_context, callback, ...callbackArgs) {
      return callback(...callbackArgs);
    }
  };
}
function getInstrumenter() {
  if (!state$1.instrumenterImplementation) {
    state$1.instrumenterImplementation = createDefaultInstrumenter();
  }
  return state$1.instrumenterImplementation;
}
function createTracingClient(options) {
  const { namespace, packageName, packageVersion } = options;
  function startSpan(name, operationOptions, spanOptions) {
    var _a2;
    const startSpanResult = getInstrumenter().startSpan(name, Object.assign(Object.assign({}, spanOptions), { packageName, packageVersion, tracingContext: (_a2 = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a2 === void 0 ? void 0 : _a2.tracingContext }));
    let tracingContext = startSpanResult.tracingContext;
    const span = startSpanResult.span;
    if (!tracingContext.getValue(knownContextKeys.namespace)) {
      tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);
    }
    span.setAttribute("az.namespace", tracingContext.getValue(knownContextKeys.namespace));
    const updatedOptions = Object.assign({}, operationOptions, {
      tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { tracingContext })
    });
    return {
      span,
      updatedOptions
    };
  }
  async function withSpan(name, operationOptions, callback, spanOptions) {
    const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);
    try {
      const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));
      span.setStatus({ status: "success" });
      return result;
    } catch (err) {
      span.setStatus({ status: "error", error: err });
      throw err;
    } finally {
      span.end();
    }
  }
  function withContext(context2, callback, ...callbackArgs) {
    return getInstrumenter().withContext(context2, callback, ...callbackArgs);
  }
  function parseTraceparentHeader(traceparentHeader) {
    return getInstrumenter().parseTraceparentHeader(traceparentHeader);
  }
  function createRequestHeaders(tracingContext) {
    return getInstrumenter().createRequestHeaders(tracingContext);
  }
  return {
    startSpan,
    withSpan,
    withContext,
    parseTraceparentHeader,
    createRequestHeaders
  };
}
const custom = {};
const errorSanitizer = new Sanitizer();
class RestError extends Error {
  constructor(message, options = {}) {
    super(message);
    this.name = "RestError";
    this.code = options.code;
    this.statusCode = options.statusCode;
    Object.defineProperty(this, "request", { value: options.request, enumerable: false });
    Object.defineProperty(this, "response", { value: options.response, enumerable: false });
    Object.setPrototypeOf(this, RestError.prototype);
  }
  /**
   * Logging method for util.inspect in Node
   */
  [custom]() {
    return `RestError: ${this.message} 
 ${errorSanitizer.sanitize(Object.assign(Object.assign({}, this), { request: this.request, response: this.response }))}`;
  }
}
RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
RestError.PARSE_ERROR = "PARSE_ERROR";
function isRestError(e2) {
  if (e2 instanceof RestError) {
    return true;
  }
  return isError(e2) && e2.name === "RestError";
}
const tracingPolicyName = "tracingPolicy";
function tracingPolicy(options = {}) {
  const userAgentPromise = getUserAgentValue(options.userAgentPrefix);
  const sanitizer = new Sanitizer({
    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters
  });
  const tracingClient2 = tryCreateTracingClient();
  return {
    name: tracingPolicyName,
    async sendRequest(request2, next) {
      var _a2;
      if (!tracingClient2) {
        return next(request2);
      }
      const userAgent = await userAgentPromise;
      const spanAttributes = {
        "http.url": sanitizer.sanitizeUrl(request2.url),
        "http.method": request2.method,
        "http.user_agent": userAgent,
        requestId: request2.requestId
      };
      if (userAgent) {
        spanAttributes["http.user_agent"] = userAgent;
      }
      const { span, tracingContext } = (_a2 = tryCreateSpan(tracingClient2, request2, spanAttributes)) !== null && _a2 !== void 0 ? _a2 : {};
      if (!span || !tracingContext) {
        return next(request2);
      }
      try {
        const response = await tracingClient2.withContext(tracingContext, next, request2);
        tryProcessResponse(span, response);
        return response;
      } catch (err) {
        tryProcessError(span, err);
        throw err;
      }
    }
  };
}
function tryCreateTracingClient() {
  try {
    return createTracingClient({
      namespace: "",
      packageName: "@azure/core-rest-pipeline",
      packageVersion: SDK_VERSION$1
    });
  } catch (e2) {
    logger$2.warning(`Error when creating the TracingClient: ${getErrorMessage(e2)}`);
    return void 0;
  }
}
function tryCreateSpan(tracingClient2, request2, spanAttributes) {
  try {
    const { span, updatedOptions } = tracingClient2.startSpan(`HTTP ${request2.method}`, { tracingOptions: request2.tracingOptions }, {
      spanKind: "client",
      spanAttributes
    });
    if (!span.isRecording()) {
      span.end();
      return void 0;
    }
    const headers = tracingClient2.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);
    for (const [key, value] of Object.entries(headers)) {
      request2.headers.set(key, value);
    }
    return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };
  } catch (e2) {
    logger$2.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e2)}`);
    return void 0;
  }
}
function tryProcessError(span, error) {
  try {
    span.setStatus({
      status: "error",
      error: isError(error) ? error : void 0
    });
    if (isRestError(error) && error.statusCode) {
      span.setAttribute("http.status_code", error.statusCode);
    }
    span.end();
  } catch (e2) {
    logger$2.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e2)}`);
  }
}
function tryProcessResponse(span, response) {
  try {
    span.setAttribute("http.status_code", response.status);
    const serviceRequestId = response.headers.get("x-ms-request-id");
    if (serviceRequestId) {
      span.setAttribute("serviceRequestId", serviceRequestId);
    }
    if (response.status >= 400) {
      span.setStatus({
        status: "error"
      });
    }
    span.end();
  } catch (e2) {
    logger$2.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e2)}`);
  }
}
function createPipelineFromOptions(options) {
  var _a2;
  const pipeline = createEmptyPipeline();
  if (isNodeLike) {
    if (options.agent) {
      pipeline.addPolicy(agentPolicy(options.agent));
    }
    if (options.tlsOptions) {
      pipeline.addPolicy(tlsPolicy(options.tlsOptions));
    }
    pipeline.addPolicy(proxyPolicy(options.proxyOptions));
    pipeline.addPolicy(decompressResponsePolicy());
  }
  pipeline.addPolicy(formDataPolicy(), { beforePolicies: [multipartPolicyName] });
  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));
  pipeline.addPolicy(setClientRequestIdPolicy((_a2 = options.telemetryOptions) === null || _a2 === void 0 ? void 0 : _a2.clientRequestIdHeaderName));
  pipeline.addPolicy(multipartPolicy(), { afterPhase: "Deserialize" });
  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: "Retry" });
  pipeline.addPolicy(tracingPolicy(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {
    afterPhase: "Retry"
  });
  if (isNodeLike) {
    pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: "Retry" });
  }
  pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: "Sign" });
  return pipeline;
}
function isBlob(body2) {
  return (typeof Blob === "function" || typeof Blob === "object") && body2 instanceof Blob;
}
class FetchHttpClient {
  /**
   * Makes a request over an underlying transport layer and returns the response.
   * @param request - The request to be made.
   */
  async sendRequest(request2) {
    const url2 = new URL(request2.url);
    const isInsecure = url2.protocol !== "https:";
    if (isInsecure && !request2.allowInsecureConnection) {
      throw new Error(`Cannot connect to ${request2.url} while allowInsecureConnection is false.`);
    }
    if (request2.proxySettings) {
      throw new Error("HTTP proxy is not supported in browser environment");
    }
    try {
      return await makeRequest(request2);
    } catch (e2) {
      throw getError(e2, request2);
    }
  }
}
async function makeRequest(request2) {
  const { abortController, abortControllerCleanup } = setupAbortSignal(request2);
  try {
    const headers = buildFetchHeaders(request2.headers);
    const { streaming, body: requestBody } = buildRequestBody(request2);
    const requestInit = Object.assign(Object.assign({ body: requestBody, method: request2.method, headers, signal: abortController.signal }, "credentials" in Request.prototype ? { credentials: request2.withCredentials ? "include" : "same-origin" } : {}), "cache" in Request.prototype ? { cache: "no-store" } : {});
    if (streaming) {
      requestInit.duplex = "half";
    }
    const response = await fetch(request2.url, requestInit);
    if (isBlob(request2.body) && request2.onUploadProgress) {
      request2.onUploadProgress({ loadedBytes: request2.body.size });
    }
    return buildPipelineResponse(response, request2, abortControllerCleanup);
  } catch (e2) {
    abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();
    throw e2;
  }
}
async function buildPipelineResponse(httpResponse, request2, abortControllerCleanup) {
  var _a2, _b2;
  const headers = buildPipelineHeaders(httpResponse);
  const response = {
    request: request2,
    headers,
    status: httpResponse.status
  };
  const bodyStream = isWebReadableStream(httpResponse.body) ? buildBodyStream(httpResponse.body, {
    onProgress: request2.onDownloadProgress,
    onEnd: abortControllerCleanup
  }) : httpResponse.body;
  if (
    // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code
    ((_a2 = request2.streamResponseStatusCodes) === null || _a2 === void 0 ? void 0 : _a2.has(Number.POSITIVE_INFINITY)) || ((_b2 = request2.streamResponseStatusCodes) === null || _b2 === void 0 ? void 0 : _b2.has(response.status))
  ) {
    if (request2.enableBrowserStreams) {
      response.browserStreamBody = bodyStream !== null && bodyStream !== void 0 ? bodyStream : void 0;
    } else {
      const responseStream = new Response(bodyStream);
      response.blobBody = responseStream.blob();
      abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();
    }
  } else {
    const responseStream = new Response(bodyStream);
    response.bodyAsText = await responseStream.text();
    abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();
  }
  return response;
}
function setupAbortSignal(request2) {
  const abortController = new AbortController();
  let abortControllerCleanup;
  let abortListener;
  if (request2.abortSignal) {
    if (request2.abortSignal.aborted) {
      throw new AbortError("The operation was aborted. Request has already been canceled.");
    }
    abortListener = (event) => {
      if (event.type === "abort") {
        abortController.abort();
      }
    };
    request2.abortSignal.addEventListener("abort", abortListener);
    abortControllerCleanup = () => {
      var _a2;
      if (abortListener) {
        (_a2 = request2.abortSignal) === null || _a2 === void 0 ? void 0 : _a2.removeEventListener("abort", abortListener);
      }
    };
  }
  if (request2.timeout > 0) {
    setTimeout(() => {
      abortController.abort();
    }, request2.timeout);
  }
  return { abortController, abortControllerCleanup };
}
function getError(e2, request2) {
  var _a2;
  if (e2 && (e2 === null || e2 === void 0 ? void 0 : e2.name) === "AbortError") {
    return e2;
  } else {
    return new RestError(`Error sending request: ${e2.message}`, {
      code: (_a2 = e2 === null || e2 === void 0 ? void 0 : e2.code) !== null && _a2 !== void 0 ? _a2 : RestError.REQUEST_SEND_ERROR,
      request: request2
    });
  }
}
function buildFetchHeaders(pipelineHeaders) {
  const headers = new Headers();
  for (const [name, value] of pipelineHeaders) {
    headers.append(name, value);
  }
  return headers;
}
function buildPipelineHeaders(httpResponse) {
  const responseHeaders = createHttpHeaders();
  for (const [name, value] of httpResponse.headers) {
    responseHeaders.set(name, value);
  }
  return responseHeaders;
}
function buildRequestBody(request2) {
  const body2 = typeof request2.body === "function" ? request2.body() : request2.body;
  if (isNodeReadableStream(body2)) {
    throw new Error("Node streams are not supported in browser environment.");
  }
  return isWebReadableStream(body2) ? { streaming: true, body: buildBodyStream(body2, { onProgress: request2.onUploadProgress }) } : { streaming: false, body: body2 };
}
function buildBodyStream(readableStream, options = {}) {
  let loadedBytes = 0;
  const { onProgress, onEnd } = options;
  if (isTransformStreamSupported(readableStream)) {
    return readableStream.pipeThrough(new TransformStream({
      transform(chunk, controller) {
        if (chunk === null) {
          controller.terminate();
          return;
        }
        controller.enqueue(chunk);
        loadedBytes += chunk.length;
        if (onProgress) {
          onProgress({ loadedBytes });
        }
      },
      flush() {
        onEnd === null || onEnd === void 0 ? void 0 : onEnd();
      }
    }));
  } else {
    const reader = readableStream.getReader();
    return new ReadableStream({
      async pull(controller) {
        var _a2;
        const { done, value } = await reader.read();
        if (done || !value) {
          onEnd === null || onEnd === void 0 ? void 0 : onEnd();
          controller.close();
          reader.releaseLock();
          return;
        }
        loadedBytes += (_a2 = value === null || value === void 0 ? void 0 : value.length) !== null && _a2 !== void 0 ? _a2 : 0;
        controller.enqueue(value);
        if (onProgress) {
          onProgress({ loadedBytes });
        }
      },
      cancel(reason) {
        onEnd === null || onEnd === void 0 ? void 0 : onEnd();
        return reader.cancel(reason);
      }
    });
  }
}
function createFetchHttpClient() {
  return new FetchHttpClient();
}
function isTransformStreamSupported(readableStream) {
  return readableStream.pipeThrough !== void 0 && self.TransformStream !== void 0;
}
function createDefaultHttpClient() {
  return createFetchHttpClient();
}
class PipelineRequestImpl {
  constructor(options) {
    var _a2, _b2, _c2, _d2, _e, _f, _g;
    this.url = options.url;
    this.body = options.body;
    this.headers = (_a2 = options.headers) !== null && _a2 !== void 0 ? _a2 : createHttpHeaders();
    this.method = (_b2 = options.method) !== null && _b2 !== void 0 ? _b2 : "GET";
    this.timeout = (_c2 = options.timeout) !== null && _c2 !== void 0 ? _c2 : 0;
    this.multipartBody = options.multipartBody;
    this.formData = options.formData;
    this.disableKeepAlive = (_d2 = options.disableKeepAlive) !== null && _d2 !== void 0 ? _d2 : false;
    this.proxySettings = options.proxySettings;
    this.streamResponseStatusCodes = options.streamResponseStatusCodes;
    this.withCredentials = (_e = options.withCredentials) !== null && _e !== void 0 ? _e : false;
    this.abortSignal = options.abortSignal;
    this.tracingOptions = options.tracingOptions;
    this.onUploadProgress = options.onUploadProgress;
    this.onDownloadProgress = options.onDownloadProgress;
    this.requestId = options.requestId || randomUUID();
    this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;
    this.enableBrowserStreams = (_g = options.enableBrowserStreams) !== null && _g !== void 0 ? _g : false;
    this.agent = options.agent;
    this.tlsSettings = options.tlsSettings;
  }
}
function createPipelineRequest(options) {
  return new PipelineRequestImpl(options);
}
const DEFAULT_CYCLER_OPTIONS = {
  forcedRefreshWindowInMs: 1e3,
  // Force waiting for a refresh 1s before the token expires
  retryIntervalInMs: 3e3,
  // Allow refresh attempts every 3s
  refreshWindowInMs: 1e3 * 60 * 2
  // Start refreshing 2m before expiry
};
async function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {
  async function tryGetAccessToken() {
    if (Date.now() < refreshTimeout) {
      try {
        return await getAccessToken();
      } catch (_a2) {
        return null;
      }
    } else {
      const finalToken = await getAccessToken();
      if (finalToken === null) {
        throw new Error("Failed to refresh access token.");
      }
      return finalToken;
    }
  }
  let token = await tryGetAccessToken();
  while (token === null) {
    await delay$1(retryIntervalInMs);
    token = await tryGetAccessToken();
  }
  return token;
}
function createTokenCycler(credential, tokenCyclerOptions) {
  let refreshWorker = null;
  let token = null;
  let tenantId;
  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);
  const cycler = {
    /**
     * Produces true if a refresh job is currently in progress.
     */
    get isRefreshing() {
      return refreshWorker !== null;
    },
    /**
     * Produces true if the cycler SHOULD refresh (we are within the refresh
     * window and not already refreshing)
     */
    get shouldRefresh() {
      var _a2;
      if (cycler.isRefreshing) {
        return false;
      }
      if ((token === null || token === void 0 ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) {
        return true;
      }
      return ((_a2 = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a2 !== void 0 ? _a2 : 0) - options.refreshWindowInMs < Date.now();
    },
    /**
     * Produces true if the cycler MUST refresh (null or nearly-expired
     * token).
     */
    get mustRefresh() {
      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();
    }
  };
  function refresh(scopes, getTokenOptions) {
    var _a2;
    if (!cycler.isRefreshing) {
      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);
      refreshWorker = beginRefresh(
        tryGetAccessToken,
        options.retryIntervalInMs,
        // If we don't have a token, then we should timeout immediately
        (_a2 = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a2 !== void 0 ? _a2 : Date.now()
      ).then((_token) => {
        refreshWorker = null;
        token = _token;
        tenantId = getTokenOptions.tenantId;
        return token;
      }).catch((reason) => {
        refreshWorker = null;
        token = null;
        tenantId = void 0;
        throw reason;
      });
    }
    return refreshWorker;
  }
  return async (scopes, tokenOptions) => {
    const hasClaimChallenge = Boolean(tokenOptions.claims);
    const tenantIdChanged = tenantId !== tokenOptions.tenantId;
    if (hasClaimChallenge) {
      token = null;
    }
    const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;
    if (mustRefresh) {
      return refresh(scopes, tokenOptions);
    }
    if (cycler.shouldRefresh) {
      refresh(scopes, tokenOptions);
    }
    return token;
  };
}
const bearerTokenAuthenticationPolicyName = "bearerTokenAuthenticationPolicy";
async function trySendRequest(request2, next) {
  try {
    return [await next(request2), void 0];
  } catch (e2) {
    if (isRestError(e2) && e2.response) {
      return [e2.response, e2];
    } else {
      throw e2;
    }
  }
}
async function defaultAuthorizeRequest(options) {
  const { scopes, getAccessToken, request: request2 } = options;
  const getTokenOptions = {
    abortSignal: request2.abortSignal,
    tracingOptions: request2.tracingOptions,
    enableCae: true
  };
  const accessToken = await getAccessToken(scopes, getTokenOptions);
  if (accessToken) {
    options.request.headers.set("Authorization", `Bearer ${accessToken.token}`);
  }
}
function isChallengeResponse(response) {
  return response.status === 401 && response.headers.has("WWW-Authenticate");
}
async function authorizeRequestOnCaeChallenge(onChallengeOptions, caeClaims) {
  var _a2;
  const { scopes } = onChallengeOptions;
  const accessToken = await onChallengeOptions.getAccessToken(scopes, {
    enableCae: true,
    claims: caeClaims
  });
  if (!accessToken) {
    return false;
  }
  onChallengeOptions.request.headers.set("Authorization", `${(_a2 = accessToken.tokenType) !== null && _a2 !== void 0 ? _a2 : "Bearer"} ${accessToken.token}`);
  return true;
}
function bearerTokenAuthenticationPolicy(options) {
  var _a2, _b2, _c2;
  const { credential, scopes, challengeCallbacks } = options;
  const logger2 = options.logger || logger$2;
  const callbacks = {
    authorizeRequest: (_b2 = (_a2 = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) === null || _a2 === void 0 ? void 0 : _a2.bind(challengeCallbacks)) !== null && _b2 !== void 0 ? _b2 : defaultAuthorizeRequest,
    authorizeRequestOnChallenge: (_c2 = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge) === null || _c2 === void 0 ? void 0 : _c2.bind(challengeCallbacks)
  };
  const getAccessToken = credential ? createTokenCycler(
    credential
    /* , options */
  ) : () => Promise.resolve(null);
  return {
    name: bearerTokenAuthenticationPolicyName,
    /**
     * If there's no challenge parameter:
     * - It will try to retrieve the token using the cache, or the credential's getToken.
     * - Then it will try the next policy with or without the retrieved token.
     *
     * It uses the challenge parameters to:
     * - Skip a first attempt to get the token from the credential if there's no cached token,
     *   since it expects the token to be retrievable only after the challenge.
     * - Prepare the outgoing request if the `prepareRequest` method has been provided.
     * - Send an initial request to receive the challenge if it fails.
     * - Process a challenge if the response contains it.
     * - Retrieve a token with the challenge information, then re-send the request.
     */
    async sendRequest(request2, next) {
      if (!request2.url.toLowerCase().startsWith("https://")) {
        throw new Error("Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.");
      }
      await callbacks.authorizeRequest({
        scopes: Array.isArray(scopes) ? scopes : [scopes],
        request: request2,
        getAccessToken,
        logger: logger2
      });
      let response;
      let error;
      let shouldSendRequest;
      [response, error] = await trySendRequest(request2, next);
      if (isChallengeResponse(response)) {
        let claims = getCaeChallengeClaims(response.headers.get("WWW-Authenticate"));
        if (claims) {
          let parsedClaim;
          try {
            parsedClaim = atob(claims);
          } catch (e2) {
            logger2.warning(`The WWW-Authenticate header contains "claims" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);
            return response;
          }
          shouldSendRequest = await authorizeRequestOnCaeChallenge({
            scopes: Array.isArray(scopes) ? scopes : [scopes],
            response,
            request: request2,
            getAccessToken,
            logger: logger2
          }, parsedClaim);
          if (shouldSendRequest) {
            [response, error] = await trySendRequest(request2, next);
          }
        } else if (callbacks.authorizeRequestOnChallenge) {
          shouldSendRequest = await callbacks.authorizeRequestOnChallenge({
            scopes: Array.isArray(scopes) ? scopes : [scopes],
            request: request2,
            response,
            getAccessToken,
            logger: logger2
          });
          if (shouldSendRequest) {
            [response, error] = await trySendRequest(request2, next);
          }
          if (isChallengeResponse(response)) {
            claims = getCaeChallengeClaims(response.headers.get("WWW-Authenticate"));
            if (claims) {
              let parsedClaim;
              try {
                parsedClaim = atob(claims);
              } catch (e2) {
                logger2.warning(`The WWW-Authenticate header contains "claims" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);
                return response;
              }
              shouldSendRequest = await authorizeRequestOnCaeChallenge({
                scopes: Array.isArray(scopes) ? scopes : [scopes],
                response,
                request: request2,
                getAccessToken,
                logger: logger2
              }, parsedClaim);
              if (shouldSendRequest) {
                [response, error] = await trySendRequest(request2, next);
              }
            }
          }
        }
      }
      if (error) {
        throw error;
      } else {
        return response;
      }
    }
  };
}
function parseChallenges(challenges) {
  const challengeRegex = /(\w+)\s+((?:\w+=(?:"[^"]*"|[^,]*),?\s*)+)/g;
  const paramRegex = /(\w+)="([^"]*)"/g;
  const parsedChallenges = [];
  let match;
  while ((match = challengeRegex.exec(challenges)) !== null) {
    const scheme = match[1];
    const paramsString = match[2];
    const params = {};
    let paramMatch;
    while ((paramMatch = paramRegex.exec(paramsString)) !== null) {
      params[paramMatch[1]] = paramMatch[2];
    }
    parsedChallenges.push({ scheme, params });
  }
  return parsedChallenges;
}
function getCaeChallengeClaims(challenges) {
  var _a2;
  if (!challenges) {
    return;
  }
  const parsedChallenges = parseChallenges(challenges);
  return (_a2 = parsedChallenges.find((x) => x.scheme === "Bearer" && x.params.claims && x.params.error === "insufficient_claims")) === null || _a2 === void 0 ? void 0 : _a2.params.claims;
}
function isTokenCredential(credential) {
  const castCredential = credential;
  return castCredential && typeof castCredential.getToken === "function" && (castCredential.signRequest === void 0 || castCredential.getToken.length > 0);
}
const disableKeepAlivePolicyName = "DisableKeepAlivePolicy";
function createDisableKeepAlivePolicy() {
  return {
    name: disableKeepAlivePolicyName,
    async sendRequest(request2, next) {
      request2.disableKeepAlive = true;
      return next(request2);
    }
  };
}
function pipelineContainsDisableKeepAlivePolicy(pipeline) {
  return pipeline.getOrderedPolicies().some((policy) => policy.name === disableKeepAlivePolicyName);
}
function encodeByteArray(value) {
  let str = "";
  for (let i = 0; i < value.length; i++) {
    str += String.fromCharCode(value[i]);
  }
  return btoa(str);
}
function decodeString(value) {
  const byteString = atob(value);
  const arr = new Uint8Array(byteString.length);
  for (let i = 0; i < byteString.length; i++) {
    arr[i] = byteString.charCodeAt(i);
  }
  return arr;
}
const XML_ATTRKEY$1 = "$";
const XML_CHARKEY$1 = "_";
function isPrimitiveBody(value, mapperTypeName) {
  return mapperTypeName !== "Composite" && mapperTypeName !== "Dictionary" && (typeof value === "string" || typeof value === "number" || typeof value === "boolean" || (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !== null || value === void 0 || value === null);
}
const validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function isDuration(value) {
  return validateISODuration.test(value);
}
const validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
function isValidUuid(uuid) {
  return validUuidRegex.test(uuid);
}
function handleNullableResponseAndWrappableBody(responseObject) {
  const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);
  if (responseObject.hasNullableType && Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {
    return responseObject.shouldWrapBody ? { body: null } : null;
  } else {
    return responseObject.shouldWrapBody ? Object.assign(Object.assign({}, responseObject.headers), { body: responseObject.body }) : combinedHeadersAndBody;
  }
}
function flattenResponse(fullResponse, responseSpec) {
  var _a2, _b2;
  const parsedHeaders = fullResponse.parsedHeaders;
  if (fullResponse.request.method === "HEAD") {
    return Object.assign(Object.assign({}, parsedHeaders), { body: fullResponse.parsedBody });
  }
  const bodyMapper = responseSpec && responseSpec.bodyMapper;
  const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);
  const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;
  if (expectedBodyTypeName === "Stream") {
    return Object.assign(Object.assign({}, parsedHeaders), { blobBody: fullResponse.blobBody, readableStreamBody: fullResponse.readableStreamBody });
  }
  const modelProperties = expectedBodyTypeName === "Composite" && bodyMapper.type.modelProperties || {};
  const isPageableResponse = Object.keys(modelProperties).some((k) => modelProperties[k].serializedName === "");
  if (expectedBodyTypeName === "Sequence" || isPageableResponse) {
    const arrayResponse = (_a2 = fullResponse.parsedBody) !== null && _a2 !== void 0 ? _a2 : [];
    for (const key of Object.keys(modelProperties)) {
      if (modelProperties[key].serializedName) {
        arrayResponse[key] = (_b2 = fullResponse.parsedBody) === null || _b2 === void 0 ? void 0 : _b2[key];
      }
    }
    if (parsedHeaders) {
      for (const key of Object.keys(parsedHeaders)) {
        arrayResponse[key] = parsedHeaders[key];
      }
    }
    return isNullable && !fullResponse.parsedBody && !parsedHeaders && Object.getOwnPropertyNames(modelProperties).length === 0 ? null : arrayResponse;
  }
  return handleNullableResponseAndWrappableBody({
    body: fullResponse.parsedBody,
    headers: parsedHeaders,
    hasNullableType: isNullable,
    shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName)
  });
}
class SerializerImpl {
  constructor(modelMappers = {}, isXML = false) {
    this.modelMappers = modelMappers;
    this.isXML = isXML;
  }
  /**
   * @deprecated Removing the constraints validation on client side.
   */
  validateConstraints(mapper, value, objectName) {
    const failValidation = (constraintName, constraintValue) => {
      throw new Error(`"${objectName}" with value "${value}" should satisfy the constraint "${constraintName}": ${constraintValue}.`);
    };
    if (mapper.constraints && value !== void 0 && value !== null) {
      const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems } = mapper.constraints;
      if (ExclusiveMaximum !== void 0 && value >= ExclusiveMaximum) {
        failValidation("ExclusiveMaximum", ExclusiveMaximum);
      }
      if (ExclusiveMinimum !== void 0 && value <= ExclusiveMinimum) {
        failValidation("ExclusiveMinimum", ExclusiveMinimum);
      }
      if (InclusiveMaximum !== void 0 && value > InclusiveMaximum) {
        failValidation("InclusiveMaximum", InclusiveMaximum);
      }
      if (InclusiveMinimum !== void 0 && value < InclusiveMinimum) {
        failValidation("InclusiveMinimum", InclusiveMinimum);
      }
      if (MaxItems !== void 0 && value.length > MaxItems) {
        failValidation("MaxItems", MaxItems);
      }
      if (MaxLength !== void 0 && value.length > MaxLength) {
        failValidation("MaxLength", MaxLength);
      }
      if (MinItems !== void 0 && value.length < MinItems) {
        failValidation("MinItems", MinItems);
      }
      if (MinLength !== void 0 && value.length < MinLength) {
        failValidation("MinLength", MinLength);
      }
      if (MultipleOf !== void 0 && value % MultipleOf !== 0) {
        failValidation("MultipleOf", MultipleOf);
      }
      if (Pattern) {
        const pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;
        if (typeof value !== "string" || value.match(pattern) === null) {
          failValidation("Pattern", Pattern);
        }
      }
      if (UniqueItems && value.some((item, i, ar) => ar.indexOf(item) !== i)) {
        failValidation("UniqueItems", UniqueItems);
      }
    }
  }
  /**
   * Serialize the given object based on its metadata defined in the mapper
   *
   * @param mapper - The mapper which defines the metadata of the serializable object
   *
   * @param object - A valid Javascript object to be serialized
   *
   * @param objectName - Name of the serialized object
   *
   * @param options - additional options to serialization
   *
   * @returns A valid serialized Javascript object
   */
  serialize(mapper, object, objectName, options = { xml: {} }) {
    var _a2, _b2, _c2;
    const updatedOptions = {
      xml: {
        rootName: (_a2 = options.xml.rootName) !== null && _a2 !== void 0 ? _a2 : "",
        includeRoot: (_b2 = options.xml.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
        xmlCharKey: (_c2 = options.xml.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY$1
      }
    };
    let payload = {};
    const mapperType = mapper.type.name;
    if (!objectName) {
      objectName = mapper.serializedName;
    }
    if (mapperType.match(/^Sequence$/i) !== null) {
      payload = [];
    }
    if (mapper.isConstant) {
      object = mapper.defaultValue;
    }
    const { required, nullable } = mapper;
    if (required && nullable && object === void 0) {
      throw new Error(`${objectName} cannot be undefined.`);
    }
    if (required && !nullable && (object === void 0 || object === null)) {
      throw new Error(`${objectName} cannot be null or undefined.`);
    }
    if (!required && nullable === false && object === null) {
      throw new Error(`${objectName} cannot be null.`);
    }
    if (object === void 0 || object === null) {
      payload = object;
    } else {
      if (mapperType.match(/^any$/i) !== null) {
        payload = object;
      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {
        payload = serializeBasicTypes(mapperType, objectName, object);
      } else if (mapperType.match(/^Enum$/i) !== null) {
        const enumMapper = mapper;
        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
      } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {
        payload = serializeDateTypes(mapperType, object, objectName);
      } else if (mapperType.match(/^ByteArray$/i) !== null) {
        payload = serializeByteArrayType(objectName, object);
      } else if (mapperType.match(/^Base64Url$/i) !== null) {
        payload = serializeBase64UrlType(objectName, object);
      } else if (mapperType.match(/^Sequence$/i) !== null) {
        payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      } else if (mapperType.match(/^Dictionary$/i) !== null) {
        payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      } else if (mapperType.match(/^Composite$/i) !== null) {
        payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);
      }
    }
    return payload;
  }
  /**
   * Deserialize the given object based on its metadata defined in the mapper
   *
   * @param mapper - The mapper which defines the metadata of the serializable object
   *
   * @param responseBody - A valid Javascript entity to be deserialized
   *
   * @param objectName - Name of the deserialized object
   *
   * @param options - Controls behavior of XML parser and builder.
   *
   * @returns A valid deserialized Javascript object
   */
  deserialize(mapper, responseBody, objectName, options = { xml: {} }) {
    var _a2, _b2, _c2, _d2;
    const updatedOptions = {
      xml: {
        rootName: (_a2 = options.xml.rootName) !== null && _a2 !== void 0 ? _a2 : "",
        includeRoot: (_b2 = options.xml.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
        xmlCharKey: (_c2 = options.xml.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY$1
      },
      ignoreUnknownProperties: (_d2 = options.ignoreUnknownProperties) !== null && _d2 !== void 0 ? _d2 : false
    };
    if (responseBody === void 0 || responseBody === null) {
      if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) {
        responseBody = [];
      }
      if (mapper.defaultValue !== void 0) {
        responseBody = mapper.defaultValue;
      }
      return responseBody;
    }
    let payload;
    const mapperType = mapper.type.name;
    if (!objectName) {
      objectName = mapper.serializedName;
    }
    if (mapperType.match(/^Composite$/i) !== null) {
      payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);
    } else {
      if (this.isXML) {
        const xmlCharKey = updatedOptions.xml.xmlCharKey;
        if (responseBody[XML_ATTRKEY$1] !== void 0 && responseBody[xmlCharKey] !== void 0) {
          responseBody = responseBody[xmlCharKey];
        }
      }
      if (mapperType.match(/^Number$/i) !== null) {
        payload = parseFloat(responseBody);
        if (isNaN(payload)) {
          payload = responseBody;
        }
      } else if (mapperType.match(/^Boolean$/i) !== null) {
        if (responseBody === "true") {
          payload = true;
        } else if (responseBody === "false") {
          payload = false;
        } else {
          payload = responseBody;
        }
      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {
        payload = responseBody;
      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {
        payload = new Date(responseBody);
      } else if (mapperType.match(/^UnixTime$/i) !== null) {
        payload = unixTimeToDate(responseBody);
      } else if (mapperType.match(/^ByteArray$/i) !== null) {
        payload = decodeString(responseBody);
      } else if (mapperType.match(/^Base64Url$/i) !== null) {
        payload = base64UrlToByteArray(responseBody);
      } else if (mapperType.match(/^Sequence$/i) !== null) {
        payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);
      } else if (mapperType.match(/^Dictionary$/i) !== null) {
        payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);
      }
    }
    if (mapper.isConstant) {
      payload = mapper.defaultValue;
    }
    return payload;
  }
}
function createSerializer(modelMappers = {}, isXML = false) {
  return new SerializerImpl(modelMappers, isXML);
}
function trimEnd(str, ch) {
  let len = str.length;
  while (len - 1 >= 0 && str[len - 1] === ch) {
    --len;
  }
  return str.substr(0, len);
}
function bufferToBase64Url(buffer) {
  if (!buffer) {
    return void 0;
  }
  if (!(buffer instanceof Uint8Array)) {
    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);
  }
  const str = encodeByteArray(buffer);
  return trimEnd(str, "=").replace(/\+/g, "-").replace(/\//g, "_");
}
function base64UrlToByteArray(str) {
  if (!str) {
    return void 0;
  }
  if (str && typeof str.valueOf() !== "string") {
    throw new Error("Please provide an input of type string for converting to Uint8Array");
  }
  str = str.replace(/-/g, "+").replace(/_/g, "/");
  return decodeString(str);
}
function splitSerializeName(prop) {
  const classes = [];
  let partialclass = "";
  if (prop) {
    const subwords = prop.split(".");
    for (const item of subwords) {
      if (item.charAt(item.length - 1) === "\\") {
        partialclass += item.substr(0, item.length - 1) + ".";
      } else {
        partialclass += item;
        classes.push(partialclass);
        partialclass = "";
      }
    }
  }
  return classes;
}
function dateToUnixTime(d) {
  if (!d) {
    return void 0;
  }
  if (typeof d.valueOf() === "string") {
    d = new Date(d);
  }
  return Math.floor(d.getTime() / 1e3);
}
function unixTimeToDate(n) {
  if (!n) {
    return void 0;
  }
  return new Date(n * 1e3);
}
function serializeBasicTypes(typeName, objectName, value) {
  if (value !== null && value !== void 0) {
    if (typeName.match(/^Number$/i) !== null) {
      if (typeof value !== "number") {
        throw new Error(`${objectName} with value ${value} must be of type number.`);
      }
    } else if (typeName.match(/^String$/i) !== null) {
      if (typeof value.valueOf() !== "string") {
        throw new Error(`${objectName} with value "${value}" must be of type string.`);
      }
    } else if (typeName.match(/^Uuid$/i) !== null) {
      if (!(typeof value.valueOf() === "string" && isValidUuid(value))) {
        throw new Error(`${objectName} with value "${value}" must be of type string and a valid uuid.`);
      }
    } else if (typeName.match(/^Boolean$/i) !== null) {
      if (typeof value !== "boolean") {
        throw new Error(`${objectName} with value ${value} must be of type boolean.`);
      }
    } else if (typeName.match(/^Stream$/i) !== null) {
      const objectType = typeof value;
      if (objectType !== "string" && typeof value.pipe !== "function" && // NodeJS.ReadableStream
      typeof value.tee !== "function" && // browser ReadableStream
      !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) && // File objects count as a type of Blob, so we want to use instanceof explicitly
      !((typeof Blob === "function" || typeof Blob === "object") && value instanceof Blob) && objectType !== "function") {
        throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);
      }
    }
  }
  return value;
}
function serializeEnumType(objectName, allowedValues, value) {
  if (!allowedValues) {
    throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);
  }
  const isPresent = allowedValues.some((item) => {
    if (typeof item.valueOf() === "string") {
      return item.toLowerCase() === value.toLowerCase();
    }
    return item === value;
  });
  if (!isPresent) {
    throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);
  }
  return value;
}
function serializeByteArrayType(objectName, value) {
  if (value !== void 0 && value !== null) {
    if (!(value instanceof Uint8Array)) {
      throw new Error(`${objectName} must be of type Uint8Array.`);
    }
    value = encodeByteArray(value);
  }
  return value;
}
function serializeBase64UrlType(objectName, value) {
  if (value !== void 0 && value !== null) {
    if (!(value instanceof Uint8Array)) {
      throw new Error(`${objectName} must be of type Uint8Array.`);
    }
    value = bufferToBase64Url(value);
  }
  return value;
}
function serializeDateTypes(typeName, value, objectName) {
  if (value !== void 0 && value !== null) {
    if (typeName.match(/^Date$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
      }
      value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);
    } else if (typeName.match(/^DateTime$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);
      }
      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);
      }
      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
    } else if (typeName.match(/^UnixTime$/i) !== null) {
      if (!(value instanceof Date || typeof value.valueOf() === "string" && !isNaN(Date.parse(value)))) {
        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format for it to be serialized in UnixTime/Epoch format.`);
      }
      value = dateToUnixTime(value);
    } else if (typeName.match(/^TimeSpan$/i) !== null) {
      if (!isDuration(value)) {
        throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was "${value}".`);
      }
    }
  }
  return value;
}
function serializeSequenceType(serializer2, mapper, object, objectName, isXml, options) {
  var _a2;
  if (!Array.isArray(object)) {
    throw new Error(`${objectName} must be of type Array.`);
  }
  let elementType = mapper.type.element;
  if (!elementType || typeof elementType !== "object") {
    throw new Error(`element" metadata for an Array must be defined in the mapper and it must of type "object" in ${objectName}.`);
  }
  if (elementType.type.name === "Composite" && elementType.type.className) {
    elementType = (_a2 = serializer2.modelMappers[elementType.type.className]) !== null && _a2 !== void 0 ? _a2 : elementType;
  }
  const tempArray = [];
  for (let i = 0; i < object.length; i++) {
    const serializedValue = serializer2.serialize(elementType, object[i], objectName, options);
    if (isXml && elementType.xmlNamespace) {
      const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : "xmlns";
      if (elementType.type.name === "Composite") {
        tempArray[i] = Object.assign({}, serializedValue);
        tempArray[i][XML_ATTRKEY$1] = { [xmlnsKey]: elementType.xmlNamespace };
      } else {
        tempArray[i] = {};
        tempArray[i][options.xml.xmlCharKey] = serializedValue;
        tempArray[i][XML_ATTRKEY$1] = { [xmlnsKey]: elementType.xmlNamespace };
      }
    } else {
      tempArray[i] = serializedValue;
    }
  }
  return tempArray;
}
function serializeDictionaryType(serializer2, mapper, object, objectName, isXml, options) {
  if (typeof object !== "object") {
    throw new Error(`${objectName} must be of type object.`);
  }
  const valueType = mapper.type.value;
  if (!valueType || typeof valueType !== "object") {
    throw new Error(`"value" metadata for a Dictionary must be defined in the mapper and it must of type "object" in ${objectName}.`);
  }
  const tempDictionary = {};
  for (const key of Object.keys(object)) {
    const serializedValue = serializer2.serialize(valueType, object[key], objectName, options);
    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);
  }
  if (isXml && mapper.xmlNamespace) {
    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
    const result = tempDictionary;
    result[XML_ATTRKEY$1] = { [xmlnsKey]: mapper.xmlNamespace };
    return result;
  }
  return tempDictionary;
}
function resolveAdditionalProperties(serializer2, mapper, objectName) {
  const additionalProperties = mapper.type.additionalProperties;
  if (!additionalProperties && mapper.type.className) {
    const modelMapper = resolveReferencedMapper(serializer2, mapper, objectName);
    return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;
  }
  return additionalProperties;
}
function resolveReferencedMapper(serializer2, mapper, objectName) {
  const className2 = mapper.type.className;
  if (!className2) {
    throw new Error(`Class name for model "${objectName}" is not provided in the mapper "${JSON.stringify(mapper, void 0, 2)}".`);
  }
  return serializer2.modelMappers[className2];
}
function resolveModelProperties(serializer2, mapper, objectName) {
  let modelProps = mapper.type.modelProperties;
  if (!modelProps) {
    const modelMapper = resolveReferencedMapper(serializer2, mapper, objectName);
    if (!modelMapper) {
      throw new Error(`mapper() cannot be null or undefined for model "${mapper.type.className}".`);
    }
    modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;
    if (!modelProps) {
      throw new Error(`modelProperties cannot be null or undefined in the mapper "${JSON.stringify(modelMapper)}" of type "${mapper.type.className}" for object "${objectName}".`);
    }
  }
  return modelProps;
}
function serializeCompositeType(serializer2, mapper, object, objectName, isXml, options) {
  if (getPolymorphicDiscriminatorRecursively(serializer2, mapper)) {
    mapper = getPolymorphicMapper(serializer2, mapper, object, "clientName");
  }
  if (object !== void 0 && object !== null) {
    const payload = {};
    const modelProps = resolveModelProperties(serializer2, mapper, objectName);
    for (const key of Object.keys(modelProps)) {
      const propertyMapper = modelProps[key];
      if (propertyMapper.readOnly) {
        continue;
      }
      let propName;
      let parentObject = payload;
      if (serializer2.isXML) {
        if (propertyMapper.xmlIsWrapped) {
          propName = propertyMapper.xmlName;
        } else {
          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;
        }
      } else {
        const paths = splitSerializeName(propertyMapper.serializedName);
        propName = paths.pop();
        for (const pathName of paths) {
          const childObject = parentObject[pathName];
          if ((childObject === void 0 || childObject === null) && (object[key] !== void 0 && object[key] !== null || propertyMapper.defaultValue !== void 0)) {
            parentObject[pathName] = {};
          }
          parentObject = parentObject[pathName];
        }
      }
      if (parentObject !== void 0 && parentObject !== null) {
        if (isXml && mapper.xmlNamespace) {
          const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : "xmlns";
          parentObject[XML_ATTRKEY$1] = Object.assign(Object.assign({}, parentObject[XML_ATTRKEY$1]), { [xmlnsKey]: mapper.xmlNamespace });
        }
        const propertyObjectName = propertyMapper.serializedName !== "" ? objectName + "." + propertyMapper.serializedName : objectName;
        let toSerialize = object[key];
        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer2, mapper);
        if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && (toSerialize === void 0 || toSerialize === null)) {
          toSerialize = mapper.serializedName;
        }
        const serializedValue = serializer2.serialize(propertyMapper, toSerialize, propertyObjectName, options);
        if (serializedValue !== void 0 && propName !== void 0 && propName !== null) {
          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);
          if (isXml && propertyMapper.xmlIsAttribute) {
            parentObject[XML_ATTRKEY$1] = parentObject[XML_ATTRKEY$1] || {};
            parentObject[XML_ATTRKEY$1][propName] = serializedValue;
          } else if (isXml && propertyMapper.xmlIsWrapped) {
            parentObject[propName] = { [propertyMapper.xmlElementName]: value };
          } else {
            parentObject[propName] = value;
          }
        }
      }
    }
    const additionalPropertiesMapper = resolveAdditionalProperties(serializer2, mapper, objectName);
    if (additionalPropertiesMapper) {
      const propNames = Object.keys(modelProps);
      for (const clientPropName in object) {
        const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);
        if (isAdditionalProperty) {
          payload[clientPropName] = serializer2.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]', options);
        }
      }
    }
    return payload;
  }
  return object;
}
function getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {
  if (!isXml || !propertyMapper.xmlNamespace) {
    return serializedValue;
  }
  const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : "xmlns";
  const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };
  if (["Composite"].includes(propertyMapper.type.name)) {
    if (serializedValue[XML_ATTRKEY$1]) {
      return serializedValue;
    } else {
      const result2 = Object.assign({}, serializedValue);
      result2[XML_ATTRKEY$1] = xmlNamespace;
      return result2;
    }
  }
  const result = {};
  result[options.xml.xmlCharKey] = serializedValue;
  result[XML_ATTRKEY$1] = xmlNamespace;
  return result;
}
function isSpecialXmlProperty(propertyName, options) {
  return [XML_ATTRKEY$1, options.xml.xmlCharKey].includes(propertyName);
}
function deserializeCompositeType(serializer2, mapper, responseBody, objectName, options) {
  var _a2, _b2;
  const xmlCharKey = (_a2 = options.xml.xmlCharKey) !== null && _a2 !== void 0 ? _a2 : XML_CHARKEY$1;
  if (getPolymorphicDiscriminatorRecursively(serializer2, mapper)) {
    mapper = getPolymorphicMapper(serializer2, mapper, responseBody, "serializedName");
  }
  const modelProps = resolveModelProperties(serializer2, mapper, objectName);
  let instance = {};
  const handledPropertyNames = [];
  for (const key of Object.keys(modelProps)) {
    const propertyMapper = modelProps[key];
    const paths = splitSerializeName(modelProps[key].serializedName);
    handledPropertyNames.push(paths[0]);
    const { serializedName, xmlName, xmlElementName } = propertyMapper;
    let propertyObjectName = objectName;
    if (serializedName !== "" && serializedName !== void 0) {
      propertyObjectName = objectName + "." + serializedName;
    }
    const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;
    if (headerCollectionPrefix) {
      const dictionary = {};
      for (const headerKey of Object.keys(responseBody)) {
        if (headerKey.startsWith(headerCollectionPrefix)) {
          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer2.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);
        }
        handledPropertyNames.push(headerKey);
      }
      instance[key] = dictionary;
    } else if (serializer2.isXML) {
      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY$1]) {
        instance[key] = serializer2.deserialize(propertyMapper, responseBody[XML_ATTRKEY$1][xmlName], propertyObjectName, options);
      } else if (propertyMapper.xmlIsMsText) {
        if (responseBody[xmlCharKey] !== void 0) {
          instance[key] = responseBody[xmlCharKey];
        } else if (typeof responseBody === "string") {
          instance[key] = responseBody;
        }
      } else {
        const propertyName = xmlElementName || xmlName || serializedName;
        if (propertyMapper.xmlIsWrapped) {
          const wrapped = responseBody[xmlName];
          const elementList = (_b2 = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b2 !== void 0 ? _b2 : [];
          instance[key] = serializer2.deserialize(propertyMapper, elementList, propertyObjectName, options);
          handledPropertyNames.push(xmlName);
        } else {
          const property = responseBody[propertyName];
          instance[key] = serializer2.deserialize(propertyMapper, property, propertyObjectName, options);
          handledPropertyNames.push(propertyName);
        }
      }
    } else {
      let propertyInstance;
      let res = responseBody;
      let steps = 0;
      for (const item of paths) {
        if (!res)
          break;
        steps++;
        res = res[item];
      }
      if (res === null && steps < paths.length) {
        res = void 0;
      }
      propertyInstance = res;
      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;
      if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && (propertyInstance === void 0 || propertyInstance === null)) {
        propertyInstance = mapper.serializedName;
      }
      let serializedValue;
      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
        propertyInstance = responseBody[key];
        const arrayInstance = serializer2.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
        for (const [k, v] of Object.entries(instance)) {
          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {
            arrayInstance[k] = v;
          }
        }
        instance = arrayInstance;
      } else if (propertyInstance !== void 0 || propertyMapper.defaultValue !== void 0) {
        serializedValue = serializer2.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);
        instance[key] = serializedValue;
      }
    }
  }
  const additionalPropertiesMapper = mapper.type.additionalProperties;
  if (additionalPropertiesMapper) {
    const isAdditionalProperty = (responsePropName) => {
      for (const clientPropName in modelProps) {
        const paths = splitSerializeName(modelProps[clientPropName].serializedName);
        if (paths[0] === responsePropName) {
          return false;
        }
      }
      return true;
    };
    for (const responsePropName in responseBody) {
      if (isAdditionalProperty(responsePropName)) {
        instance[responsePropName] = serializer2.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]', options);
      }
    }
  } else if (responseBody && !options.ignoreUnknownProperties) {
    for (const key of Object.keys(responseBody)) {
      if (instance[key] === void 0 && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {
        instance[key] = responseBody[key];
      }
    }
  }
  return instance;
}
function deserializeDictionaryType(serializer2, mapper, responseBody, objectName, options) {
  const value = mapper.type.value;
  if (!value || typeof value !== "object") {
    throw new Error(`"value" metadata for a Dictionary must be defined in the mapper and it must of type "object" in ${objectName}`);
  }
  if (responseBody) {
    const tempDictionary = {};
    for (const key of Object.keys(responseBody)) {
      tempDictionary[key] = serializer2.deserialize(value, responseBody[key], objectName, options);
    }
    return tempDictionary;
  }
  return responseBody;
}
function deserializeSequenceType(serializer2, mapper, responseBody, objectName, options) {
  var _a2;
  let element = mapper.type.element;
  if (!element || typeof element !== "object") {
    throw new Error(`element" metadata for an Array must be defined in the mapper and it must of type "object" in ${objectName}`);
  }
  if (responseBody) {
    if (!Array.isArray(responseBody)) {
      responseBody = [responseBody];
    }
    if (element.type.name === "Composite" && element.type.className) {
      element = (_a2 = serializer2.modelMappers[element.type.className]) !== null && _a2 !== void 0 ? _a2 : element;
    }
    const tempArray = [];
    for (let i = 0; i < responseBody.length; i++) {
      tempArray[i] = serializer2.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);
    }
    return tempArray;
  }
  return responseBody;
}
function getIndexDiscriminator(discriminators, discriminatorValue, typeName) {
  const typeNamesToCheck = [typeName];
  while (typeNamesToCheck.length) {
    const currentName = typeNamesToCheck.shift();
    const indexDiscriminator = discriminatorValue === currentName ? discriminatorValue : currentName + "." + discriminatorValue;
    if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {
      return discriminators[indexDiscriminator];
    } else {
      for (const [name, mapper] of Object.entries(discriminators)) {
        if (name.startsWith(currentName + ".") && mapper.type.uberParent === currentName && mapper.type.className) {
          typeNamesToCheck.push(mapper.type.className);
        }
      }
    }
  }
  return void 0;
}
function getPolymorphicMapper(serializer2, mapper, object, polymorphicPropertyName) {
  var _a2;
  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer2, mapper);
  if (polymorphicDiscriminator) {
    let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];
    if (discriminatorName) {
      if (polymorphicPropertyName === "serializedName") {
        discriminatorName = discriminatorName.replace(/\\/gi, "");
      }
      const discriminatorValue = object[discriminatorName];
      const typeName = (_a2 = mapper.type.uberParent) !== null && _a2 !== void 0 ? _a2 : mapper.type.className;
      if (typeof discriminatorValue === "string" && typeName) {
        const polymorphicMapper = getIndexDiscriminator(serializer2.modelMappers.discriminators, discriminatorValue, typeName);
        if (polymorphicMapper) {
          mapper = polymorphicMapper;
        }
      }
    }
  }
  return mapper;
}
function getPolymorphicDiscriminatorRecursively(serializer2, mapper) {
  return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer2, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer2, mapper.type.className);
}
function getPolymorphicDiscriminatorSafely(serializer2, typeName) {
  return typeName && serializer2.modelMappers[typeName] && serializer2.modelMappers[typeName].type.polymorphicDiscriminator;
}
const MapperTypeNames = {
  Base64Url: "Base64Url",
  Boolean: "Boolean",
  ByteArray: "ByteArray",
  Composite: "Composite",
  Date: "Date",
  DateTime: "DateTime",
  DateTimeRfc1123: "DateTimeRfc1123",
  Dictionary: "Dictionary",
  Enum: "Enum",
  Number: "Number",
  Object: "Object",
  Sequence: "Sequence",
  String: "String",
  Stream: "Stream",
  TimeSpan: "TimeSpan",
  UnixTime: "UnixTime"
};
const state = {
  operationRequestMap: /* @__PURE__ */ new WeakMap()
};
function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {
  let parameterPath = parameter.parameterPath;
  const parameterMapper = parameter.mapper;
  let value;
  if (typeof parameterPath === "string") {
    parameterPath = [parameterPath];
  }
  if (Array.isArray(parameterPath)) {
    if (parameterPath.length > 0) {
      if (parameterMapper.isConstant) {
        value = parameterMapper.defaultValue;
      } else {
        let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);
        if (!propertySearchResult.propertyFound && fallbackObject) {
          propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);
        }
        let useDefaultValue = false;
        if (!propertySearchResult.propertyFound) {
          useDefaultValue = parameterMapper.required || parameterPath[0] === "options" && parameterPath.length === 2;
        }
        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
      }
    }
  } else {
    if (parameterMapper.required) {
      value = {};
    }
    for (const propertyName in parameterPath) {
      const propertyMapper = parameterMapper.type.modelProperties[propertyName];
      const propertyPath = parameterPath[propertyName];
      const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {
        parameterPath: propertyPath,
        mapper: propertyMapper
      }, fallbackObject);
      if (propertyValue !== void 0) {
        if (!value) {
          value = {};
        }
        value[propertyName] = propertyValue;
      }
    }
  }
  return value;
}
function getPropertyFromParameterPath(parent, parameterPath) {
  const result = { propertyFound: false };
  let i = 0;
  for (; i < parameterPath.length; ++i) {
    const parameterPathPart = parameterPath[i];
    if (parent && parameterPathPart in parent) {
      parent = parent[parameterPathPart];
    } else {
      break;
    }
  }
  if (i === parameterPath.length) {
    result.propertyValue = parent;
    result.propertyFound = true;
  }
  return result;
}
const originalRequestSymbol$1 = Symbol.for("@azure/core-client original request");
function hasOriginalRequest(request2) {
  return originalRequestSymbol$1 in request2;
}
function getOperationRequestInfo(request2) {
  if (hasOriginalRequest(request2)) {
    return getOperationRequestInfo(request2[originalRequestSymbol$1]);
  }
  let info = state.operationRequestMap.get(request2);
  if (!info) {
    info = {};
    state.operationRequestMap.set(request2, info);
  }
  return info;
}
const defaultJsonContentTypes = ["application/json", "text/json"];
const defaultXmlContentTypes = ["application/xml", "application/atom+xml"];
const deserializationPolicyName = "deserializationPolicy";
function deserializationPolicy(options = {}) {
  var _a2, _b2, _c2, _d2, _e, _f, _g;
  const jsonContentTypes = (_b2 = (_a2 = options.expectedContentTypes) === null || _a2 === void 0 ? void 0 : _a2.json) !== null && _b2 !== void 0 ? _b2 : defaultJsonContentTypes;
  const xmlContentTypes = (_d2 = (_c2 = options.expectedContentTypes) === null || _c2 === void 0 ? void 0 : _c2.xml) !== null && _d2 !== void 0 ? _d2 : defaultXmlContentTypes;
  const parseXML2 = options.parseXML;
  const serializerOptions = options.serializerOptions;
  const updatedOptions = {
    xml: {
      rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : "",
      includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,
      xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : XML_CHARKEY$1
    }
  };
  return {
    name: deserializationPolicyName,
    async sendRequest(request2, next) {
      const response = await next(request2);
      return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML2);
    }
  };
}
function getOperationResponseMap(parsedResponse) {
  let result;
  const request2 = parsedResponse.request;
  const operationInfo = getOperationRequestInfo(request2);
  const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
  if (operationSpec) {
    if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {
      result = operationSpec.responses[parsedResponse.status];
    } else {
      result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);
    }
  }
  return result;
}
function shouldDeserializeResponse(parsedResponse) {
  const request2 = parsedResponse.request;
  const operationInfo = getOperationRequestInfo(request2);
  const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;
  let result;
  if (shouldDeserialize === void 0) {
    result = true;
  } else if (typeof shouldDeserialize === "boolean") {
    result = shouldDeserialize;
  } else {
    result = shouldDeserialize(parsedResponse);
  }
  return result;
}
async function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML2) {
  const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML2);
  if (!shouldDeserializeResponse(parsedResponse)) {
    return parsedResponse;
  }
  const operationInfo = getOperationRequestInfo(parsedResponse.request);
  const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
  if (!operationSpec || !operationSpec.responses) {
    return parsedResponse;
  }
  const responseSpec = getOperationResponseMap(parsedResponse);
  const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);
  if (error) {
    throw error;
  } else if (shouldReturnResponse) {
    return parsedResponse;
  }
  if (responseSpec) {
    if (responseSpec.bodyMapper) {
      let valueToDeserialize = parsedResponse.parsedBody;
      if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {
        valueToDeserialize = typeof valueToDeserialize === "object" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];
      }
      try {
        parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody", options);
      } catch (deserializeError) {
        const restError = new RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {
          statusCode: parsedResponse.status,
          request: parsedResponse.request,
          response: parsedResponse
        });
        throw restError;
      }
    } else if (operationSpec.httpMethod === "HEAD") {
      parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
    }
    if (responseSpec.headersMapper) {
      parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders", { xml: {}, ignoreUnknownProperties: true });
    }
  }
  return parsedResponse;
}
function isOperationSpecEmpty(operationSpec) {
  const expectedStatusCodes = Object.keys(operationSpec.responses);
  return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default";
}
function handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {
  var _a2, _b2, _c2, _d2, _e;
  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;
  const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;
  if (isExpectedStatusCode) {
    if (responseSpec) {
      if (!responseSpec.isError) {
        return { error: null, shouldReturnResponse: false };
      }
    } else {
      return { error: null, shouldReturnResponse: false };
    }
  }
  const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;
  const initialErrorMessage = ((_a2 = parsedResponse.request.streamResponseStatusCodes) === null || _a2 === void 0 ? void 0 : _a2.has(parsedResponse.status)) ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;
  const error = new RestError(initialErrorMessage, {
    statusCode: parsedResponse.status,
    request: parsedResponse.request,
    response: parsedResponse
  });
  if (!errorResponseSpec && !(((_c2 = (_b2 = parsedResponse.parsedBody) === null || _b2 === void 0 ? void 0 : _b2.error) === null || _c2 === void 0 ? void 0 : _c2.code) && ((_e = (_d2 = parsedResponse.parsedBody) === null || _d2 === void 0 ? void 0 : _d2.error) === null || _e === void 0 ? void 0 : _e.message))) {
    throw error;
  }
  const defaultBodyMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.bodyMapper;
  const defaultHeadersMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.headersMapper;
  try {
    if (parsedResponse.parsedBody) {
      const parsedBody = parsedResponse.parsedBody;
      let deserializedError;
      if (defaultBodyMapper) {
        let valueToDeserialize = parsedBody;
        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {
          valueToDeserialize = [];
          const elementName = defaultBodyMapper.xmlElementName;
          if (typeof parsedBody === "object" && elementName) {
            valueToDeserialize = parsedBody[elementName];
          }
        }
        deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody", options);
      }
      const internalError = parsedBody.error || deserializedError || parsedBody;
      error.code = internalError.code;
      if (internalError.message) {
        error.message = internalError.message;
      }
      if (defaultBodyMapper) {
        error.response.parsedBody = deserializedError;
      }
    }
    if (parsedResponse.headers && defaultHeadersMapper) {
      error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), "operationRes.parsedHeaders");
    }
  } catch (defaultError) {
    error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody - "${parsedResponse.bodyAsText}" for the default response.`;
  }
  return { error, shouldReturnResponse: false };
}
async function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML2) {
  var _a2;
  if (!((_a2 = operationResponse.request.streamResponseStatusCodes) === null || _a2 === void 0 ? void 0 : _a2.has(operationResponse.status)) && operationResponse.bodyAsText) {
    const text2 = operationResponse.bodyAsText;
    const contentType2 = operationResponse.headers.get("Content-Type") || "";
    const contentComponents = !contentType2 ? [] : contentType2.split(";").map((component) => component.toLowerCase());
    try {
      if (contentComponents.length === 0 || contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {
        operationResponse.parsedBody = JSON.parse(text2);
        return operationResponse;
      } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {
        if (!parseXML2) {
          throw new Error("Parsing XML not supported.");
        }
        const body2 = await parseXML2(text2, opts.xml);
        operationResponse.parsedBody = body2;
        return operationResponse;
      }
    } catch (err) {
      const msg = `Error "${err}" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;
      const errCode = err.code || RestError.PARSE_ERROR;
      const e2 = new RestError(msg, {
        code: errCode,
        statusCode: operationResponse.status,
        request: operationResponse.request,
        response: operationResponse
      });
      throw e2;
    }
  }
  return operationResponse;
}
function getStreamingResponseStatusCodes(operationSpec) {
  const result = /* @__PURE__ */ new Set();
  for (const statusCode in operationSpec.responses) {
    const operationResponse = operationSpec.responses[statusCode];
    if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === MapperTypeNames.Stream) {
      result.add(Number(statusCode));
    }
  }
  return result;
}
function getPathStringFromParameter(parameter) {
  const { parameterPath, mapper } = parameter;
  let result;
  if (typeof parameterPath === "string") {
    result = parameterPath;
  } else if (Array.isArray(parameterPath)) {
    result = parameterPath.join(".");
  } else {
    result = mapper.serializedName;
  }
  return result;
}
const serializationPolicyName = "serializationPolicy";
function serializationPolicy(options = {}) {
  const stringifyXML2 = options.stringifyXML;
  return {
    name: serializationPolicyName,
    async sendRequest(request2, next) {
      const operationInfo = getOperationRequestInfo(request2);
      const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;
      const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;
      if (operationSpec && operationArguments) {
        serializeHeaders(request2, operationArguments, operationSpec);
        serializeRequestBody(request2, operationArguments, operationSpec, stringifyXML2);
      }
      return next(request2);
    }
  };
}
function serializeHeaders(request2, operationArguments, operationSpec) {
  var _a2, _b2;
  if (operationSpec.headerParameters) {
    for (const headerParameter of operationSpec.headerParameters) {
      let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);
      if (headerValue !== null && headerValue !== void 0 || headerParameter.mapper.required) {
        headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));
        const headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;
        if (headerCollectionPrefix) {
          for (const key of Object.keys(headerValue)) {
            request2.headers.set(headerCollectionPrefix + key, headerValue[key]);
          }
        } else {
          request2.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);
        }
      }
    }
  }
  const customHeaders = (_b2 = (_a2 = operationArguments.options) === null || _a2 === void 0 ? void 0 : _a2.requestOptions) === null || _b2 === void 0 ? void 0 : _b2.customHeaders;
  if (customHeaders) {
    for (const customHeaderName of Object.keys(customHeaders)) {
      request2.headers.set(customHeaderName, customHeaders[customHeaderName]);
    }
  }
}
function serializeRequestBody(request2, operationArguments, operationSpec, stringifyXML2 = function() {
  throw new Error("XML serialization unsupported!");
}) {
  var _a2, _b2, _c2, _d2, _e;
  const serializerOptions = (_a2 = operationArguments.options) === null || _a2 === void 0 ? void 0 : _a2.serializerOptions;
  const updatedOptions = {
    xml: {
      rootName: (_b2 = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b2 !== void 0 ? _b2 : "",
      includeRoot: (_c2 = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c2 !== void 0 ? _c2 : false,
      xmlCharKey: (_d2 = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d2 !== void 0 ? _d2 : XML_CHARKEY$1
    }
  };
  const xmlCharKey = updatedOptions.xml.xmlCharKey;
  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
    request2.body = getOperationArgumentValueFromParameter(operationArguments, operationSpec.requestBody);
    const bodyMapper = operationSpec.requestBody.mapper;
    const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable } = bodyMapper;
    const typeName = bodyMapper.type.name;
    try {
      if (request2.body !== void 0 && request2.body !== null || nullable && request2.body === null || required) {
        const requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);
        request2.body = operationSpec.serializer.serialize(bodyMapper, request2.body, requestBodyParameterPathString, updatedOptions);
        const isStream2 = typeName === MapperTypeNames.Stream;
        if (operationSpec.isXML) {
          const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : "xmlns";
          const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request2.body, updatedOptions);
          if (typeName === MapperTypeNames.Sequence) {
            request2.body = stringifyXML2(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), { rootName: xmlName || serializedName, xmlCharKey });
          } else if (!isStream2) {
            request2.body = stringifyXML2(value, {
              rootName: xmlName || serializedName,
              xmlCharKey
            });
          }
        } else if (typeName === MapperTypeNames.String && (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match("text/plain")) || operationSpec.mediaType === "text")) {
          return;
        } else if (!isStream2) {
          request2.body = JSON.stringify(request2.body);
        }
      }
    } catch (error) {
      throw new Error(`Error "${error.message}" occurred in serializing the payload - ${JSON.stringify(serializedName, void 0, "  ")}.`);
    }
  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
    request2.formData = {};
    for (const formDataParameter of operationSpec.formDataParameters) {
      const formDataParameterValue = getOperationArgumentValueFromParameter(operationArguments, formDataParameter);
      if (formDataParameterValue !== void 0 && formDataParameterValue !== null) {
        const formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);
        request2.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);
      }
    }
  }
}
function getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {
  if (xmlNamespace && !["Composite", "Sequence", "Dictionary"].includes(typeName)) {
    const result = {};
    result[options.xml.xmlCharKey] = serializedValue;
    result[XML_ATTRKEY$1] = { [xmlnsKey]: xmlNamespace };
    return result;
  }
  return serializedValue;
}
function prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {
  if (!Array.isArray(obj)) {
    obj = [obj];
  }
  if (!xmlNamespaceKey || !xmlNamespace) {
    return { [elementName]: obj };
  }
  const result = { [elementName]: obj };
  result[XML_ATTRKEY$1] = { [xmlNamespaceKey]: xmlNamespace };
  return result;
}
function createClientPipeline(options = {}) {
  const pipeline = createPipelineFromOptions(options !== null && options !== void 0 ? options : {});
  if (options.credentialOptions) {
    pipeline.addPolicy(bearerTokenAuthenticationPolicy({
      credential: options.credentialOptions.credential,
      scopes: options.credentialOptions.credentialScopes
    }));
  }
  pipeline.addPolicy(serializationPolicy(options.serializationOptions), { phase: "Serialize" });
  pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {
    phase: "Deserialize"
  });
  return pipeline;
}
let cachedHttpClient;
function getCachedDefaultHttpClient$1() {
  if (!cachedHttpClient) {
    cachedHttpClient = createDefaultHttpClient();
  }
  return cachedHttpClient;
}
const CollectionFormatToDelimiterMap = {
  CSV: ",",
  SSV: " ",
  Multi: "Multi",
  TSV: "	",
  Pipes: "|"
};
function getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {
  const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);
  let isAbsolutePath = false;
  let requestUrl = replaceAll(baseUri, urlReplacements);
  if (operationSpec.path) {
    let path = replaceAll(operationSpec.path, urlReplacements);
    if (operationSpec.path === "/{nextLink}" && path.startsWith("/")) {
      path = path.substring(1);
    }
    if (isAbsoluteUrl(path)) {
      requestUrl = path;
      isAbsolutePath = true;
    } else {
      requestUrl = appendPath(requestUrl, path);
    }
  }
  const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);
  requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);
  return requestUrl;
}
function replaceAll(input, replacements) {
  let result = input;
  for (const [searchValue, replaceValue] of replacements) {
    result = result.split(searchValue).join(replaceValue);
  }
  return result;
}
function calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {
  var _a2;
  const result = /* @__PURE__ */ new Map();
  if ((_a2 = operationSpec.urlParameters) === null || _a2 === void 0 ? void 0 : _a2.length) {
    for (const urlParameter of operationSpec.urlParameters) {
      let urlParameterValue = getOperationArgumentValueFromParameter(operationArguments, urlParameter, fallbackObject);
      const parameterPathString = getPathStringFromParameter(urlParameter);
      urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);
      if (!urlParameter.skipEncoding) {
        urlParameterValue = encodeURIComponent(urlParameterValue);
      }
      result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);
    }
  }
  return result;
}
function isAbsoluteUrl(url2) {
  return url2.includes("://");
}
function appendPath(url2, pathToAppend) {
  if (!pathToAppend) {
    return url2;
  }
  const parsedUrl = new URL(url2);
  let newPath = parsedUrl.pathname;
  if (!newPath.endsWith("/")) {
    newPath = `${newPath}/`;
  }
  if (pathToAppend.startsWith("/")) {
    pathToAppend = pathToAppend.substring(1);
  }
  const searchStart = pathToAppend.indexOf("?");
  if (searchStart !== -1) {
    const path = pathToAppend.substring(0, searchStart);
    const search = pathToAppend.substring(searchStart + 1);
    newPath = newPath + path;
    if (search) {
      parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;
    }
  } else {
    newPath = newPath + pathToAppend;
  }
  parsedUrl.pathname = newPath;
  return parsedUrl.toString();
}
function calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {
  var _a2;
  const result = /* @__PURE__ */ new Map();
  const sequenceParams = /* @__PURE__ */ new Set();
  if ((_a2 = operationSpec.queryParameters) === null || _a2 === void 0 ? void 0 : _a2.length) {
    for (const queryParameter of operationSpec.queryParameters) {
      if (queryParameter.mapper.type.name === "Sequence" && queryParameter.mapper.serializedName) {
        sequenceParams.add(queryParameter.mapper.serializedName);
      }
      let queryParameterValue = getOperationArgumentValueFromParameter(operationArguments, queryParameter, fallbackObject);
      if (queryParameterValue !== void 0 && queryParameterValue !== null || queryParameter.mapper.required) {
        queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, getPathStringFromParameter(queryParameter));
        const delimiter2 = queryParameter.collectionFormat ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat] : "";
        if (Array.isArray(queryParameterValue)) {
          queryParameterValue = queryParameterValue.map((item) => {
            if (item === null || item === void 0) {
              return "";
            }
            return item;
          });
        }
        if (queryParameter.collectionFormat === "Multi" && queryParameterValue.length === 0) {
          continue;
        } else if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === "SSV" || queryParameter.collectionFormat === "TSV")) {
          queryParameterValue = queryParameterValue.join(delimiter2);
        }
        if (!queryParameter.skipEncoding) {
          if (Array.isArray(queryParameterValue)) {
            queryParameterValue = queryParameterValue.map((item) => {
              return encodeURIComponent(item);
            });
          } else {
            queryParameterValue = encodeURIComponent(queryParameterValue);
          }
        }
        if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === "CSV" || queryParameter.collectionFormat === "Pipes")) {
          queryParameterValue = queryParameterValue.join(delimiter2);
        }
        result.set(queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter), queryParameterValue);
      }
    }
  }
  return {
    queryParams: result,
    sequenceParams
  };
}
function simpleParseQueryParams(queryString) {
  const result = /* @__PURE__ */ new Map();
  if (!queryString || queryString[0] !== "?") {
    return result;
  }
  queryString = queryString.slice(1);
  const pairs = queryString.split("&");
  for (const pair of pairs) {
    const [name, value] = pair.split("=", 2);
    const existingValue = result.get(name);
    if (existingValue) {
      if (Array.isArray(existingValue)) {
        existingValue.push(value);
      } else {
        result.set(name, [existingValue, value]);
      }
    } else {
      result.set(name, value);
    }
  }
  return result;
}
function appendQueryParams(url2, queryParams, sequenceParams, noOverwrite = false) {
  if (queryParams.size === 0) {
    return url2;
  }
  const parsedUrl = new URL(url2);
  const combinedParams = simpleParseQueryParams(parsedUrl.search);
  for (const [name, value] of queryParams) {
    const existingValue = combinedParams.get(name);
    if (Array.isArray(existingValue)) {
      if (Array.isArray(value)) {
        existingValue.push(...value);
        const valueSet = new Set(existingValue);
        combinedParams.set(name, Array.from(valueSet));
      } else {
        existingValue.push(value);
      }
    } else if (existingValue) {
      if (Array.isArray(value)) {
        value.unshift(existingValue);
      } else if (sequenceParams.has(name)) {
        combinedParams.set(name, [existingValue, value]);
      }
      if (!noOverwrite) {
        combinedParams.set(name, value);
      }
    } else {
      combinedParams.set(name, value);
    }
  }
  const searchPieces = [];
  for (const [name, value] of combinedParams) {
    if (typeof value === "string") {
      searchPieces.push(`${name}=${value}`);
    } else if (Array.isArray(value)) {
      for (const subValue of value) {
        searchPieces.push(`${name}=${subValue}`);
      }
    } else {
      searchPieces.push(`${name}=${value}`);
    }
  }
  parsedUrl.search = searchPieces.length ? `?${searchPieces.join("&")}` : "";
  return parsedUrl.toString();
}
const logger$1 = createClientLogger("core-client");
class ServiceClient {
  /**
   * The ServiceClient constructor
   * @param options - The service client options that govern the behavior of the client.
   */
  constructor(options = {}) {
    var _a2, _b2;
    this._requestContentType = options.requestContentType;
    this._endpoint = (_a2 = options.endpoint) !== null && _a2 !== void 0 ? _a2 : options.baseUri;
    if (options.baseUri) {
      logger$1.warning("The baseUri option for SDK Clients has been deprecated, please use endpoint instead.");
    }
    this._allowInsecureConnection = options.allowInsecureConnection;
    this._httpClient = options.httpClient || getCachedDefaultHttpClient$1();
    this.pipeline = options.pipeline || createDefaultPipeline(options);
    if ((_b2 = options.additionalPolicies) === null || _b2 === void 0 ? void 0 : _b2.length) {
      for (const { policy, position } of options.additionalPolicies) {
        const afterPhase = position === "perRetry" ? "Sign" : void 0;
        this.pipeline.addPolicy(policy, {
          afterPhase
        });
      }
    }
  }
  /**
   * Send the provided httpRequest.
   */
  async sendRequest(request2) {
    return this.pipeline.sendRequest(this._httpClient, request2);
  }
  /**
   * Send an HTTP request that is populated using the provided OperationSpec.
   * @typeParam T - The typed result of the request, based on the OperationSpec.
   * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.
   * @param operationSpec - The OperationSpec to use to populate the httpRequest.
   */
  async sendOperationRequest(operationArguments, operationSpec) {
    const endpoint = operationSpec.baseUrl || this._endpoint;
    if (!endpoint) {
      throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.");
    }
    const url2 = getRequestUrl(endpoint, operationSpec, operationArguments, this);
    const request2 = createPipelineRequest({
      url: url2
    });
    request2.method = operationSpec.httpMethod;
    const operationInfo = getOperationRequestInfo(request2);
    operationInfo.operationSpec = operationSpec;
    operationInfo.operationArguments = operationArguments;
    const contentType2 = operationSpec.contentType || this._requestContentType;
    if (contentType2 && operationSpec.requestBody) {
      request2.headers.set("Content-Type", contentType2);
    }
    const options = operationArguments.options;
    if (options) {
      const requestOptions = options.requestOptions;
      if (requestOptions) {
        if (requestOptions.timeout) {
          request2.timeout = requestOptions.timeout;
        }
        if (requestOptions.onUploadProgress) {
          request2.onUploadProgress = requestOptions.onUploadProgress;
        }
        if (requestOptions.onDownloadProgress) {
          request2.onDownloadProgress = requestOptions.onDownloadProgress;
        }
        if (requestOptions.shouldDeserialize !== void 0) {
          operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;
        }
        if (requestOptions.allowInsecureConnection) {
          request2.allowInsecureConnection = true;
        }
      }
      if (options.abortSignal) {
        request2.abortSignal = options.abortSignal;
      }
      if (options.tracingOptions) {
        request2.tracingOptions = options.tracingOptions;
      }
    }
    if (this._allowInsecureConnection) {
      request2.allowInsecureConnection = true;
    }
    if (request2.streamResponseStatusCodes === void 0) {
      request2.streamResponseStatusCodes = getStreamingResponseStatusCodes(operationSpec);
    }
    try {
      const rawResponse = await this.sendRequest(request2);
      const flatResponse = flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]);
      if (options === null || options === void 0 ? void 0 : options.onResponse) {
        options.onResponse(rawResponse, flatResponse);
      }
      return flatResponse;
    } catch (error) {
      if (typeof error === "object" && (error === null || error === void 0 ? void 0 : error.response)) {
        const rawResponse = error.response;
        const flatResponse = flattenResponse(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses["default"]);
        error.details = flatResponse;
        if (options === null || options === void 0 ? void 0 : options.onResponse) {
          options.onResponse(rawResponse, flatResponse, error);
        }
      }
      throw error;
    }
  }
}
function createDefaultPipeline(options) {
  const credentialScopes = getCredentialScopes(options);
  const credentialOptions = options.credential && credentialScopes ? { credentialScopes, credential: options.credential } : void 0;
  return createClientPipeline(Object.assign(Object.assign({}, options), { credentialOptions }));
}
function getCredentialScopes(options) {
  if (options.credentialScopes) {
    return options.credentialScopes;
  }
  if (options.endpoint) {
    return `${options.endpoint}/.default`;
  }
  if (options.baseUri) {
    return `${options.baseUri}/.default`;
  }
  if (options.credential && !options.credentialScopes) {
    throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);
  }
  return void 0;
}
const Constants2 = {
  DefaultScope: "/.default",
  /**
   * Defines constants for use with HTTP headers.
   */
  HeaderConstants: {
    /**
     * The Authorization header.
     */
    AUTHORIZATION: "authorization"
  }
};
function isUuid(text2) {
  return /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/.test(text2);
}
const authorizeRequestOnTenantChallenge = async (challengeOptions) => {
  var _a2;
  const requestOptions = requestToOptions(challengeOptions.request);
  const challenge = getChallenge(challengeOptions.response);
  if (challenge) {
    const challengeInfo = parseChallenge(challenge);
    const challengeScopes = buildScopes(challengeOptions, challengeInfo);
    const tenantId = extractTenantId(challengeInfo);
    if (!tenantId) {
      return false;
    }
    const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), { tenantId }));
    if (!accessToken) {
      return false;
    }
    challengeOptions.request.headers.set(Constants2.HeaderConstants.AUTHORIZATION, `${(_a2 = accessToken.tokenType) !== null && _a2 !== void 0 ? _a2 : "Bearer"} ${accessToken.token}`);
    return true;
  }
  return false;
};
function extractTenantId(challengeInfo) {
  const parsedAuthUri = new URL(challengeInfo.authorization_uri);
  const pathSegments = parsedAuthUri.pathname.split("/");
  const tenantId = pathSegments[1];
  if (tenantId && isUuid(tenantId)) {
    return tenantId;
  }
  return void 0;
}
function buildScopes(challengeOptions, challengeInfo) {
  if (!challengeInfo.resource_id) {
    return challengeOptions.scopes;
  }
  const challengeScopes = new URL(challengeInfo.resource_id);
  challengeScopes.pathname = Constants2.DefaultScope;
  let scope2 = challengeScopes.toString();
  if (scope2 === "https://disk.azure.com/.default") {
    scope2 = "https://disk.azure.com//.default";
  }
  return [scope2];
}
function getChallenge(response) {
  const challenge = response.headers.get("WWW-Authenticate");
  if (response.status === 401 && challenge) {
    return challenge;
  }
  return;
}
function parseChallenge(challenge) {
  const bearerChallenge = challenge.slice("Bearer ".length);
  const challengeParts = `${bearerChallenge.trim()} `.split(" ").filter((x) => x);
  const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split("=")));
  return keyValuePairs.reduce((a, b) => Object.assign(Object.assign({}, a), b), {});
}
function requestToOptions(request2) {
  return {
    abortSignal: request2.abortSignal,
    requestOptions: {
      timeout: request2.timeout
    },
    tracingOptions: request2.tracingOptions
  };
}
const originalRequestSymbol = Symbol("Original PipelineRequest");
const originalClientRequestSymbol = Symbol.for("@azure/core-client original request");
function toPipelineRequest(webResource, options = {}) {
  const compatWebResource = webResource;
  const request2 = compatWebResource[originalRequestSymbol];
  const headers = createHttpHeaders(webResource.headers.toJson({ preserveCase: true }));
  if (request2) {
    request2.headers = headers;
    return request2;
  } else {
    const newRequest = createPipelineRequest({
      url: webResource.url,
      method: webResource.method,
      headers,
      withCredentials: webResource.withCredentials,
      timeout: webResource.timeout,
      requestId: webResource.requestId,
      abortSignal: webResource.abortSignal,
      body: webResource.body,
      formData: webResource.formData,
      disableKeepAlive: !!webResource.keepAlive,
      onDownloadProgress: webResource.onDownloadProgress,
      onUploadProgress: webResource.onUploadProgress,
      proxySettings: webResource.proxySettings,
      streamResponseStatusCodes: webResource.streamResponseStatusCodes,
      agent: webResource.agent
    });
    if (options.originalRequest) {
      newRequest[originalClientRequestSymbol] = options.originalRequest;
    }
    return newRequest;
  }
}
function toWebResourceLike(request2, options) {
  var _a2;
  const originalRequest = (_a2 = options === null || options === void 0 ? void 0 : options.originalRequest) !== null && _a2 !== void 0 ? _a2 : request2;
  const webResource = {
    url: request2.url,
    method: request2.method,
    headers: toHttpHeadersLike(request2.headers),
    withCredentials: request2.withCredentials,
    timeout: request2.timeout,
    requestId: request2.headers.get("x-ms-client-request-id") || request2.requestId,
    abortSignal: request2.abortSignal,
    body: request2.body,
    formData: request2.formData,
    keepAlive: !!request2.disableKeepAlive,
    onDownloadProgress: request2.onDownloadProgress,
    onUploadProgress: request2.onUploadProgress,
    proxySettings: request2.proxySettings,
    streamResponseStatusCodes: request2.streamResponseStatusCodes,
    agent: request2.agent,
    clone() {
      throw new Error("Cannot clone a non-proxied WebResourceLike");
    },
    prepare() {
      throw new Error("WebResourceLike.prepare() is not supported by @azure/core-http-compat");
    },
    validateRequestProperties() {
    }
  };
  if (options === null || options === void 0 ? void 0 : options.createProxy) {
    return new Proxy(webResource, {
      get(target, prop, receiver) {
        if (prop === originalRequestSymbol) {
          return request2;
        } else if (prop === "clone") {
          return () => {
            return toWebResourceLike(toPipelineRequest(webResource, { originalRequest }), {
              createProxy: true,
              originalRequest
            });
          };
        }
        return Reflect.get(target, prop, receiver);
      },
      set(target, prop, value, receiver) {
        if (prop === "keepAlive") {
          request2.disableKeepAlive = !value;
        }
        const passThroughProps = [
          "url",
          "method",
          "withCredentials",
          "timeout",
          "requestId",
          "abortSignal",
          "body",
          "formData",
          "onDownloadProgress",
          "onUploadProgress",
          "proxySettings",
          "streamResponseStatusCodes",
          "agent"
        ];
        if (typeof prop === "string" && passThroughProps.includes(prop)) {
          request2[prop] = value;
        }
        return Reflect.set(target, prop, value, receiver);
      }
    });
  } else {
    return webResource;
  }
}
function toHttpHeadersLike(headers) {
  return new HttpHeaders(headers.toJSON({ preserveCase: true }));
}
function getHeaderKey(headerName) {
  return headerName.toLowerCase();
}
class HttpHeaders {
  constructor(rawHeaders) {
    this._headersMap = {};
    if (rawHeaders) {
      for (const headerName in rawHeaders) {
        this.set(headerName, rawHeaders[headerName]);
      }
    }
  }
  /**
   * Set a header in this collection with the provided name and value. The name is
   * case-insensitive.
   * @param headerName - The name of the header to set. This value is case-insensitive.
   * @param headerValue - The value of the header to set.
   */
  set(headerName, headerValue) {
    this._headersMap[getHeaderKey(headerName)] = {
      name: headerName,
      value: headerValue.toString()
    };
  }
  /**
   * Get the header value for the provided header name, or undefined if no header exists in this
   * collection with the provided name.
   * @param headerName - The name of the header.
   */
  get(headerName) {
    const header = this._headersMap[getHeaderKey(headerName)];
    return !header ? void 0 : header.value;
  }
  /**
   * Get whether or not this header collection contains a header entry for the provided header name.
   */
  contains(headerName) {
    return !!this._headersMap[getHeaderKey(headerName)];
  }
  /**
   * Remove the header with the provided headerName. Return whether or not the header existed and
   * was removed.
   * @param headerName - The name of the header to remove.
   */
  remove(headerName) {
    const result = this.contains(headerName);
    delete this._headersMap[getHeaderKey(headerName)];
    return result;
  }
  /**
   * Get the headers that are contained this collection as an object.
   */
  rawHeaders() {
    return this.toJson({ preserveCase: true });
  }
  /**
   * Get the headers that are contained in this collection as an array.
   */
  headersArray() {
    const headers = [];
    for (const headerKey in this._headersMap) {
      headers.push(this._headersMap[headerKey]);
    }
    return headers;
  }
  /**
   * Get the header names that are contained in this collection.
   */
  headerNames() {
    const headerNames = [];
    const headers = this.headersArray();
    for (let i = 0; i < headers.length; ++i) {
      headerNames.push(headers[i].name);
    }
    return headerNames;
  }
  /**
   * Get the header values that are contained in this collection.
   */
  headerValues() {
    const headerValues = [];
    const headers = this.headersArray();
    for (let i = 0; i < headers.length; ++i) {
      headerValues.push(headers[i].value);
    }
    return headerValues;
  }
  /**
   * Get the JSON object representation of this HTTP header collection.
   */
  toJson(options = {}) {
    const result = {};
    if (options.preserveCase) {
      for (const headerKey in this._headersMap) {
        const header = this._headersMap[headerKey];
        result[header.name] = header.value;
      }
    } else {
      for (const headerKey in this._headersMap) {
        const header = this._headersMap[headerKey];
        result[getHeaderKey(header.name)] = header.value;
      }
    }
    return result;
  }
  /**
   * Get the string representation of this HTTP header collection.
   */
  toString() {
    return JSON.stringify(this.toJson({ preserveCase: true }));
  }
  /**
   * Create a deep clone/copy of this HttpHeaders collection.
   */
  clone() {
    const resultPreservingCasing = {};
    for (const headerKey in this._headersMap) {
      const header = this._headersMap[headerKey];
      resultPreservingCasing[header.name] = header.value;
    }
    return new HttpHeaders(resultPreservingCasing);
  }
}
const originalResponse = Symbol("Original FullOperationResponse");
function toCompatResponse(response, options) {
  let request2 = toWebResourceLike(response.request);
  let headers = toHttpHeadersLike(response.headers);
  if (options === null || options === void 0 ? void 0 : options.createProxy) {
    return new Proxy(response, {
      get(target, prop, receiver) {
        if (prop === "headers") {
          return headers;
        } else if (prop === "request") {
          return request2;
        } else if (prop === originalResponse) {
          return response;
        }
        return Reflect.get(target, prop, receiver);
      },
      set(target, prop, value, receiver) {
        if (prop === "headers") {
          headers = value;
        } else if (prop === "request") {
          request2 = value;
        }
        return Reflect.set(target, prop, value, receiver);
      }
    });
  } else {
    return Object.assign(Object.assign({}, response), {
      request: request2,
      headers
    });
  }
}
function toPipelineResponse(compatResponse) {
  const extendedCompatResponse = compatResponse;
  const response = extendedCompatResponse[originalResponse];
  const headers = createHttpHeaders(compatResponse.headers.toJson({ preserveCase: true }));
  if (response) {
    response.headers = headers;
    return response;
  } else {
    return Object.assign(Object.assign({}, compatResponse), { headers, request: toPipelineRequest(compatResponse.request) });
  }
}
class ExtendedServiceClient extends ServiceClient {
  constructor(options) {
    var _a2, _b2;
    super(options);
    if (((_a2 = options.keepAliveOptions) === null || _a2 === void 0 ? void 0 : _a2.enable) === false && !pipelineContainsDisableKeepAlivePolicy(this.pipeline)) {
      this.pipeline.addPolicy(createDisableKeepAlivePolicy());
    }
    if (((_b2 = options.redirectOptions) === null || _b2 === void 0 ? void 0 : _b2.handleRedirects) === false) {
      this.pipeline.removePolicy({
        name: redirectPolicyName
      });
    }
  }
  /**
   * Compatible send operation request function.
   *
   * @param operationArguments - Operation arguments
   * @param operationSpec - Operation Spec
   * @returns
   */
  async sendOperationRequest(operationArguments, operationSpec) {
    var _a2;
    const userProvidedCallBack = (_a2 = operationArguments === null || operationArguments === void 0 ? void 0 : operationArguments.options) === null || _a2 === void 0 ? void 0 : _a2.onResponse;
    let lastResponse;
    function onResponse(rawResponse, flatResponse, error) {
      lastResponse = rawResponse;
      if (userProvidedCallBack) {
        userProvidedCallBack(rawResponse, flatResponse, error);
      }
    }
    operationArguments.options = Object.assign(Object.assign({}, operationArguments.options), { onResponse });
    const result = await super.sendOperationRequest(operationArguments, operationSpec);
    if (lastResponse) {
      Object.defineProperty(result, "_response", {
        value: toCompatResponse(lastResponse)
      });
    }
    return result;
  }
}
var HttpPipelineLogLevel;
(function(HttpPipelineLogLevel2) {
  HttpPipelineLogLevel2[HttpPipelineLogLevel2["ERROR"] = 1] = "ERROR";
  HttpPipelineLogLevel2[HttpPipelineLogLevel2["INFO"] = 3] = "INFO";
  HttpPipelineLogLevel2[HttpPipelineLogLevel2["OFF"] = 0] = "OFF";
  HttpPipelineLogLevel2[HttpPipelineLogLevel2["WARNING"] = 2] = "WARNING";
})(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));
const mockRequestPolicyOptions = {
  log(_logLevel, _message) {
  },
  shouldLog(_logLevel) {
    return false;
  }
};
const requestPolicyFactoryPolicyName = "RequestPolicyFactoryPolicy";
function createRequestPolicyFactoryPolicy(factories) {
  const orderedFactories = factories.slice().reverse();
  return {
    name: requestPolicyFactoryPolicyName,
    async sendRequest(request2, next) {
      let httpPipeline = {
        async sendRequest(httpRequest) {
          const response2 = await next(toPipelineRequest(httpRequest));
          return toCompatResponse(response2, { createProxy: true });
        }
      };
      for (const factory2 of orderedFactories) {
        httpPipeline = factory2.create(httpPipeline, mockRequestPolicyOptions);
      }
      const webResourceLike = toWebResourceLike(request2, { createProxy: true });
      const response = await httpPipeline.sendRequest(webResourceLike);
      return toPipelineResponse(response);
    }
  };
}
function convertHttpClient(requestPolicyClient) {
  return {
    sendRequest: async (request2) => {
      const response = await requestPolicyClient.sendRequest(toWebResourceLike(request2, { createProxy: true }));
      return toPipelineResponse(response);
    }
  };
}
const XML_ATTRKEY = "$";
const XML_CHARKEY = "_";
if (!document || !DOMParser || !Node || !XMLSerializer) {
  throw new Error(`This library depends on the following DOM objects: ["document", "DOMParser", "Node", "XMLSerializer"] to parse XML, but some of these are undefined. You may provide a polyfill to make these globally available in order to support your environment. For more information, please refer to https://aka.ms/azsdk/js/web-workers. `);
}
let ttPolicy;
try {
  if (typeof self.trustedTypes !== "undefined") {
    ttPolicy = self.trustedTypes.createPolicy("@azure/core-xml#xml.browser", {
      createHTML: (s) => s
    });
  }
} catch (e2) {
  console.warn('Could not create trusted types policy "@azure/core-xml#xml.browser"');
}
const doc = document.implementation.createDocument(null, null, null);
const parser = new DOMParser();
function parseXML(str, opts = {}) {
  var _a2, _b2, _c2, _d2, _e, _f;
  try {
    const updatedOptions = {
      rootName: (_a2 = opts.rootName) !== null && _a2 !== void 0 ? _a2 : "",
      includeRoot: (_b2 = opts.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
      xmlCharKey: (_c2 = opts.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY,
      cdataPropName: (_d2 = opts.cdataPropName) !== null && _d2 !== void 0 ? _d2 : "__cdata",
      stopNodes: (_e = opts.stopNodes) !== null && _e !== void 0 ? _e : []
    };
    const dom = parser.parseFromString((_f = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _f !== void 0 ? _f : str, "application/xml");
    throwIfError(dom);
    let obj;
    if (updatedOptions.includeRoot) {
      obj = domToObject(dom, updatedOptions);
    } else {
      obj = domToObject(dom.childNodes[0], updatedOptions);
    }
    return Promise.resolve(obj);
  } catch (err) {
    return Promise.reject(err);
  }
}
let errorNS;
function getErrorNamespace() {
  var _a2, _b2;
  if (errorNS === void 0) {
    try {
      const invalidXML = (_a2 = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML("INVALID")) !== null && _a2 !== void 0 ? _a2 : "INVALID";
      errorNS = (_b2 = parser.parseFromString(invalidXML, "text/xml").getElementsByTagName("parsererror")[0].namespaceURI) !== null && _b2 !== void 0 ? _b2 : "";
    } catch (ignored) {
      errorNS = "";
    }
  }
  return errorNS;
}
function throwIfError(dom) {
  const parserErrors = dom.getElementsByTagName("parsererror");
  if (parserErrors.length > 0 && getErrorNamespace()) {
    for (let i = 0; i < parserErrors.length; i++) {
      if (parserErrors[i].namespaceURI === errorNS) {
        throw new Error(parserErrors[i].innerHTML);
      }
    }
  }
}
function isElement(node) {
  return !!node.attributes;
}
function asElementWithAttributes(node) {
  return isElement(node) && node.hasAttributes() ? node : void 0;
}
function domToObject(node, options) {
  var _a2;
  let result = {};
  const childNodeCount = node.childNodes.length;
  const firstChildNode = node.childNodes[0];
  const onlyChildTextValue = firstChildNode && childNodeCount === 1 && firstChildNode.nodeType === Node.TEXT_NODE && firstChildNode.nodeValue || void 0;
  const elementWithAttributes = asElementWithAttributes(node);
  if (elementWithAttributes) {
    result[XML_ATTRKEY] = {};
    for (let i = 0; i < elementWithAttributes.attributes.length; i++) {
      const attr = elementWithAttributes.attributes[i];
      result[XML_ATTRKEY][attr.nodeName] = attr.nodeValue;
    }
    if (onlyChildTextValue) {
      result[options.xmlCharKey] = onlyChildTextValue;
    }
  } else if (childNodeCount === 0) {
    result = "";
  } else if (onlyChildTextValue) {
    result = onlyChildTextValue;
  }
  if (!onlyChildTextValue) {
    for (let i = 0; i < childNodeCount; i++) {
      const child = node.childNodes[i];
      if ((child === null || child === void 0 ? void 0 : child.nodeType) === Node.CDATA_SECTION_NODE) {
        result = child.textContent;
      } else if (((_a2 = child === null || child === void 0 ? void 0 : child.firstChild) === null || _a2 === void 0 ? void 0 : _a2.nodeType) === Node.CDATA_SECTION_NODE) {
        result[child.nodeName] = child.textContent;
      } else if (child.nodeType !== Node.TEXT_NODE) {
        const childObject = domToObject(child, options);
        if (!result[child.nodeName]) {
          result[child.nodeName] = childObject;
        } else if (Array.isArray(result[child.nodeName])) {
          result[child.nodeName].push(childObject);
        } else {
          result[child.nodeName] = [result[child.nodeName], childObject];
        }
      }
    }
  }
  return result;
}
const serializer = new XMLSerializer();
function stringifyXML(content, opts = {}) {
  var _a2, _b2, _c2, _d2, _e;
  const updatedOptions = {
    rootName: (_a2 = opts.rootName) !== null && _a2 !== void 0 ? _a2 : "root",
    includeRoot: (_b2 = opts.includeRoot) !== null && _b2 !== void 0 ? _b2 : false,
    xmlCharKey: (_c2 = opts.xmlCharKey) !== null && _c2 !== void 0 ? _c2 : XML_CHARKEY,
    cdataPropName: (_d2 = opts.cdataPropName) !== null && _d2 !== void 0 ? _d2 : "__cdata",
    stopNodes: (_e = opts.stopNodes) !== null && _e !== void 0 ? _e : []
  };
  const dom = buildNode(content, updatedOptions.rootName, updatedOptions)[0];
  return '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + serializer.serializeToString(dom).replace(/ xmlns=""/g, "");
}
function buildAttributes(attrs) {
  const result = [];
  for (const key of Object.keys(attrs)) {
    const attr = doc.createAttribute(key);
    attr.value = attrs[key].toString();
    result.push(attr);
  }
  return result;
}
function buildNode(obj, elementName, options) {
  var _a2;
  if (obj === void 0 || obj === null || typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean") {
    const elem = doc.createElement(elementName);
    elem.textContent = obj === void 0 || obj === null ? "" : obj.toString();
    return [elem];
  } else if (Array.isArray(obj)) {
    const result = [];
    for (const arrayElem of obj) {
      for (const child of buildNode(arrayElem, elementName, options)) {
        result.push(child);
      }
    }
    return result;
  } else if (typeof obj === "object") {
    let elem;
    if ((_a2 = obj[XML_ATTRKEY]) === null || _a2 === void 0 ? void 0 : _a2["xmlns"]) {
      elem = doc.createElementNS(obj[XML_ATTRKEY]["xmlns"], elementName);
    } else {
      elem = doc.createElement(elementName);
    }
    for (const key of Object.keys(obj)) {
      if (key === XML_ATTRKEY) {
        for (const attr of buildAttributes(obj[key])) {
          elem.attributes.setNamedItem(attr);
        }
      } else if (key === options.xmlCharKey) {
        elem.textContent = obj[key].toString();
      } else if (key === options.cdataPropName) {
        const cdataElement = doc.createCDATASection(obj[key].toString());
        elem.appendChild(cdataElement);
      } else {
        for (const child of buildNode(obj[key], key, options)) {
          elem.appendChild(child);
        }
      }
    }
    return [elem];
  } else {
    throw new Error(`Illegal value passed to buildObject: ${obj}`);
  }
}
const logger = createClientLogger("storage-blob");
class BaseRequestPolicy {
  /**
   * The main method to implement that manipulates a request/response.
   */
  constructor(_nextPolicy, _options) {
    this._nextPolicy = _nextPolicy;
    this._options = _options;
  }
  /**
   * Get whether or not a log with the provided log level should be logged.
   * @param logLevel - The log level of the log that will be logged.
   * @returns Whether or not a log with the provided log level should be logged.
   */
  shouldLog(logLevel) {
    return this._options.shouldLog(logLevel);
  }
  /**
   * Attempt to log the provided message to the provided logger. If no logger was provided or if
   * the log level does not meat the logger's threshold, then nothing will be logged.
   * @param logLevel - The log level of this log.
   * @param message - The message of this log.
   */
  log(logLevel, message) {
    this._options.log(logLevel, message);
  }
}
const SDK_VERSION = "12.27.0";
const SERVICE_VERSION = "2025-05-05";
const BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024;
const BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4e3 * 1024 * 1024;
const BLOCK_BLOB_MAX_BLOCKS = 5e4;
const DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024;
const DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024;
const DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;
const StorageOAuthScopes = "https://storage.azure.com/.default";
const URLConstants = {
  Parameters: {
    FORCE_BROWSER_NO_CACHE: "_",
    SNAPSHOT: "snapshot",
    VERSIONID: "versionid",
    TIMEOUT: "timeout"
  }
};
const HTTPURLConnection = {
  HTTP_ACCEPTED: 202
};
const HeaderConstants = {
  CONTENT_ID: "Content-ID",
  CONTENT_LENGTH: "Content-Length",
  CONTENT_TRANSFER_ENCODING: "Content-Transfer-Encoding",
  CONTENT_TYPE: "Content-Type",
  COOKIE: "Cookie",
  X_MS_ERROR_CODE: "x-ms-error-code",
  X_MS_VERSION: "x-ms-version"
};
const ETagNone = "";
const ETagAny = "*";
const BATCH_MAX_REQUEST = 256;
const HTTP_LINE_ENDING = "\r\n";
const HTTP_VERSION_1_1 = "HTTP/1.1";
const EncryptionAlgorithmAES25 = "AES256";
const DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;`;
const StorageBlobLoggingAllowedHeaderNames = [
  "Access-Control-Allow-Origin",
  "Cache-Control",
  "Content-Length",
  "Content-Type",
  "Date",
  "Request-Id",
  "traceparent",
  "Transfer-Encoding",
  "User-Agent",
  "x-ms-client-request-id",
  "x-ms-date",
  "x-ms-error-code",
  "x-ms-request-id",
  "x-ms-return-client-request-id",
  "x-ms-version",
  "Accept-Ranges",
  "Content-Disposition",
  "Content-Encoding",
  "Content-Language",
  "Content-MD5",
  "Content-Range",
  "ETag",
  "Last-Modified",
  "Server",
  "Vary",
  "x-ms-content-crc64",
  "x-ms-copy-action",
  "x-ms-copy-completion-time",
  "x-ms-copy-id",
  "x-ms-copy-progress",
  "x-ms-copy-status",
  "x-ms-has-immutability-policy",
  "x-ms-has-legal-hold",
  "x-ms-lease-state",
  "x-ms-lease-status",
  "x-ms-range",
  "x-ms-request-server-encrypted",
  "x-ms-server-encrypted",
  "x-ms-snapshot",
  "x-ms-source-range",
  "If-Match",
  "If-Modified-Since",
  "If-None-Match",
  "If-Unmodified-Since",
  "x-ms-access-tier",
  "x-ms-access-tier-change-time",
  "x-ms-access-tier-inferred",
  "x-ms-account-kind",
  "x-ms-archive-status",
  "x-ms-blob-append-offset",
  "x-ms-blob-cache-control",
  "x-ms-blob-committed-block-count",
  "x-ms-blob-condition-appendpos",
  "x-ms-blob-condition-maxsize",
  "x-ms-blob-content-disposition",
  "x-ms-blob-content-encoding",
  "x-ms-blob-content-language",
  "x-ms-blob-content-length",
  "x-ms-blob-content-md5",
  "x-ms-blob-content-type",
  "x-ms-blob-public-access",
  "x-ms-blob-sequence-number",
  "x-ms-blob-type",
  "x-ms-copy-destination-snapshot",
  "x-ms-creation-time",
  "x-ms-default-encryption-scope",
  "x-ms-delete-snapshots",
  "x-ms-delete-type-permanent",
  "x-ms-deny-encryption-scope-override",
  "x-ms-encryption-algorithm",
  "x-ms-if-sequence-number-eq",
  "x-ms-if-sequence-number-le",
  "x-ms-if-sequence-number-lt",
  "x-ms-incremental-copy",
  "x-ms-lease-action",
  "x-ms-lease-break-period",
  "x-ms-lease-duration",
  "x-ms-lease-id",
  "x-ms-lease-time",
  "x-ms-page-write",
  "x-ms-proposed-lease-id",
  "x-ms-range-get-content-md5",
  "x-ms-rehydrate-priority",
  "x-ms-sequence-number-action",
  "x-ms-sku-name",
  "x-ms-source-content-md5",
  "x-ms-source-if-match",
  "x-ms-source-if-modified-since",
  "x-ms-source-if-none-match",
  "x-ms-source-if-unmodified-since",
  "x-ms-tag-count",
  "x-ms-encryption-key-sha256",
  "x-ms-copy-source-error-code",
  "x-ms-copy-source-status-code",
  "x-ms-if-tags",
  "x-ms-source-if-tags"
];
const StorageBlobLoggingAllowedQueryParameters = [
  "comp",
  "maxresults",
  "rscc",
  "rscd",
  "rsce",
  "rscl",
  "rsct",
  "se",
  "si",
  "sip",
  "sp",
  "spr",
  "sr",
  "srt",
  "ss",
  "st",
  "sv",
  "include",
  "marker",
  "prefix",
  "copyid",
  "restype",
  "blockid",
  "blocklisttype",
  "delimiter",
  "prevsnapshot",
  "ske",
  "skoid",
  "sks",
  "skt",
  "sktid",
  "skv",
  "snapshot"
];
const BlobUsesCustomerSpecifiedEncryptionMsg = "BlobUsesCustomerSpecifiedEncryption";
const BlobDoesNotUseCustomerSpecifiedEncryption = "BlobDoesNotUseCustomerSpecifiedEncryption";
const PathStylePorts = [
  "10000",
  "10001",
  "10002",
  "10003",
  "10004",
  "10100",
  "10101",
  "10102",
  "10103",
  "10104",
  "11000",
  "11001",
  "11002",
  "11003",
  "11004",
  "11100",
  "11101",
  "11102",
  "11103",
  "11104"
];
function escapeURLPath(url2) {
  const urlParsed = new URL(url2);
  let path = urlParsed.pathname;
  path = path || "/";
  path = escape(path);
  urlParsed.pathname = path;
  return urlParsed.toString();
}
function getProxyUriFromDevConnString(connectionString) {
  let proxyUri = "";
  if (connectionString.search("DevelopmentStorageProxyUri=") !== -1) {
    const matchCredentials = connectionString.split(";");
    for (const element of matchCredentials) {
      if (element.trim().startsWith("DevelopmentStorageProxyUri=")) {
        proxyUri = element.trim().match("DevelopmentStorageProxyUri=(.*)")[1];
      }
    }
  }
  return proxyUri;
}
function getValueInConnString(connectionString, argument) {
  const elements = connectionString.split(";");
  for (const element of elements) {
    if (element.trim().startsWith(argument)) {
      return element.trim().match(argument + "=(.*)")[1];
    }
  }
  return "";
}
function extractConnectionStringParts(connectionString) {
  let proxyUri = "";
  if (connectionString.startsWith("UseDevelopmentStorage=true")) {
    proxyUri = getProxyUriFromDevConnString(connectionString);
    connectionString = DevelopmentConnectionString;
  }
  let blobEndpoint = getValueInConnString(connectionString, "BlobEndpoint");
  blobEndpoint = blobEndpoint.endsWith("/") ? blobEndpoint.slice(0, -1) : blobEndpoint;
  if (connectionString.search("DefaultEndpointsProtocol=") !== -1 && connectionString.search("AccountKey=") !== -1) {
    let defaultEndpointsProtocol = "";
    let accountName = "";
    let accountKey = Buffer.from("accountKey", "base64");
    let endpointSuffix = "";
    accountName = getValueInConnString(connectionString, "AccountName");
    accountKey = Buffer.from(getValueInConnString(connectionString, "AccountKey"), "base64");
    if (!blobEndpoint) {
      defaultEndpointsProtocol = getValueInConnString(connectionString, "DefaultEndpointsProtocol");
      const protocol = defaultEndpointsProtocol.toLowerCase();
      if (protocol !== "https" && protocol !== "http") {
        throw new Error("Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'");
      }
      endpointSuffix = getValueInConnString(connectionString, "EndpointSuffix");
      if (!endpointSuffix) {
        throw new Error("Invalid EndpointSuffix in the provided Connection String");
      }
      blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;
    }
    if (!accountName) {
      throw new Error("Invalid AccountName in the provided Connection String");
    } else if (accountKey.length === 0) {
      throw new Error("Invalid AccountKey in the provided Connection String");
    }
    return {
      kind: "AccountConnString",
      url: blobEndpoint,
      accountName,
      accountKey,
      proxyUri
    };
  } else {
    let accountSas = getValueInConnString(connectionString, "SharedAccessSignature");
    let accountName = getValueInConnString(connectionString, "AccountName");
    if (!accountName) {
      accountName = getAccountNameFromUrl(blobEndpoint);
    }
    if (!blobEndpoint) {
      throw new Error("Invalid BlobEndpoint in the provided SAS Connection String");
    } else if (!accountSas) {
      throw new Error("Invalid SharedAccessSignature in the provided SAS Connection String");
    }
    if (accountSas.startsWith("?")) {
      accountSas = accountSas.substring(1);
    }
    return { kind: "SASConnString", url: blobEndpoint, accountName, accountSas };
  }
}
function escape(text2) {
  return encodeURIComponent(text2).replace(/%2F/g, "/").replace(/'/g, "%27").replace(/\+/g, "%20").replace(/%25/g, "%");
}
function appendToURLPath(url2, name) {
  const urlParsed = new URL(url2);
  let path = urlParsed.pathname;
  path = path ? path.endsWith("/") ? `${path}${name}` : `${path}/${name}` : name;
  urlParsed.pathname = path;
  return urlParsed.toString();
}
function setURLParameter(url2, name, value) {
  const urlParsed = new URL(url2);
  const encodedName = encodeURIComponent(name);
  const encodedValue = value ? encodeURIComponent(value) : void 0;
  const searchString = urlParsed.search === "" ? "?" : urlParsed.search;
  const searchPieces = [];
  for (const pair of searchString.slice(1).split("&")) {
    if (pair) {
      const [key] = pair.split("=", 2);
      if (key !== encodedName) {
        searchPieces.push(pair);
      }
    }
  }
  if (encodedValue) {
    searchPieces.push(`${encodedName}=${encodedValue}`);
  }
  urlParsed.search = searchPieces.length ? `?${searchPieces.join("&")}` : "";
  return urlParsed.toString();
}
function getURLParameter(url2, name) {
  var _a2;
  const urlParsed = new URL(url2);
  return (_a2 = urlParsed.searchParams.get(name)) !== null && _a2 !== void 0 ? _a2 : void 0;
}
function setURLHost(url2, host) {
  const urlParsed = new URL(url2);
  urlParsed.hostname = host;
  return urlParsed.toString();
}
function getURLPath(url2) {
  try {
    const urlParsed = new URL(url2);
    return urlParsed.pathname;
  } catch (e2) {
    return void 0;
  }
}
function getURLScheme(url2) {
  try {
    const urlParsed = new URL(url2);
    return urlParsed.protocol.endsWith(":") ? urlParsed.protocol.slice(0, -1) : urlParsed.protocol;
  } catch (e2) {
    return void 0;
  }
}
function getURLPathAndQuery(url2) {
  const urlParsed = new URL(url2);
  const pathString = urlParsed.pathname;
  if (!pathString) {
    throw new RangeError("Invalid url without valid path.");
  }
  let queryString = urlParsed.search || "";
  queryString = queryString.trim();
  if (queryString !== "") {
    queryString = queryString.startsWith("?") ? queryString : `?${queryString}`;
  }
  return `${pathString}${queryString}`;
}
function appendToURLQuery(url2, queryParts) {
  const urlParsed = new URL(url2);
  let query = urlParsed.search;
  if (query) {
    query += "&" + queryParts;
  } else {
    query = queryParts;
  }
  urlParsed.search = query;
  return urlParsed.toString();
}
function truncatedISO8061Date(date, withMilliseconds = true) {
  const dateString = date.toISOString();
  return withMilliseconds ? dateString.substring(0, dateString.length - 1) + "0000Z" : dateString.substring(0, dateString.length - 5) + "Z";
}
function base64encode(content) {
  return !isNode ? btoa(content) : Buffer.from(content).toString("base64");
}
function generateBlockID(blockIDPrefix, blockIndex) {
  const maxSourceStringLength = 48;
  const maxBlockIndexLength = 6;
  const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;
  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {
    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);
  }
  const res = blockIDPrefix + padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, "0");
  return base64encode(res);
}
async function delay(timeInMs, aborter, abortError) {
  return new Promise((resolve, reject) => {
    let timeout;
    const abortHandler = () => {
      if (timeout !== void 0) {
        clearTimeout(timeout);
      }
      reject(abortError);
    };
    const resolveHandler = () => {
      if (aborter !== void 0) {
        aborter.removeEventListener("abort", abortHandler);
      }
      resolve();
    };
    timeout = setTimeout(resolveHandler, timeInMs);
    if (aborter !== void 0) {
      aborter.addEventListener("abort", abortHandler);
    }
  });
}
function padStart(currentString, targetLength, padString = " ") {
  if (String.prototype.padStart) {
    return currentString.padStart(targetLength, padString);
  }
  padString = padString || " ";
  if (currentString.length > targetLength) {
    return currentString;
  } else {
    targetLength = targetLength - currentString.length;
    if (targetLength > padString.length) {
      padString += padString.repeat(targetLength / padString.length);
    }
    return padString.slice(0, targetLength) + currentString;
  }
}
function iEqual(str1, str2) {
  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();
}
function getAccountNameFromUrl(url2) {
  const parsedUrl = new URL(url2);
  let accountName;
  try {
    if (parsedUrl.hostname.split(".")[1] === "blob") {
      accountName = parsedUrl.hostname.split(".")[0];
    } else if (isIpEndpointStyle(parsedUrl)) {
      accountName = parsedUrl.pathname.split("/")[1];
    } else {
      accountName = "";
    }
    return accountName;
  } catch (error) {
    throw new Error("Unable to extract accountName with provided information.");
  }
}
function isIpEndpointStyle(parsedUrl) {
  const host = parsedUrl.host;
  return /^.*:.*:.*$|^(localhost|host.docker.internal)(:[0-9]+)?$|^(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])(\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])){3}(:[0-9]+)?$/.test(host) || Boolean(parsedUrl.port) && PathStylePorts.includes(parsedUrl.port);
}
function toBlobTagsString(tags2) {
  if (tags2 === void 0) {
    return void 0;
  }
  const tagPairs = [];
  for (const key in tags2) {
    if (Object.prototype.hasOwnProperty.call(tags2, key)) {
      const value = tags2[key];
      tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);
    }
  }
  return tagPairs.join("&");
}
function toBlobTags(tags2) {
  if (tags2 === void 0) {
    return void 0;
  }
  const res = {
    blobTagSet: []
  };
  for (const key in tags2) {
    if (Object.prototype.hasOwnProperty.call(tags2, key)) {
      const value = tags2[key];
      res.blobTagSet.push({
        key,
        value
      });
    }
  }
  return res;
}
function toTags(tags2) {
  if (tags2 === void 0) {
    return void 0;
  }
  const res = {};
  for (const blobTag of tags2.blobTagSet) {
    res[blobTag.key] = blobTag.value;
  }
  return res;
}
function toQuerySerialization(textConfiguration) {
  if (textConfiguration === void 0) {
    return void 0;
  }
  switch (textConfiguration.kind) {
    case "csv":
      return {
        format: {
          type: "delimited",
          delimitedTextConfiguration: {
            columnSeparator: textConfiguration.columnSeparator || ",",
            fieldQuote: textConfiguration.fieldQuote || "",
            recordSeparator: textConfiguration.recordSeparator,
            escapeChar: textConfiguration.escapeCharacter || "",
            headersPresent: textConfiguration.hasHeaders || false
          }
        }
      };
    case "json":
      return {
        format: {
          type: "json",
          jsonTextConfiguration: {
            recordSeparator: textConfiguration.recordSeparator
          }
        }
      };
    case "arrow":
      return {
        format: {
          type: "arrow",
          arrowConfiguration: {
            schema: textConfiguration.schema
          }
        }
      };
    case "parquet":
      return {
        format: {
          type: "parquet"
        }
      };
    default:
      throw Error("Invalid BlobQueryTextConfiguration.");
  }
}
function parseObjectReplicationRecord(objectReplicationRecord) {
  if (!objectReplicationRecord) {
    return void 0;
  }
  if ("policy-id" in objectReplicationRecord) {
    return void 0;
  }
  const orProperties = [];
  for (const key in objectReplicationRecord) {
    const ids = key.split("_");
    const policyPrefix = "or-";
    if (ids[0].startsWith(policyPrefix)) {
      ids[0] = ids[0].substring(policyPrefix.length);
    }
    const rule = {
      ruleId: ids[1],
      replicationStatus: objectReplicationRecord[key]
    };
    const policyIndex = orProperties.findIndex((policy) => policy.policyId === ids[0]);
    if (policyIndex > -1) {
      orProperties[policyIndex].rules.push(rule);
    } else {
      orProperties.push({
        policyId: ids[0],
        rules: [rule]
      });
    }
  }
  return orProperties;
}
function httpAuthorizationToString(httpAuthorization) {
  return httpAuthorization ? httpAuthorization.scheme + " " + httpAuthorization.value : void 0;
}
function BlobNameToString(name) {
  if (name.encoded) {
    return decodeURIComponent(name.content);
  } else {
    return name.content;
  }
}
function ConvertInternalResponseOfListBlobFlat(internalResponse) {
  return Object.assign(Object.assign({}, internalResponse), { segment: {
    blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {
      const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });
      return blobItem;
    })
  } });
}
function ConvertInternalResponseOfListBlobHierarchy(internalResponse) {
  var _a2;
  return Object.assign(Object.assign({}, internalResponse), { segment: {
    blobPrefixes: (_a2 = internalResponse.segment.blobPrefixes) === null || _a2 === void 0 ? void 0 : _a2.map((blobPrefixInternal) => {
      const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });
      return blobPrefix;
    }),
    blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {
      const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });
      return blobItem;
    })
  } });
}
function* ExtractPageRangeInfoItems(getPageRangesSegment) {
  let pageRange = [];
  let clearRange = [];
  if (getPageRangesSegment.pageRange)
    pageRange = getPageRangesSegment.pageRange;
  if (getPageRangesSegment.clearRange)
    clearRange = getPageRangesSegment.clearRange;
  let pageRangeIndex = 0;
  let clearRangeIndex = 0;
  while (pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length) {
    if (pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start) {
      yield {
        start: pageRange[pageRangeIndex].start,
        end: pageRange[pageRangeIndex].end,
        isClear: false
      };
      ++pageRangeIndex;
    } else {
      yield {
        start: clearRange[clearRangeIndex].start,
        end: clearRange[clearRangeIndex].end,
        isClear: true
      };
      ++clearRangeIndex;
    }
  }
  for (; pageRangeIndex < pageRange.length; ++pageRangeIndex) {
    yield {
      start: pageRange[pageRangeIndex].start,
      end: pageRange[pageRangeIndex].end,
      isClear: false
    };
  }
  for (; clearRangeIndex < clearRange.length; ++clearRangeIndex) {
    yield {
      start: clearRange[clearRangeIndex].start,
      end: clearRange[clearRangeIndex].end,
      isClear: true
    };
  }
}
function EscapePath(blobName) {
  const split = blobName.split("/");
  for (let i = 0; i < split.length; i++) {
    split[i] = encodeURIComponent(split[i]);
  }
  return split.join("/");
}
function assertResponse(response) {
  if (`_response` in response) {
    return response;
  }
  throw new TypeError(`Unexpected response object ${response}`);
}
var StorageRetryPolicyType$1;
(function(StorageRetryPolicyType2) {
  StorageRetryPolicyType2[StorageRetryPolicyType2["EXPONENTIAL"] = 0] = "EXPONENTIAL";
  StorageRetryPolicyType2[StorageRetryPolicyType2["FIXED"] = 1] = "FIXED";
})(StorageRetryPolicyType$1 || (StorageRetryPolicyType$1 = {}));
const DEFAULT_RETRY_OPTIONS$1 = {
  maxRetryDelayInMs: 120 * 1e3,
  maxTries: 4,
  retryDelayInMs: 4 * 1e3,
  retryPolicyType: StorageRetryPolicyType$1.EXPONENTIAL,
  secondaryHost: "",
  tryTimeoutInMs: void 0
  // Use server side default timeout strategy
};
const RETRY_ABORT_ERROR$1 = new AbortError("The operation was aborted.");
class StorageRetryPolicy extends BaseRequestPolicy {
  /**
   * Creates an instance of RetryPolicy.
   *
   * @param nextPolicy -
   * @param options -
   * @param retryOptions -
   */
  constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS$1) {
    super(nextPolicy, options);
    this.retryOptions = {
      retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS$1.retryPolicyType,
      maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS$1.maxTries,
      tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS$1.tryTimeoutInMs,
      retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS$1.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS$1.retryDelayInMs,
      maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS$1.maxRetryDelayInMs,
      secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS$1.secondaryHost
    };
  }
  /**
   * Sends request.
   *
   * @param request -
   */
  async sendRequest(request2) {
    return this.attemptSendRequest(request2, false, 1);
  }
  /**
   * Decide and perform next retry. Won't mutate request parameter.
   *
   * @param request -
   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then
   *                                   the resource was not found. This may be due to replication delay. So, in this
   *                                   case, we'll never try the secondary again for this operation.
   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes
   *                                   the attempt will be performed by this method call.
   */
  async attemptSendRequest(request2, secondaryHas404, attempt) {
    const newRequest = request2.clone();
    const isPrimaryRetry = secondaryHas404 || !this.retryOptions.secondaryHost || !(request2.method === "GET" || request2.method === "HEAD" || request2.method === "OPTIONS") || attempt % 2 === 1;
    if (!isPrimaryRetry) {
      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost);
    }
    if (this.retryOptions.tryTimeoutInMs) {
      newRequest.url = setURLParameter(newRequest.url, URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1e3).toString());
    }
    let response;
    try {
      logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? "Primary" : "Secondary"}`);
      response = await this._nextPolicy.sendRequest(newRequest);
      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {
        return response;
      }
      secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;
    } catch (err) {
      logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);
      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {
        throw err;
      }
    }
    await this.delay(isPrimaryRetry, attempt, request2.abortSignal);
    return this.attemptSendRequest(request2, secondaryHas404, ++attempt);
  }
  /**
   * Decide whether to retry according to last HTTP response and retry counters.
   *
   * @param isPrimaryRetry -
   * @param attempt -
   * @param response -
   * @param err -
   */
  shouldRetry(isPrimaryRetry, attempt, response, err) {
    if (attempt >= this.retryOptions.maxTries) {
      logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions.maxTries}, no further try.`);
      return false;
    }
    const retriableErrors2 = [
      "ETIMEDOUT",
      "ESOCKETTIMEDOUT",
      "ECONNREFUSED",
      "ECONNRESET",
      "ENOENT",
      "ENOTFOUND",
      "TIMEOUT",
      "EPIPE",
      "REQUEST_SEND_ERROR"
      // For default xhr based http client provided in ms-rest-js
    ];
    if (err) {
      for (const retriableError of retriableErrors2) {
        if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {
          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);
          return true;
        }
      }
    }
    if (response || err) {
      const statusCode = response ? response.status : err ? err.statusCode : 0;
      if (!isPrimaryRetry && statusCode === 404) {
        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);
        return true;
      }
      if (statusCode === 503 || statusCode === 500) {
        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);
        return true;
      }
    }
    if ((err === null || err === void 0 ? void 0 : err.code) === "PARSE_ERROR" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error "Error: Unclosed root tag`))) {
      logger.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry.");
      return true;
    }
    return false;
  }
  /**
   * Delay a calculated time between retries.
   *
   * @param isPrimaryRetry -
   * @param attempt -
   * @param abortSignal -
   */
  async delay(isPrimaryRetry, attempt, abortSignal) {
    let delayTimeInMs = 0;
    if (isPrimaryRetry) {
      switch (this.retryOptions.retryPolicyType) {
        case StorageRetryPolicyType$1.EXPONENTIAL:
          delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);
          break;
        case StorageRetryPolicyType$1.FIXED:
          delayTimeInMs = this.retryOptions.retryDelayInMs;
          break;
      }
    } else {
      delayTimeInMs = Math.random() * 1e3;
    }
    logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);
    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR$1);
  }
}
class StorageRetryPolicyFactory {
  /**
   * Creates an instance of StorageRetryPolicyFactory.
   * @param retryOptions -
   */
  constructor(retryOptions) {
    this.retryOptions = retryOptions;
  }
  /**
   * Creates a StorageRetryPolicy object.
   *
   * @param nextPolicy -
   * @param options -
   */
  create(nextPolicy, options) {
    return new StorageRetryPolicy(nextPolicy, options, this.retryOptions);
  }
}
class StorageSharedKeyCredential {
}
class CredentialPolicy extends BaseRequestPolicy {
  /**
   * Sends out request.
   *
   * @param request -
   */
  sendRequest(request2) {
    return this._nextPolicy.sendRequest(this.signRequest(request2));
  }
  /**
   * Child classes must implement this method with request signing. This method
   * will be executed in {@link sendRequest}.
   *
   * @param request -
   */
  signRequest(request2) {
    return request2;
  }
}
class AnonymousCredentialPolicy extends CredentialPolicy {
  /**
   * Creates an instance of AnonymousCredentialPolicy.
   * @param nextPolicy -
   * @param options -
   */
  // The base class has a protected constructor. Adding a public one to enable constructing of this class.
  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/
  constructor(nextPolicy, options) {
    super(nextPolicy, options);
  }
}
class Credential {
  /**
   * Creates a RequestPolicy object.
   *
   * @param _nextPolicy -
   * @param _options -
   */
  create(_nextPolicy, _options) {
    throw new Error("Method should be implemented in children classes.");
  }
}
class AnonymousCredential extends Credential {
  /**
   * Creates an {@link AnonymousCredentialPolicy} object.
   *
   * @param nextPolicy -
   * @param options -
   */
  create(nextPolicy, options) {
    return new AnonymousCredentialPolicy(nextPolicy, options);
  }
}
let _defaultHttpClient;
function getCachedDefaultHttpClient() {
  if (!_defaultHttpClient) {
    _defaultHttpClient = createDefaultHttpClient();
  }
  return _defaultHttpClient;
}
const storageBrowserPolicyName = "storageBrowserPolicy";
function storageBrowserPolicy() {
  return {
    name: storageBrowserPolicyName,
    async sendRequest(request2, next) {
      if (isNode) {
        return next(request2);
      }
      if (request2.method === "GET" || request2.method === "HEAD") {
        request2.url = setURLParameter(request2.url, URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, (/* @__PURE__ */ new Date()).getTime().toString());
      }
      request2.headers.delete(HeaderConstants.COOKIE);
      request2.headers.delete(HeaderConstants.CONTENT_LENGTH);
      return next(request2);
    }
  };
}
const storageRetryPolicyName = "storageRetryPolicy";
var StorageRetryPolicyType;
(function(StorageRetryPolicyType2) {
  StorageRetryPolicyType2[StorageRetryPolicyType2["EXPONENTIAL"] = 0] = "EXPONENTIAL";
  StorageRetryPolicyType2[StorageRetryPolicyType2["FIXED"] = 1] = "FIXED";
})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));
const DEFAULT_RETRY_OPTIONS = {
  maxRetryDelayInMs: 120 * 1e3,
  maxTries: 4,
  retryDelayInMs: 4 * 1e3,
  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,
  secondaryHost: "",
  tryTimeoutInMs: void 0
  // Use server side default timeout strategy
};
const retriableErrors = [
  "ETIMEDOUT",
  "ESOCKETTIMEDOUT",
  "ECONNREFUSED",
  "ECONNRESET",
  "ENOENT",
  "ENOTFOUND",
  "TIMEOUT",
  "EPIPE",
  "REQUEST_SEND_ERROR"
];
const RETRY_ABORT_ERROR = new AbortError("The operation was aborted.");
function storageRetryPolicy(options = {}) {
  var _a2, _b2, _c2, _d2, _e, _f;
  const retryPolicyType = (_a2 = options.retryPolicyType) !== null && _a2 !== void 0 ? _a2 : DEFAULT_RETRY_OPTIONS.retryPolicyType;
  const maxTries = (_b2 = options.maxTries) !== null && _b2 !== void 0 ? _b2 : DEFAULT_RETRY_OPTIONS.maxTries;
  const retryDelayInMs = (_c2 = options.retryDelayInMs) !== null && _c2 !== void 0 ? _c2 : DEFAULT_RETRY_OPTIONS.retryDelayInMs;
  const maxRetryDelayInMs = (_d2 = options.maxRetryDelayInMs) !== null && _d2 !== void 0 ? _d2 : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs;
  const secondaryHost = (_e = options.secondaryHost) !== null && _e !== void 0 ? _e : DEFAULT_RETRY_OPTIONS.secondaryHost;
  const tryTimeoutInMs = (_f = options.tryTimeoutInMs) !== null && _f !== void 0 ? _f : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs;
  function shouldRetry({ isPrimaryRetry, attempt, response, error }) {
    var _a3, _b3;
    if (attempt >= maxTries) {
      logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${maxTries}, no further try.`);
      return false;
    }
    if (error) {
      for (const retriableError of retriableErrors) {
        if (error.name.toUpperCase().includes(retriableError) || error.message.toUpperCase().includes(retriableError) || error.code && error.code.toString().toUpperCase() === retriableError) {
          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);
          return true;
        }
      }
      if ((error === null || error === void 0 ? void 0 : error.code) === "PARSE_ERROR" && (error === null || error === void 0 ? void 0 : error.message.startsWith(`Error "Error: Unclosed root tag`))) {
        logger.info("RetryPolicy: Incomplete XML response likely due to service timeout, will retry.");
        return true;
      }
    }
    if (response || error) {
      const statusCode = (_b3 = (_a3 = response === null || response === void 0 ? void 0 : response.status) !== null && _a3 !== void 0 ? _a3 : error === null || error === void 0 ? void 0 : error.statusCode) !== null && _b3 !== void 0 ? _b3 : 0;
      if (!isPrimaryRetry && statusCode === 404) {
        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);
        return true;
      }
      if (statusCode === 503 || statusCode === 500) {
        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);
        return true;
      }
    }
    return false;
  }
  function calculateDelay(isPrimaryRetry, attempt) {
    let delayTimeInMs = 0;
    if (isPrimaryRetry) {
      switch (retryPolicyType) {
        case StorageRetryPolicyType.EXPONENTIAL:
          delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * retryDelayInMs, maxRetryDelayInMs);
          break;
        case StorageRetryPolicyType.FIXED:
          delayTimeInMs = retryDelayInMs;
          break;
      }
    } else {
      delayTimeInMs = Math.random() * 1e3;
    }
    logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);
    return delayTimeInMs;
  }
  return {
    name: storageRetryPolicyName,
    async sendRequest(request2, next) {
      if (tryTimeoutInMs) {
        request2.url = setURLParameter(request2.url, URLConstants.Parameters.TIMEOUT, String(Math.floor(tryTimeoutInMs / 1e3)));
      }
      const primaryUrl = request2.url;
      const secondaryUrl = secondaryHost ? setURLHost(request2.url, secondaryHost) : void 0;
      let secondaryHas404 = false;
      let attempt = 1;
      let retryAgain = true;
      let response;
      let error;
      while (retryAgain) {
        const isPrimaryRetry = secondaryHas404 || !secondaryUrl || !["GET", "HEAD", "OPTIONS"].includes(request2.method) || attempt % 2 === 1;
        request2.url = isPrimaryRetry ? primaryUrl : secondaryUrl;
        response = void 0;
        error = void 0;
        try {
          logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? "Primary" : "Secondary"}`);
          response = await next(request2);
          secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;
        } catch (e2) {
          if (isRestError(e2)) {
            logger.error(`RetryPolicy: Caught error, message: ${e2.message}, code: ${e2.code}`);
            error = e2;
          } else {
            logger.error(`RetryPolicy: Caught error, message: ${getErrorMessage(e2)}`);
            throw e2;
          }
        }
        retryAgain = shouldRetry({ isPrimaryRetry, attempt, response, error });
        if (retryAgain) {
          await delay(calculateDelay(isPrimaryRetry, attempt), request2.abortSignal, RETRY_ABORT_ERROR);
        }
        attempt++;
      }
      if (response) {
        return response;
      }
      throw error !== null && error !== void 0 ? error : new RestError("RetryPolicy failed without known error.");
    }
  };
}
const storageSharedKeyCredentialPolicyName = "storageSharedKeyCredentialPolicy";
function storageSharedKeyCredentialPolicy(_options) {
  return {
    name: storageSharedKeyCredentialPolicyName,
    async sendRequest(request2, next) {
      return next(request2);
    }
  };
}
class StorageBrowserPolicy extends BaseRequestPolicy {
  /**
   * Creates an instance of StorageBrowserPolicy.
   * @param nextPolicy -
   * @param options -
   */
  // The base class has a protected constructor. Adding a public one to enable constructing of this class.
  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/
  constructor(nextPolicy, options) {
    super(nextPolicy, options);
  }
  /**
   * Sends out request.
   *
   * @param request -
   */
  async sendRequest(request2) {
    if (isNode) {
      return this._nextPolicy.sendRequest(request2);
    }
    if (request2.method.toUpperCase() === "GET" || request2.method.toUpperCase() === "HEAD") {
      request2.url = setURLParameter(request2.url, URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, (/* @__PURE__ */ new Date()).getTime().toString());
    }
    request2.headers.remove(HeaderConstants.COOKIE);
    request2.headers.remove(HeaderConstants.CONTENT_LENGTH);
    return this._nextPolicy.sendRequest(request2);
  }
}
class StorageBrowserPolicyFactory {
  /**
   * Creates a StorageBrowserPolicyFactory object.
   *
   * @param nextPolicy -
   * @param options -
   */
  create(nextPolicy, options) {
    return new StorageBrowserPolicy(nextPolicy, options);
  }
}
const storageCorrectContentLengthPolicyName = "StorageCorrectContentLengthPolicy";
function storageCorrectContentLengthPolicy() {
  return {
    name: storageCorrectContentLengthPolicyName,
    async sendRequest(request2, next) {
      return next(request2);
    }
  };
}
function isPipelineLike(pipeline) {
  if (!pipeline || typeof pipeline !== "object") {
    return false;
  }
  const castPipeline = pipeline;
  return Array.isArray(castPipeline.factories) && typeof castPipeline.options === "object" && typeof castPipeline.toServiceClientOptions === "function";
}
class Pipeline {
  /**
   * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.
   *
   * @param factories -
   * @param options -
   */
  constructor(factories, options = {}) {
    this.factories = factories;
    this.options = options;
  }
  /**
   * Transfer Pipeline object to ServiceClientOptions object which is required by
   * ServiceClient constructor.
   *
   * @returns The ServiceClientOptions object from this Pipeline.
   */
  toServiceClientOptions() {
    return {
      httpClient: this.options.httpClient,
      requestPolicyFactories: this.factories
    };
  }
}
function newPipeline(credential, pipelineOptions = {}) {
  if (!credential) {
    credential = new AnonymousCredential();
  }
  const pipeline = new Pipeline([], pipelineOptions);
  pipeline._credential = credential;
  return pipeline;
}
function processDownlevelPipeline(pipeline) {
  const knownFactoryFunctions = [
    isAnonymousCredential,
    isStorageSharedKeyCredential,
    isCoreHttpBearerTokenFactory,
    isStorageBrowserPolicyFactory,
    isStorageRetryPolicyFactory,
    isStorageTelemetryPolicyFactory,
    isCoreHttpPolicyFactory
  ];
  if (pipeline.factories.length) {
    const novelFactories = pipeline.factories.filter((factory2) => {
      return !knownFactoryFunctions.some((knownFactory) => knownFactory(factory2));
    });
    if (novelFactories.length) {
      const hasInjector = novelFactories.some((factory2) => isInjectorPolicyFactory(factory2));
      return {
        wrappedPolicies: createRequestPolicyFactoryPolicy(novelFactories),
        afterRetry: hasInjector
      };
    }
  }
  return void 0;
}
function getCoreClientOptions(pipeline) {
  var _a2;
  const _b2 = pipeline.options, { httpClient: v1Client } = _b2, restOptions = __rest(_b2, ["httpClient"]);
  let httpClient = pipeline._coreHttpClient;
  if (!httpClient) {
    httpClient = v1Client ? convertHttpClient(v1Client) : getCachedDefaultHttpClient();
    pipeline._coreHttpClient = httpClient;
  }
  let corePipeline = pipeline._corePipeline;
  if (!corePipeline) {
    const packageDetails = `azsdk-js-azure-storage-blob/${SDK_VERSION}`;
    const userAgentPrefix = restOptions.userAgentOptions && restOptions.userAgentOptions.userAgentPrefix ? `${restOptions.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
    corePipeline = createClientPipeline(Object.assign(Object.assign({}, restOptions), { loggingOptions: {
      additionalAllowedHeaderNames: StorageBlobLoggingAllowedHeaderNames,
      additionalAllowedQueryParameters: StorageBlobLoggingAllowedQueryParameters,
      logger: logger.info
    }, userAgentOptions: {
      userAgentPrefix
    }, serializationOptions: {
      stringifyXML,
      serializerOptions: {
        xml: {
          // Use customized XML char key of "#" so we can deserialize metadata
          // with "_" key
          xmlCharKey: "#"
        }
      }
    }, deserializationOptions: {
      parseXML,
      serializerOptions: {
        xml: {
          // Use customized XML char key of "#" so we can deserialize metadata
          // with "_" key
          xmlCharKey: "#"
        }
      }
    } }));
    corePipeline.removePolicy({ phase: "Retry" });
    corePipeline.removePolicy({ name: decompressResponsePolicyName });
    corePipeline.addPolicy(storageCorrectContentLengthPolicy());
    corePipeline.addPolicy(storageRetryPolicy(restOptions.retryOptions), { phase: "Retry" });
    corePipeline.addPolicy(storageBrowserPolicy());
    const downlevelResults = processDownlevelPipeline(pipeline);
    if (downlevelResults) {
      corePipeline.addPolicy(downlevelResults.wrappedPolicies, downlevelResults.afterRetry ? { afterPhase: "Retry" } : void 0);
    }
    const credential = getCredentialFromPipeline(pipeline);
    if (isTokenCredential(credential)) {
      corePipeline.addPolicy(bearerTokenAuthenticationPolicy({
        credential,
        scopes: (_a2 = restOptions.audience) !== null && _a2 !== void 0 ? _a2 : StorageOAuthScopes,
        challengeCallbacks: { authorizeRequestOnChallenge: authorizeRequestOnTenantChallenge }
      }), { phase: "Sign" });
    } else if (credential instanceof StorageSharedKeyCredential) {
      corePipeline.addPolicy(storageSharedKeyCredentialPolicy({
        accountName: credential.accountName,
        accountKey: credential.accountKey
      }), { phase: "Sign" });
    }
    pipeline._corePipeline = corePipeline;
  }
  return Object.assign(Object.assign({}, restOptions), { allowInsecureConnection: true, httpClient, pipeline: corePipeline });
}
function getCredentialFromPipeline(pipeline) {
  if (pipeline._credential) {
    return pipeline._credential;
  }
  let credential = new AnonymousCredential();
  for (const factory2 of pipeline.factories) {
    if (isTokenCredential(factory2.credential)) {
      credential = factory2.credential;
    } else if (isStorageSharedKeyCredential(factory2)) {
      return factory2;
    }
  }
  return credential;
}
function isStorageSharedKeyCredential(factory2) {
  if (factory2 instanceof StorageSharedKeyCredential) {
    return true;
  }
  return factory2.constructor.name === "StorageSharedKeyCredential";
}
function isAnonymousCredential(factory2) {
  if (factory2 instanceof AnonymousCredential) {
    return true;
  }
  return factory2.constructor.name === "AnonymousCredential";
}
function isCoreHttpBearerTokenFactory(factory2) {
  return isTokenCredential(factory2.credential);
}
function isStorageBrowserPolicyFactory(factory2) {
  if (factory2 instanceof StorageBrowserPolicyFactory) {
    return true;
  }
  return factory2.constructor.name === "StorageBrowserPolicyFactory";
}
function isStorageRetryPolicyFactory(factory2) {
  if (factory2 instanceof StorageRetryPolicyFactory) {
    return true;
  }
  return factory2.constructor.name === "StorageRetryPolicyFactory";
}
function isStorageTelemetryPolicyFactory(factory2) {
  return factory2.constructor.name === "TelemetryPolicyFactory";
}
function isInjectorPolicyFactory(factory2) {
  return factory2.constructor.name === "InjectorPolicyFactory";
}
function isCoreHttpPolicyFactory(factory2) {
  const knownPolicies = [
    "GenerateClientRequestIdPolicy",
    "TracingPolicy",
    "LogPolicy",
    "ProxyPolicy",
    "DisableResponseDecompressionPolicy",
    "KeepAlivePolicy",
    "DeserializationPolicy"
  ];
  const mockHttpClient = {
    sendRequest: async (request2) => {
      return {
        request: request2,
        headers: request2.headers.clone(),
        status: 500
      };
    }
  };
  const mockRequestPolicyOptions2 = {
    log(_logLevel, _message) {
    },
    shouldLog(_logLevel) {
      return false;
    }
  };
  const policyInstance = factory2.create(mockHttpClient, mockRequestPolicyOptions2);
  const policyName = policyInstance.constructor.name;
  return knownPolicies.some((knownPolicyName) => {
    return policyName.startsWith(knownPolicyName);
  });
}
const BlobServiceProperties = {
  serializedName: "BlobServiceProperties",
  xmlName: "StorageServiceProperties",
  type: {
    name: "Composite",
    className: "BlobServiceProperties",
    modelProperties: {
      blobAnalyticsLogging: {
        serializedName: "Logging",
        xmlName: "Logging",
        type: {
          name: "Composite",
          className: "Logging"
        }
      },
      hourMetrics: {
        serializedName: "HourMetrics",
        xmlName: "HourMetrics",
        type: {
          name: "Composite",
          className: "Metrics"
        }
      },
      minuteMetrics: {
        serializedName: "MinuteMetrics",
        xmlName: "MinuteMetrics",
        type: {
          name: "Composite",
          className: "Metrics"
        }
      },
      cors: {
        serializedName: "Cors",
        xmlName: "Cors",
        xmlIsWrapped: true,
        xmlElementName: "CorsRule",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CorsRule"
            }
          }
        }
      },
      defaultServiceVersion: {
        serializedName: "DefaultServiceVersion",
        xmlName: "DefaultServiceVersion",
        type: {
          name: "String"
        }
      },
      deleteRetentionPolicy: {
        serializedName: "DeleteRetentionPolicy",
        xmlName: "DeleteRetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      staticWebsite: {
        serializedName: "StaticWebsite",
        xmlName: "StaticWebsite",
        type: {
          name: "Composite",
          className: "StaticWebsite"
        }
      }
    }
  }
};
const Logging = {
  serializedName: "Logging",
  type: {
    name: "Composite",
    className: "Logging",
    modelProperties: {
      version: {
        serializedName: "Version",
        required: true,
        xmlName: "Version",
        type: {
          name: "String"
        }
      },
      deleteProperty: {
        serializedName: "Delete",
        required: true,
        xmlName: "Delete",
        type: {
          name: "Boolean"
        }
      },
      read: {
        serializedName: "Read",
        required: true,
        xmlName: "Read",
        type: {
          name: "Boolean"
        }
      },
      write: {
        serializedName: "Write",
        required: true,
        xmlName: "Write",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "RetentionPolicy",
        xmlName: "RetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};
const RetentionPolicy = {
  serializedName: "RetentionPolicy",
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    modelProperties: {
      enabled: {
        serializedName: "Enabled",
        required: true,
        xmlName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      days: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "Days",
        xmlName: "Days",
        type: {
          name: "Number"
        }
      }
    }
  }
};
const Metrics = {
  serializedName: "Metrics",
  type: {
    name: "Composite",
    className: "Metrics",
    modelProperties: {
      version: {
        serializedName: "Version",
        xmlName: "Version",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "Enabled",
        required: true,
        xmlName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      includeAPIs: {
        serializedName: "IncludeAPIs",
        xmlName: "IncludeAPIs",
        type: {
          name: "Boolean"
        }
      },
      retentionPolicy: {
        serializedName: "RetentionPolicy",
        xmlName: "RetentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      }
    }
  }
};
const CorsRule = {
  serializedName: "CorsRule",
  type: {
    name: "Composite",
    className: "CorsRule",
    modelProperties: {
      allowedOrigins: {
        serializedName: "AllowedOrigins",
        required: true,
        xmlName: "AllowedOrigins",
        type: {
          name: "String"
        }
      },
      allowedMethods: {
        serializedName: "AllowedMethods",
        required: true,
        xmlName: "AllowedMethods",
        type: {
          name: "String"
        }
      },
      allowedHeaders: {
        serializedName: "AllowedHeaders",
        required: true,
        xmlName: "AllowedHeaders",
        type: {
          name: "String"
        }
      },
      exposedHeaders: {
        serializedName: "ExposedHeaders",
        required: true,
        xmlName: "ExposedHeaders",
        type: {
          name: "String"
        }
      },
      maxAgeInSeconds: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "MaxAgeInSeconds",
        required: true,
        xmlName: "MaxAgeInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};
const StaticWebsite = {
  serializedName: "StaticWebsite",
  type: {
    name: "Composite",
    className: "StaticWebsite",
    modelProperties: {
      enabled: {
        serializedName: "Enabled",
        required: true,
        xmlName: "Enabled",
        type: {
          name: "Boolean"
        }
      },
      indexDocument: {
        serializedName: "IndexDocument",
        xmlName: "IndexDocument",
        type: {
          name: "String"
        }
      },
      errorDocument404Path: {
        serializedName: "ErrorDocument404Path",
        xmlName: "ErrorDocument404Path",
        type: {
          name: "String"
        }
      },
      defaultIndexDocumentPath: {
        serializedName: "DefaultIndexDocumentPath",
        xmlName: "DefaultIndexDocumentPath",
        type: {
          name: "String"
        }
      }
    }
  }
};
const StorageError = {
  serializedName: "StorageError",
  type: {
    name: "Composite",
    className: "StorageError",
    modelProperties: {
      message: {
        serializedName: "Message",
        xmlName: "Message",
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "Code",
        xmlName: "Code",
        type: {
          name: "String"
        }
      },
      authenticationErrorDetail: {
        serializedName: "AuthenticationErrorDetail",
        xmlName: "AuthenticationErrorDetail",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobServiceStatistics = {
  serializedName: "BlobServiceStatistics",
  xmlName: "StorageServiceStats",
  type: {
    name: "Composite",
    className: "BlobServiceStatistics",
    modelProperties: {
      geoReplication: {
        serializedName: "GeoReplication",
        xmlName: "GeoReplication",
        type: {
          name: "Composite",
          className: "GeoReplication"
        }
      }
    }
  }
};
const GeoReplication = {
  serializedName: "GeoReplication",
  type: {
    name: "Composite",
    className: "GeoReplication",
    modelProperties: {
      status: {
        serializedName: "Status",
        required: true,
        xmlName: "Status",
        type: {
          name: "Enum",
          allowedValues: ["live", "bootstrap", "unavailable"]
        }
      },
      lastSyncOn: {
        serializedName: "LastSyncTime",
        required: true,
        xmlName: "LastSyncTime",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const ListContainersSegmentResponse = {
  serializedName: "ListContainersSegmentResponse",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "ListContainersSegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "Prefix",
        xmlName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        serializedName: "Marker",
        xmlName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        serializedName: "MaxResults",
        xmlName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      containerItems: {
        serializedName: "ContainerItems",
        required: true,
        xmlName: "Containers",
        xmlIsWrapped: true,
        xmlElementName: "Container",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerItem"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerItem = {
  serializedName: "ContainerItem",
  xmlName: "Container",
  type: {
    name: "Composite",
    className: "ContainerItem",
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      deleted: {
        serializedName: "Deleted",
        xmlName: "Deleted",
        type: {
          name: "Boolean"
        }
      },
      version: {
        serializedName: "Version",
        xmlName: "Version",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "Properties",
        xmlName: "Properties",
        type: {
          name: "Composite",
          className: "ContainerProperties"
        }
      },
      metadata: {
        serializedName: "Metadata",
        xmlName: "Metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};
const ContainerProperties = {
  serializedName: "ContainerProperties",
  type: {
    name: "Composite",
    className: "ContainerProperties",
    modelProperties: {
      lastModified: {
        serializedName: "Last-Modified",
        required: true,
        xmlName: "Last-Modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "Etag",
        required: true,
        xmlName: "Etag",
        type: {
          name: "String"
        }
      },
      leaseStatus: {
        serializedName: "LeaseStatus",
        xmlName: "LeaseStatus",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      leaseState: {
        serializedName: "LeaseState",
        xmlName: "LeaseState",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseDuration: {
        serializedName: "LeaseDuration",
        xmlName: "LeaseDuration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      publicAccess: {
        serializedName: "PublicAccess",
        xmlName: "PublicAccess",
        type: {
          name: "Enum",
          allowedValues: ["container", "blob"]
        }
      },
      hasImmutabilityPolicy: {
        serializedName: "HasImmutabilityPolicy",
        xmlName: "HasImmutabilityPolicy",
        type: {
          name: "Boolean"
        }
      },
      hasLegalHold: {
        serializedName: "HasLegalHold",
        xmlName: "HasLegalHold",
        type: {
          name: "Boolean"
        }
      },
      defaultEncryptionScope: {
        serializedName: "DefaultEncryptionScope",
        xmlName: "DefaultEncryptionScope",
        type: {
          name: "String"
        }
      },
      preventEncryptionScopeOverride: {
        serializedName: "DenyEncryptionScopeOverride",
        xmlName: "DenyEncryptionScopeOverride",
        type: {
          name: "Boolean"
        }
      },
      deletedOn: {
        serializedName: "DeletedTime",
        xmlName: "DeletedTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      remainingRetentionDays: {
        serializedName: "RemainingRetentionDays",
        xmlName: "RemainingRetentionDays",
        type: {
          name: "Number"
        }
      },
      isImmutableStorageWithVersioningEnabled: {
        serializedName: "ImmutableStorageWithVersioningEnabled",
        xmlName: "ImmutableStorageWithVersioningEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
const KeyInfo = {
  serializedName: "KeyInfo",
  type: {
    name: "Composite",
    className: "KeyInfo",
    modelProperties: {
      startsOn: {
        serializedName: "Start",
        required: true,
        xmlName: "Start",
        type: {
          name: "String"
        }
      },
      expiresOn: {
        serializedName: "Expiry",
        required: true,
        xmlName: "Expiry",
        type: {
          name: "String"
        }
      }
    }
  }
};
const UserDelegationKey = {
  serializedName: "UserDelegationKey",
  type: {
    name: "Composite",
    className: "UserDelegationKey",
    modelProperties: {
      signedObjectId: {
        serializedName: "SignedOid",
        required: true,
        xmlName: "SignedOid",
        type: {
          name: "String"
        }
      },
      signedTenantId: {
        serializedName: "SignedTid",
        required: true,
        xmlName: "SignedTid",
        type: {
          name: "String"
        }
      },
      signedStartsOn: {
        serializedName: "SignedStart",
        required: true,
        xmlName: "SignedStart",
        type: {
          name: "String"
        }
      },
      signedExpiresOn: {
        serializedName: "SignedExpiry",
        required: true,
        xmlName: "SignedExpiry",
        type: {
          name: "String"
        }
      },
      signedService: {
        serializedName: "SignedService",
        required: true,
        xmlName: "SignedService",
        type: {
          name: "String"
        }
      },
      signedVersion: {
        serializedName: "SignedVersion",
        required: true,
        xmlName: "SignedVersion",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "Value",
        required: true,
        xmlName: "Value",
        type: {
          name: "String"
        }
      }
    }
  }
};
const FilterBlobSegment = {
  serializedName: "FilterBlobSegment",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "FilterBlobSegment",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      where: {
        serializedName: "Where",
        required: true,
        xmlName: "Where",
        type: {
          name: "String"
        }
      },
      blobs: {
        serializedName: "Blobs",
        required: true,
        xmlName: "Blobs",
        xmlIsWrapped: true,
        xmlElementName: "Blob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FilterBlobItem"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
const FilterBlobItem = {
  serializedName: "FilterBlobItem",
  xmlName: "Blob",
  type: {
    name: "Composite",
    className: "FilterBlobItem",
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "ContainerName",
        required: true,
        xmlName: "ContainerName",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "Tags",
        xmlName: "Tags",
        type: {
          name: "Composite",
          className: "BlobTags"
        }
      }
    }
  }
};
const BlobTags = {
  serializedName: "BlobTags",
  xmlName: "Tags",
  type: {
    name: "Composite",
    className: "BlobTags",
    modelProperties: {
      blobTagSet: {
        serializedName: "BlobTagSet",
        required: true,
        xmlName: "TagSet",
        xmlIsWrapped: true,
        xmlElementName: "Tag",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobTag"
            }
          }
        }
      }
    }
  }
};
const BlobTag = {
  serializedName: "BlobTag",
  xmlName: "Tag",
  type: {
    name: "Composite",
    className: "BlobTag",
    modelProperties: {
      key: {
        serializedName: "Key",
        required: true,
        xmlName: "Key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "Value",
        required: true,
        xmlName: "Value",
        type: {
          name: "String"
        }
      }
    }
  }
};
const SignedIdentifier = {
  serializedName: "SignedIdentifier",
  xmlName: "SignedIdentifier",
  type: {
    name: "Composite",
    className: "SignedIdentifier",
    modelProperties: {
      id: {
        serializedName: "Id",
        required: true,
        xmlName: "Id",
        type: {
          name: "String"
        }
      },
      accessPolicy: {
        serializedName: "AccessPolicy",
        xmlName: "AccessPolicy",
        type: {
          name: "Composite",
          className: "AccessPolicy"
        }
      }
    }
  }
};
const AccessPolicy = {
  serializedName: "AccessPolicy",
  type: {
    name: "Composite",
    className: "AccessPolicy",
    modelProperties: {
      startsOn: {
        serializedName: "Start",
        xmlName: "Start",
        type: {
          name: "String"
        }
      },
      expiresOn: {
        serializedName: "Expiry",
        xmlName: "Expiry",
        type: {
          name: "String"
        }
      },
      permissions: {
        serializedName: "Permission",
        xmlName: "Permission",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ListBlobsFlatSegmentResponse = {
  serializedName: "ListBlobsFlatSegmentResponse",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "ListBlobsFlatSegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "ContainerName",
        required: true,
        xmlName: "ContainerName",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "Prefix",
        xmlName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        serializedName: "Marker",
        xmlName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        serializedName: "MaxResults",
        xmlName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      segment: {
        serializedName: "Segment",
        xmlName: "Blobs",
        type: {
          name: "Composite",
          className: "BlobFlatListSegment"
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobFlatListSegment = {
  serializedName: "BlobFlatListSegment",
  xmlName: "Blobs",
  type: {
    name: "Composite",
    className: "BlobFlatListSegment",
    modelProperties: {
      blobItems: {
        serializedName: "BlobItems",
        required: true,
        xmlName: "BlobItems",
        xmlElementName: "Blob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobItemInternal"
            }
          }
        }
      }
    }
  }
};
const BlobItemInternal = {
  serializedName: "BlobItemInternal",
  xmlName: "Blob",
  type: {
    name: "Composite",
    className: "BlobItemInternal",
    modelProperties: {
      name: {
        serializedName: "Name",
        xmlName: "Name",
        type: {
          name: "Composite",
          className: "BlobName"
        }
      },
      deleted: {
        serializedName: "Deleted",
        required: true,
        xmlName: "Deleted",
        type: {
          name: "Boolean"
        }
      },
      snapshot: {
        serializedName: "Snapshot",
        required: true,
        xmlName: "Snapshot",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "VersionId",
        xmlName: "VersionId",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        serializedName: "IsCurrentVersion",
        xmlName: "IsCurrentVersion",
        type: {
          name: "Boolean"
        }
      },
      properties: {
        serializedName: "Properties",
        xmlName: "Properties",
        type: {
          name: "Composite",
          className: "BlobPropertiesInternal"
        }
      },
      metadata: {
        serializedName: "Metadata",
        xmlName: "Metadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      blobTags: {
        serializedName: "BlobTags",
        xmlName: "Tags",
        type: {
          name: "Composite",
          className: "BlobTags"
        }
      },
      objectReplicationMetadata: {
        serializedName: "ObjectReplicationMetadata",
        xmlName: "OrMetadata",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      hasVersionsOnly: {
        serializedName: "HasVersionsOnly",
        xmlName: "HasVersionsOnly",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
const BlobName = {
  serializedName: "BlobName",
  type: {
    name: "Composite",
    className: "BlobName",
    modelProperties: {
      encoded: {
        serializedName: "Encoded",
        xmlName: "Encoded",
        xmlIsAttribute: true,
        type: {
          name: "Boolean"
        }
      },
      content: {
        serializedName: "content",
        xmlName: "content",
        xmlIsMsText: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobPropertiesInternal = {
  serializedName: "BlobPropertiesInternal",
  xmlName: "Properties",
  type: {
    name: "Composite",
    className: "BlobPropertiesInternal",
    modelProperties: {
      createdOn: {
        serializedName: "Creation-Time",
        xmlName: "Creation-Time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      lastModified: {
        serializedName: "Last-Modified",
        required: true,
        xmlName: "Last-Modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "Etag",
        required: true,
        xmlName: "Etag",
        type: {
          name: "String"
        }
      },
      contentLength: {
        serializedName: "Content-Length",
        xmlName: "Content-Length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "Content-Type",
        xmlName: "Content-Type",
        type: {
          name: "String"
        }
      },
      contentEncoding: {
        serializedName: "Content-Encoding",
        xmlName: "Content-Encoding",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "Content-Language",
        xmlName: "Content-Language",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "Content-MD5",
        xmlName: "Content-MD5",
        type: {
          name: "ByteArray"
        }
      },
      contentDisposition: {
        serializedName: "Content-Disposition",
        xmlName: "Content-Disposition",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "Cache-Control",
        xmlName: "Cache-Control",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "BlobType",
        xmlName: "BlobType",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      leaseStatus: {
        serializedName: "LeaseStatus",
        xmlName: "LeaseStatus",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      leaseState: {
        serializedName: "LeaseState",
        xmlName: "LeaseState",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseDuration: {
        serializedName: "LeaseDuration",
        xmlName: "LeaseDuration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      copyId: {
        serializedName: "CopyId",
        xmlName: "CopyId",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "CopyStatus",
        xmlName: "CopyStatus",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      copySource: {
        serializedName: "CopySource",
        xmlName: "CopySource",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "CopyProgress",
        xmlName: "CopyProgress",
        type: {
          name: "String"
        }
      },
      copyCompletedOn: {
        serializedName: "CopyCompletionTime",
        xmlName: "CopyCompletionTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "CopyStatusDescription",
        xmlName: "CopyStatusDescription",
        type: {
          name: "String"
        }
      },
      serverEncrypted: {
        serializedName: "ServerEncrypted",
        xmlName: "ServerEncrypted",
        type: {
          name: "Boolean"
        }
      },
      incrementalCopy: {
        serializedName: "IncrementalCopy",
        xmlName: "IncrementalCopy",
        type: {
          name: "Boolean"
        }
      },
      destinationSnapshot: {
        serializedName: "DestinationSnapshot",
        xmlName: "DestinationSnapshot",
        type: {
          name: "String"
        }
      },
      deletedOn: {
        serializedName: "DeletedTime",
        xmlName: "DeletedTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      remainingRetentionDays: {
        serializedName: "RemainingRetentionDays",
        xmlName: "RemainingRetentionDays",
        type: {
          name: "Number"
        }
      },
      accessTier: {
        serializedName: "AccessTier",
        xmlName: "AccessTier",
        type: {
          name: "Enum",
          allowedValues: [
            "P4",
            "P6",
            "P10",
            "P15",
            "P20",
            "P30",
            "P40",
            "P50",
            "P60",
            "P70",
            "P80",
            "Hot",
            "Cool",
            "Archive",
            "Cold"
          ]
        }
      },
      accessTierInferred: {
        serializedName: "AccessTierInferred",
        xmlName: "AccessTierInferred",
        type: {
          name: "Boolean"
        }
      },
      archiveStatus: {
        serializedName: "ArchiveStatus",
        xmlName: "ArchiveStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "rehydrate-pending-to-hot",
            "rehydrate-pending-to-cool",
            "rehydrate-pending-to-cold"
          ]
        }
      },
      customerProvidedKeySha256: {
        serializedName: "CustomerProvidedKeySha256",
        xmlName: "CustomerProvidedKeySha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "EncryptionScope",
        xmlName: "EncryptionScope",
        type: {
          name: "String"
        }
      },
      accessTierChangedOn: {
        serializedName: "AccessTierChangeTime",
        xmlName: "AccessTierChangeTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      tagCount: {
        serializedName: "TagCount",
        xmlName: "TagCount",
        type: {
          name: "Number"
        }
      },
      expiresOn: {
        serializedName: "Expiry-Time",
        xmlName: "Expiry-Time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        serializedName: "Sealed",
        xmlName: "Sealed",
        type: {
          name: "Boolean"
        }
      },
      rehydratePriority: {
        serializedName: "RehydratePriority",
        xmlName: "RehydratePriority",
        type: {
          name: "Enum",
          allowedValues: ["High", "Standard"]
        }
      },
      lastAccessedOn: {
        serializedName: "LastAccessTime",
        xmlName: "LastAccessTime",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiresOn: {
        serializedName: "ImmutabilityPolicyUntilDate",
        xmlName: "ImmutabilityPolicyUntilDate",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "ImmutabilityPolicyMode",
        xmlName: "ImmutabilityPolicyMode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      },
      legalHold: {
        serializedName: "LegalHold",
        xmlName: "LegalHold",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
const ListBlobsHierarchySegmentResponse = {
  serializedName: "ListBlobsHierarchySegmentResponse",
  xmlName: "EnumerationResults",
  type: {
    name: "Composite",
    className: "ListBlobsHierarchySegmentResponse",
    modelProperties: {
      serviceEndpoint: {
        serializedName: "ServiceEndpoint",
        required: true,
        xmlName: "ServiceEndpoint",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "ContainerName",
        required: true,
        xmlName: "ContainerName",
        xmlIsAttribute: true,
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "Prefix",
        xmlName: "Prefix",
        type: {
          name: "String"
        }
      },
      marker: {
        serializedName: "Marker",
        xmlName: "Marker",
        type: {
          name: "String"
        }
      },
      maxPageSize: {
        serializedName: "MaxResults",
        xmlName: "MaxResults",
        type: {
          name: "Number"
        }
      },
      delimiter: {
        serializedName: "Delimiter",
        xmlName: "Delimiter",
        type: {
          name: "String"
        }
      },
      segment: {
        serializedName: "Segment",
        xmlName: "Blobs",
        type: {
          name: "Composite",
          className: "BlobHierarchyListSegment"
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobHierarchyListSegment = {
  serializedName: "BlobHierarchyListSegment",
  xmlName: "Blobs",
  type: {
    name: "Composite",
    className: "BlobHierarchyListSegment",
    modelProperties: {
      blobPrefixes: {
        serializedName: "BlobPrefixes",
        xmlName: "BlobPrefixes",
        xmlElementName: "BlobPrefix",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobPrefix"
            }
          }
        }
      },
      blobItems: {
        serializedName: "BlobItems",
        required: true,
        xmlName: "BlobItems",
        xmlElementName: "Blob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobItemInternal"
            }
          }
        }
      }
    }
  }
};
const BlobPrefix = {
  serializedName: "BlobPrefix",
  type: {
    name: "Composite",
    className: "BlobPrefix",
    modelProperties: {
      name: {
        serializedName: "Name",
        xmlName: "Name",
        type: {
          name: "Composite",
          className: "BlobName"
        }
      }
    }
  }
};
const BlockLookupList = {
  serializedName: "BlockLookupList",
  xmlName: "BlockList",
  type: {
    name: "Composite",
    className: "BlockLookupList",
    modelProperties: {
      committed: {
        serializedName: "Committed",
        xmlName: "Committed",
        xmlElementName: "Committed",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      uncommitted: {
        serializedName: "Uncommitted",
        xmlName: "Uncommitted",
        xmlElementName: "Uncommitted",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      latest: {
        serializedName: "Latest",
        xmlName: "Latest",
        xmlElementName: "Latest",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};
const BlockList = {
  serializedName: "BlockList",
  type: {
    name: "Composite",
    className: "BlockList",
    modelProperties: {
      committedBlocks: {
        serializedName: "CommittedBlocks",
        xmlName: "CommittedBlocks",
        xmlIsWrapped: true,
        xmlElementName: "Block",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Block"
            }
          }
        }
      },
      uncommittedBlocks: {
        serializedName: "UncommittedBlocks",
        xmlName: "UncommittedBlocks",
        xmlIsWrapped: true,
        xmlElementName: "Block",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Block"
            }
          }
        }
      }
    }
  }
};
const Block = {
  serializedName: "Block",
  type: {
    name: "Composite",
    className: "Block",
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "Size",
        required: true,
        xmlName: "Size",
        type: {
          name: "Number"
        }
      }
    }
  }
};
const PageList = {
  serializedName: "PageList",
  type: {
    name: "Composite",
    className: "PageList",
    modelProperties: {
      pageRange: {
        serializedName: "PageRange",
        xmlName: "PageRange",
        xmlElementName: "PageRange",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PageRange"
            }
          }
        }
      },
      clearRange: {
        serializedName: "ClearRange",
        xmlName: "ClearRange",
        xmlElementName: "ClearRange",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClearRange"
            }
          }
        }
      },
      continuationToken: {
        serializedName: "NextMarker",
        xmlName: "NextMarker",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageRange = {
  serializedName: "PageRange",
  xmlName: "PageRange",
  type: {
    name: "Composite",
    className: "PageRange",
    modelProperties: {
      start: {
        serializedName: "Start",
        required: true,
        xmlName: "Start",
        type: {
          name: "Number"
        }
      },
      end: {
        serializedName: "End",
        required: true,
        xmlName: "End",
        type: {
          name: "Number"
        }
      }
    }
  }
};
const ClearRange = {
  serializedName: "ClearRange",
  xmlName: "ClearRange",
  type: {
    name: "Composite",
    className: "ClearRange",
    modelProperties: {
      start: {
        serializedName: "Start",
        required: true,
        xmlName: "Start",
        type: {
          name: "Number"
        }
      },
      end: {
        serializedName: "End",
        required: true,
        xmlName: "End",
        type: {
          name: "Number"
        }
      }
    }
  }
};
const QueryRequest = {
  serializedName: "QueryRequest",
  xmlName: "QueryRequest",
  type: {
    name: "Composite",
    className: "QueryRequest",
    modelProperties: {
      queryType: {
        serializedName: "QueryType",
        required: true,
        xmlName: "QueryType",
        type: {
          name: "String"
        }
      },
      expression: {
        serializedName: "Expression",
        required: true,
        xmlName: "Expression",
        type: {
          name: "String"
        }
      },
      inputSerialization: {
        serializedName: "InputSerialization",
        xmlName: "InputSerialization",
        type: {
          name: "Composite",
          className: "QuerySerialization"
        }
      },
      outputSerialization: {
        serializedName: "OutputSerialization",
        xmlName: "OutputSerialization",
        type: {
          name: "Composite",
          className: "QuerySerialization"
        }
      }
    }
  }
};
const QuerySerialization = {
  serializedName: "QuerySerialization",
  type: {
    name: "Composite",
    className: "QuerySerialization",
    modelProperties: {
      format: {
        serializedName: "Format",
        xmlName: "Format",
        type: {
          name: "Composite",
          className: "QueryFormat"
        }
      }
    }
  }
};
const QueryFormat = {
  serializedName: "QueryFormat",
  type: {
    name: "Composite",
    className: "QueryFormat",
    modelProperties: {
      type: {
        serializedName: "Type",
        required: true,
        xmlName: "Type",
        type: {
          name: "Enum",
          allowedValues: ["delimited", "json", "arrow", "parquet"]
        }
      },
      delimitedTextConfiguration: {
        serializedName: "DelimitedTextConfiguration",
        xmlName: "DelimitedTextConfiguration",
        type: {
          name: "Composite",
          className: "DelimitedTextConfiguration"
        }
      },
      jsonTextConfiguration: {
        serializedName: "JsonTextConfiguration",
        xmlName: "JsonTextConfiguration",
        type: {
          name: "Composite",
          className: "JsonTextConfiguration"
        }
      },
      arrowConfiguration: {
        serializedName: "ArrowConfiguration",
        xmlName: "ArrowConfiguration",
        type: {
          name: "Composite",
          className: "ArrowConfiguration"
        }
      },
      parquetTextConfiguration: {
        serializedName: "ParquetTextConfiguration",
        xmlName: "ParquetTextConfiguration",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};
const DelimitedTextConfiguration = {
  serializedName: "DelimitedTextConfiguration",
  xmlName: "DelimitedTextConfiguration",
  type: {
    name: "Composite",
    className: "DelimitedTextConfiguration",
    modelProperties: {
      columnSeparator: {
        serializedName: "ColumnSeparator",
        xmlName: "ColumnSeparator",
        type: {
          name: "String"
        }
      },
      fieldQuote: {
        serializedName: "FieldQuote",
        xmlName: "FieldQuote",
        type: {
          name: "String"
        }
      },
      recordSeparator: {
        serializedName: "RecordSeparator",
        xmlName: "RecordSeparator",
        type: {
          name: "String"
        }
      },
      escapeChar: {
        serializedName: "EscapeChar",
        xmlName: "EscapeChar",
        type: {
          name: "String"
        }
      },
      headersPresent: {
        serializedName: "HeadersPresent",
        xmlName: "HasHeaders",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
const JsonTextConfiguration = {
  serializedName: "JsonTextConfiguration",
  xmlName: "JsonTextConfiguration",
  type: {
    name: "Composite",
    className: "JsonTextConfiguration",
    modelProperties: {
      recordSeparator: {
        serializedName: "RecordSeparator",
        xmlName: "RecordSeparator",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ArrowConfiguration = {
  serializedName: "ArrowConfiguration",
  xmlName: "ArrowConfiguration",
  type: {
    name: "Composite",
    className: "ArrowConfiguration",
    modelProperties: {
      schema: {
        serializedName: "Schema",
        required: true,
        xmlName: "Schema",
        xmlIsWrapped: true,
        xmlElementName: "Field",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ArrowField"
            }
          }
        }
      }
    }
  }
};
const ArrowField = {
  serializedName: "ArrowField",
  xmlName: "Field",
  type: {
    name: "Composite",
    className: "ArrowField",
    modelProperties: {
      type: {
        serializedName: "Type",
        required: true,
        xmlName: "Type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "Name",
        xmlName: "Name",
        type: {
          name: "String"
        }
      },
      precision: {
        serializedName: "Precision",
        xmlName: "Precision",
        type: {
          name: "Number"
        }
      },
      scale: {
        serializedName: "Scale",
        xmlName: "Scale",
        type: {
          name: "Number"
        }
      }
    }
  }
};
const ServiceSetPropertiesHeaders = {
  serializedName: "Service_setPropertiesHeaders",
  type: {
    name: "Composite",
    className: "ServiceSetPropertiesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceSetPropertiesExceptionHeaders = {
  serializedName: "Service_setPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceSetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceGetPropertiesHeaders = {
  serializedName: "Service_getPropertiesHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetPropertiesHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceGetPropertiesExceptionHeaders = {
  serializedName: "Service_getPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceGetStatisticsHeaders = {
  serializedName: "Service_getStatisticsHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetStatisticsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceGetStatisticsExceptionHeaders = {
  serializedName: "Service_getStatisticsExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetStatisticsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceListContainersSegmentHeaders = {
  serializedName: "Service_listContainersSegmentHeaders",
  type: {
    name: "Composite",
    className: "ServiceListContainersSegmentHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceListContainersSegmentExceptionHeaders = {
  serializedName: "Service_listContainersSegmentExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceListContainersSegmentExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceGetUserDelegationKeyHeaders = {
  serializedName: "Service_getUserDelegationKeyHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetUserDelegationKeyHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceGetUserDelegationKeyExceptionHeaders = {
  serializedName: "Service_getUserDelegationKeyExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetUserDelegationKeyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceGetAccountInfoHeaders = {
  serializedName: "Service_getAccountInfoHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        xmlName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard_LRS",
            "Standard_GRS",
            "Standard_RAGRS",
            "Standard_ZRS",
            "Premium_LRS"
          ]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        xmlName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "BlobStorage",
            "StorageV2",
            "FileStorage",
            "BlockBlobStorage"
          ]
        }
      },
      isHierarchicalNamespaceEnabled: {
        serializedName: "x-ms-is-hns-enabled",
        xmlName: "x-ms-is-hns-enabled",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceGetAccountInfoExceptionHeaders = {
  serializedName: "Service_getAccountInfoExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceGetAccountInfoExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceSubmitBatchHeaders = {
  serializedName: "Service_submitBatchHeaders",
  type: {
    name: "Composite",
    className: "ServiceSubmitBatchHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceSubmitBatchExceptionHeaders = {
  serializedName: "Service_submitBatchExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceSubmitBatchExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceFilterBlobsHeaders = {
  serializedName: "Service_filterBlobsHeaders",
  type: {
    name: "Composite",
    className: "ServiceFilterBlobsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ServiceFilterBlobsExceptionHeaders = {
  serializedName: "Service_filterBlobsExceptionHeaders",
  type: {
    name: "Composite",
    className: "ServiceFilterBlobsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerCreateHeaders = {
  serializedName: "Container_createHeaders",
  type: {
    name: "Composite",
    className: "ContainerCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerCreateExceptionHeaders = {
  serializedName: "Container_createExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerCreateExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerGetPropertiesHeaders = {
  serializedName: "Container_getPropertiesHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetPropertiesHeaders",
    modelProperties: {
      metadata: {
        serializedName: "x-ms-meta",
        headerCollectionPrefix: "x-ms-meta-",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobPublicAccess: {
        serializedName: "x-ms-blob-public-access",
        xmlName: "x-ms-blob-public-access",
        type: {
          name: "Enum",
          allowedValues: ["container", "blob"]
        }
      },
      hasImmutabilityPolicy: {
        serializedName: "x-ms-has-immutability-policy",
        xmlName: "x-ms-has-immutability-policy",
        type: {
          name: "Boolean"
        }
      },
      hasLegalHold: {
        serializedName: "x-ms-has-legal-hold",
        xmlName: "x-ms-has-legal-hold",
        type: {
          name: "Boolean"
        }
      },
      defaultEncryptionScope: {
        serializedName: "x-ms-default-encryption-scope",
        xmlName: "x-ms-default-encryption-scope",
        type: {
          name: "String"
        }
      },
      denyEncryptionScopeOverride: {
        serializedName: "x-ms-deny-encryption-scope-override",
        xmlName: "x-ms-deny-encryption-scope-override",
        type: {
          name: "Boolean"
        }
      },
      isImmutableStorageWithVersioningEnabled: {
        serializedName: "x-ms-immutable-storage-with-versioning-enabled",
        xmlName: "x-ms-immutable-storage-with-versioning-enabled",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerGetPropertiesExceptionHeaders = {
  serializedName: "Container_getPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerDeleteHeaders = {
  serializedName: "Container_deleteHeaders",
  type: {
    name: "Composite",
    className: "ContainerDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerDeleteExceptionHeaders = {
  serializedName: "Container_deleteExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerDeleteExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerSetMetadataHeaders = {
  serializedName: "Container_setMetadataHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetMetadataHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerSetMetadataExceptionHeaders = {
  serializedName: "Container_setMetadataExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetMetadataExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerGetAccessPolicyHeaders = {
  serializedName: "Container_getAccessPolicyHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccessPolicyHeaders",
    modelProperties: {
      blobPublicAccess: {
        serializedName: "x-ms-blob-public-access",
        xmlName: "x-ms-blob-public-access",
        type: {
          name: "Enum",
          allowedValues: ["container", "blob"]
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerGetAccessPolicyExceptionHeaders = {
  serializedName: "Container_getAccessPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccessPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerSetAccessPolicyHeaders = {
  serializedName: "Container_setAccessPolicyHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetAccessPolicyHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerSetAccessPolicyExceptionHeaders = {
  serializedName: "Container_setAccessPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerSetAccessPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerRestoreHeaders = {
  serializedName: "Container_restoreHeaders",
  type: {
    name: "Composite",
    className: "ContainerRestoreHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerRestoreExceptionHeaders = {
  serializedName: "Container_restoreExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerRestoreExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerRenameHeaders = {
  serializedName: "Container_renameHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenameHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerRenameExceptionHeaders = {
  serializedName: "Container_renameExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenameExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerSubmitBatchHeaders = {
  serializedName: "Container_submitBatchHeaders",
  type: {
    name: "Composite",
    className: "ContainerSubmitBatchHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerSubmitBatchExceptionHeaders = {
  serializedName: "Container_submitBatchExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerSubmitBatchExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerFilterBlobsHeaders = {
  serializedName: "Container_filterBlobsHeaders",
  type: {
    name: "Composite",
    className: "ContainerFilterBlobsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const ContainerFilterBlobsExceptionHeaders = {
  serializedName: "Container_filterBlobsExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerFilterBlobsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerAcquireLeaseHeaders = {
  serializedName: "Container_acquireLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerAcquireLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const ContainerAcquireLeaseExceptionHeaders = {
  serializedName: "Container_acquireLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerAcquireLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerReleaseLeaseHeaders = {
  serializedName: "Container_releaseLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerReleaseLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const ContainerReleaseLeaseExceptionHeaders = {
  serializedName: "Container_releaseLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerReleaseLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerRenewLeaseHeaders = {
  serializedName: "Container_renewLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenewLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const ContainerRenewLeaseExceptionHeaders = {
  serializedName: "Container_renewLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerRenewLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerBreakLeaseHeaders = {
  serializedName: "Container_breakLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerBreakLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseTime: {
        serializedName: "x-ms-lease-time",
        xmlName: "x-ms-lease-time",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const ContainerBreakLeaseExceptionHeaders = {
  serializedName: "Container_breakLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerBreakLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerChangeLeaseHeaders = {
  serializedName: "Container_changeLeaseHeaders",
  type: {
    name: "Composite",
    className: "ContainerChangeLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const ContainerChangeLeaseExceptionHeaders = {
  serializedName: "Container_changeLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerChangeLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerListBlobFlatSegmentHeaders = {
  serializedName: "Container_listBlobFlatSegmentHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobFlatSegmentHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerListBlobFlatSegmentExceptionHeaders = {
  serializedName: "Container_listBlobFlatSegmentExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobFlatSegmentExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerListBlobHierarchySegmentHeaders = {
  serializedName: "Container_listBlobHierarchySegmentHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobHierarchySegmentHeaders",
    modelProperties: {
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerListBlobHierarchySegmentExceptionHeaders = {
  serializedName: "Container_listBlobHierarchySegmentExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerListBlobHierarchySegmentExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const ContainerGetAccountInfoHeaders = {
  serializedName: "Container_getAccountInfoHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        xmlName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard_LRS",
            "Standard_GRS",
            "Standard_RAGRS",
            "Standard_ZRS",
            "Premium_LRS"
          ]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        xmlName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "BlobStorage",
            "StorageV2",
            "FileStorage",
            "BlockBlobStorage"
          ]
        }
      },
      isHierarchicalNamespaceEnabled: {
        serializedName: "x-ms-is-hns-enabled",
        xmlName: "x-ms-is-hns-enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
const ContainerGetAccountInfoExceptionHeaders = {
  serializedName: "Container_getAccountInfoExceptionHeaders",
  type: {
    name: "Composite",
    className: "ContainerGetAccountInfoExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobDownloadHeaders = {
  serializedName: "Blob_downloadHeaders",
  type: {
    name: "Composite",
    className: "BlobDownloadHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      createdOn: {
        serializedName: "x-ms-creation-time",
        xmlName: "x-ms-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        headerCollectionPrefix: "x-ms-meta-",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      objectReplicationPolicyId: {
        serializedName: "x-ms-or-policy-id",
        xmlName: "x-ms-or-policy-id",
        type: {
          name: "String"
        }
      },
      objectReplicationRules: {
        serializedName: "x-ms-or",
        headerCollectionPrefix: "x-ms-or-",
        xmlName: "x-ms-or",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      contentLength: {
        serializedName: "content-length",
        xmlName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      contentRange: {
        serializedName: "content-range",
        xmlName: "content-range",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        xmlName: "content-encoding",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        xmlName: "cache-control",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        xmlName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        xmlName: "content-language",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        xmlName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletedOn: {
        serializedName: "x-ms-copy-completion-time",
        xmlName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        xmlName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        xmlName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        serializedName: "x-ms-is-current-version",
        xmlName: "x-ms-is-current-version",
        type: {
          name: "Boolean"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        xmlName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        xmlName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      blobContentMD5: {
        serializedName: "x-ms-blob-content-md5",
        xmlName: "x-ms-blob-content-md5",
        type: {
          name: "ByteArray"
        }
      },
      tagCount: {
        serializedName: "x-ms-tag-count",
        xmlName: "x-ms-tag-count",
        type: {
          name: "Number"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        xmlName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      },
      lastAccessed: {
        serializedName: "x-ms-last-access-time",
        xmlName: "x-ms-last-access-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiresOn: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      },
      legalHold: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      },
      contentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};
const BlobDownloadExceptionHeaders = {
  serializedName: "Blob_downloadExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobDownloadExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobGetPropertiesHeaders = {
  serializedName: "Blob_getPropertiesHeaders",
  type: {
    name: "Composite",
    className: "BlobGetPropertiesHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      createdOn: {
        serializedName: "x-ms-creation-time",
        xmlName: "x-ms-creation-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        headerCollectionPrefix: "x-ms-meta-",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      objectReplicationPolicyId: {
        serializedName: "x-ms-or-policy-id",
        xmlName: "x-ms-or-policy-id",
        type: {
          name: "String"
        }
      },
      objectReplicationRules: {
        serializedName: "x-ms-or",
        headerCollectionPrefix: "x-ms-or-",
        xmlName: "x-ms-or",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        xmlName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletedOn: {
        serializedName: "x-ms-copy-completion-time",
        xmlName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        xmlName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        xmlName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      isIncrementalCopy: {
        serializedName: "x-ms-incremental-copy",
        xmlName: "x-ms-incremental-copy",
        type: {
          name: "Boolean"
        }
      },
      destinationSnapshot: {
        serializedName: "x-ms-copy-destination-snapshot",
        xmlName: "x-ms-copy-destination-snapshot",
        type: {
          name: "String"
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      contentLength: {
        serializedName: "content-length",
        xmlName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        xmlName: "content-encoding",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        xmlName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        xmlName: "content-language",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        xmlName: "cache-control",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        xmlName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        xmlName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      accessTier: {
        serializedName: "x-ms-access-tier",
        xmlName: "x-ms-access-tier",
        type: {
          name: "String"
        }
      },
      accessTierInferred: {
        serializedName: "x-ms-access-tier-inferred",
        xmlName: "x-ms-access-tier-inferred",
        type: {
          name: "Boolean"
        }
      },
      archiveStatus: {
        serializedName: "x-ms-archive-status",
        xmlName: "x-ms-archive-status",
        type: {
          name: "String"
        }
      },
      accessTierChangedOn: {
        serializedName: "x-ms-access-tier-change-time",
        xmlName: "x-ms-access-tier-change-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      isCurrentVersion: {
        serializedName: "x-ms-is-current-version",
        xmlName: "x-ms-is-current-version",
        type: {
          name: "Boolean"
        }
      },
      tagCount: {
        serializedName: "x-ms-tag-count",
        xmlName: "x-ms-tag-count",
        type: {
          name: "Number"
        }
      },
      expiresOn: {
        serializedName: "x-ms-expiry-time",
        xmlName: "x-ms-expiry-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        xmlName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      },
      rehydratePriority: {
        serializedName: "x-ms-rehydrate-priority",
        xmlName: "x-ms-rehydrate-priority",
        type: {
          name: "Enum",
          allowedValues: ["High", "Standard"]
        }
      },
      lastAccessed: {
        serializedName: "x-ms-last-access-time",
        xmlName: "x-ms-last-access-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiresOn: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      },
      legalHold: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobGetPropertiesExceptionHeaders = {
  serializedName: "Blob_getPropertiesExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobGetPropertiesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobDeleteHeaders = {
  serializedName: "Blob_deleteHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobDeleteExceptionHeaders = {
  serializedName: "Blob_deleteExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobUndeleteHeaders = {
  serializedName: "Blob_undeleteHeaders",
  type: {
    name: "Composite",
    className: "BlobUndeleteHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobUndeleteExceptionHeaders = {
  serializedName: "Blob_undeleteExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobUndeleteExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobSetExpiryHeaders = {
  serializedName: "Blob_setExpiryHeaders",
  type: {
    name: "Composite",
    className: "BlobSetExpiryHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const BlobSetExpiryExceptionHeaders = {
  serializedName: "Blob_setExpiryExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetExpiryExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobSetHttpHeadersHeaders = {
  serializedName: "Blob_setHttpHeadersHeaders",
  type: {
    name: "Composite",
    className: "BlobSetHttpHeadersHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobSetHttpHeadersExceptionHeaders = {
  serializedName: "Blob_setHttpHeadersExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetHttpHeadersExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobSetImmutabilityPolicyHeaders = {
  serializedName: "Blob_setImmutabilityPolicyHeaders",
  type: {
    name: "Composite",
    className: "BlobSetImmutabilityPolicyHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyExpiry: {
        serializedName: "x-ms-immutability-policy-until-date",
        xmlName: "x-ms-immutability-policy-until-date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      immutabilityPolicyMode: {
        serializedName: "x-ms-immutability-policy-mode",
        xmlName: "x-ms-immutability-policy-mode",
        type: {
          name: "Enum",
          allowedValues: ["Mutable", "Unlocked", "Locked"]
        }
      }
    }
  }
};
const BlobSetImmutabilityPolicyExceptionHeaders = {
  serializedName: "Blob_setImmutabilityPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetImmutabilityPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobDeleteImmutabilityPolicyHeaders = {
  serializedName: "Blob_deleteImmutabilityPolicyHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteImmutabilityPolicyHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const BlobDeleteImmutabilityPolicyExceptionHeaders = {
  serializedName: "Blob_deleteImmutabilityPolicyExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobDeleteImmutabilityPolicyExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobSetLegalHoldHeaders = {
  serializedName: "Blob_setLegalHoldHeaders",
  type: {
    name: "Composite",
    className: "BlobSetLegalHoldHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      legalHold: {
        serializedName: "x-ms-legal-hold",
        xmlName: "x-ms-legal-hold",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
const BlobSetLegalHoldExceptionHeaders = {
  serializedName: "Blob_setLegalHoldExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetLegalHoldExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobSetMetadataHeaders = {
  serializedName: "Blob_setMetadataHeaders",
  type: {
    name: "Composite",
    className: "BlobSetMetadataHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobSetMetadataExceptionHeaders = {
  serializedName: "Blob_setMetadataExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetMetadataExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobAcquireLeaseHeaders = {
  serializedName: "Blob_acquireLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobAcquireLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const BlobAcquireLeaseExceptionHeaders = {
  serializedName: "Blob_acquireLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobAcquireLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobReleaseLeaseHeaders = {
  serializedName: "Blob_releaseLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobReleaseLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const BlobReleaseLeaseExceptionHeaders = {
  serializedName: "Blob_releaseLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobReleaseLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobRenewLeaseHeaders = {
  serializedName: "Blob_renewLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobRenewLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const BlobRenewLeaseExceptionHeaders = {
  serializedName: "Blob_renewLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobRenewLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobChangeLeaseHeaders = {
  serializedName: "Blob_changeLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobChangeLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      leaseId: {
        serializedName: "x-ms-lease-id",
        xmlName: "x-ms-lease-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const BlobChangeLeaseExceptionHeaders = {
  serializedName: "Blob_changeLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobChangeLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobBreakLeaseHeaders = {
  serializedName: "Blob_breakLeaseHeaders",
  type: {
    name: "Composite",
    className: "BlobBreakLeaseHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      leaseTime: {
        serializedName: "x-ms-lease-time",
        xmlName: "x-ms-lease-time",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      }
    }
  }
};
const BlobBreakLeaseExceptionHeaders = {
  serializedName: "Blob_breakLeaseExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobBreakLeaseExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobCreateSnapshotHeaders = {
  serializedName: "Blob_createSnapshotHeaders",
  type: {
    name: "Composite",
    className: "BlobCreateSnapshotHeaders",
    modelProperties: {
      snapshot: {
        serializedName: "x-ms-snapshot",
        xmlName: "x-ms-snapshot",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobCreateSnapshotExceptionHeaders = {
  serializedName: "Blob_createSnapshotExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobCreateSnapshotExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobStartCopyFromURLHeaders = {
  serializedName: "Blob_startCopyFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlobStartCopyFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobStartCopyFromURLExceptionHeaders = {
  serializedName: "Blob_startCopyFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobStartCopyFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobCopyFromURLHeaders = {
  serializedName: "Blob_copyFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlobCopyFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        defaultValue: "success",
        isConstant: true,
        serializedName: "x-ms-copy-status",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobCopyFromURLExceptionHeaders = {
  serializedName: "Blob_copyFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobCopyFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobAbortCopyFromURLHeaders = {
  serializedName: "Blob_abortCopyFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlobAbortCopyFromURLHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobAbortCopyFromURLExceptionHeaders = {
  serializedName: "Blob_abortCopyFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobAbortCopyFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobSetTierHeaders = {
  serializedName: "Blob_setTierHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTierHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobSetTierExceptionHeaders = {
  serializedName: "Blob_setTierExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTierExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobGetAccountInfoHeaders = {
  serializedName: "Blob_getAccountInfoHeaders",
  type: {
    name: "Composite",
    className: "BlobGetAccountInfoHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      skuName: {
        serializedName: "x-ms-sku-name",
        xmlName: "x-ms-sku-name",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard_LRS",
            "Standard_GRS",
            "Standard_RAGRS",
            "Standard_ZRS",
            "Premium_LRS"
          ]
        }
      },
      accountKind: {
        serializedName: "x-ms-account-kind",
        xmlName: "x-ms-account-kind",
        type: {
          name: "Enum",
          allowedValues: [
            "Storage",
            "BlobStorage",
            "StorageV2",
            "FileStorage",
            "BlockBlobStorage"
          ]
        }
      },
      isHierarchicalNamespaceEnabled: {
        serializedName: "x-ms-is-hns-enabled",
        xmlName: "x-ms-is-hns-enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
const BlobGetAccountInfoExceptionHeaders = {
  serializedName: "Blob_getAccountInfoExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobGetAccountInfoExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobQueryHeaders = {
  serializedName: "Blob_queryHeaders",
  type: {
    name: "Composite",
    className: "BlobQueryHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      metadata: {
        serializedName: "x-ms-meta",
        headerCollectionPrefix: "x-ms-meta-",
        xmlName: "x-ms-meta",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      contentLength: {
        serializedName: "content-length",
        xmlName: "content-length",
        type: {
          name: "Number"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      contentRange: {
        serializedName: "content-range",
        xmlName: "content-range",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      contentEncoding: {
        serializedName: "content-encoding",
        xmlName: "content-encoding",
        type: {
          name: "String"
        }
      },
      cacheControl: {
        serializedName: "cache-control",
        xmlName: "cache-control",
        type: {
          name: "String"
        }
      },
      contentDisposition: {
        serializedName: "content-disposition",
        xmlName: "content-disposition",
        type: {
          name: "String"
        }
      },
      contentLanguage: {
        serializedName: "content-language",
        xmlName: "content-language",
        type: {
          name: "String"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      blobType: {
        serializedName: "x-ms-blob-type",
        xmlName: "x-ms-blob-type",
        type: {
          name: "Enum",
          allowedValues: ["BlockBlob", "PageBlob", "AppendBlob"]
        }
      },
      copyCompletionTime: {
        serializedName: "x-ms-copy-completion-time",
        xmlName: "x-ms-copy-completion-time",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyStatusDescription: {
        serializedName: "x-ms-copy-status-description",
        xmlName: "x-ms-copy-status-description",
        type: {
          name: "String"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyProgress: {
        serializedName: "x-ms-copy-progress",
        xmlName: "x-ms-copy-progress",
        type: {
          name: "String"
        }
      },
      copySource: {
        serializedName: "x-ms-copy-source",
        xmlName: "x-ms-copy-source",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      leaseDuration: {
        serializedName: "x-ms-lease-duration",
        xmlName: "x-ms-lease-duration",
        type: {
          name: "Enum",
          allowedValues: ["infinite", "fixed"]
        }
      },
      leaseState: {
        serializedName: "x-ms-lease-state",
        xmlName: "x-ms-lease-state",
        type: {
          name: "Enum",
          allowedValues: [
            "available",
            "leased",
            "expired",
            "breaking",
            "broken"
          ]
        }
      },
      leaseStatus: {
        serializedName: "x-ms-lease-status",
        xmlName: "x-ms-lease-status",
        type: {
          name: "Enum",
          allowedValues: ["locked", "unlocked"]
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      acceptRanges: {
        serializedName: "accept-ranges",
        xmlName: "accept-ranges",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-server-encrypted",
        xmlName: "x-ms-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      blobContentMD5: {
        serializedName: "x-ms-blob-content-md5",
        xmlName: "x-ms-blob-content-md5",
        type: {
          name: "ByteArray"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      },
      contentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};
const BlobQueryExceptionHeaders = {
  serializedName: "Blob_queryExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobQueryExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobGetTagsHeaders = {
  serializedName: "Blob_getTagsHeaders",
  type: {
    name: "Composite",
    className: "BlobGetTagsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobGetTagsExceptionHeaders = {
  serializedName: "Blob_getTagsExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobGetTagsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobSetTagsHeaders = {
  serializedName: "Blob_setTagsHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTagsHeaders",
    modelProperties: {
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlobSetTagsExceptionHeaders = {
  serializedName: "Blob_setTagsExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlobSetTagsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobCreateHeaders = {
  serializedName: "PageBlob_createHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobCreateExceptionHeaders = {
  serializedName: "PageBlob_createExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCreateExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobUploadPagesHeaders = {
  serializedName: "PageBlob_uploadPagesHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobUploadPagesExceptionHeaders = {
  serializedName: "PageBlob_uploadPagesExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobClearPagesHeaders = {
  serializedName: "PageBlob_clearPagesHeaders",
  type: {
    name: "Composite",
    className: "PageBlobClearPagesHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobClearPagesExceptionHeaders = {
  serializedName: "PageBlob_clearPagesExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobClearPagesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobUploadPagesFromURLHeaders = {
  serializedName: "PageBlob_uploadPagesFromURLHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesFromURLHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobUploadPagesFromURLExceptionHeaders = {
  serializedName: "PageBlob_uploadPagesFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUploadPagesFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobGetPageRangesHeaders = {
  serializedName: "PageBlob_getPageRangesHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        xmlName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobGetPageRangesExceptionHeaders = {
  serializedName: "PageBlob_getPageRangesExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobGetPageRangesDiffHeaders = {
  serializedName: "PageBlob_getPageRangesDiffHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesDiffHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        xmlName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobGetPageRangesDiffExceptionHeaders = {
  serializedName: "PageBlob_getPageRangesDiffExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobGetPageRangesDiffExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobResizeHeaders = {
  serializedName: "PageBlob_resizeHeaders",
  type: {
    name: "Composite",
    className: "PageBlobResizeHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobResizeExceptionHeaders = {
  serializedName: "PageBlob_resizeExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobResizeExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobUpdateSequenceNumberHeaders = {
  serializedName: "PageBlob_updateSequenceNumberHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUpdateSequenceNumberHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobSequenceNumber: {
        serializedName: "x-ms-blob-sequence-number",
        xmlName: "x-ms-blob-sequence-number",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobUpdateSequenceNumberExceptionHeaders = {
  serializedName: "PageBlob_updateSequenceNumberExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobUpdateSequenceNumberExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobCopyIncrementalHeaders = {
  serializedName: "PageBlob_copyIncrementalHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCopyIncrementalHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      copyId: {
        serializedName: "x-ms-copy-id",
        xmlName: "x-ms-copy-id",
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "x-ms-copy-status",
        xmlName: "x-ms-copy-status",
        type: {
          name: "Enum",
          allowedValues: ["pending", "success", "aborted", "failed"]
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const PageBlobCopyIncrementalExceptionHeaders = {
  serializedName: "PageBlob_copyIncrementalExceptionHeaders",
  type: {
    name: "Composite",
    className: "PageBlobCopyIncrementalExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const AppendBlobCreateHeaders = {
  serializedName: "AppendBlob_createHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobCreateHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const AppendBlobCreateExceptionHeaders = {
  serializedName: "AppendBlob_createExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobCreateExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const AppendBlobAppendBlockHeaders = {
  serializedName: "AppendBlob_appendBlockHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobAppendOffset: {
        serializedName: "x-ms-blob-append-offset",
        xmlName: "x-ms-blob-append-offset",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const AppendBlobAppendBlockExceptionHeaders = {
  serializedName: "AppendBlob_appendBlockExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const AppendBlobAppendBlockFromUrlHeaders = {
  serializedName: "AppendBlob_appendBlockFromUrlHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockFromUrlHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      blobAppendOffset: {
        serializedName: "x-ms-blob-append-offset",
        xmlName: "x-ms-blob-append-offset",
        type: {
          name: "String"
        }
      },
      blobCommittedBlockCount: {
        serializedName: "x-ms-blob-committed-block-count",
        xmlName: "x-ms-blob-committed-block-count",
        type: {
          name: "Number"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const AppendBlobAppendBlockFromUrlExceptionHeaders = {
  serializedName: "AppendBlob_appendBlockFromUrlExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobAppendBlockFromUrlExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const AppendBlobSealHeaders = {
  serializedName: "AppendBlob_sealHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobSealHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isSealed: {
        serializedName: "x-ms-blob-sealed",
        xmlName: "x-ms-blob-sealed",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
const AppendBlobSealExceptionHeaders = {
  serializedName: "AppendBlob_sealExceptionHeaders",
  type: {
    name: "Composite",
    className: "AppendBlobSealExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobUploadHeaders = {
  serializedName: "BlockBlob_uploadHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobUploadHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobUploadExceptionHeaders = {
  serializedName: "BlockBlob_uploadExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobUploadExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobPutBlobFromUrlHeaders = {
  serializedName: "BlockBlob_putBlobFromUrlHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobPutBlobFromUrlHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobPutBlobFromUrlExceptionHeaders = {
  serializedName: "BlockBlob_putBlobFromUrlExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobPutBlobFromUrlExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobStageBlockHeaders = {
  serializedName: "BlockBlob_stageBlockHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockHeaders",
    modelProperties: {
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobStageBlockExceptionHeaders = {
  serializedName: "BlockBlob_stageBlockExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobStageBlockFromURLHeaders = {
  serializedName: "BlockBlob_stageBlockFromURLHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockFromURLHeaders",
    modelProperties: {
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobStageBlockFromURLExceptionHeaders = {
  serializedName: "BlockBlob_stageBlockFromURLExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobStageBlockFromURLExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobCommitBlockListHeaders = {
  serializedName: "BlockBlob_commitBlockListHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobCommitBlockListHeaders",
    modelProperties: {
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      contentMD5: {
        serializedName: "content-md5",
        xmlName: "content-md5",
        type: {
          name: "ByteArray"
        }
      },
      xMsContentCrc64: {
        serializedName: "x-ms-content-crc64",
        xmlName: "x-ms-content-crc64",
        type: {
          name: "ByteArray"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      versionId: {
        serializedName: "x-ms-version-id",
        xmlName: "x-ms-version-id",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      isServerEncrypted: {
        serializedName: "x-ms-request-server-encrypted",
        xmlName: "x-ms-request-server-encrypted",
        type: {
          name: "Boolean"
        }
      },
      encryptionKeySha256: {
        serializedName: "x-ms-encryption-key-sha256",
        xmlName: "x-ms-encryption-key-sha256",
        type: {
          name: "String"
        }
      },
      encryptionScope: {
        serializedName: "x-ms-encryption-scope",
        xmlName: "x-ms-encryption-scope",
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobCommitBlockListExceptionHeaders = {
  serializedName: "BlockBlob_commitBlockListExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobCommitBlockListExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobGetBlockListHeaders = {
  serializedName: "BlockBlob_getBlockListHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobGetBlockListHeaders",
    modelProperties: {
      lastModified: {
        serializedName: "last-modified",
        xmlName: "last-modified",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      etag: {
        serializedName: "etag",
        xmlName: "etag",
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "content-type",
        xmlName: "content-type",
        type: {
          name: "String"
        }
      },
      blobContentLength: {
        serializedName: "x-ms-blob-content-length",
        xmlName: "x-ms-blob-content-length",
        type: {
          name: "Number"
        }
      },
      clientRequestId: {
        serializedName: "x-ms-client-request-id",
        xmlName: "x-ms-client-request-id",
        type: {
          name: "String"
        }
      },
      requestId: {
        serializedName: "x-ms-request-id",
        xmlName: "x-ms-request-id",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-version",
        xmlName: "x-ms-version",
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "date",
        xmlName: "date",
        type: {
          name: "DateTimeRfc1123"
        }
      },
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const BlockBlobGetBlockListExceptionHeaders = {
  serializedName: "BlockBlob_getBlockListExceptionHeaders",
  type: {
    name: "Composite",
    className: "BlockBlobGetBlockListExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        xmlName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
const Mappers = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AccessPolicy,
  AppendBlobAppendBlockExceptionHeaders,
  AppendBlobAppendBlockFromUrlExceptionHeaders,
  AppendBlobAppendBlockFromUrlHeaders,
  AppendBlobAppendBlockHeaders,
  AppendBlobCreateExceptionHeaders,
  AppendBlobCreateHeaders,
  AppendBlobSealExceptionHeaders,
  AppendBlobSealHeaders,
  ArrowConfiguration,
  ArrowField,
  BlobAbortCopyFromURLExceptionHeaders,
  BlobAbortCopyFromURLHeaders,
  BlobAcquireLeaseExceptionHeaders,
  BlobAcquireLeaseHeaders,
  BlobBreakLeaseExceptionHeaders,
  BlobBreakLeaseHeaders,
  BlobChangeLeaseExceptionHeaders,
  BlobChangeLeaseHeaders,
  BlobCopyFromURLExceptionHeaders,
  BlobCopyFromURLHeaders,
  BlobCreateSnapshotExceptionHeaders,
  BlobCreateSnapshotHeaders,
  BlobDeleteExceptionHeaders,
  BlobDeleteHeaders,
  BlobDeleteImmutabilityPolicyExceptionHeaders,
  BlobDeleteImmutabilityPolicyHeaders,
  BlobDownloadExceptionHeaders,
  BlobDownloadHeaders,
  BlobFlatListSegment,
  BlobGetAccountInfoExceptionHeaders,
  BlobGetAccountInfoHeaders,
  BlobGetPropertiesExceptionHeaders,
  BlobGetPropertiesHeaders,
  BlobGetTagsExceptionHeaders,
  BlobGetTagsHeaders,
  BlobHierarchyListSegment,
  BlobItemInternal,
  BlobName,
  BlobPrefix,
  BlobPropertiesInternal,
  BlobQueryExceptionHeaders,
  BlobQueryHeaders,
  BlobReleaseLeaseExceptionHeaders,
  BlobReleaseLeaseHeaders,
  BlobRenewLeaseExceptionHeaders,
  BlobRenewLeaseHeaders,
  BlobServiceProperties,
  BlobServiceStatistics,
  BlobSetExpiryExceptionHeaders,
  BlobSetExpiryHeaders,
  BlobSetHttpHeadersExceptionHeaders,
  BlobSetHttpHeadersHeaders,
  BlobSetImmutabilityPolicyExceptionHeaders,
  BlobSetImmutabilityPolicyHeaders,
  BlobSetLegalHoldExceptionHeaders,
  BlobSetLegalHoldHeaders,
  BlobSetMetadataExceptionHeaders,
  BlobSetMetadataHeaders,
  BlobSetTagsExceptionHeaders,
  BlobSetTagsHeaders,
  BlobSetTierExceptionHeaders,
  BlobSetTierHeaders,
  BlobStartCopyFromURLExceptionHeaders,
  BlobStartCopyFromURLHeaders,
  BlobTag,
  BlobTags,
  BlobUndeleteExceptionHeaders,
  BlobUndeleteHeaders,
  Block,
  BlockBlobCommitBlockListExceptionHeaders,
  BlockBlobCommitBlockListHeaders,
  BlockBlobGetBlockListExceptionHeaders,
  BlockBlobGetBlockListHeaders,
  BlockBlobPutBlobFromUrlExceptionHeaders,
  BlockBlobPutBlobFromUrlHeaders,
  BlockBlobStageBlockExceptionHeaders,
  BlockBlobStageBlockFromURLExceptionHeaders,
  BlockBlobStageBlockFromURLHeaders,
  BlockBlobStageBlockHeaders,
  BlockBlobUploadExceptionHeaders,
  BlockBlobUploadHeaders,
  BlockList,
  BlockLookupList,
  ClearRange,
  ContainerAcquireLeaseExceptionHeaders,
  ContainerAcquireLeaseHeaders,
  ContainerBreakLeaseExceptionHeaders,
  ContainerBreakLeaseHeaders,
  ContainerChangeLeaseExceptionHeaders,
  ContainerChangeLeaseHeaders,
  ContainerCreateExceptionHeaders,
  ContainerCreateHeaders,
  ContainerDeleteExceptionHeaders,
  ContainerDeleteHeaders,
  ContainerFilterBlobsExceptionHeaders,
  ContainerFilterBlobsHeaders,
  ContainerGetAccessPolicyExceptionHeaders,
  ContainerGetAccessPolicyHeaders,
  ContainerGetAccountInfoExceptionHeaders,
  ContainerGetAccountInfoHeaders,
  ContainerGetPropertiesExceptionHeaders,
  ContainerGetPropertiesHeaders,
  ContainerItem,
  ContainerListBlobFlatSegmentExceptionHeaders,
  ContainerListBlobFlatSegmentHeaders,
  ContainerListBlobHierarchySegmentExceptionHeaders,
  ContainerListBlobHierarchySegmentHeaders,
  ContainerProperties,
  ContainerReleaseLeaseExceptionHeaders,
  ContainerReleaseLeaseHeaders,
  ContainerRenameExceptionHeaders,
  ContainerRenameHeaders,
  ContainerRenewLeaseExceptionHeaders,
  ContainerRenewLeaseHeaders,
  ContainerRestoreExceptionHeaders,
  ContainerRestoreHeaders,
  ContainerSetAccessPolicyExceptionHeaders,
  ContainerSetAccessPolicyHeaders,
  ContainerSetMetadataExceptionHeaders,
  ContainerSetMetadataHeaders,
  ContainerSubmitBatchExceptionHeaders,
  ContainerSubmitBatchHeaders,
  CorsRule,
  DelimitedTextConfiguration,
  FilterBlobItem,
  FilterBlobSegment,
  GeoReplication,
  JsonTextConfiguration,
  KeyInfo,
  ListBlobsFlatSegmentResponse,
  ListBlobsHierarchySegmentResponse,
  ListContainersSegmentResponse,
  Logging,
  Metrics,
  PageBlobClearPagesExceptionHeaders,
  PageBlobClearPagesHeaders,
  PageBlobCopyIncrementalExceptionHeaders,
  PageBlobCopyIncrementalHeaders,
  PageBlobCreateExceptionHeaders,
  PageBlobCreateHeaders,
  PageBlobGetPageRangesDiffExceptionHeaders,
  PageBlobGetPageRangesDiffHeaders,
  PageBlobGetPageRangesExceptionHeaders,
  PageBlobGetPageRangesHeaders,
  PageBlobResizeExceptionHeaders,
  PageBlobResizeHeaders,
  PageBlobUpdateSequenceNumberExceptionHeaders,
  PageBlobUpdateSequenceNumberHeaders,
  PageBlobUploadPagesExceptionHeaders,
  PageBlobUploadPagesFromURLExceptionHeaders,
  PageBlobUploadPagesFromURLHeaders,
  PageBlobUploadPagesHeaders,
  PageList,
  PageRange,
  QueryFormat,
  QueryRequest,
  QuerySerialization,
  RetentionPolicy,
  ServiceFilterBlobsExceptionHeaders,
  ServiceFilterBlobsHeaders,
  ServiceGetAccountInfoExceptionHeaders,
  ServiceGetAccountInfoHeaders,
  ServiceGetPropertiesExceptionHeaders,
  ServiceGetPropertiesHeaders,
  ServiceGetStatisticsExceptionHeaders,
  ServiceGetStatisticsHeaders,
  ServiceGetUserDelegationKeyExceptionHeaders,
  ServiceGetUserDelegationKeyHeaders,
  ServiceListContainersSegmentExceptionHeaders,
  ServiceListContainersSegmentHeaders,
  ServiceSetPropertiesExceptionHeaders,
  ServiceSetPropertiesHeaders,
  ServiceSubmitBatchExceptionHeaders,
  ServiceSubmitBatchHeaders,
  SignedIdentifier,
  StaticWebsite,
  StorageError,
  UserDelegationKey
}, Symbol.toStringTag, { value: "Module" }));
const contentType = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};
const blobServiceProperties = {
  parameterPath: "blobServiceProperties",
  mapper: BlobServiceProperties
};
const accept = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
const url = {
  parameterPath: "url",
  mapper: {
    serializedName: "url",
    required: true,
    xmlName: "url",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
const restype = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "service",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};
const comp = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "properties",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const timeoutInSeconds = {
  parameterPath: ["options", "timeoutInSeconds"],
  mapper: {
    constraints: {
      InclusiveMinimum: 0
    },
    serializedName: "timeout",
    xmlName: "timeout",
    type: {
      name: "Number"
    }
  }
};
const version = {
  parameterPath: "version",
  mapper: {
    defaultValue: "2025-05-05",
    isConstant: true,
    serializedName: "x-ms-version",
    type: {
      name: "String"
    }
  }
};
const requestId = {
  parameterPath: ["options", "requestId"],
  mapper: {
    serializedName: "x-ms-client-request-id",
    xmlName: "x-ms-client-request-id",
    type: {
      name: "String"
    }
  }
};
const accept1 = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
const comp1 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "stats",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const comp2 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "list",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const prefix = {
  parameterPath: ["options", "prefix"],
  mapper: {
    serializedName: "prefix",
    xmlName: "prefix",
    type: {
      name: "String"
    }
  }
};
const marker = {
  parameterPath: ["options", "marker"],
  mapper: {
    serializedName: "marker",
    xmlName: "marker",
    type: {
      name: "String"
    }
  }
};
const maxPageSize = {
  parameterPath: ["options", "maxPageSize"],
  mapper: {
    constraints: {
      InclusiveMinimum: 1
    },
    serializedName: "maxresults",
    xmlName: "maxresults",
    type: {
      name: "Number"
    }
  }
};
const include = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "include",
    xmlName: "include",
    xmlElementName: "ListContainersIncludeType",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Enum",
          allowedValues: ["metadata", "deleted", "system"]
        }
      }
    }
  },
  collectionFormat: "CSV"
};
const keyInfo = {
  parameterPath: "keyInfo",
  mapper: KeyInfo
};
const comp3 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "userdelegationkey",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const restype1 = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "account",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};
const body = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    xmlName: "body",
    type: {
      name: "Stream"
    }
  }
};
const comp4 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "batch",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const contentLength = {
  parameterPath: "contentLength",
  mapper: {
    serializedName: "Content-Length",
    required: true,
    xmlName: "Content-Length",
    type: {
      name: "Number"
    }
  }
};
const multipartContentType = {
  parameterPath: "multipartContentType",
  mapper: {
    serializedName: "Content-Type",
    required: true,
    xmlName: "Content-Type",
    type: {
      name: "String"
    }
  }
};
const comp5 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "blobs",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const where = {
  parameterPath: ["options", "where"],
  mapper: {
    serializedName: "where",
    xmlName: "where",
    type: {
      name: "String"
    }
  }
};
const restype2 = {
  parameterPath: "restype",
  mapper: {
    defaultValue: "container",
    isConstant: true,
    serializedName: "restype",
    type: {
      name: "String"
    }
  }
};
const metadata = {
  parameterPath: ["options", "metadata"],
  mapper: {
    serializedName: "x-ms-meta",
    xmlName: "x-ms-meta",
    headerCollectionPrefix: "x-ms-meta-",
    type: {
      name: "Dictionary",
      value: { type: { name: "String" } }
    }
  }
};
const access = {
  parameterPath: ["options", "access"],
  mapper: {
    serializedName: "x-ms-blob-public-access",
    xmlName: "x-ms-blob-public-access",
    type: {
      name: "Enum",
      allowedValues: ["container", "blob"]
    }
  }
};
const defaultEncryptionScope = {
  parameterPath: [
    "options",
    "containerEncryptionScope",
    "defaultEncryptionScope"
  ],
  mapper: {
    serializedName: "x-ms-default-encryption-scope",
    xmlName: "x-ms-default-encryption-scope",
    type: {
      name: "String"
    }
  }
};
const preventEncryptionScopeOverride = {
  parameterPath: [
    "options",
    "containerEncryptionScope",
    "preventEncryptionScopeOverride"
  ],
  mapper: {
    serializedName: "x-ms-deny-encryption-scope-override",
    xmlName: "x-ms-deny-encryption-scope-override",
    type: {
      name: "Boolean"
    }
  }
};
const leaseId = {
  parameterPath: ["options", "leaseAccessConditions", "leaseId"],
  mapper: {
    serializedName: "x-ms-lease-id",
    xmlName: "x-ms-lease-id",
    type: {
      name: "String"
    }
  }
};
const ifModifiedSince = {
  parameterPath: ["options", "modifiedAccessConditions", "ifModifiedSince"],
  mapper: {
    serializedName: "If-Modified-Since",
    xmlName: "If-Modified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
const ifUnmodifiedSince = {
  parameterPath: ["options", "modifiedAccessConditions", "ifUnmodifiedSince"],
  mapper: {
    serializedName: "If-Unmodified-Since",
    xmlName: "If-Unmodified-Since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
const comp6 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "metadata",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const comp7 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "acl",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const containerAcl = {
  parameterPath: ["options", "containerAcl"],
  mapper: {
    serializedName: "containerAcl",
    xmlName: "SignedIdentifiers",
    xmlIsWrapped: true,
    xmlElementName: "SignedIdentifier",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Composite",
          className: "SignedIdentifier"
        }
      }
    }
  }
};
const comp8 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "undelete",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const deletedContainerName = {
  parameterPath: ["options", "deletedContainerName"],
  mapper: {
    serializedName: "x-ms-deleted-container-name",
    xmlName: "x-ms-deleted-container-name",
    type: {
      name: "String"
    }
  }
};
const deletedContainerVersion = {
  parameterPath: ["options", "deletedContainerVersion"],
  mapper: {
    serializedName: "x-ms-deleted-container-version",
    xmlName: "x-ms-deleted-container-version",
    type: {
      name: "String"
    }
  }
};
const comp9 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "rename",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const sourceContainerName = {
  parameterPath: "sourceContainerName",
  mapper: {
    serializedName: "x-ms-source-container-name",
    required: true,
    xmlName: "x-ms-source-container-name",
    type: {
      name: "String"
    }
  }
};
const sourceLeaseId = {
  parameterPath: ["options", "sourceLeaseId"],
  mapper: {
    serializedName: "x-ms-source-lease-id",
    xmlName: "x-ms-source-lease-id",
    type: {
      name: "String"
    }
  }
};
const comp10 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "lease",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const action = {
  parameterPath: "action",
  mapper: {
    defaultValue: "acquire",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
const duration = {
  parameterPath: ["options", "duration"],
  mapper: {
    serializedName: "x-ms-lease-duration",
    xmlName: "x-ms-lease-duration",
    type: {
      name: "Number"
    }
  }
};
const proposedLeaseId = {
  parameterPath: ["options", "proposedLeaseId"],
  mapper: {
    serializedName: "x-ms-proposed-lease-id",
    xmlName: "x-ms-proposed-lease-id",
    type: {
      name: "String"
    }
  }
};
const action1 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "release",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
const leaseId1 = {
  parameterPath: "leaseId",
  mapper: {
    serializedName: "x-ms-lease-id",
    required: true,
    xmlName: "x-ms-lease-id",
    type: {
      name: "String"
    }
  }
};
const action2 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "renew",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
const action3 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "break",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
const breakPeriod = {
  parameterPath: ["options", "breakPeriod"],
  mapper: {
    serializedName: "x-ms-lease-break-period",
    xmlName: "x-ms-lease-break-period",
    type: {
      name: "Number"
    }
  }
};
const action4 = {
  parameterPath: "action",
  mapper: {
    defaultValue: "change",
    isConstant: true,
    serializedName: "x-ms-lease-action",
    type: {
      name: "String"
    }
  }
};
const proposedLeaseId1 = {
  parameterPath: "proposedLeaseId",
  mapper: {
    serializedName: "x-ms-proposed-lease-id",
    required: true,
    xmlName: "x-ms-proposed-lease-id",
    type: {
      name: "String"
    }
  }
};
const include1 = {
  parameterPath: ["options", "include"],
  mapper: {
    serializedName: "include",
    xmlName: "include",
    xmlElementName: "ListBlobsIncludeItem",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "Enum",
          allowedValues: [
            "copy",
            "deleted",
            "metadata",
            "snapshots",
            "uncommittedblobs",
            "versions",
            "tags",
            "immutabilitypolicy",
            "legalhold",
            "deletedwithversions"
          ]
        }
      }
    }
  },
  collectionFormat: "CSV"
};
const delimiter = {
  parameterPath: "delimiter",
  mapper: {
    serializedName: "delimiter",
    required: true,
    xmlName: "delimiter",
    type: {
      name: "String"
    }
  }
};
const snapshot = {
  parameterPath: ["options", "snapshot"],
  mapper: {
    serializedName: "snapshot",
    xmlName: "snapshot",
    type: {
      name: "String"
    }
  }
};
const versionId = {
  parameterPath: ["options", "versionId"],
  mapper: {
    serializedName: "versionid",
    xmlName: "versionid",
    type: {
      name: "String"
    }
  }
};
const range = {
  parameterPath: ["options", "range"],
  mapper: {
    serializedName: "x-ms-range",
    xmlName: "x-ms-range",
    type: {
      name: "String"
    }
  }
};
const rangeGetContentMD5 = {
  parameterPath: ["options", "rangeGetContentMD5"],
  mapper: {
    serializedName: "x-ms-range-get-content-md5",
    xmlName: "x-ms-range-get-content-md5",
    type: {
      name: "Boolean"
    }
  }
};
const rangeGetContentCRC64 = {
  parameterPath: ["options", "rangeGetContentCRC64"],
  mapper: {
    serializedName: "x-ms-range-get-content-crc64",
    xmlName: "x-ms-range-get-content-crc64",
    type: {
      name: "Boolean"
    }
  }
};
const encryptionKey = {
  parameterPath: ["options", "cpkInfo", "encryptionKey"],
  mapper: {
    serializedName: "x-ms-encryption-key",
    xmlName: "x-ms-encryption-key",
    type: {
      name: "String"
    }
  }
};
const encryptionKeySha256 = {
  parameterPath: ["options", "cpkInfo", "encryptionKeySha256"],
  mapper: {
    serializedName: "x-ms-encryption-key-sha256",
    xmlName: "x-ms-encryption-key-sha256",
    type: {
      name: "String"
    }
  }
};
const encryptionAlgorithm = {
  parameterPath: ["options", "cpkInfo", "encryptionAlgorithm"],
  mapper: {
    serializedName: "x-ms-encryption-algorithm",
    xmlName: "x-ms-encryption-algorithm",
    type: {
      name: "String"
    }
  }
};
const ifMatch = {
  parameterPath: ["options", "modifiedAccessConditions", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    xmlName: "If-Match",
    type: {
      name: "String"
    }
  }
};
const ifNoneMatch = {
  parameterPath: ["options", "modifiedAccessConditions", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    xmlName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};
const ifTags = {
  parameterPath: ["options", "modifiedAccessConditions", "ifTags"],
  mapper: {
    serializedName: "x-ms-if-tags",
    xmlName: "x-ms-if-tags",
    type: {
      name: "String"
    }
  }
};
const deleteSnapshots = {
  parameterPath: ["options", "deleteSnapshots"],
  mapper: {
    serializedName: "x-ms-delete-snapshots",
    xmlName: "x-ms-delete-snapshots",
    type: {
      name: "Enum",
      allowedValues: ["include", "only"]
    }
  }
};
const blobDeleteType = {
  parameterPath: ["options", "blobDeleteType"],
  mapper: {
    serializedName: "deletetype",
    xmlName: "deletetype",
    type: {
      name: "String"
    }
  }
};
const comp11 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "expiry",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const expiryOptions = {
  parameterPath: "expiryOptions",
  mapper: {
    serializedName: "x-ms-expiry-option",
    required: true,
    xmlName: "x-ms-expiry-option",
    type: {
      name: "String"
    }
  }
};
const expiresOn = {
  parameterPath: ["options", "expiresOn"],
  mapper: {
    serializedName: "x-ms-expiry-time",
    xmlName: "x-ms-expiry-time",
    type: {
      name: "String"
    }
  }
};
const blobCacheControl = {
  parameterPath: ["options", "blobHttpHeaders", "blobCacheControl"],
  mapper: {
    serializedName: "x-ms-blob-cache-control",
    xmlName: "x-ms-blob-cache-control",
    type: {
      name: "String"
    }
  }
};
const blobContentType = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentType"],
  mapper: {
    serializedName: "x-ms-blob-content-type",
    xmlName: "x-ms-blob-content-type",
    type: {
      name: "String"
    }
  }
};
const blobContentMD5 = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentMD5"],
  mapper: {
    serializedName: "x-ms-blob-content-md5",
    xmlName: "x-ms-blob-content-md5",
    type: {
      name: "ByteArray"
    }
  }
};
const blobContentEncoding = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentEncoding"],
  mapper: {
    serializedName: "x-ms-blob-content-encoding",
    xmlName: "x-ms-blob-content-encoding",
    type: {
      name: "String"
    }
  }
};
const blobContentLanguage = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentLanguage"],
  mapper: {
    serializedName: "x-ms-blob-content-language",
    xmlName: "x-ms-blob-content-language",
    type: {
      name: "String"
    }
  }
};
const blobContentDisposition = {
  parameterPath: ["options", "blobHttpHeaders", "blobContentDisposition"],
  mapper: {
    serializedName: "x-ms-blob-content-disposition",
    xmlName: "x-ms-blob-content-disposition",
    type: {
      name: "String"
    }
  }
};
const comp12 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "immutabilityPolicies",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const immutabilityPolicyExpiry = {
  parameterPath: ["options", "immutabilityPolicyExpiry"],
  mapper: {
    serializedName: "x-ms-immutability-policy-until-date",
    xmlName: "x-ms-immutability-policy-until-date",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
const immutabilityPolicyMode = {
  parameterPath: ["options", "immutabilityPolicyMode"],
  mapper: {
    serializedName: "x-ms-immutability-policy-mode",
    xmlName: "x-ms-immutability-policy-mode",
    type: {
      name: "Enum",
      allowedValues: ["Mutable", "Unlocked", "Locked"]
    }
  }
};
const comp13 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "legalhold",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const legalHold = {
  parameterPath: "legalHold",
  mapper: {
    serializedName: "x-ms-legal-hold",
    required: true,
    xmlName: "x-ms-legal-hold",
    type: {
      name: "Boolean"
    }
  }
};
const encryptionScope = {
  parameterPath: ["options", "encryptionScope"],
  mapper: {
    serializedName: "x-ms-encryption-scope",
    xmlName: "x-ms-encryption-scope",
    type: {
      name: "String"
    }
  }
};
const comp14 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "snapshot",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const tier = {
  parameterPath: ["options", "tier"],
  mapper: {
    serializedName: "x-ms-access-tier",
    xmlName: "x-ms-access-tier",
    type: {
      name: "Enum",
      allowedValues: [
        "P4",
        "P6",
        "P10",
        "P15",
        "P20",
        "P30",
        "P40",
        "P50",
        "P60",
        "P70",
        "P80",
        "Hot",
        "Cool",
        "Archive",
        "Cold"
      ]
    }
  }
};
const rehydratePriority = {
  parameterPath: ["options", "rehydratePriority"],
  mapper: {
    serializedName: "x-ms-rehydrate-priority",
    xmlName: "x-ms-rehydrate-priority",
    type: {
      name: "Enum",
      allowedValues: ["High", "Standard"]
    }
  }
};
const sourceIfModifiedSince = {
  parameterPath: [
    "options",
    "sourceModifiedAccessConditions",
    "sourceIfModifiedSince"
  ],
  mapper: {
    serializedName: "x-ms-source-if-modified-since",
    xmlName: "x-ms-source-if-modified-since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
const sourceIfUnmodifiedSince = {
  parameterPath: [
    "options",
    "sourceModifiedAccessConditions",
    "sourceIfUnmodifiedSince"
  ],
  mapper: {
    serializedName: "x-ms-source-if-unmodified-since",
    xmlName: "x-ms-source-if-unmodified-since",
    type: {
      name: "DateTimeRfc1123"
    }
  }
};
const sourceIfMatch = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfMatch"],
  mapper: {
    serializedName: "x-ms-source-if-match",
    xmlName: "x-ms-source-if-match",
    type: {
      name: "String"
    }
  }
};
const sourceIfNoneMatch = {
  parameterPath: [
    "options",
    "sourceModifiedAccessConditions",
    "sourceIfNoneMatch"
  ],
  mapper: {
    serializedName: "x-ms-source-if-none-match",
    xmlName: "x-ms-source-if-none-match",
    type: {
      name: "String"
    }
  }
};
const sourceIfTags = {
  parameterPath: ["options", "sourceModifiedAccessConditions", "sourceIfTags"],
  mapper: {
    serializedName: "x-ms-source-if-tags",
    xmlName: "x-ms-source-if-tags",
    type: {
      name: "String"
    }
  }
};
const copySource = {
  parameterPath: "copySource",
  mapper: {
    serializedName: "x-ms-copy-source",
    required: true,
    xmlName: "x-ms-copy-source",
    type: {
      name: "String"
    }
  }
};
const blobTagsString = {
  parameterPath: ["options", "blobTagsString"],
  mapper: {
    serializedName: "x-ms-tags",
    xmlName: "x-ms-tags",
    type: {
      name: "String"
    }
  }
};
const sealBlob = {
  parameterPath: ["options", "sealBlob"],
  mapper: {
    serializedName: "x-ms-seal-blob",
    xmlName: "x-ms-seal-blob",
    type: {
      name: "Boolean"
    }
  }
};
const legalHold1 = {
  parameterPath: ["options", "legalHold"],
  mapper: {
    serializedName: "x-ms-legal-hold",
    xmlName: "x-ms-legal-hold",
    type: {
      name: "Boolean"
    }
  }
};
const xMsRequiresSync = {
  parameterPath: "xMsRequiresSync",
  mapper: {
    defaultValue: "true",
    isConstant: true,
    serializedName: "x-ms-requires-sync",
    type: {
      name: "String"
    }
  }
};
const sourceContentMD5 = {
  parameterPath: ["options", "sourceContentMD5"],
  mapper: {
    serializedName: "x-ms-source-content-md5",
    xmlName: "x-ms-source-content-md5",
    type: {
      name: "ByteArray"
    }
  }
};
const copySourceAuthorization = {
  parameterPath: ["options", "copySourceAuthorization"],
  mapper: {
    serializedName: "x-ms-copy-source-authorization",
    xmlName: "x-ms-copy-source-authorization",
    type: {
      name: "String"
    }
  }
};
const copySourceTags = {
  parameterPath: ["options", "copySourceTags"],
  mapper: {
    serializedName: "x-ms-copy-source-tag-option",
    xmlName: "x-ms-copy-source-tag-option",
    type: {
      name: "Enum",
      allowedValues: ["REPLACE", "COPY"]
    }
  }
};
const comp15 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "copy",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const copyActionAbortConstant = {
  parameterPath: "copyActionAbortConstant",
  mapper: {
    defaultValue: "abort",
    isConstant: true,
    serializedName: "x-ms-copy-action",
    type: {
      name: "String"
    }
  }
};
const copyId = {
  parameterPath: "copyId",
  mapper: {
    serializedName: "copyid",
    required: true,
    xmlName: "copyid",
    type: {
      name: "String"
    }
  }
};
const comp16 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "tier",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const tier1 = {
  parameterPath: "tier",
  mapper: {
    serializedName: "x-ms-access-tier",
    required: true,
    xmlName: "x-ms-access-tier",
    type: {
      name: "Enum",
      allowedValues: [
        "P4",
        "P6",
        "P10",
        "P15",
        "P20",
        "P30",
        "P40",
        "P50",
        "P60",
        "P70",
        "P80",
        "Hot",
        "Cool",
        "Archive",
        "Cold"
      ]
    }
  }
};
const queryRequest = {
  parameterPath: ["options", "queryRequest"],
  mapper: QueryRequest
};
const comp17 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "query",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const comp18 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "tags",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const tags = {
  parameterPath: ["options", "tags"],
  mapper: BlobTags
};
const transactionalContentMD5 = {
  parameterPath: ["options", "transactionalContentMD5"],
  mapper: {
    serializedName: "Content-MD5",
    xmlName: "Content-MD5",
    type: {
      name: "ByteArray"
    }
  }
};
const transactionalContentCrc64 = {
  parameterPath: ["options", "transactionalContentCrc64"],
  mapper: {
    serializedName: "x-ms-content-crc64",
    xmlName: "x-ms-content-crc64",
    type: {
      name: "ByteArray"
    }
  }
};
const blobType = {
  parameterPath: "blobType",
  mapper: {
    defaultValue: "PageBlob",
    isConstant: true,
    serializedName: "x-ms-blob-type",
    type: {
      name: "String"
    }
  }
};
const blobContentLength = {
  parameterPath: "blobContentLength",
  mapper: {
    serializedName: "x-ms-blob-content-length",
    required: true,
    xmlName: "x-ms-blob-content-length",
    type: {
      name: "Number"
    }
  }
};
const blobSequenceNumber = {
  parameterPath: ["options", "blobSequenceNumber"],
  mapper: {
    defaultValue: 0,
    serializedName: "x-ms-blob-sequence-number",
    xmlName: "x-ms-blob-sequence-number",
    type: {
      name: "Number"
    }
  }
};
const contentType1 = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/octet-stream",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};
const body1 = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    xmlName: "body",
    type: {
      name: "Stream"
    }
  }
};
const accept2 = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/xml",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
const comp19 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "page",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const pageWrite = {
  parameterPath: "pageWrite",
  mapper: {
    defaultValue: "update",
    isConstant: true,
    serializedName: "x-ms-page-write",
    type: {
      name: "String"
    }
  }
};
const ifSequenceNumberLessThanOrEqualTo = {
  parameterPath: [
    "options",
    "sequenceNumberAccessConditions",
    "ifSequenceNumberLessThanOrEqualTo"
  ],
  mapper: {
    serializedName: "x-ms-if-sequence-number-le",
    xmlName: "x-ms-if-sequence-number-le",
    type: {
      name: "Number"
    }
  }
};
const ifSequenceNumberLessThan = {
  parameterPath: [
    "options",
    "sequenceNumberAccessConditions",
    "ifSequenceNumberLessThan"
  ],
  mapper: {
    serializedName: "x-ms-if-sequence-number-lt",
    xmlName: "x-ms-if-sequence-number-lt",
    type: {
      name: "Number"
    }
  }
};
const ifSequenceNumberEqualTo = {
  parameterPath: [
    "options",
    "sequenceNumberAccessConditions",
    "ifSequenceNumberEqualTo"
  ],
  mapper: {
    serializedName: "x-ms-if-sequence-number-eq",
    xmlName: "x-ms-if-sequence-number-eq",
    type: {
      name: "Number"
    }
  }
};
const pageWrite1 = {
  parameterPath: "pageWrite",
  mapper: {
    defaultValue: "clear",
    isConstant: true,
    serializedName: "x-ms-page-write",
    type: {
      name: "String"
    }
  }
};
const sourceUrl = {
  parameterPath: "sourceUrl",
  mapper: {
    serializedName: "x-ms-copy-source",
    required: true,
    xmlName: "x-ms-copy-source",
    type: {
      name: "String"
    }
  }
};
const sourceRange = {
  parameterPath: "sourceRange",
  mapper: {
    serializedName: "x-ms-source-range",
    required: true,
    xmlName: "x-ms-source-range",
    type: {
      name: "String"
    }
  }
};
const sourceContentCrc64 = {
  parameterPath: ["options", "sourceContentCrc64"],
  mapper: {
    serializedName: "x-ms-source-content-crc64",
    xmlName: "x-ms-source-content-crc64",
    type: {
      name: "ByteArray"
    }
  }
};
const range1 = {
  parameterPath: "range",
  mapper: {
    serializedName: "x-ms-range",
    required: true,
    xmlName: "x-ms-range",
    type: {
      name: "String"
    }
  }
};
const comp20 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "pagelist",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const prevsnapshot = {
  parameterPath: ["options", "prevsnapshot"],
  mapper: {
    serializedName: "prevsnapshot",
    xmlName: "prevsnapshot",
    type: {
      name: "String"
    }
  }
};
const prevSnapshotUrl = {
  parameterPath: ["options", "prevSnapshotUrl"],
  mapper: {
    serializedName: "x-ms-previous-snapshot-url",
    xmlName: "x-ms-previous-snapshot-url",
    type: {
      name: "String"
    }
  }
};
const sequenceNumberAction = {
  parameterPath: "sequenceNumberAction",
  mapper: {
    serializedName: "x-ms-sequence-number-action",
    required: true,
    xmlName: "x-ms-sequence-number-action",
    type: {
      name: "Enum",
      allowedValues: ["max", "update", "increment"]
    }
  }
};
const comp21 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "incrementalcopy",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const blobType1 = {
  parameterPath: "blobType",
  mapper: {
    defaultValue: "AppendBlob",
    isConstant: true,
    serializedName: "x-ms-blob-type",
    type: {
      name: "String"
    }
  }
};
const comp22 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "appendblock",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const maxSize = {
  parameterPath: ["options", "appendPositionAccessConditions", "maxSize"],
  mapper: {
    serializedName: "x-ms-blob-condition-maxsize",
    xmlName: "x-ms-blob-condition-maxsize",
    type: {
      name: "Number"
    }
  }
};
const appendPosition = {
  parameterPath: [
    "options",
    "appendPositionAccessConditions",
    "appendPosition"
  ],
  mapper: {
    serializedName: "x-ms-blob-condition-appendpos",
    xmlName: "x-ms-blob-condition-appendpos",
    type: {
      name: "Number"
    }
  }
};
const sourceRange1 = {
  parameterPath: ["options", "sourceRange"],
  mapper: {
    serializedName: "x-ms-source-range",
    xmlName: "x-ms-source-range",
    type: {
      name: "String"
    }
  }
};
const comp23 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "seal",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const blobType2 = {
  parameterPath: "blobType",
  mapper: {
    defaultValue: "BlockBlob",
    isConstant: true,
    serializedName: "x-ms-blob-type",
    type: {
      name: "String"
    }
  }
};
const copySourceBlobProperties = {
  parameterPath: ["options", "copySourceBlobProperties"],
  mapper: {
    serializedName: "x-ms-copy-source-blob-properties",
    xmlName: "x-ms-copy-source-blob-properties",
    type: {
      name: "Boolean"
    }
  }
};
const comp24 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "block",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const blockId = {
  parameterPath: "blockId",
  mapper: {
    serializedName: "blockid",
    required: true,
    xmlName: "blockid",
    type: {
      name: "String"
    }
  }
};
const blocks = {
  parameterPath: "blocks",
  mapper: BlockLookupList
};
const comp25 = {
  parameterPath: "comp",
  mapper: {
    defaultValue: "blocklist",
    isConstant: true,
    serializedName: "comp",
    type: {
      name: "String"
    }
  }
};
const listType = {
  parameterPath: "listType",
  mapper: {
    defaultValue: "committed",
    serializedName: "blocklisttype",
    required: true,
    xmlName: "blocklisttype",
    type: {
      name: "Enum",
      allowedValues: ["committed", "uncommitted", "all"]
    }
  }
};
class ServiceImpl {
  /**
   * Initialize a new instance of the class Service class.
   * @param client Reference to the service client
   */
  constructor(client2) {
    this.client = client2;
  }
  /**
   * Sets properties for a storage account's Blob service endpoint, including properties for Storage
   * Analytics and CORS (Cross-Origin Resource Sharing) rules
   * @param blobServiceProperties The StorageService properties.
   * @param options The options parameters.
   */
  setProperties(blobServiceProperties2, options) {
    return this.client.sendOperationRequest({ blobServiceProperties: blobServiceProperties2, options }, setPropertiesOperationSpec);
  }
  /**
   * gets the properties of a storage account's Blob service, including properties for Storage Analytics
   * and CORS (Cross-Origin Resource Sharing) rules.
   * @param options The options parameters.
   */
  getProperties(options) {
    return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec$2);
  }
  /**
   * Retrieves statistics related to replication for the Blob service. It is only available on the
   * secondary location endpoint when read-access geo-redundant replication is enabled for the storage
   * account.
   * @param options The options parameters.
   */
  getStatistics(options) {
    return this.client.sendOperationRequest({ options }, getStatisticsOperationSpec);
  }
  /**
   * The List Containers Segment operation returns a list of the containers under the specified account
   * @param options The options parameters.
   */
  listContainersSegment(options) {
    return this.client.sendOperationRequest({ options }, listContainersSegmentOperationSpec);
  }
  /**
   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
   * bearer token authentication.
   * @param keyInfo Key information
   * @param options The options parameters.
   */
  getUserDelegationKey(keyInfo2, options) {
    return this.client.sendOperationRequest({ keyInfo: keyInfo2, options }, getUserDelegationKeyOperationSpec);
  }
  /**
   * Returns the sku name and account kind
   * @param options The options parameters.
   */
  getAccountInfo(options) {
    return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec$2);
  }
  /**
   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
   * @param contentLength The length of the request.
   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
   * @param body Initial data
   * @param options The options parameters.
   */
  submitBatch(contentLength2, multipartContentType2, body2, options) {
    return this.client.sendOperationRequest({ contentLength: contentLength2, multipartContentType: multipartContentType2, body: body2, options }, submitBatchOperationSpec$1);
  }
  /**
   * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a
   * given search expression.  Filter blobs searches across all containers within a storage account but
   * can be scoped within the expression to a single container.
   * @param options The options parameters.
   */
  filterBlobs(options) {
    return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec$1);
  }
}
const xmlSerializer$5 = createSerializer(
  Mappers,
  /* isXml */
  true
);
const setPropertiesOperationSpec = {
  path: "/",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: ServiceSetPropertiesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceSetPropertiesExceptionHeaders
    }
  },
  requestBody: blobServiceProperties,
  queryParameters: [
    restype,
    comp,
    timeoutInSeconds
  ],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer$5
};
const getPropertiesOperationSpec$2 = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: BlobServiceProperties,
      headersMapper: ServiceGetPropertiesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetPropertiesExceptionHeaders
    }
  },
  queryParameters: [
    restype,
    comp,
    timeoutInSeconds
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$5
};
const getStatisticsOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: BlobServiceStatistics,
      headersMapper: ServiceGetStatisticsHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetStatisticsExceptionHeaders
    }
  },
  queryParameters: [
    restype,
    timeoutInSeconds,
    comp1
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$5
};
const listContainersSegmentOperationSpec = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: ListContainersSegmentResponse,
      headersMapper: ServiceListContainersSegmentHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceListContainersSegmentExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    comp2,
    prefix,
    marker,
    maxPageSize,
    include
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$5
};
const getUserDelegationKeyOperationSpec = {
  path: "/",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: UserDelegationKey,
      headersMapper: ServiceGetUserDelegationKeyHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetUserDelegationKeyExceptionHeaders
    }
  },
  requestBody: keyInfo,
  queryParameters: [
    restype,
    timeoutInSeconds,
    comp3
  ],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer$5
};
const getAccountInfoOperationSpec$2 = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: ServiceGetAccountInfoHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceGetAccountInfoExceptionHeaders
    }
  },
  queryParameters: [
    comp,
    timeoutInSeconds,
    restype1
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$5
};
const submitBatchOperationSpec$1 = {
  path: "/",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: ServiceSubmitBatchHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceSubmitBatchExceptionHeaders
    }
  },
  requestBody: body,
  queryParameters: [timeoutInSeconds, comp4],
  urlParameters: [url],
  headerParameters: [
    accept,
    version,
    requestId,
    contentLength,
    multipartContentType
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer$5
};
const filterBlobsOperationSpec$1 = {
  path: "/",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: FilterBlobSegment,
      headersMapper: ServiceFilterBlobsHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ServiceFilterBlobsExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    marker,
    maxPageSize,
    comp5,
    where
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$5
};
class ContainerImpl {
  /**
   * Initialize a new instance of the class Container class.
   * @param client Reference to the service client
   */
  constructor(client2) {
    this.client = client2;
  }
  /**
   * creates a new container under the specified account. If the container with the same name already
   * exists, the operation fails
   * @param options The options parameters.
   */
  create(options) {
    return this.client.sendOperationRequest({ options }, createOperationSpec$2);
  }
  /**
   * returns all user-defined metadata and system properties for the specified container. The data
   * returned does not include the container's list of blobs
   * @param options The options parameters.
   */
  getProperties(options) {
    return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec$1);
  }
  /**
   * operation marks the specified container for deletion. The container and any blobs contained within
   * it are later deleted during garbage collection
   * @param options The options parameters.
   */
  delete(options) {
    return this.client.sendOperationRequest({ options }, deleteOperationSpec$1);
  }
  /**
   * operation sets one or more user-defined name-value pairs for the specified container.
   * @param options The options parameters.
   */
  setMetadata(options) {
    return this.client.sendOperationRequest({ options }, setMetadataOperationSpec$1);
  }
  /**
   * gets the permissions for the specified container. The permissions indicate whether container data
   * may be accessed publicly.
   * @param options The options parameters.
   */
  getAccessPolicy(options) {
    return this.client.sendOperationRequest({ options }, getAccessPolicyOperationSpec);
  }
  /**
   * sets the permissions for the specified container. The permissions indicate whether blobs in a
   * container may be accessed publicly.
   * @param options The options parameters.
   */
  setAccessPolicy(options) {
    return this.client.sendOperationRequest({ options }, setAccessPolicyOperationSpec);
  }
  /**
   * Restores a previously-deleted container.
   * @param options The options parameters.
   */
  restore(options) {
    return this.client.sendOperationRequest({ options }, restoreOperationSpec);
  }
  /**
   * Renames an existing container.
   * @param sourceContainerName Required.  Specifies the name of the container to rename.
   * @param options The options parameters.
   */
  rename(sourceContainerName2, options) {
    return this.client.sendOperationRequest({ sourceContainerName: sourceContainerName2, options }, renameOperationSpec);
  }
  /**
   * The Batch operation allows multiple API calls to be embedded into a single HTTP request.
   * @param contentLength The length of the request.
   * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch
   *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>
   * @param body Initial data
   * @param options The options parameters.
   */
  submitBatch(contentLength2, multipartContentType2, body2, options) {
    return this.client.sendOperationRequest({ contentLength: contentLength2, multipartContentType: multipartContentType2, body: body2, options }, submitBatchOperationSpec);
  }
  /**
   * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given
   * search expression.  Filter blobs searches within the given container.
   * @param options The options parameters.
   */
  filterBlobs(options) {
    return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);
  }
  /**
   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
   * be 15 to 60 seconds, or can be infinite
   * @param options The options parameters.
   */
  acquireLease(options) {
    return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec$1);
  }
  /**
   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
   * be 15 to 60 seconds, or can be infinite
   * @param leaseId Specifies the current lease ID on the resource.
   * @param options The options parameters.
   */
  releaseLease(leaseId2, options) {
    return this.client.sendOperationRequest({ leaseId: leaseId2, options }, releaseLeaseOperationSpec$1);
  }
  /**
   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
   * be 15 to 60 seconds, or can be infinite
   * @param leaseId Specifies the current lease ID on the resource.
   * @param options The options parameters.
   */
  renewLease(leaseId2, options) {
    return this.client.sendOperationRequest({ leaseId: leaseId2, options }, renewLeaseOperationSpec$1);
  }
  /**
   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
   * be 15 to 60 seconds, or can be infinite
   * @param options The options parameters.
   */
  breakLease(options) {
    return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec$1);
  }
  /**
   * [Update] establishes and manages a lock on a container for delete operations. The lock duration can
   * be 15 to 60 seconds, or can be infinite
   * @param leaseId Specifies the current lease ID on the resource.
   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
   *                        (String) for a list of valid GUID string formats.
   * @param options The options parameters.
   */
  changeLease(leaseId2, proposedLeaseId2, options) {
    return this.client.sendOperationRequest({ leaseId: leaseId2, proposedLeaseId: proposedLeaseId2, options }, changeLeaseOperationSpec$1);
  }
  /**
   * [Update] The List Blobs operation returns a list of the blobs under the specified container
   * @param options The options parameters.
   */
  listBlobFlatSegment(options) {
    return this.client.sendOperationRequest({ options }, listBlobFlatSegmentOperationSpec);
  }
  /**
   * [Update] The List Blobs operation returns a list of the blobs under the specified container
   * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix
   *                  element in the response body that acts as a placeholder for all blobs whose names begin with the
   *                  same substring up to the appearance of the delimiter character. The delimiter may be a single
   *                  character or a string.
   * @param options The options parameters.
   */
  listBlobHierarchySegment(delimiter2, options) {
    return this.client.sendOperationRequest({ delimiter: delimiter2, options }, listBlobHierarchySegmentOperationSpec);
  }
  /**
   * Returns the sku name and account kind
   * @param options The options parameters.
   */
  getAccountInfo(options) {
    return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec$1);
  }
}
const xmlSerializer$4 = createSerializer(
  Mappers,
  /* isXml */
  true
);
const createOperationSpec$2 = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: ContainerCreateHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerCreateExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, restype2],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    access,
    defaultEncryptionScope,
    preventEncryptionScopeOverride
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const getPropertiesOperationSpec$1 = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: ContainerGetPropertiesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerGetPropertiesExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, restype2],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const deleteOperationSpec$1 = {
  path: "/{containerName}",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: ContainerDeleteHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerDeleteExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, restype2],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const setMetadataOperationSpec$1 = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerSetMetadataHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerSetMetadataExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp6
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    leaseId,
    ifModifiedSince
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const getAccessPolicyOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "SignedIdentifier" }
          }
        },
        serializedName: "SignedIdentifiers",
        xmlName: "SignedIdentifiers",
        xmlIsWrapped: true,
        xmlElementName: "SignedIdentifier"
      },
      headersMapper: ContainerGetAccessPolicyHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerGetAccessPolicyExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp7
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const setAccessPolicyOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerSetAccessPolicyHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerSetAccessPolicyExceptionHeaders
    }
  },
  requestBody: containerAcl,
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp7
  ],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId,
    access,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer$4
};
const restoreOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: ContainerRestoreHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerRestoreExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp8
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    deletedContainerName,
    deletedContainerVersion
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const renameOperationSpec = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerRenameHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerRenameExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp9
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    sourceContainerName,
    sourceLeaseId
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const submitBatchOperationSpec = {
  path: "/{containerName}",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: ContainerSubmitBatchHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerSubmitBatchExceptionHeaders
    }
  },
  requestBody: body,
  queryParameters: [
    timeoutInSeconds,
    comp4,
    restype2
  ],
  urlParameters: [url],
  headerParameters: [
    accept,
    version,
    requestId,
    contentLength,
    multipartContentType
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer$4
};
const filterBlobsOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: FilterBlobSegment,
      headersMapper: ContainerFilterBlobsHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerFilterBlobsExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    marker,
    maxPageSize,
    comp5,
    where,
    restype2
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const acquireLeaseOperationSpec$1 = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: ContainerAcquireLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerAcquireLeaseExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp10
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action,
    duration,
    proposedLeaseId
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const releaseLeaseOperationSpec$1 = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerReleaseLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerReleaseLeaseExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp10
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action1,
    leaseId1
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const renewLeaseOperationSpec$1 = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerRenewLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerRenewLeaseExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp10
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    leaseId1,
    action2
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const breakLeaseOperationSpec$1 = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: ContainerBreakLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerBreakLeaseExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp10
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action3,
    breakPeriod
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const changeLeaseOperationSpec$1 = {
  path: "/{containerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: ContainerChangeLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerChangeLeaseExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    restype2,
    comp10
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    leaseId1,
    action4,
    proposedLeaseId1
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const listBlobFlatSegmentOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: ListBlobsFlatSegmentResponse,
      headersMapper: ContainerListBlobFlatSegmentHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerListBlobFlatSegmentExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    comp2,
    prefix,
    marker,
    maxPageSize,
    restype2,
    include1
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const listBlobHierarchySegmentOperationSpec = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: ListBlobsHierarchySegmentResponse,
      headersMapper: ContainerListBlobHierarchySegmentHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerListBlobHierarchySegmentExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    comp2,
    prefix,
    marker,
    maxPageSize,
    restype2,
    include1,
    delimiter
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
const getAccountInfoOperationSpec$1 = {
  path: "/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: ContainerGetAccountInfoHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: ContainerGetAccountInfoExceptionHeaders
    }
  },
  queryParameters: [
    comp,
    timeoutInSeconds,
    restype1
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$4
};
class BlobImpl {
  /**
   * Initialize a new instance of the class Blob class.
   * @param client Reference to the service client
   */
  constructor(client2) {
    this.client = client2;
  }
  /**
   * The Download operation reads or downloads a blob from the system, including its metadata and
   * properties. You can also call Download to read a snapshot.
   * @param options The options parameters.
   */
  download(options) {
    return this.client.sendOperationRequest({ options }, downloadOperationSpec);
  }
  /**
   * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system
   * properties for the blob. It does not return the content of the blob.
   * @param options The options parameters.
   */
  getProperties(options) {
    return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);
  }
  /**
   * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is
   * permanently removed from the storage account. If the storage account's soft delete feature is
   * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible
   * immediately. However, the blob service retains the blob or snapshot for the number of days specified
   * by the DeleteRetentionPolicy section of [Storage service properties]
   * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is
   * permanently removed from the storage account. Note that you continue to be charged for the
   * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the
   * "include=deleted" query parameter to discover which blobs and snapshots have been soft deleted. You
   * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a
   * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404
   * (ResourceNotFound).
   * @param options The options parameters.
   */
  delete(options) {
    return this.client.sendOperationRequest({ options }, deleteOperationSpec);
  }
  /**
   * Undelete a blob that was previously soft deleted
   * @param options The options parameters.
   */
  undelete(options) {
    return this.client.sendOperationRequest({ options }, undeleteOperationSpec);
  }
  /**
   * Sets the time a blob will expire and be deleted.
   * @param expiryOptions Required. Indicates mode of the expiry time
   * @param options The options parameters.
   */
  setExpiry(expiryOptions2, options) {
    return this.client.sendOperationRequest({ expiryOptions: expiryOptions2, options }, setExpiryOperationSpec);
  }
  /**
   * The Set HTTP Headers operation sets system properties on the blob
   * @param options The options parameters.
   */
  setHttpHeaders(options) {
    return this.client.sendOperationRequest({ options }, setHttpHeadersOperationSpec);
  }
  /**
   * The Set Immutability Policy operation sets the immutability policy on the blob
   * @param options The options parameters.
   */
  setImmutabilityPolicy(options) {
    return this.client.sendOperationRequest({ options }, setImmutabilityPolicyOperationSpec);
  }
  /**
   * The Delete Immutability Policy operation deletes the immutability policy on the blob
   * @param options The options parameters.
   */
  deleteImmutabilityPolicy(options) {
    return this.client.sendOperationRequest({ options }, deleteImmutabilityPolicyOperationSpec);
  }
  /**
   * The Set Legal Hold operation sets a legal hold on the blob.
   * @param legalHold Specified if a legal hold should be set on the blob.
   * @param options The options parameters.
   */
  setLegalHold(legalHold2, options) {
    return this.client.sendOperationRequest({ legalHold: legalHold2, options }, setLegalHoldOperationSpec);
  }
  /**
   * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more
   * name-value pairs
   * @param options The options parameters.
   */
  setMetadata(options) {
    return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);
  }
  /**
   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
   * operations
   * @param options The options parameters.
   */
  acquireLease(options) {
    return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);
  }
  /**
   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
   * operations
   * @param leaseId Specifies the current lease ID on the resource.
   * @param options The options parameters.
   */
  releaseLease(leaseId2, options) {
    return this.client.sendOperationRequest({ leaseId: leaseId2, options }, releaseLeaseOperationSpec);
  }
  /**
   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
   * operations
   * @param leaseId Specifies the current lease ID on the resource.
   * @param options The options parameters.
   */
  renewLease(leaseId2, options) {
    return this.client.sendOperationRequest({ leaseId: leaseId2, options }, renewLeaseOperationSpec);
  }
  /**
   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
   * operations
   * @param leaseId Specifies the current lease ID on the resource.
   * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400
   *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor
   *                        (String) for a list of valid GUID string formats.
   * @param options The options parameters.
   */
  changeLease(leaseId2, proposedLeaseId2, options) {
    return this.client.sendOperationRequest({ leaseId: leaseId2, proposedLeaseId: proposedLeaseId2, options }, changeLeaseOperationSpec);
  }
  /**
   * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete
   * operations
   * @param options The options parameters.
   */
  breakLease(options) {
    return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);
  }
  /**
   * The Create Snapshot operation creates a read-only snapshot of a blob
   * @param options The options parameters.
   */
  createSnapshot(options) {
    return this.client.sendOperationRequest({ options }, createSnapshotOperationSpec);
  }
  /**
   * The Start Copy From URL operation copies a blob or an internet resource to a new blob.
   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
   *                   access signature.
   * @param options The options parameters.
   */
  startCopyFromURL(copySource2, options) {
    return this.client.sendOperationRequest({ copySource: copySource2, options }, startCopyFromURLOperationSpec);
  }
  /**
   * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return
   * a response until the copy is complete.
   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
   *                   access signature.
   * @param options The options parameters.
   */
  copyFromURL(copySource2, options) {
    return this.client.sendOperationRequest({ copySource: copySource2, options }, copyFromURLOperationSpec);
  }
  /**
   * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination
   * blob with zero length and full metadata.
   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob
   *               operation.
   * @param options The options parameters.
   */
  abortCopyFromURL(copyId2, options) {
    return this.client.sendOperationRequest({ copyId: copyId2, options }, abortCopyFromURLOperationSpec);
  }
  /**
   * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium
   * storage account and on a block blob in a blob storage account (locally redundant storage only). A
   * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block
   * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's
   * ETag.
   * @param tier Indicates the tier to be set on the blob.
   * @param options The options parameters.
   */
  setTier(tier2, options) {
    return this.client.sendOperationRequest({ tier: tier2, options }, setTierOperationSpec);
  }
  /**
   * Returns the sku name and account kind
   * @param options The options parameters.
   */
  getAccountInfo(options) {
    return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);
  }
  /**
   * The Query operation enables users to select/project on blob data by providing simple query
   * expressions.
   * @param options The options parameters.
   */
  query(options) {
    return this.client.sendOperationRequest({ options }, queryOperationSpec);
  }
  /**
   * The Get Tags operation enables users to get the tags associated with a blob.
   * @param options The options parameters.
   */
  getTags(options) {
    return this.client.sendOperationRequest({ options }, getTagsOperationSpec);
  }
  /**
   * The Set Tags operation enables users to set tags on a blob.
   * @param options The options parameters.
   */
  setTags(options) {
    return this.client.sendOperationRequest({ options }, setTagsOperationSpec);
  }
}
const xmlSerializer$3 = createSerializer(
  Mappers,
  /* isXml */
  true
);
const downloadOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: BlobDownloadHeaders
    },
    206: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: BlobDownloadHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobDownloadExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    range,
    rangeGetContentMD5,
    rangeGetContentCRC64,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const getPropertiesOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: BlobGetPropertiesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobGetPropertiesExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const deleteOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: BlobDeleteHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobDeleteExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId,
    blobDeleteType
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    deleteSnapshots
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const undeleteOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobUndeleteHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobUndeleteExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp8],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const setExpiryOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetExpiryHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetExpiryExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp11],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    expiryOptions,
    expiresOn
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const setHttpHeadersOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetHttpHeadersHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetHttpHeadersExceptionHeaders
    }
  },
  queryParameters: [comp, timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const setImmutabilityPolicyOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetImmutabilityPolicyHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetImmutabilityPolicyExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId,
    comp12
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifUnmodifiedSince,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const deleteImmutabilityPolicyOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: BlobDeleteImmutabilityPolicyHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobDeleteImmutabilityPolicyExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId,
    comp12
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const setLegalHoldOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetLegalHoldHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetLegalHoldExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId,
    comp13
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    legalHold
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const setMetadataOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetMetadataHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetMetadataExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp6],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const acquireLeaseOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlobAcquireLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobAcquireLeaseExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp10],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action,
    duration,
    proposedLeaseId,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const releaseLeaseOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobReleaseLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobReleaseLeaseExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp10],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action1,
    leaseId1,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const renewLeaseOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobRenewLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobRenewLeaseExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp10],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    leaseId1,
    action2,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const changeLeaseOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobChangeLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobChangeLeaseExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp10],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    leaseId1,
    action4,
    proposedLeaseId1,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const breakLeaseOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: BlobBreakLeaseHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobBreakLeaseExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp10],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    action3,
    breakPeriod,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const createSnapshotOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlobCreateSnapshotHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobCreateSnapshotExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp14],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const startCopyFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: BlobStartCopyFromURLHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobStartCopyFromURLExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    tier,
    rehydratePriority,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    sourceIfTags,
    copySource,
    blobTagsString,
    sealBlob,
    legalHold1
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const copyFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: BlobCopyFromURLHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobCopyFromURLExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    encryptionScope,
    tier,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    copySource,
    blobTagsString,
    legalHold1,
    xMsRequiresSync,
    sourceContentMD5,
    copySourceAuthorization,
    copySourceTags
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const abortCopyFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    204: {
      headersMapper: BlobAbortCopyFromURLHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobAbortCopyFromURLExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    comp15,
    copyId
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    copyActionAbortConstant
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const setTierOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: BlobSetTierHeaders
    },
    202: {
      headersMapper: BlobSetTierHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetTierExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId,
    comp16
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifTags,
    rehydratePriority,
    tier1
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const getAccountInfoOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      headersMapper: BlobGetAccountInfoHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobGetAccountInfoExceptionHeaders
    }
  },
  queryParameters: [
    comp,
    timeoutInSeconds,
    restype1
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const queryOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: BlobQueryHeaders
    },
    206: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: BlobQueryHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobQueryExceptionHeaders
    }
  },
  requestBody: queryRequest,
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    comp17
  ],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer$3
};
const getTagsOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: BlobTags,
      headersMapper: BlobGetTagsHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobGetTagsExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    versionId,
    comp18
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer$3
};
const setTagsOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    204: {
      headersMapper: BlobSetTagsHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlobSetTagsExceptionHeaders
    }
  },
  requestBody: tags,
  queryParameters: [
    timeoutInSeconds,
    versionId,
    comp18
  ],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId,
    leaseId,
    ifTags,
    transactionalContentMD5,
    transactionalContentCrc64
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer$3
};
class PageBlobImpl {
  /**
   * Initialize a new instance of the class PageBlob class.
   * @param client Reference to the service client
   */
  constructor(client2) {
    this.client = client2;
  }
  /**
   * The Create operation creates a new page blob.
   * @param contentLength The length of the request.
   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
   *                          page blob size must be aligned to a 512-byte boundary.
   * @param options The options parameters.
   */
  create(contentLength2, blobContentLength2, options) {
    return this.client.sendOperationRequest({ contentLength: contentLength2, blobContentLength: blobContentLength2, options }, createOperationSpec$1);
  }
  /**
   * The Upload Pages operation writes a range of pages to a page blob
   * @param contentLength The length of the request.
   * @param body Initial data
   * @param options The options parameters.
   */
  uploadPages(contentLength2, body2, options) {
    return this.client.sendOperationRequest({ contentLength: contentLength2, body: body2, options }, uploadPagesOperationSpec);
  }
  /**
   * The Clear Pages operation clears a set of pages from a page blob
   * @param contentLength The length of the request.
   * @param options The options parameters.
   */
  clearPages(contentLength2, options) {
    return this.client.sendOperationRequest({ contentLength: contentLength2, options }, clearPagesOperationSpec);
  }
  /**
   * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a
   * URL
   * @param sourceUrl Specify a URL to the copy source.
   * @param sourceRange Bytes of source data in the specified range. The length of this range should
   *                    match the ContentLength header and x-ms-range/Range destination range header.
   * @param contentLength The length of the request.
   * @param range The range of bytes to which the source range would be written. The range should be 512
   *              aligned and range-end is required.
   * @param options The options parameters.
   */
  uploadPagesFromURL(sourceUrl2, sourceRange2, contentLength2, range2, options) {
    return this.client.sendOperationRequest({ sourceUrl: sourceUrl2, sourceRange: sourceRange2, contentLength: contentLength2, range: range2, options }, uploadPagesFromURLOperationSpec);
  }
  /**
   * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a
   * page blob
   * @param options The options parameters.
   */
  getPageRanges(options) {
    return this.client.sendOperationRequest({ options }, getPageRangesOperationSpec);
  }
  /**
   * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were
   * changed between target blob and previous snapshot.
   * @param options The options parameters.
   */
  getPageRangesDiff(options) {
    return this.client.sendOperationRequest({ options }, getPageRangesDiffOperationSpec);
  }
  /**
   * Resize the Blob
   * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The
   *                          page blob size must be aligned to a 512-byte boundary.
   * @param options The options parameters.
   */
  resize(blobContentLength2, options) {
    return this.client.sendOperationRequest({ blobContentLength: blobContentLength2, options }, resizeOperationSpec);
  }
  /**
   * Update the sequence number of the blob
   * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.
   *                             This property applies to page blobs only. This property indicates how the service should modify the
   *                             blob's sequence number
   * @param options The options parameters.
   */
  updateSequenceNumber(sequenceNumberAction2, options) {
    return this.client.sendOperationRequest({ sequenceNumberAction: sequenceNumberAction2, options }, updateSequenceNumberOperationSpec);
  }
  /**
   * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.
   * The snapshot is copied such that only the differential changes between the previously copied
   * snapshot are transferred to the destination. The copied snapshots are complete copies of the
   * original snapshot and can be read or copied from as usual. This API is supported since REST version
   * 2016-05-31.
   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
   *                   access signature.
   * @param options The options parameters.
   */
  copyIncremental(copySource2, options) {
    return this.client.sendOperationRequest({ copySource: copySource2, options }, copyIncrementalOperationSpec);
  }
}
const xmlSerializer$2 = createSerializer(
  Mappers,
  /* isXml */
  true
);
const createOperationSpec$1 = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: PageBlobCreateHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobCreateExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    encryptionScope,
    tier,
    blobTagsString,
    legalHold1,
    blobType,
    blobContentLength,
    blobSequenceNumber
  ],
  isXML: true,
  serializer: xmlSerializer$2
};
const uploadPagesOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: PageBlobUploadPagesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobUploadPagesExceptionHeaders
    }
  },
  requestBody: body1,
  queryParameters: [timeoutInSeconds, comp19],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    contentLength,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    range,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    transactionalContentMD5,
    transactionalContentCrc64,
    contentType1,
    accept2,
    pageWrite,
    ifSequenceNumberLessThanOrEqualTo,
    ifSequenceNumberLessThan,
    ifSequenceNumberEqualTo
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "binary",
  serializer: xmlSerializer$2
};
const clearPagesOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: PageBlobClearPagesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobClearPagesExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp19],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    range,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    ifSequenceNumberLessThanOrEqualTo,
    ifSequenceNumberLessThan,
    ifSequenceNumberEqualTo,
    pageWrite1
  ],
  isXML: true,
  serializer: xmlSerializer$2
};
const uploadPagesFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: PageBlobUploadPagesFromURLHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobUploadPagesFromURLExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp19],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    sourceContentMD5,
    copySourceAuthorization,
    pageWrite,
    ifSequenceNumberLessThanOrEqualTo,
    ifSequenceNumberLessThan,
    ifSequenceNumberEqualTo,
    sourceUrl,
    sourceRange,
    sourceContentCrc64,
    range1
  ],
  isXML: true,
  serializer: xmlSerializer$2
};
const getPageRangesOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: PageList,
      headersMapper: PageBlobGetPageRangesHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobGetPageRangesExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    marker,
    maxPageSize,
    snapshot,
    comp20
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    range,
    ifMatch,
    ifNoneMatch,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer$2
};
const getPageRangesDiffOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: PageList,
      headersMapper: PageBlobGetPageRangesDiffHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobGetPageRangesDiffExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    marker,
    maxPageSize,
    snapshot,
    comp20,
    prevsnapshot
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    range,
    ifMatch,
    ifNoneMatch,
    ifTags,
    prevSnapshotUrl
  ],
  isXML: true,
  serializer: xmlSerializer$2
};
const resizeOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: PageBlobResizeHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobResizeExceptionHeaders
    }
  },
  queryParameters: [comp, timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    blobContentLength
  ],
  isXML: true,
  serializer: xmlSerializer$2
};
const updateSequenceNumberOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: PageBlobUpdateSequenceNumberHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobUpdateSequenceNumberExceptionHeaders
    }
  },
  queryParameters: [comp, timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobSequenceNumber,
    sequenceNumberAction
  ],
  isXML: true,
  serializer: xmlSerializer$2
};
const copyIncrementalOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    202: {
      headersMapper: PageBlobCopyIncrementalHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: PageBlobCopyIncrementalExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp21],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    ifTags,
    copySource
  ],
  isXML: true,
  serializer: xmlSerializer$2
};
class AppendBlobImpl {
  /**
   * Initialize a new instance of the class AppendBlob class.
   * @param client Reference to the service client
   */
  constructor(client2) {
    this.client = client2;
  }
  /**
   * The Create Append Blob operation creates a new append blob.
   * @param contentLength The length of the request.
   * @param options The options parameters.
   */
  create(contentLength2, options) {
    return this.client.sendOperationRequest({ contentLength: contentLength2, options }, createOperationSpec);
  }
  /**
   * The Append Block operation commits a new block of data to the end of an existing append blob. The
   * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to
   * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.
   * @param contentLength The length of the request.
   * @param body Initial data
   * @param options The options parameters.
   */
  appendBlock(contentLength2, body2, options) {
    return this.client.sendOperationRequest({ contentLength: contentLength2, body: body2, options }, appendBlockOperationSpec);
  }
  /**
   * The Append Block operation commits a new block of data to the end of an existing append blob where
   * the contents are read from a source url. The Append Block operation is permitted only if the blob
   * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version
   * 2015-02-21 version or later.
   * @param sourceUrl Specify a URL to the copy source.
   * @param contentLength The length of the request.
   * @param options The options parameters.
   */
  appendBlockFromUrl(sourceUrl2, contentLength2, options) {
    return this.client.sendOperationRequest({ sourceUrl: sourceUrl2, contentLength: contentLength2, options }, appendBlockFromUrlOperationSpec);
  }
  /**
   * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version
   * 2019-12-12 version or later.
   * @param options The options parameters.
   */
  seal(options) {
    return this.client.sendOperationRequest({ options }, sealOperationSpec);
  }
}
const xmlSerializer$1 = createSerializer(
  Mappers,
  /* isXml */
  true
);
const createOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: AppendBlobCreateHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobCreateExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    encryptionScope,
    blobTagsString,
    legalHold1,
    blobType1
  ],
  isXML: true,
  serializer: xmlSerializer$1
};
const appendBlockOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: AppendBlobAppendBlockHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobAppendBlockExceptionHeaders
    }
  },
  requestBody: body1,
  queryParameters: [timeoutInSeconds, comp22],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    contentLength,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    transactionalContentMD5,
    transactionalContentCrc64,
    contentType1,
    accept2,
    maxSize,
    appendPosition
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "binary",
  serializer: xmlSerializer$1
};
const appendBlockFromUrlOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: AppendBlobAppendBlockFromUrlHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobAppendBlockFromUrlExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp22],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    encryptionScope,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    sourceContentMD5,
    copySourceAuthorization,
    transactionalContentMD5,
    sourceUrl,
    sourceContentCrc64,
    maxSize,
    appendPosition,
    sourceRange1
  ],
  isXML: true,
  serializer: xmlSerializer$1
};
const sealOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: AppendBlobSealHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: AppendBlobSealExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds, comp23],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    ifMatch,
    ifNoneMatch,
    appendPosition
  ],
  isXML: true,
  serializer: xmlSerializer$1
};
class BlockBlobImpl {
  /**
   * Initialize a new instance of the class BlockBlob class.
   * @param client Reference to the service client
   */
  constructor(client2) {
    this.client = client2;
  }
  /**
   * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing
   * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put
   * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a
   * partial update of the content of a block blob, use the Put Block List operation.
   * @param contentLength The length of the request.
   * @param body Initial data
   * @param options The options parameters.
   */
  upload(contentLength2, body2, options) {
    return this.client.sendOperationRequest({ contentLength: contentLength2, body: body2, options }, uploadOperationSpec);
  }
  /**
   * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read
   * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are
   * not supported with Put Blob from URL; the content of an existing blob is overwritten with the
   * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,
   * use the Put Block from URL API in conjunction with Put Block List.
   * @param contentLength The length of the request.
   * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to
   *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would
   *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared
   *                   access signature.
   * @param options The options parameters.
   */
  putBlobFromUrl(contentLength2, copySource2, options) {
    return this.client.sendOperationRequest({ contentLength: contentLength2, copySource: copySource2, options }, putBlobFromUrlOperationSpec);
  }
  /**
   * The Stage Block operation creates a new block to be committed as part of a blob
   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
   *                for the blockid parameter must be the same size for each block.
   * @param contentLength The length of the request.
   * @param body Initial data
   * @param options The options parameters.
   */
  stageBlock(blockId2, contentLength2, body2, options) {
    return this.client.sendOperationRequest({ blockId: blockId2, contentLength: contentLength2, body: body2, options }, stageBlockOperationSpec);
  }
  /**
   * The Stage Block operation creates a new block to be committed as part of a blob where the contents
   * are read from a URL.
   * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string
   *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified
   *                for the blockid parameter must be the same size for each block.
   * @param contentLength The length of the request.
   * @param sourceUrl Specify a URL to the copy source.
   * @param options The options parameters.
   */
  stageBlockFromURL(blockId2, contentLength2, sourceUrl2, options) {
    return this.client.sendOperationRequest({ blockId: blockId2, contentLength: contentLength2, sourceUrl: sourceUrl2, options }, stageBlockFromURLOperationSpec);
  }
  /**
   * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the
   * blob. In order to be written as part of a blob, a block must have been successfully written to the
   * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading
   * only those blocks that have changed, then committing the new and existing blocks together. You can
   * do this by specifying whether to commit a block from the committed block list or from the
   * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list
   * it may belong to.
   * @param blocks Blob Blocks.
   * @param options The options parameters.
   */
  commitBlockList(blocks2, options) {
    return this.client.sendOperationRequest({ blocks: blocks2, options }, commitBlockListOperationSpec);
  }
  /**
   * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block
   * blob
   * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted
   *                 blocks, or both lists together.
   * @param options The options parameters.
   */
  getBlockList(listType2, options) {
    return this.client.sendOperationRequest({ listType: listType2, options }, getBlockListOperationSpec);
  }
}
const xmlSerializer = createSerializer(
  Mappers,
  /* isXml */
  true
);
const uploadOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlockBlobUploadHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobUploadExceptionHeaders
    }
  },
  requestBody: body1,
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    contentLength,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    encryptionScope,
    tier,
    blobTagsString,
    legalHold1,
    transactionalContentMD5,
    transactionalContentCrc64,
    contentType1,
    accept2,
    blobType2
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "binary",
  serializer: xmlSerializer
};
const putBlobFromUrlOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlockBlobPutBlobFromUrlHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobPutBlobFromUrlExceptionHeaders
    }
  },
  queryParameters: [timeoutInSeconds],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition,
    encryptionScope,
    tier,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    sourceIfTags,
    copySource,
    blobTagsString,
    sourceContentMD5,
    copySourceAuthorization,
    copySourceTags,
    transactionalContentMD5,
    blobType2,
    copySourceBlobProperties
  ],
  isXML: true,
  serializer: xmlSerializer
};
const stageBlockOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlockBlobStageBlockHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobStageBlockExceptionHeaders
    }
  },
  requestBody: body1,
  queryParameters: [
    timeoutInSeconds,
    comp24,
    blockId
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    contentLength,
    leaseId,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    encryptionScope,
    transactionalContentMD5,
    transactionalContentCrc64,
    contentType1,
    accept2
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "binary",
  serializer: xmlSerializer
};
const stageBlockFromURLOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlockBlobStageBlockFromURLHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobStageBlockFromURLExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    comp24,
    blockId
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    contentLength,
    leaseId,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    encryptionScope,
    sourceIfModifiedSince,
    sourceIfUnmodifiedSince,
    sourceIfMatch,
    sourceIfNoneMatch,
    sourceContentMD5,
    copySourceAuthorization,
    sourceUrl,
    sourceContentCrc64,
    sourceRange1
  ],
  isXML: true,
  serializer: xmlSerializer
};
const commitBlockListOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: BlockBlobCommitBlockListHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobCommitBlockListExceptionHeaders
    }
  },
  requestBody: blocks,
  queryParameters: [timeoutInSeconds, comp25],
  urlParameters: [url],
  headerParameters: [
    contentType,
    accept,
    version,
    requestId,
    metadata,
    leaseId,
    ifModifiedSince,
    ifUnmodifiedSince,
    encryptionKey,
    encryptionKeySha256,
    encryptionAlgorithm,
    ifMatch,
    ifNoneMatch,
    ifTags,
    blobCacheControl,
    blobContentType,
    blobContentMD5,
    blobContentEncoding,
    blobContentLanguage,
    blobContentDisposition,
    immutabilityPolicyExpiry,
    immutabilityPolicyMode,
    encryptionScope,
    tier,
    blobTagsString,
    legalHold1,
    transactionalContentMD5,
    transactionalContentCrc64
  ],
  isXML: true,
  contentType: "application/xml; charset=utf-8",
  mediaType: "xml",
  serializer: xmlSerializer
};
const getBlockListOperationSpec = {
  path: "/{containerName}/{blob}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: BlockList,
      headersMapper: BlockBlobGetBlockListHeaders
    },
    default: {
      bodyMapper: StorageError,
      headersMapper: BlockBlobGetBlockListExceptionHeaders
    }
  },
  queryParameters: [
    timeoutInSeconds,
    snapshot,
    comp25,
    listType
  ],
  urlParameters: [url],
  headerParameters: [
    version,
    requestId,
    accept1,
    leaseId,
    ifTags
  ],
  isXML: true,
  serializer: xmlSerializer
};
let StorageClient$1 = class StorageClient extends ExtendedServiceClient {
  /**
   * Initializes a new instance of the StorageClient class.
   * @param url The URL of the service account, container, or blob that is the target of the desired
   *            operation.
   * @param options The parameter options
   */
  constructor(url2, options) {
    var _a2, _b2;
    if (url2 === void 0) {
      throw new Error("'url' cannot be null");
    }
    if (!options) {
      options = {};
    }
    const defaults2 = {
      requestContentType: "application/json; charset=utf-8"
    };
    const packageDetails = `azsdk-js-azure-storage-blob/12.27.0`;
    const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;
    const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults2), options), { userAgentOptions: {
      userAgentPrefix
    }, endpoint: (_b2 = (_a2 = options.endpoint) !== null && _a2 !== void 0 ? _a2 : options.baseUri) !== null && _b2 !== void 0 ? _b2 : "{url}" });
    super(optionsWithDefaults);
    this.url = url2;
    this.version = options.version || "2025-05-05";
    this.service = new ServiceImpl(this);
    this.container = new ContainerImpl(this);
    this.blob = new BlobImpl(this);
    this.pageBlob = new PageBlobImpl(this);
    this.appendBlob = new AppendBlobImpl(this);
    this.blockBlob = new BlockBlobImpl(this);
  }
};
class StorageContextClient extends StorageClient$1 {
  async sendOperationRequest(operationArguments, operationSpec) {
    const operationSpecToSend = Object.assign({}, operationSpec);
    if (operationSpecToSend.path === "/{containerName}" || operationSpecToSend.path === "/{containerName}/{blob}") {
      operationSpecToSend.path = "";
    }
    return super.sendOperationRequest(operationArguments, operationSpecToSend);
  }
}
class StorageClient2 {
  /**
   * Creates an instance of StorageClient.
   * @param url - url to resource
   * @param pipeline - request policy pipeline.
   */
  constructor(url2, pipeline) {
    this.url = escapeURLPath(url2);
    this.accountName = getAccountNameFromUrl(url2);
    this.pipeline = pipeline;
    this.storageClientContext = new StorageContextClient(this.url, getCoreClientOptions(pipeline));
    this.isHttps = iEqual(getURLScheme(this.url) || "", "https");
    this.credential = getCredentialFromPipeline(pipeline);
    const storageClientContext = this.storageClientContext;
    storageClientContext.requestContentType = void 0;
  }
}
const tracingClient = createTracingClient({
  packageName: "@azure/storage-blob",
  packageVersion: SDK_VERSION,
  namespace: "Microsoft.Storage"
});
class BlobSASPermissions {
  constructor() {
    this.read = false;
    this.add = false;
    this.create = false;
    this.write = false;
    this.delete = false;
    this.deleteVersion = false;
    this.tag = false;
    this.move = false;
    this.execute = false;
    this.setImmutabilityPolicy = false;
    this.permanentDelete = false;
  }
  /**
   * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid permission.
   *
   * @param permissions -
   */
  static parse(permissions) {
    const blobSASPermissions = new BlobSASPermissions();
    for (const char of permissions) {
      switch (char) {
        case "r":
          blobSASPermissions.read = true;
          break;
        case "a":
          blobSASPermissions.add = true;
          break;
        case "c":
          blobSASPermissions.create = true;
          break;
        case "w":
          blobSASPermissions.write = true;
          break;
        case "d":
          blobSASPermissions.delete = true;
          break;
        case "x":
          blobSASPermissions.deleteVersion = true;
          break;
        case "t":
          blobSASPermissions.tag = true;
          break;
        case "m":
          blobSASPermissions.move = true;
          break;
        case "e":
          blobSASPermissions.execute = true;
          break;
        case "i":
          blobSASPermissions.setImmutabilityPolicy = true;
          break;
        case "y":
          blobSASPermissions.permanentDelete = true;
          break;
        default:
          throw new RangeError(`Invalid permission: ${char}`);
      }
    }
    return blobSASPermissions;
  }
  /**
   * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it
   * and boolean values for them.
   *
   * @param permissionLike -
   */
  static from(permissionLike) {
    const blobSASPermissions = new BlobSASPermissions();
    if (permissionLike.read) {
      blobSASPermissions.read = true;
    }
    if (permissionLike.add) {
      blobSASPermissions.add = true;
    }
    if (permissionLike.create) {
      blobSASPermissions.create = true;
    }
    if (permissionLike.write) {
      blobSASPermissions.write = true;
    }
    if (permissionLike.delete) {
      blobSASPermissions.delete = true;
    }
    if (permissionLike.deleteVersion) {
      blobSASPermissions.deleteVersion = true;
    }
    if (permissionLike.tag) {
      blobSASPermissions.tag = true;
    }
    if (permissionLike.move) {
      blobSASPermissions.move = true;
    }
    if (permissionLike.execute) {
      blobSASPermissions.execute = true;
    }
    if (permissionLike.setImmutabilityPolicy) {
      blobSASPermissions.setImmutabilityPolicy = true;
    }
    if (permissionLike.permanentDelete) {
      blobSASPermissions.permanentDelete = true;
    }
    return blobSASPermissions;
  }
  /**
   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
   * order accepted by the service.
   *
   * @returns A string which represents the BlobSASPermissions
   */
  toString() {
    const permissions = [];
    if (this.read) {
      permissions.push("r");
    }
    if (this.add) {
      permissions.push("a");
    }
    if (this.create) {
      permissions.push("c");
    }
    if (this.write) {
      permissions.push("w");
    }
    if (this.delete) {
      permissions.push("d");
    }
    if (this.deleteVersion) {
      permissions.push("x");
    }
    if (this.tag) {
      permissions.push("t");
    }
    if (this.move) {
      permissions.push("m");
    }
    if (this.execute) {
      permissions.push("e");
    }
    if (this.setImmutabilityPolicy) {
      permissions.push("i");
    }
    if (this.permanentDelete) {
      permissions.push("y");
    }
    return permissions.join("");
  }
}
class ContainerSASPermissions {
  constructor() {
    this.read = false;
    this.add = false;
    this.create = false;
    this.write = false;
    this.delete = false;
    this.deleteVersion = false;
    this.list = false;
    this.tag = false;
    this.move = false;
    this.execute = false;
    this.setImmutabilityPolicy = false;
    this.permanentDelete = false;
    this.filterByTags = false;
  }
  /**
   * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid permission.
   *
   * @param permissions -
   */
  static parse(permissions) {
    const containerSASPermissions = new ContainerSASPermissions();
    for (const char of permissions) {
      switch (char) {
        case "r":
          containerSASPermissions.read = true;
          break;
        case "a":
          containerSASPermissions.add = true;
          break;
        case "c":
          containerSASPermissions.create = true;
          break;
        case "w":
          containerSASPermissions.write = true;
          break;
        case "d":
          containerSASPermissions.delete = true;
          break;
        case "l":
          containerSASPermissions.list = true;
          break;
        case "t":
          containerSASPermissions.tag = true;
          break;
        case "x":
          containerSASPermissions.deleteVersion = true;
          break;
        case "m":
          containerSASPermissions.move = true;
          break;
        case "e":
          containerSASPermissions.execute = true;
          break;
        case "i":
          containerSASPermissions.setImmutabilityPolicy = true;
          break;
        case "y":
          containerSASPermissions.permanentDelete = true;
          break;
        case "f":
          containerSASPermissions.filterByTags = true;
          break;
        default:
          throw new RangeError(`Invalid permission ${char}`);
      }
    }
    return containerSASPermissions;
  }
  /**
   * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it
   * and boolean values for them.
   *
   * @param permissionLike -
   */
  static from(permissionLike) {
    const containerSASPermissions = new ContainerSASPermissions();
    if (permissionLike.read) {
      containerSASPermissions.read = true;
    }
    if (permissionLike.add) {
      containerSASPermissions.add = true;
    }
    if (permissionLike.create) {
      containerSASPermissions.create = true;
    }
    if (permissionLike.write) {
      containerSASPermissions.write = true;
    }
    if (permissionLike.delete) {
      containerSASPermissions.delete = true;
    }
    if (permissionLike.list) {
      containerSASPermissions.list = true;
    }
    if (permissionLike.deleteVersion) {
      containerSASPermissions.deleteVersion = true;
    }
    if (permissionLike.tag) {
      containerSASPermissions.tag = true;
    }
    if (permissionLike.move) {
      containerSASPermissions.move = true;
    }
    if (permissionLike.execute) {
      containerSASPermissions.execute = true;
    }
    if (permissionLike.setImmutabilityPolicy) {
      containerSASPermissions.setImmutabilityPolicy = true;
    }
    if (permissionLike.permanentDelete) {
      containerSASPermissions.permanentDelete = true;
    }
    if (permissionLike.filterByTags) {
      containerSASPermissions.filterByTags = true;
    }
    return containerSASPermissions;
  }
  /**
   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an
   * order accepted by the service.
   *
   * The order of the characters should be as specified here to ensure correctness.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   */
  toString() {
    const permissions = [];
    if (this.read) {
      permissions.push("r");
    }
    if (this.add) {
      permissions.push("a");
    }
    if (this.create) {
      permissions.push("c");
    }
    if (this.write) {
      permissions.push("w");
    }
    if (this.delete) {
      permissions.push("d");
    }
    if (this.deleteVersion) {
      permissions.push("x");
    }
    if (this.list) {
      permissions.push("l");
    }
    if (this.tag) {
      permissions.push("t");
    }
    if (this.move) {
      permissions.push("m");
    }
    if (this.execute) {
      permissions.push("e");
    }
    if (this.setImmutabilityPolicy) {
      permissions.push("i");
    }
    if (this.permanentDelete) {
      permissions.push("y");
    }
    if (this.filterByTags) {
      permissions.push("f");
    }
    return permissions.join("");
  }
}
class UserDelegationKeyCredential {
}
function ipRangeToString(ipRange) {
  return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;
}
var SASProtocol;
(function(SASProtocol2) {
  SASProtocol2["Https"] = "https";
  SASProtocol2["HttpsAndHttp"] = "https,http";
})(SASProtocol || (SASProtocol = {}));
class SASQueryParameters {
  /**
   * Optional. IP range allowed for this SAS.
   *
   * @readonly
   */
  get ipRange() {
    if (this.ipRangeInner) {
      return {
        end: this.ipRangeInner.end,
        start: this.ipRangeInner.start
      };
    }
    return void 0;
  }
  constructor(version2, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn2, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType2, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope2) {
    this.version = version2;
    this.signature = signature;
    if (permissionsOrOptions !== void 0 && typeof permissionsOrOptions !== "string") {
      this.permissions = permissionsOrOptions.permissions;
      this.services = permissionsOrOptions.services;
      this.resourceTypes = permissionsOrOptions.resourceTypes;
      this.protocol = permissionsOrOptions.protocol;
      this.startsOn = permissionsOrOptions.startsOn;
      this.expiresOn = permissionsOrOptions.expiresOn;
      this.ipRangeInner = permissionsOrOptions.ipRange;
      this.identifier = permissionsOrOptions.identifier;
      this.encryptionScope = permissionsOrOptions.encryptionScope;
      this.resource = permissionsOrOptions.resource;
      this.cacheControl = permissionsOrOptions.cacheControl;
      this.contentDisposition = permissionsOrOptions.contentDisposition;
      this.contentEncoding = permissionsOrOptions.contentEncoding;
      this.contentLanguage = permissionsOrOptions.contentLanguage;
      this.contentType = permissionsOrOptions.contentType;
      if (permissionsOrOptions.userDelegationKey) {
        this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;
        this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;
        this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;
        this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;
        this.signedService = permissionsOrOptions.userDelegationKey.signedService;
        this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;
        this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;
        this.correlationId = permissionsOrOptions.correlationId;
      }
    } else {
      this.services = services;
      this.resourceTypes = resourceTypes;
      this.expiresOn = expiresOn2;
      this.permissions = permissionsOrOptions;
      this.protocol = protocol;
      this.startsOn = startsOn;
      this.ipRangeInner = ipRange;
      this.encryptionScope = encryptionScope2;
      this.identifier = identifier;
      this.resource = resource;
      this.cacheControl = cacheControl;
      this.contentDisposition = contentDisposition;
      this.contentEncoding = contentEncoding;
      this.contentLanguage = contentLanguage;
      this.contentType = contentType2;
      if (userDelegationKey) {
        this.signedOid = userDelegationKey.signedObjectId;
        this.signedTenantId = userDelegationKey.signedTenantId;
        this.signedStartsOn = userDelegationKey.signedStartsOn;
        this.signedExpiresOn = userDelegationKey.signedExpiresOn;
        this.signedService = userDelegationKey.signedService;
        this.signedVersion = userDelegationKey.signedVersion;
        this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;
        this.correlationId = correlationId;
      }
    }
  }
  /**
   * Encodes all SAS query parameters into a string that can be appended to a URL.
   *
   */
  toString() {
    const params = [
      "sv",
      "ss",
      "srt",
      "spr",
      "st",
      "se",
      "sip",
      "si",
      "ses",
      "skoid",
      // Signed object ID
      "sktid",
      // Signed tenant ID
      "skt",
      // Signed key start time
      "ske",
      // Signed key expiry time
      "sks",
      // Signed key service
      "skv",
      // Signed key version
      "sr",
      "sp",
      "sig",
      "rscc",
      "rscd",
      "rsce",
      "rscl",
      "rsct",
      "saoid",
      "scid"
    ];
    const queries = [];
    for (const param of params) {
      switch (param) {
        case "sv":
          this.tryAppendQueryParameter(queries, param, this.version);
          break;
        case "ss":
          this.tryAppendQueryParameter(queries, param, this.services);
          break;
        case "srt":
          this.tryAppendQueryParameter(queries, param, this.resourceTypes);
          break;
        case "spr":
          this.tryAppendQueryParameter(queries, param, this.protocol);
          break;
        case "st":
          this.tryAppendQueryParameter(queries, param, this.startsOn ? truncatedISO8061Date(this.startsOn, false) : void 0);
          break;
        case "se":
          this.tryAppendQueryParameter(queries, param, this.expiresOn ? truncatedISO8061Date(this.expiresOn, false) : void 0);
          break;
        case "sip":
          this.tryAppendQueryParameter(queries, param, this.ipRange ? ipRangeToString(this.ipRange) : void 0);
          break;
        case "si":
          this.tryAppendQueryParameter(queries, param, this.identifier);
          break;
        case "ses":
          this.tryAppendQueryParameter(queries, param, this.encryptionScope);
          break;
        case "skoid":
          this.tryAppendQueryParameter(queries, param, this.signedOid);
          break;
        case "sktid":
          this.tryAppendQueryParameter(queries, param, this.signedTenantId);
          break;
        case "skt":
          this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? truncatedISO8061Date(this.signedStartsOn, false) : void 0);
          break;
        case "ske":
          this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? truncatedISO8061Date(this.signedExpiresOn, false) : void 0);
          break;
        case "sks":
          this.tryAppendQueryParameter(queries, param, this.signedService);
          break;
        case "skv":
          this.tryAppendQueryParameter(queries, param, this.signedVersion);
          break;
        case "sr":
          this.tryAppendQueryParameter(queries, param, this.resource);
          break;
        case "sp":
          this.tryAppendQueryParameter(queries, param, this.permissions);
          break;
        case "sig":
          this.tryAppendQueryParameter(queries, param, this.signature);
          break;
        case "rscc":
          this.tryAppendQueryParameter(queries, param, this.cacheControl);
          break;
        case "rscd":
          this.tryAppendQueryParameter(queries, param, this.contentDisposition);
          break;
        case "rsce":
          this.tryAppendQueryParameter(queries, param, this.contentEncoding);
          break;
        case "rscl":
          this.tryAppendQueryParameter(queries, param, this.contentLanguage);
          break;
        case "rsct":
          this.tryAppendQueryParameter(queries, param, this.contentType);
          break;
        case "saoid":
          this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);
          break;
        case "scid":
          this.tryAppendQueryParameter(queries, param, this.correlationId);
          break;
      }
    }
    return queries.join("&");
  }
  /**
   * A private helper method used to filter and append query key/value pairs into an array.
   *
   * @param queries -
   * @param key -
   * @param value -
   */
  tryAppendQueryParameter(queries, key, value) {
    if (!value) {
      return;
    }
    key = encodeURIComponent(key);
    value = encodeURIComponent(value);
    if (key.length > 0 && value.length > 0) {
      queries.push(`${key}=${value}`);
    }
  }
}
function generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {
  return generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName).sasQueryParameters;
}
function generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {
  const version2 = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;
  const sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential ? sharedKeyCredentialOrUserDelegationKey : void 0;
  let userDelegationKeyCredential;
  if (sharedKeyCredential === void 0 && accountName !== void 0) {
    userDelegationKeyCredential = new UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);
  }
  if (sharedKeyCredential === void 0 && userDelegationKeyCredential === void 0) {
    throw TypeError("Invalid sharedKeyCredential, userDelegationKey or accountName.");
  }
  if (version2 >= "2020-12-06") {
    if (sharedKeyCredential !== void 0) {
      return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);
    } else {
      return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);
    }
  }
  if (version2 >= "2018-11-09") {
    if (sharedKeyCredential !== void 0) {
      return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);
    } else {
      if (version2 >= "2020-02-10") {
        return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);
      } else {
        return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);
      }
    }
  }
  if (version2 >= "2015-04-05") {
    if (sharedKeyCredential !== void 0) {
      return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);
    } else {
      throw new RangeError("'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.");
    }
  }
  throw new RangeError("'version' must be >= '2015-04-05'.");
}
function generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  let resource = "c";
  if (blobSASSignatureValues.blobName) {
    resource = "b";
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    blobSASSignatureValues.identifier,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""
  ].join("\n");
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),
    stringToSign
  };
}
function generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    blobSASSignatureValues.identifier,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""
  ].join("\n");
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),
    stringToSign
  };
}
function generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.identifier && !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    blobSASSignatureValues.identifier,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.encryptionScope,
    blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : "",
    blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : "",
    blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : "",
    blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : "",
    blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : ""
  ].join("\n");
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, void 0, void 0, void 0, blobSASSignatureValues.encryptionScope),
    stringToSign
  };
}
function generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    userDelegationKeyCredential.userDelegationKey.signedObjectId,
    userDelegationKeyCredential.userDelegationKey.signedTenantId,
    userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedService,
    userDelegationKeyCredential.userDelegationKey.signedVersion,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.cacheControl,
    blobSASSignatureValues.contentDisposition,
    blobSASSignatureValues.contentEncoding,
    blobSASSignatureValues.contentLanguage,
    blobSASSignatureValues.contentType
  ].join("\n");
  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey),
    stringToSign
  };
}
function generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    userDelegationKeyCredential.userDelegationKey.signedObjectId,
    userDelegationKeyCredential.userDelegationKey.signedTenantId,
    userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedService,
    userDelegationKeyCredential.userDelegationKey.signedVersion,
    blobSASSignatureValues.preauthorizedAgentObjectId,
    void 0,
    // agentObjectId
    blobSASSignatureValues.correlationId,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.cacheControl,
    blobSASSignatureValues.contentDisposition,
    blobSASSignatureValues.contentEncoding,
    blobSASSignatureValues.contentLanguage,
    blobSASSignatureValues.contentType
  ].join("\n");
  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId),
    stringToSign
  };
}
function generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {
  blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);
  if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {
    throw new RangeError("Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.");
  }
  let resource = "c";
  let timestamp = blobSASSignatureValues.snapshotTime;
  if (blobSASSignatureValues.blobName) {
    resource = "b";
    if (blobSASSignatureValues.snapshotTime) {
      resource = "bs";
    } else if (blobSASSignatureValues.versionId) {
      resource = "bv";
      timestamp = blobSASSignatureValues.versionId;
    }
  }
  let verifiedPermissions;
  if (blobSASSignatureValues.permissions) {
    if (blobSASSignatureValues.blobName) {
      verifiedPermissions = BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    } else {
      verifiedPermissions = ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();
    }
  }
  const stringToSign = [
    verifiedPermissions ? verifiedPermissions : "",
    blobSASSignatureValues.startsOn ? truncatedISO8061Date(blobSASSignatureValues.startsOn, false) : "",
    blobSASSignatureValues.expiresOn ? truncatedISO8061Date(blobSASSignatureValues.expiresOn, false) : "",
    getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),
    userDelegationKeyCredential.userDelegationKey.signedObjectId,
    userDelegationKeyCredential.userDelegationKey.signedTenantId,
    userDelegationKeyCredential.userDelegationKey.signedStartsOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedExpiresOn ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false) : "",
    userDelegationKeyCredential.userDelegationKey.signedService,
    userDelegationKeyCredential.userDelegationKey.signedVersion,
    blobSASSignatureValues.preauthorizedAgentObjectId,
    void 0,
    // agentObjectId
    blobSASSignatureValues.correlationId,
    blobSASSignatureValues.ipRange ? ipRangeToString(blobSASSignatureValues.ipRange) : "",
    blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : "",
    blobSASSignatureValues.version,
    resource,
    timestamp,
    blobSASSignatureValues.encryptionScope,
    blobSASSignatureValues.cacheControl,
    blobSASSignatureValues.contentDisposition,
    blobSASSignatureValues.contentEncoding,
    blobSASSignatureValues.contentLanguage,
    blobSASSignatureValues.contentType
  ].join("\n");
  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, void 0, void 0, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope),
    stringToSign
  };
}
function getCanonicalName(accountName, containerName, blobName) {
  const elements = [`/blob/${accountName}/${containerName}`];
  if (blobName) {
    elements.push(`/${blobName}`);
  }
  return elements.join("");
}
function SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {
  const version2 = blobSASSignatureValues.version ? blobSASSignatureValues.version : SERVICE_VERSION;
  if (blobSASSignatureValues.snapshotTime && version2 < "2018-11-09") {
    throw RangeError("'version' must be >= '2018-11-09' when providing 'snapshotTime'.");
  }
  if (blobSASSignatureValues.blobName === void 0 && blobSASSignatureValues.snapshotTime) {
    throw RangeError("Must provide 'blobName' when providing 'snapshotTime'.");
  }
  if (blobSASSignatureValues.versionId && version2 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'versionId'.");
  }
  if (blobSASSignatureValues.blobName === void 0 && blobSASSignatureValues.versionId) {
    throw RangeError("Must provide 'blobName' when providing 'versionId'.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.setImmutabilityPolicy && version2 < "2020-08-04") {
    throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.deleteVersion && version2 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'x' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.permanentDelete && version2 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when providing 'y' permission.");
  }
  if (blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.tag && version2 < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when providing 't' permission.");
  }
  if (version2 < "2020-02-10" && blobSASSignatureValues.permissions && (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {
    throw RangeError("'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.");
  }
  if (version2 < "2021-04-10" && blobSASSignatureValues.permissions && blobSASSignatureValues.permissions.filterByTags) {
    throw RangeError("'version' must be >= '2021-04-10' when providing the 'f' permission.");
  }
  if (version2 < "2020-02-10" && (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {
    throw RangeError("'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.");
  }
  if (blobSASSignatureValues.encryptionScope && version2 < "2020-12-06") {
    throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
  }
  blobSASSignatureValues.version = version2;
  return blobSASSignatureValues;
}
class BlobLeaseClient {
  /**
   * Gets the lease Id.
   *
   * @readonly
   */
  get leaseId() {
    return this._leaseId;
  }
  /**
   * Gets the url.
   *
   * @readonly
   */
  get url() {
    return this._url;
  }
  /**
   * Creates an instance of BlobLeaseClient.
   * @param client - The client to make the lease operation requests.
   * @param leaseId - Initial proposed lease id.
   */
  constructor(client2, leaseId2) {
    const clientContext = client2.storageClientContext;
    this._url = client2.url;
    if (client2.name === void 0) {
      this._isContainer = true;
      this._containerOrBlobOperation = clientContext.container;
    } else {
      this._isContainer = false;
      this._containerOrBlobOperation = clientContext.blob;
    }
    if (!leaseId2) {
      leaseId2 = randomUUID();
    }
    this._leaseId = leaseId2;
  }
  /**
   * Establishes and manages a lock on a container for delete operations, or on a blob
   * for write and delete operations.
   * The lock duration can be 15 to 60 seconds, or can be infinite.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)
   * @param options - option to configure lease management operations.
   * @returns Response data for acquire lease operation.
   */
  async acquireLease(duration2, options = {}) {
    var _a2, _b2, _c2, _d2, _e;
    if (this._isContainer && (((_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
      throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
    }
    return tracingClient.withSpan("BlobLeaseClient-acquireLease", options, async (updatedOptions) => {
      var _a3;
      return assertResponse(await this._containerOrBlobOperation.acquireLease({
        abortSignal: options.abortSignal,
        duration: duration2,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }),
        proposedLeaseId: this._leaseId,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * To change the ID of the lease.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param proposedLeaseId - the proposed new lease Id.
   * @param options - option to configure lease management operations.
   * @returns Response data for change lease operation.
   */
  async changeLease(proposedLeaseId2, options = {}) {
    var _a2, _b2, _c2, _d2, _e;
    if (this._isContainer && (((_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
      throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
    }
    return tracingClient.withSpan("BlobLeaseClient-changeLease", options, async (updatedOptions) => {
      var _a3;
      const response = assertResponse(await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId2, {
        abortSignal: options.abortSignal,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }),
        tracingOptions: updatedOptions.tracingOptions
      }));
      this._leaseId = proposedLeaseId2;
      return response;
    });
  }
  /**
   * To free the lease if it is no longer needed so that another client may
   * immediately acquire a lease against the container or the blob.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param options - option to configure lease management operations.
   * @returns Response data for release lease operation.
   */
  async releaseLease(options = {}) {
    var _a2, _b2, _c2, _d2, _e;
    if (this._isContainer && (((_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
      throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
    }
    return tracingClient.withSpan("BlobLeaseClient-releaseLease", options, async (updatedOptions) => {
      var _a3;
      return assertResponse(await this._containerOrBlobOperation.releaseLease(this._leaseId, {
        abortSignal: options.abortSignal,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }),
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * To renew the lease.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param options - Optional option to configure lease management operations.
   * @returns Response data for renew lease operation.
   */
  async renewLease(options = {}) {
    var _a2, _b2, _c2, _d2, _e;
    if (this._isContainer && (((_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
      throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
    }
    return tracingClient.withSpan("BlobLeaseClient-renewLease", options, async (updatedOptions) => {
      var _a3;
      return this._containerOrBlobOperation.renewLease(this._leaseId, {
        abortSignal: options.abortSignal,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }),
        tracingOptions: updatedOptions.tracingOptions
      });
    });
  }
  /**
   * To end the lease but ensure that another client cannot acquire a new lease
   * until the current lease period has expired.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/lease-container
   * and
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/lease-blob
   *
   * @param breakPeriod - Break period
   * @param options - Optional options to configure lease management operations.
   * @returns Response data for break lease operation.
   */
  async breakLease(breakPeriod2, options = {}) {
    var _a2, _b2, _c2, _d2, _e;
    if (this._isContainer && (((_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.ifMatch) && ((_b2 = options.conditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch) !== ETagNone || ((_c2 = options.conditions) === null || _c2 === void 0 ? void 0 : _c2.ifNoneMatch) && ((_d2 = options.conditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {
      throw new RangeError("The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.");
    }
    return tracingClient.withSpan("BlobLeaseClient-breakLease", options, async (updatedOptions) => {
      var _a3;
      const operationOptions = {
        abortSignal: options.abortSignal,
        breakPeriod: breakPeriod2,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions }),
        tracingOptions: updatedOptions.tracingOptions
      };
      return assertResponse(await this._containerOrBlobOperation.breakLease(operationOptions));
    });
  }
}
const BlobDownloadResponse = 1;
class BlobQueryResponse {
  /**
   * Indicates that the service supports
   * requests for partial file content.
   *
   * @readonly
   */
  get acceptRanges() {
    return this.originalResponse.acceptRanges;
  }
  /**
   * Returns if it was previously specified
   * for the file.
   *
   * @readonly
   */
  get cacheControl() {
    return this.originalResponse.cacheControl;
  }
  /**
   * Returns the value that was specified
   * for the 'x-ms-content-disposition' header and specifies how to process the
   * response.
   *
   * @readonly
   */
  get contentDisposition() {
    return this.originalResponse.contentDisposition;
  }
  /**
   * Returns the value that was specified
   * for the Content-Encoding request header.
   *
   * @readonly
   */
  get contentEncoding() {
    return this.originalResponse.contentEncoding;
  }
  /**
   * Returns the value that was specified
   * for the Content-Language request header.
   *
   * @readonly
   */
  get contentLanguage() {
    return this.originalResponse.contentLanguage;
  }
  /**
   * The current sequence number for a
   * page blob. This header is not returned for block blobs or append blobs.
   *
   * @readonly
   */
  get blobSequenceNumber() {
    return this.originalResponse.blobSequenceNumber;
  }
  /**
   * The blob's type. Possible values include:
   * 'BlockBlob', 'PageBlob', 'AppendBlob'.
   *
   * @readonly
   */
  get blobType() {
    return this.originalResponse.blobType;
  }
  /**
   * The number of bytes present in the
   * response body.
   *
   * @readonly
   */
  get contentLength() {
    return this.originalResponse.contentLength;
  }
  /**
   * If the file has an MD5 hash and the
   * request is to read the full file, this response header is returned so that
   * the client can check for message content integrity. If the request is to
   * read a specified range and the 'x-ms-range-get-content-md5' is set to
   * true, then the request returns an MD5 hash for the range, as long as the
   * range size is less than or equal to 4 MB. If neither of these sets of
   * conditions is true, then no value is returned for the 'Content-MD5'
   * header.
   *
   * @readonly
   */
  get contentMD5() {
    return this.originalResponse.contentMD5;
  }
  /**
   * Indicates the range of bytes returned if
   * the client requested a subset of the file by setting the Range request
   * header.
   *
   * @readonly
   */
  get contentRange() {
    return this.originalResponse.contentRange;
  }
  /**
   * The content type specified for the file.
   * The default content type is 'application/octet-stream'
   *
   * @readonly
   */
  get contentType() {
    return this.originalResponse.contentType;
  }
  /**
   * Conclusion time of the last attempted
   * Copy File operation where this file was the destination file. This value
   * can specify the time of a completed, aborted, or failed copy attempt.
   *
   * @readonly
   */
  get copyCompletedOn() {
    return void 0;
  }
  /**
   * String identifier for the last attempted Copy
   * File operation where this file was the destination file.
   *
   * @readonly
   */
  get copyId() {
    return this.originalResponse.copyId;
  }
  /**
   * Contains the number of bytes copied and
   * the total bytes in the source in the last attempted Copy File operation
   * where this file was the destination file. Can show between 0 and
   * Content-Length bytes copied.
   *
   * @readonly
   */
  get copyProgress() {
    return this.originalResponse.copyProgress;
  }
  /**
   * URL up to 2KB in length that specifies the
   * source file used in the last attempted Copy File operation where this file
   * was the destination file.
   *
   * @readonly
   */
  get copySource() {
    return this.originalResponse.copySource;
  }
  /**
   * State of the copy operation
   * identified by 'x-ms-copy-id'. Possible values include: 'pending',
   * 'success', 'aborted', 'failed'
   *
   * @readonly
   */
  get copyStatus() {
    return this.originalResponse.copyStatus;
  }
  /**
   * Only appears when
   * x-ms-copy-status is failed or pending. Describes cause of fatal or
   * non-fatal copy operation failure.
   *
   * @readonly
   */
  get copyStatusDescription() {
    return this.originalResponse.copyStatusDescription;
  }
  /**
   * When a blob is leased,
   * specifies whether the lease is of infinite or fixed duration. Possible
   * values include: 'infinite', 'fixed'.
   *
   * @readonly
   */
  get leaseDuration() {
    return this.originalResponse.leaseDuration;
  }
  /**
   * Lease state of the blob. Possible
   * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.
   *
   * @readonly
   */
  get leaseState() {
    return this.originalResponse.leaseState;
  }
  /**
   * The current lease status of the
   * blob. Possible values include: 'locked', 'unlocked'.
   *
   * @readonly
   */
  get leaseStatus() {
    return this.originalResponse.leaseStatus;
  }
  /**
   * A UTC date/time value generated by the service that
   * indicates the time at which the response was initiated.
   *
   * @readonly
   */
  get date() {
    return this.originalResponse.date;
  }
  /**
   * The number of committed blocks
   * present in the blob. This header is returned only for append blobs.
   *
   * @readonly
   */
  get blobCommittedBlockCount() {
    return this.originalResponse.blobCommittedBlockCount;
  }
  /**
   * The ETag contains a value that you can use to
   * perform operations conditionally, in quotes.
   *
   * @readonly
   */
  get etag() {
    return this.originalResponse.etag;
  }
  /**
   * The error code.
   *
   * @readonly
   */
  get errorCode() {
    return this.originalResponse.errorCode;
  }
  /**
   * The value of this header is set to
   * true if the file data and application metadata are completely encrypted
   * using the specified algorithm. Otherwise, the value is set to false (when
   * the file is unencrypted, or if only parts of the file/application metadata
   * are encrypted).
   *
   * @readonly
   */
  get isServerEncrypted() {
    return this.originalResponse.isServerEncrypted;
  }
  /**
   * If the blob has a MD5 hash, and if
   * request contains range header (Range or x-ms-range), this response header
   * is returned with the value of the whole blob's MD5 value. This value may
   * or may not be equal to the value returned in Content-MD5 header, with the
   * latter calculated from the requested range.
   *
   * @readonly
   */
  get blobContentMD5() {
    return this.originalResponse.blobContentMD5;
  }
  /**
   * Returns the date and time the file was last
   * modified. Any operation that modifies the file or its properties updates
   * the last modified time.
   *
   * @readonly
   */
  get lastModified() {
    return this.originalResponse.lastModified;
  }
  /**
   * A name-value pair
   * to associate with a file storage object.
   *
   * @readonly
   */
  get metadata() {
    return this.originalResponse.metadata;
  }
  /**
   * This header uniquely identifies the request
   * that was made and can be used for troubleshooting the request.
   *
   * @readonly
   */
  get requestId() {
    return this.originalResponse.requestId;
  }
  /**
   * If a client request id header is sent in the request, this header will be present in the
   * response with the same value.
   *
   * @readonly
   */
  get clientRequestId() {
    return this.originalResponse.clientRequestId;
  }
  /**
   * Indicates the version of the File service used
   * to execute the request.
   *
   * @readonly
   */
  get version() {
    return this.originalResponse.version;
  }
  /**
   * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned
   * when the blob was encrypted with a customer-provided key.
   *
   * @readonly
   */
  get encryptionKeySha256() {
    return this.originalResponse.encryptionKeySha256;
  }
  /**
   * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to
   * true, then the request returns a crc64 for the range, as long as the range size is less than
   * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is
   * specified in the same request, it will fail with 400(Bad Request)
   */
  get contentCrc64() {
    return this.originalResponse.contentCrc64;
  }
  /**
   * The response body as a browser Blob.
   * Always undefined in node.js.
   *
   * @readonly
   */
  get blobBody() {
    throw Error(`Quick query in browser is not supported yet.`);
  }
  /**
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   *
   * @readonly
   */
  get readableStreamBody() {
    return void 0;
  }
  /**
   * The HTTP response.
   */
  get _response() {
    return this.originalResponse._response;
  }
  /**
   * Creates an instance of BlobQueryResponse.
   *
   * @param originalResponse -
   * @param options -
   */
  constructor(originalResponse2, _options = {}) {
    this.originalResponse = originalResponse2;
  }
}
var BlockBlobTier;
(function(BlockBlobTier2) {
  BlockBlobTier2["Hot"] = "Hot";
  BlockBlobTier2["Cool"] = "Cool";
  BlockBlobTier2["Cold"] = "Cold";
  BlockBlobTier2["Archive"] = "Archive";
})(BlockBlobTier || (BlockBlobTier = {}));
var PremiumPageBlobTier;
(function(PremiumPageBlobTier2) {
  PremiumPageBlobTier2["P4"] = "P4";
  PremiumPageBlobTier2["P6"] = "P6";
  PremiumPageBlobTier2["P10"] = "P10";
  PremiumPageBlobTier2["P15"] = "P15";
  PremiumPageBlobTier2["P20"] = "P20";
  PremiumPageBlobTier2["P30"] = "P30";
  PremiumPageBlobTier2["P40"] = "P40";
  PremiumPageBlobTier2["P50"] = "P50";
  PremiumPageBlobTier2["P60"] = "P60";
  PremiumPageBlobTier2["P70"] = "P70";
  PremiumPageBlobTier2["P80"] = "P80";
})(PremiumPageBlobTier || (PremiumPageBlobTier = {}));
function toAccessTier(tier2) {
  if (tier2 === void 0) {
    return void 0;
  }
  return tier2;
}
function ensureCpkIfSpecified(cpk, isHttps) {
  if (cpk && !isHttps) {
    throw new RangeError("Customer-provided encryption key must be used over HTTPS.");
  }
  if (cpk && !cpk.encryptionAlgorithm) {
    cpk.encryptionAlgorithm = EncryptionAlgorithmAES25;
  }
}
var StorageBlobAudience;
(function(StorageBlobAudience2) {
  StorageBlobAudience2["StorageOAuthScopes"] = "https://storage.azure.com/.default";
  StorageBlobAudience2["DiskComputeOAuthScopes"] = "https://disk.compute.azure.com/.default";
})(StorageBlobAudience || (StorageBlobAudience = {}));
function rangeResponseFromModel(response) {
  const pageRange = (response._response.parsedBody.pageRange || []).map((x) => ({
    offset: x.start,
    count: x.end - x.start
  }));
  const clearRange = (response._response.parsedBody.clearRange || []).map((x) => ({
    offset: x.start,
    count: x.end - x.start
  }));
  return Object.assign(Object.assign({}, response), {
    pageRange,
    clearRange,
    _response: Object.assign(Object.assign({}, response._response), { parsedBody: {
      pageRange,
      clearRange
    } })
  });
}
class PollerStoppedError extends Error {
  constructor(message) {
    super(message);
    this.name = "PollerStoppedError";
    Object.setPrototypeOf(this, PollerStoppedError.prototype);
  }
}
class PollerCancelledError extends Error {
  constructor(message) {
    super(message);
    this.name = "PollerCancelledError";
    Object.setPrototypeOf(this, PollerCancelledError.prototype);
  }
}
class Poller {
  /**
   * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.
   *
   * When writing an implementation of a Poller, this implementation needs to deal with the initialization
   * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's
   * operation has already been defined, at least its basic properties. The code below shows how to approach
   * the definition of the constructor of a new custom poller.
   *
   * ```ts
   * export class MyPoller extends Poller<MyOperationState, string> {
   *   constructor({
   *     // Anything you might need outside of the basics
   *   }) {
   *     let state: MyOperationState = {
   *       privateProperty: private,
   *       publicProperty: public,
   *     };
   *
   *     const operation = {
   *       state,
   *       update,
   *       cancel,
   *       toString
   *     }
   *
   *     // Sending the operation to the parent's constructor.
   *     super(operation);
   *
   *     // You can assign more local properties here.
   *   }
   * }
   * ```
   *
   * Inside of this constructor, a new promise is created. This will be used to
   * tell the user when the poller finishes (see `pollUntilDone()`). The promise's
   * resolve and reject methods are also used internally to control when to resolve
   * or reject anyone waiting for the poller to finish.
   *
   * The constructor of a custom implementation of a poller is where any serialized version of
   * a previous poller's operation should be deserialized into the operation sent to the
   * base constructor. For example:
   *
   * ```ts
   * export class MyPoller extends Poller<MyOperationState, string> {
   *   constructor(
   *     baseOperation: string | undefined
   *   ) {
   *     let state: MyOperationState = {};
   *     if (baseOperation) {
   *       state = {
   *         ...JSON.parse(baseOperation).state,
   *         ...state
   *       };
   *     }
   *     const operation = {
   *       state,
   *       // ...
   *     }
   *     super(operation);
   *   }
   * }
   * ```
   *
   * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.
   */
  constructor(operation) {
    this.resolveOnUnsuccessful = false;
    this.stopped = true;
    this.pollProgressCallbacks = [];
    this.operation = operation;
    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
    this.promise.catch(() => {
    });
  }
  /**
   * Starts a loop that will break only if the poller is done
   * or if the poller is stopped.
   */
  async startPolling(pollOptions = {}) {
    if (this.stopped) {
      this.stopped = false;
    }
    while (!this.isStopped() && !this.isDone()) {
      await this.poll(pollOptions);
      await this.delay();
    }
  }
  /**
   * pollOnce does one polling, by calling to the update method of the underlying
   * poll operation to make any relevant change effective.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * @param options - Optional properties passed to the operation's update method.
   */
  async pollOnce(options = {}) {
    if (!this.isDone()) {
      this.operation = await this.operation.update({
        abortSignal: options.abortSignal,
        fireProgress: this.fireProgress.bind(this)
      });
    }
    this.processUpdatedState();
  }
  /**
   * fireProgress calls the functions passed in via onProgress the method of the poller.
   *
   * It loops over all of the callbacks received from onProgress, and executes them, sending them
   * the current operation state.
   *
   * @param state - The current operation state.
   */
  fireProgress(state2) {
    for (const callback of this.pollProgressCallbacks) {
      callback(state2);
    }
  }
  /**
   * Invokes the underlying operation's cancel method.
   */
  async cancelOnce(options = {}) {
    this.operation = await this.operation.cancel(options);
  }
  /**
   * Returns a promise that will resolve once a single polling request finishes.
   * It does this by calling the update method of the Poller's operation.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * @param options - Optional properties passed to the operation's update method.
   */
  poll(options = {}) {
    if (!this.pollOncePromise) {
      this.pollOncePromise = this.pollOnce(options);
      const clearPollOncePromise = () => {
        this.pollOncePromise = void 0;
      };
      this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);
    }
    return this.pollOncePromise;
  }
  processUpdatedState() {
    if (this.operation.state.error) {
      this.stopped = true;
      if (!this.resolveOnUnsuccessful) {
        this.reject(this.operation.state.error);
        throw this.operation.state.error;
      }
    }
    if (this.operation.state.isCancelled) {
      this.stopped = true;
      if (!this.resolveOnUnsuccessful) {
        const error = new PollerCancelledError("Operation was canceled");
        this.reject(error);
        throw error;
      }
    }
    if (this.isDone() && this.resolve) {
      this.resolve(this.getResult());
    }
  }
  /**
   * Returns a promise that will resolve once the underlying operation is completed.
   */
  async pollUntilDone(pollOptions = {}) {
    if (this.stopped) {
      this.startPolling(pollOptions).catch(this.reject);
    }
    this.processUpdatedState();
    return this.promise;
  }
  /**
   * Invokes the provided callback after each polling is completed,
   * sending the current state of the poller's operation.
   *
   * It returns a method that can be used to stop receiving updates on the given callback function.
   */
  onProgress(callback) {
    this.pollProgressCallbacks.push(callback);
    return () => {
      this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);
    };
  }
  /**
   * Returns true if the poller has finished polling.
   */
  isDone() {
    const state2 = this.operation.state;
    return Boolean(state2.isCompleted || state2.isCancelled || state2.error);
  }
  /**
   * Stops the poller from continuing to poll.
   */
  stopPolling() {
    if (!this.stopped) {
      this.stopped = true;
      if (this.reject) {
        this.reject(new PollerStoppedError("This poller is already stopped"));
      }
    }
  }
  /**
   * Returns true if the poller is stopped.
   */
  isStopped() {
    return this.stopped;
  }
  /**
   * Attempts to cancel the underlying operation.
   *
   * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
   *
   * If it's called again before it finishes, it will throw an error.
   *
   * @param options - Optional properties passed to the operation's update method.
   */
  cancelOperation(options = {}) {
    if (!this.cancelPromise) {
      this.cancelPromise = this.cancelOnce(options);
    } else if (options.abortSignal) {
      throw new Error("A cancel request is currently pending");
    }
    return this.cancelPromise;
  }
  /**
   * Returns the state of the operation.
   *
   * Even though TState will be the same type inside any of the methods of any extension of the Poller class,
   * implementations of the pollers can customize what's shared with the public by writing their own
   * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller
   * and a public type representing a safe to share subset of the properties of the internal state.
   * Their definition of getOperationState can then return their public type.
   *
   * Example:
   *
   * ```ts
   * // Let's say we have our poller's operation state defined as:
   * interface MyOperationState extends PollOperationState<ResultType> {
   *   privateProperty?: string;
   *   publicProperty?: string;
   * }
   *
   * // To allow us to have a true separation of public and private state, we have to define another interface:
   * interface PublicState extends PollOperationState<ResultType> {
   *   publicProperty?: string;
   * }
   *
   * // Then, we define our Poller as follows:
   * export class MyPoller extends Poller<MyOperationState, ResultType> {
   *   // ... More content is needed here ...
   *
   *   public getOperationState(): PublicState {
   *     const state: PublicState = this.operation.state;
   *     return {
   *       // Properties from PollOperationState<TResult>
   *       isStarted: state.isStarted,
   *       isCompleted: state.isCompleted,
   *       isCancelled: state.isCancelled,
   *       error: state.error,
   *       result: state.result,
   *
   *       // The only other property needed by PublicState.
   *       publicProperty: state.publicProperty
   *     }
   *   }
   * }
   * ```
   *
   * You can see this in the tests of this repository, go to the file:
   * `../test/utils/testPoller.ts`
   * and look for the getOperationState implementation.
   */
  getOperationState() {
    return this.operation.state;
  }
  /**
   * Returns the result value of the operation,
   * regardless of the state of the poller.
   * It can return undefined or an incomplete form of the final TResult value
   * depending on the implementation.
   */
  getResult() {
    const state2 = this.operation.state;
    return state2.result;
  }
  /**
   * Returns a serialized version of the poller's operation
   * by invoking the operation's toString method.
   */
  toString() {
    return this.operation.toString();
  }
}
class BlobBeginCopyFromUrlPoller extends Poller {
  constructor(options) {
    const { blobClient, copySource: copySource2, intervalInMs = 15e3, onProgress, resumeFrom, startCopyFromURLOptions } = options;
    let state2;
    if (resumeFrom) {
      state2 = JSON.parse(resumeFrom).state;
    }
    const operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state2), {
      blobClient,
      copySource: copySource2,
      startCopyFromURLOptions
    }));
    super(operation);
    if (typeof onProgress === "function") {
      this.onProgress(onProgress);
    }
    this.intervalInMs = intervalInMs;
  }
  delay() {
    return delay$2(this.intervalInMs);
  }
}
const cancel = async function cancel2(options = {}) {
  const state2 = this.state;
  const { copyId: copyId2 } = state2;
  if (state2.isCompleted) {
    return makeBlobBeginCopyFromURLPollOperation(state2);
  }
  if (!copyId2) {
    state2.isCancelled = true;
    return makeBlobBeginCopyFromURLPollOperation(state2);
  }
  await state2.blobClient.abortCopyFromURL(copyId2, {
    abortSignal: options.abortSignal
  });
  state2.isCancelled = true;
  return makeBlobBeginCopyFromURLPollOperation(state2);
};
const update = async function update2(options = {}) {
  const state2 = this.state;
  const { blobClient, copySource: copySource2, startCopyFromURLOptions } = state2;
  if (!state2.isStarted) {
    state2.isStarted = true;
    const result = await blobClient.startCopyFromURL(copySource2, startCopyFromURLOptions);
    state2.copyId = result.copyId;
    if (result.copyStatus === "success") {
      state2.result = result;
      state2.isCompleted = true;
    }
  } else if (!state2.isCompleted) {
    try {
      const result = await state2.blobClient.getProperties({ abortSignal: options.abortSignal });
      const { copyStatus, copyProgress } = result;
      const prevCopyProgress = state2.copyProgress;
      if (copyProgress) {
        state2.copyProgress = copyProgress;
      }
      if (copyStatus === "pending" && copyProgress !== prevCopyProgress && typeof options.fireProgress === "function") {
        options.fireProgress(state2);
      } else if (copyStatus === "success") {
        state2.result = result;
        state2.isCompleted = true;
      } else if (copyStatus === "failed") {
        state2.error = new Error(`Blob copy failed with reason: "${result.copyStatusDescription || "unknown"}"`);
        state2.isCompleted = true;
      }
    } catch (err) {
      state2.error = err;
      state2.isCompleted = true;
    }
  }
  return makeBlobBeginCopyFromURLPollOperation(state2);
};
const toString2 = function toString3() {
  return JSON.stringify({ state: this.state }, (key, value) => {
    if (key === "blobClient") {
      return void 0;
    }
    return value;
  });
};
function makeBlobBeginCopyFromURLPollOperation(state2) {
  return {
    state: Object.assign({}, state2),
    cancel,
    toString: toString2,
    update
  };
}
function rangeToString(iRange) {
  if (iRange.offset < 0) {
    throw new RangeError(`Range.offset cannot be smaller than 0.`);
  }
  if (iRange.count && iRange.count <= 0) {
    throw new RangeError(`Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`);
  }
  return iRange.count ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}` : `bytes=${iRange.offset}-`;
}
var events = { exports: {} };
var hasRequiredEvents;
function requireEvents() {
  if (hasRequiredEvents) return events.exports;
  hasRequiredEvents = 1;
  var R = typeof Reflect === "object" ? Reflect : null;
  var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };
  var ReflectOwnKeys;
  if (R && typeof R.ownKeys === "function") {
    ReflectOwnKeys = R.ownKeys;
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys2(target) {
      return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys = function ReflectOwnKeys2(target) {
      return Object.getOwnPropertyNames(target);
    };
  }
  function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
  }
  var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
    return value !== value;
  };
  function EventEmitter() {
    EventEmitter.init.call(this);
  }
  events.exports = EventEmitter;
  events.exports.once = once;
  EventEmitter.EventEmitter = EventEmitter;
  EventEmitter.prototype._events = void 0;
  EventEmitter.prototype._eventsCount = 0;
  EventEmitter.prototype._maxListeners = void 0;
  var defaultMaxListeners = 10;
  function checkListener(listener) {
    if (typeof listener !== "function") {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
  }
  Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
      }
      defaultMaxListeners = arg;
    }
  });
  EventEmitter.init = function() {
    if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || void 0;
  };
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    }
    this._maxListeners = n;
    return this;
  };
  function _getMaxListeners(that) {
    if (that._maxListeners === void 0)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }
  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
  };
  EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
    var doError = type === "error";
    var events2 = this._events;
    if (events2 !== void 0)
      doError = doError && events2.error === void 0;
    else if (!doError)
      return false;
    if (doError) {
      var er;
      if (args.length > 0)
        er = args[0];
      if (er instanceof Error) {
        throw er;
      }
      var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
      err.context = er;
      throw err;
    }
    var handler = events2[type];
    if (handler === void 0)
      return false;
    if (typeof handler === "function") {
      ReflectApply(handler, this, args);
    } else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        ReflectApply(listeners[i], this, args);
    }
    return true;
  };
  function _addListener(target, type, listener, prepend) {
    var m;
    var events2;
    var existing;
    checkListener(listener);
    events2 = target._events;
    if (events2 === void 0) {
      events2 = target._events = /* @__PURE__ */ Object.create(null);
      target._eventsCount = 0;
    } else {
      if (events2.newListener !== void 0) {
        target.emit(
          "newListener",
          type,
          listener.listener ? listener.listener : listener
        );
        events2 = target._events;
      }
      existing = events2[type];
    }
    if (existing === void 0) {
      existing = events2[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === "function") {
        existing = events2[type] = prepend ? [listener, existing] : [existing, listener];
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
      m = _getMaxListeners(target);
      if (m > 0 && existing.length > m && !existing.warned) {
        existing.warned = true;
        var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        w.name = "MaxListenersExceededWarning";
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        ProcessEmitWarning(w);
      }
    }
    return target;
  }
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };
  EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
  };
  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      if (arguments.length === 0)
        return this.listener.call(this.target);
      return this.listener.apply(this.target, arguments);
    }
  }
  function _onceWrap(target, type, listener) {
    var state2 = { fired: false, wrapFn: void 0, target, type, listener };
    var wrapped = onceWrapper.bind(state2);
    wrapped.listener = listener;
    state2.wrapFn = wrapped;
    return wrapped;
  }
  EventEmitter.prototype.once = function once2(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };
  EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
  };
  EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events2, position, i, originalListener;
    checkListener(listener);
    events2 = this._events;
    if (events2 === void 0)
      return this;
    list = events2[type];
    if (list === void 0)
      return this;
    if (list === listener || list.listener === listener) {
      if (--this._eventsCount === 0)
        this._events = /* @__PURE__ */ Object.create(null);
      else {
        delete events2[type];
        if (events2.removeListener)
          this.emit("removeListener", type, list.listener || listener);
      }
    } else if (typeof list !== "function") {
      position = -1;
      for (i = list.length - 1; i >= 0; i--) {
        if (list[i] === listener || list[i].listener === listener) {
          originalListener = list[i].listener;
          position = i;
          break;
        }
      }
      if (position < 0)
        return this;
      if (position === 0)
        list.shift();
      else {
        spliceOne(list, position);
      }
      if (list.length === 1)
        events2[type] = list[0];
      if (events2.removeListener !== void 0)
        this.emit("removeListener", type, originalListener || listener);
    }
    return this;
  };
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events2, i;
    events2 = this._events;
    if (events2 === void 0)
      return this;
    if (events2.removeListener === void 0) {
      if (arguments.length === 0) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      } else if (events2[type] !== void 0) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else
          delete events2[type];
      }
      return this;
    }
    if (arguments.length === 0) {
      var keys2 = Object.keys(events2);
      var key;
      for (i = 0; i < keys2.length; ++i) {
        key = keys2[i];
        if (key === "removeListener") continue;
        this.removeAllListeners(key);
      }
      this.removeAllListeners("removeListener");
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
      return this;
    }
    listeners = events2[type];
    if (typeof listeners === "function") {
      this.removeListener(type, listeners);
    } else if (listeners !== void 0) {
      for (i = listeners.length - 1; i >= 0; i--) {
        this.removeListener(type, listeners[i]);
      }
    }
    return this;
  };
  function _listeners(target, type, unwrap) {
    var events2 = target._events;
    if (events2 === void 0)
      return [];
    var evlistener = events2[type];
    if (evlistener === void 0)
      return [];
    if (typeof evlistener === "function")
      return unwrap ? [evlistener.listener || evlistener] : [evlistener];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  }
  EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
  };
  EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
  };
  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") {
      return emitter.listenerCount(type);
    } else {
      return listenerCount.call(emitter, type);
    }
  };
  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type) {
    var events2 = this._events;
    if (events2 !== void 0) {
      var evlistener = events2[type];
      if (typeof evlistener === "function") {
        return 1;
      } else if (evlistener !== void 0) {
        return evlistener.length;
      }
    }
    return 0;
  }
  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  };
  function arrayClone(arr, n) {
    var copy = new Array(n);
    for (var i = 0; i < n; ++i)
      copy[i] = arr[i];
    return copy;
  }
  function spliceOne(list, index) {
    for (; index + 1 < list.length; index++)
      list[index] = list[index + 1];
    list.pop();
  }
  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }
  function once(emitter, name) {
    return new Promise(function(resolve, reject) {
      function errorListener(err) {
        emitter.removeListener(name, resolver2);
        reject(err);
      }
      function resolver2() {
        if (typeof emitter.removeListener === "function") {
          emitter.removeListener("error", errorListener);
        }
        resolve([].slice.call(arguments));
      }
      eventTargetAgnosticAddListener(emitter, name, resolver2, { once: true });
      if (name !== "error") {
        addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
      }
    });
  }
  function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") {
      eventTargetAgnosticAddListener(emitter, "error", handler, flags);
    }
  }
  function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
      if (flags.once) {
        emitter.once(name, listener);
      } else {
        emitter.on(name, listener);
      }
    } else if (typeof emitter.addEventListener === "function") {
      emitter.addEventListener(name, function wrapListener(arg) {
        if (flags.once) {
          emitter.removeEventListener(name, wrapListener);
        }
        listener(arg);
      });
    } else {
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
  }
  return events.exports;
}
var eventsExports = requireEvents();
var BatchStates;
(function(BatchStates2) {
  BatchStates2[BatchStates2["Good"] = 0] = "Good";
  BatchStates2[BatchStates2["Error"] = 1] = "Error";
})(BatchStates || (BatchStates = {}));
class Batch {
  /**
   * Creates an instance of Batch.
   * @param concurrency -
   */
  constructor(concurrency = 5) {
    this.actives = 0;
    this.completed = 0;
    this.offset = 0;
    this.operations = [];
    this.state = BatchStates.Good;
    if (concurrency < 1) {
      throw new RangeError("concurrency must be larger than 0");
    }
    this.concurrency = concurrency;
    this.emitter = new eventsExports.EventEmitter();
  }
  /**
   * Add a operation into queue.
   *
   * @param operation -
   */
  addOperation(operation) {
    this.operations.push(async () => {
      try {
        this.actives++;
        await operation();
        this.actives--;
        this.completed++;
        this.parallelExecute();
      } catch (error) {
        this.emitter.emit("error", error);
      }
    });
  }
  /**
   * Start execute operations in the queue.
   *
   */
  async do() {
    if (this.operations.length === 0) {
      return Promise.resolve();
    }
    this.parallelExecute();
    return new Promise((resolve, reject) => {
      this.emitter.on("finish", resolve);
      this.emitter.on("error", (error) => {
        this.state = BatchStates.Error;
        reject(error);
      });
    });
  }
  /**
   * Get next operation to be executed. Return null when reaching ends.
   *
   */
  nextOperation() {
    if (this.offset < this.operations.length) {
      return this.operations[this.offset++];
    }
    return null;
  }
  /**
   * Start execute operations. One one the most important difference between
   * this method with do() is that do() wraps as an sync method.
   *
   */
  parallelExecute() {
    if (this.state === BatchStates.Error) {
      return;
    }
    if (this.completed >= this.operations.length) {
      this.emitter.emit("finish");
      return;
    }
    while (this.actives < this.concurrency) {
      const operation = this.nextOperation();
      if (operation) {
        operation();
      } else {
        return;
      }
    }
  }
}
class BufferScheduler {
}
async function blobToString(blob) {
  const fileReader = new FileReader();
  return new Promise((resolve, reject) => {
    fileReader.onloadend = (ev) => {
      resolve(ev.target.result);
    };
    fileReader.onerror = reject;
    fileReader.readAsText(blob);
  });
}
function streamToBuffer() {
}
function readStreamToLocalFile() {
}
const fsStat = function stat() {
};
const fsCreateReadStream = function createReadStream() {
};
class BlobClient extends StorageClient2 {
  /**
   * The name of the blob.
   */
  get name() {
    return this._name;
  }
  /**
   * The name of the storage container the blob is associated with.
   */
  get containerName() {
    return this._containerName;
  }
  constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    options = options || {};
    let pipeline;
    let url2;
    if (isPipelineLike(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      url2 = urlOrConnectionString;
      if (blobNameOrOptions && typeof blobNameOrOptions !== "string") {
        options = blobNameOrOptions;
      }
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      const containerName = credentialOrPipelineOrContainerName;
      const blobName = blobNameOrOptions;
      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (isNode) {
          const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
          }
          pipeline = newPipeline(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = newPipeline(new AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    super(url2, pipeline);
    ({ blobName: this._name, containerName: this._containerName } = this.getBlobAndContainerNamesFromUrl());
    this.blobContext = this.storageClientContext.blob;
    this._snapshot = getURLParameter(this.url, URLConstants.Parameters.SNAPSHOT);
    this._versionId = getURLParameter(this.url, URLConstants.Parameters.VERSIONID);
  }
  /**
   * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp
   */
  withSnapshot(snapshot2) {
    return new BlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
  }
  /**
   * Creates a new BlobClient object pointing to a version of this blob.
   * Provide "" will remove the versionId and return a Client to the base blob.
   *
   * @param versionId - The versionId.
   * @returns A new BlobClient object pointing to the version of this blob.
   */
  withVersion(versionId2) {
    return new BlobClient(setURLParameter(this.url, URLConstants.Parameters.VERSIONID, versionId2.length === 0 ? void 0 : versionId2), this.pipeline);
  }
  /**
   * Creates a AppendBlobClient object.
   *
   */
  getAppendBlobClient() {
    return new AppendBlobClient(this.url, this.pipeline);
  }
  /**
   * Creates a BlockBlobClient object.
   *
   */
  getBlockBlobClient() {
    return new BlockBlobClient(this.url, this.pipeline);
  }
  /**
   * Creates a PageBlobClient object.
   *
   */
  getPageBlobClient() {
    return new PageBlobClient(this.url, this.pipeline);
  }
  /**
   * Reads or downloads a blob from the system, including its metadata and properties.
   * You can also call Get Blob to read a snapshot.
   *
   * * In Node.js, data returns in a Readable stream readableStreamBody
   * * In browsers, data returns in a promise blobBody
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/get-blob
   *
   * @param offset - From which position of the blob to download, greater than or equal to 0
   * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
   * @param options - Optional options to Blob Download operation.
   *
   *
   * Example usage (Node.js):
   *
   * ```js
   * // Download and convert a blob to a string
   * const downloadBlockBlobResponse = await blobClient.download();
   * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);
   * console.log("Downloaded blob content:", downloaded.toString());
   *
   * async function streamToBuffer(readableStream) {
   *   return new Promise((resolve, reject) => {
   *     const chunks = [];
   *     readableStream.on("data", (data) => {
   *       chunks.push(typeof data === "string" ? Buffer.from(data) : data);
   *     });
   *     readableStream.on("end", () => {
   *       resolve(Buffer.concat(chunks));
   *     });
   *     readableStream.on("error", reject);
   *   });
   * }
   * ```
   *
   * Example usage (browser):
   *
   * ```js
   * // Download and convert a blob to a string
   * const downloadBlockBlobResponse = await blobClient.download();
   * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);
   * console.log(
   *   "Downloaded blob content",
   *   downloaded
   * );
   *
   * async function blobToString(blob: Blob): Promise<string> {
   *   const fileReader = new FileReader();
   *   return new Promise<string>((resolve, reject) => {
   *     fileReader.onloadend = (ev: any) => {
   *       resolve(ev.target!.result);
   *     };
   *     fileReader.onerror = reject;
   *     fileReader.readAsText(blob);
   *   });
   * }
   * ```
   */
  async download(offset = 0, count, options = {}) {
    options.conditions = options.conditions || {};
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("BlobClient-download", options, async (updatedOptions) => {
      var _a2;
      const res = assertResponse(await this.blobContext.download({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        requestOptions: {
          onDownloadProgress: isNode ? void 0 : options.onProgress
          // for Node.js, progress is reported by RetriableReadableStream
        },
        range: offset === 0 && !count ? void 0 : rangeToString({ offset, count }),
        rangeGetContentMD5: options.rangeGetContentMD5,
        rangeGetContentCRC64: options.rangeGetContentCrc64,
        snapshot: options.snapshot,
        cpkInfo: options.customerProvidedKey,
        tracingOptions: updatedOptions.tracingOptions
      }));
      const wrappedRes = Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules) });
      if (!isNode) {
        return wrappedRes;
      }
      if (options.maxRetryRequests === void 0 || options.maxRetryRequests < 0) {
        options.maxRetryRequests = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;
      }
      if (res.contentLength === void 0) {
        throw new RangeError(`File download response doesn't contain valid content length header`);
      }
      if (!res.etag) {
        throw new RangeError(`File download response doesn't contain valid etag header`);
      }
      return new BlobDownloadResponse(wrappedRes, async (start) => {
        var _a3;
        const updatedDownloadOptions = {
          leaseAccessConditions: options.conditions,
          modifiedAccessConditions: {
            ifMatch: options.conditions.ifMatch || res.etag,
            ifModifiedSince: options.conditions.ifModifiedSince,
            ifNoneMatch: options.conditions.ifNoneMatch,
            ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,
            ifTags: (_a3 = options.conditions) === null || _a3 === void 0 ? void 0 : _a3.tagConditions
          },
          range: rangeToString({
            count: offset + res.contentLength - start,
            offset: start
          }),
          rangeGetContentMD5: options.rangeGetContentMD5,
          rangeGetContentCRC64: options.rangeGetContentCrc64,
          snapshot: options.snapshot,
          cpkInfo: options.customerProvidedKey
        };
        return (await this.blobContext.download(Object.assign({ abortSignal: options.abortSignal }, updatedDownloadOptions))).readableStreamBody;
      }, offset, res.contentLength, {
        maxRetryRequests: options.maxRetryRequests,
        onProgress: options.onProgress
      });
    });
  }
  /**
   * Returns true if the Azure blob resource represented by this client exists; false otherwise.
   *
   * NOTE: use this function with care since an existing blob might be deleted by other clients or
   * applications. Vice versa new blobs might be added by other clients or applications after this
   * function completes.
   *
   * @param options - options to Exists operation.
   */
  async exists(options = {}) {
    return tracingClient.withSpan("BlobClient-exists", options, async (updatedOptions) => {
      try {
        ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
        await this.getProperties({
          abortSignal: options.abortSignal,
          customerProvidedKey: options.customerProvidedKey,
          conditions: options.conditions,
          tracingOptions: updatedOptions.tracingOptions
        });
        return true;
      } catch (e2) {
        if (e2.statusCode === 404) {
          return false;
        } else if (e2.statusCode === 409 && (e2.details.errorCode === BlobUsesCustomerSpecifiedEncryptionMsg || e2.details.errorCode === BlobDoesNotUseCustomerSpecifiedEncryption)) {
          return true;
        }
        throw e2;
      }
    });
  }
  /**
   * Returns all user-defined metadata, standard HTTP properties, and system properties
   * for the blob. It does not return the content of the blob.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/get-blob-properties
   *
   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
   * they originally contained uppercase characters. This differs from the metadata keys returned by
   * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which
   * will retain their original casing.
   *
   * @param options - Optional options to Get Properties operation.
   */
  async getProperties(options = {}) {
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("BlobClient-getProperties", options, async (updatedOptions) => {
      var _a2;
      const res = assertResponse(await this.blobContext.getProperties({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        cpkInfo: options.customerProvidedKey,
        tracingOptions: updatedOptions.tracingOptions
      }));
      return Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules) });
    });
  }
  /**
   * Marks the specified blob or snapshot for deletion. The blob is later deleted
   * during garbage collection. Note that in order to delete a blob, you must delete
   * all of its snapshots. You can delete both at the same time with the Delete
   * Blob operation.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/delete-blob
   *
   * @param options - Optional options to Blob Delete operation.
   */
  async delete(options = {}) {
    options.conditions = options.conditions || {};
    return tracingClient.withSpan("BlobClient-delete", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.blobContext.delete({
        abortSignal: options.abortSignal,
        deleteSnapshots: options.deleteSnapshots,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted
   * during garbage collection. Note that in order to delete a blob, you must delete
   * all of its snapshots. You can delete both at the same time with the Delete
   * Blob operation.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/delete-blob
   *
   * @param options - Optional options to Blob Delete operation.
   */
  async deleteIfExists(options = {}) {
    return tracingClient.withSpan("BlobClient-deleteIfExists", options, async (updatedOptions) => {
      var _a2, _b2;
      try {
        const res = assertResponse(await this.delete(updatedOptions));
        return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
      } catch (e2) {
        if (((_a2 = e2.details) === null || _a2 === void 0 ? void 0 : _a2.errorCode) === "BlobNotFound") {
          return Object.assign(Object.assign({ succeeded: false }, (_b2 = e2.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e2.response });
        }
        throw e2;
      }
    });
  }
  /**
   * Restores the contents and metadata of soft deleted blob and any associated
   * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29
   * or later.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/undelete-blob
   *
   * @param options - Optional options to Blob Undelete operation.
   */
  async undelete(options = {}) {
    return tracingClient.withSpan("BlobClient-undelete", options, async (updatedOptions) => {
      return assertResponse(await this.blobContext.undelete({
        abortSignal: options.abortSignal,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Sets system properties on the blob.
   *
   * If no value provided, or no value provided for the specified blob HTTP headers,
   * these blob HTTP headers without a value will be cleared.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
   *
   * @param blobHTTPHeaders - If no value provided, or no value provided for
   *                                                   the specified blob HTTP headers, these blob HTTP
   *                                                   headers without a value will be cleared.
   *                                                   A common header to set is `blobContentType`
   *                                                   enabling the browser to provide functionality
   *                                                   based on file type.
   * @param options - Optional options to Blob Set HTTP Headers operation.
   */
  async setHTTPHeaders(blobHTTPHeaders, options = {}) {
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("BlobClient-setHTTPHeaders", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.blobContext.setHttpHeaders({
        abortSignal: options.abortSignal,
        blobHttpHeaders: blobHTTPHeaders,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        // cpkInfo: options.customerProvidedKey, // CPK is not included in Swagger, should change this back when this issue is fixed in Swagger.
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Sets user-defined metadata for the specified blob as one or more name-value pairs.
   *
   * If no option provided, or no metadata defined in the parameter, the blob
   * metadata will be removed.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata
   *
   * @param metadata - Replace existing metadata with this value.
   *                               If no value provided the existing metadata will be removed.
   * @param options - Optional options to Set Metadata operation.
   */
  async setMetadata(metadata2, options = {}) {
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("BlobClient-setMetadata", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.blobContext.setMetadata({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        metadata: metadata2,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Sets tags on the underlying blob.
   * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.
   * Valid tag key and value characters include lower and upper case letters, digits (0-9),
   * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').
   *
   * @param tags -
   * @param options -
   */
  async setTags(tags2, options = {}) {
    return tracingClient.withSpan("BlobClient-setTags", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.blobContext.setTags({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        tracingOptions: updatedOptions.tracingOptions,
        tags: toBlobTags(tags2)
      }));
    });
  }
  /**
   * Gets the tags associated with the underlying blob.
   *
   * @param options -
   */
  async getTags(options = {}) {
    return tracingClient.withSpan("BlobClient-getTags", options, async (updatedOptions) => {
      var _a2;
      const response = assertResponse(await this.blobContext.getTags({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        tracingOptions: updatedOptions.tracingOptions
      }));
      const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, tags: toTags({ blobTagSet: response.blobTagSet }) || {} });
      return wrappedResponse;
    });
  }
  /**
   * Get a {@link BlobLeaseClient} that manages leases on the blob.
   *
   * @param proposeLeaseId - Initial proposed lease Id.
   * @returns A new BlobLeaseClient object for managing leases on the blob.
   */
  getBlobLeaseClient(proposeLeaseId) {
    return new BlobLeaseClient(this, proposeLeaseId);
  }
  /**
   * Creates a read-only snapshot of a blob.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/snapshot-blob
   *
   * @param options - Optional options to the Blob Create Snapshot operation.
   */
  async createSnapshot(options = {}) {
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("BlobClient-createSnapshot", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.blobContext.createSnapshot({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        metadata: options.metadata,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Asynchronously copies a blob to a destination within the storage account.
   * This method returns a long running operation poller that allows you to wait
   * indefinitely until the copy is completed.
   * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.
   * Note that the onProgress callback will not be invoked if the operation completes in the first
   * request, and attempting to cancel a completed copy will result in an error being thrown.
   *
   * In version 2012-02-12 and later, the source for a Copy Blob operation can be
   * a committed blob in any Azure storage account.
   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
   * an Azure file in any Azure storage account.
   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
   * operation to copy from another storage account.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/copy-blob
   *
   * Example using automatic polling:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url');
   * const result = await copyPoller.pollUntilDone();
   * ```
   *
   * Example using manual polling:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url');
   * while (!poller.isDone()) {
   *    await poller.poll();
   * }
   * const result = copyPoller.getResult();
   * ```
   *
   * Example using progress updates:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url', {
   *   onProgress(state) {
   *     console.log(`Progress: ${state.copyProgress}`);
   *   }
   * });
   * const result = await copyPoller.pollUntilDone();
   * ```
   *
   * Example using a changing polling interval (default 15 seconds):
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url', {
   *   intervalInMs: 1000 // poll blob every 1 second for copy progress
   * });
   * const result = await copyPoller.pollUntilDone();
   * ```
   *
   * Example using copy cancellation:
   *
   * ```js
   * const copyPoller = await blobClient.beginCopyFromURL('url');
   * // cancel operation after starting it.
   * try {
   *   await copyPoller.cancelOperation();
   *   // calls to get the result now throw PollerCancelledError
   *   await copyPoller.getResult();
   * } catch (err) {
   *   if (err.name === 'PollerCancelledError') {
   *     console.log('The copy was cancelled.');
   *   }
   * }
   * ```
   *
   * @param copySource - url to the source Azure Blob/File.
   * @param options - Optional options to the Blob Start Copy From URL operation.
   */
  async beginCopyFromURL(copySource2, options = {}) {
    const client2 = {
      abortCopyFromURL: (...args) => this.abortCopyFromURL(...args),
      getProperties: (...args) => this.getProperties(...args),
      startCopyFromURL: (...args) => this.startCopyFromURL(...args)
    };
    const poller = new BlobBeginCopyFromUrlPoller({
      blobClient: client2,
      copySource: copySource2,
      intervalInMs: options.intervalInMs,
      onProgress: options.onProgress,
      resumeFrom: options.resumeFrom,
      startCopyFromURLOptions: options
    });
    await poller.poll();
    return poller;
  }
  /**
   * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero
   * length and full metadata. Version 2012-02-12 and newer.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob
   *
   * @param copyId - Id of the Copy From URL operation.
   * @param options - Optional options to the Blob Abort Copy From URL operation.
   */
  async abortCopyFromURL(copyId2, options = {}) {
    return tracingClient.withSpan("BlobClient-abortCopyFromURL", options, async (updatedOptions) => {
      return assertResponse(await this.blobContext.abortCopyFromURL(copyId2, {
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not
   * return a response until the copy is complete.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url
   *
   * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication
   * @param options -
   */
  async syncCopyFromURL(copySource2, options = {}) {
    options.conditions = options.conditions || {};
    options.sourceConditions = options.sourceConditions || {};
    return tracingClient.withSpan("BlobClient-syncCopyFromURL", options, async (updatedOptions) => {
      var _a2, _b2, _c2, _d2, _e, _f, _g;
      return assertResponse(await this.blobContext.copyFromURL(copySource2, {
        abortSignal: options.abortSignal,
        metadata: options.metadata,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        sourceModifiedAccessConditions: {
          sourceIfMatch: (_b2 = options.sourceConditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch,
          sourceIfModifiedSince: (_c2 = options.sourceConditions) === null || _c2 === void 0 ? void 0 : _c2.ifModifiedSince,
          sourceIfNoneMatch: (_d2 = options.sourceConditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch,
          sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince
        },
        sourceContentMD5: options.sourceContentMD5,
        copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
        tier: toAccessTier(options.tier),
        blobTagsString: toBlobTagsString(options.tags),
        immutabilityPolicyExpiry: (_f = options.immutabilityPolicy) === null || _f === void 0 ? void 0 : _f.expiriesOn,
        immutabilityPolicyMode: (_g = options.immutabilityPolicy) === null || _g === void 0 ? void 0 : _g.policyMode,
        legalHold: options.legalHold,
        encryptionScope: options.encryptionScope,
        copySourceTags: options.copySourceTags,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Sets the tier on a blob. The operation is allowed on a page blob in a premium
   * storage account and on a block blob in a blob storage account (locally redundant
   * storage only). A premium page blob's tier determines the allowed size, IOPS,
   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive
   * storage type. This operation does not update the blob's ETag.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-tier
   *
   * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.
   * @param options - Optional options to the Blob Set Tier operation.
   */
  async setAccessTier(tier2, options = {}) {
    return tracingClient.withSpan("BlobClient-setAccessTier", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.blobContext.setTier(toAccessTier(tier2), {
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        rehydratePriority: options.rehydratePriority,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  async downloadToBuffer(param1, param2, param3, param4 = {}) {
    var _a2;
    let buffer;
    let offset = 0;
    let count = 0;
    let options = param4;
    if (param1 instanceof Buffer) {
      buffer = param1;
      offset = param2 || 0;
      count = typeof param3 === "number" ? param3 : 0;
    } else {
      offset = typeof param1 === "number" ? param1 : 0;
      count = typeof param2 === "number" ? param2 : 0;
      options = param3 || {};
    }
    let blockSize = (_a2 = options.blockSize) !== null && _a2 !== void 0 ? _a2 : 0;
    if (blockSize < 0) {
      throw new RangeError("blockSize option must be >= 0");
    }
    if (blockSize === 0) {
      blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
    }
    if (offset < 0) {
      throw new RangeError("offset option must be >= 0");
    }
    if (count && count <= 0) {
      throw new RangeError("count option must be greater than 0");
    }
    if (!options.conditions) {
      options.conditions = {};
    }
    return tracingClient.withSpan("BlobClient-downloadToBuffer", options, async (updatedOptions) => {
      if (!count) {
        const response = await this.getProperties(Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));
        count = response.contentLength - offset;
        if (count < 0) {
          throw new RangeError(`offset ${offset} shouldn't be larger than blob size ${response.contentLength}`);
        }
      }
      if (!buffer) {
        try {
          buffer = Buffer.alloc(count);
        } catch (error) {
          throw new Error(`Unable to allocate the buffer of size: ${count}(in bytes). Please try passing your own buffer to the "downloadToBuffer" method or try using other methods like "download" or "downloadToFile".	 ${error.message}`);
        }
      }
      if (buffer.length < count) {
        throw new RangeError(`The buffer's size should be equal to or larger than the request count of bytes: ${count}`);
      }
      let transferProgress = 0;
      const batch = new Batch(options.concurrency);
      for (let off = offset; off < offset + count; off = off + blockSize) {
        batch.addOperation(async () => {
          let chunkEnd = offset + count;
          if (off + blockSize < chunkEnd) {
            chunkEnd = off + blockSize;
          }
          const response = await this.download(off, chunkEnd - off, {
            abortSignal: options.abortSignal,
            conditions: options.conditions,
            maxRetryRequests: options.maxRetryRequestsPerBlock,
            customerProvidedKey: options.customerProvidedKey,
            tracingOptions: updatedOptions.tracingOptions
          });
          response.readableStreamBody;
          await streamToBuffer();
          transferProgress += chunkEnd - off;
          if (options.onProgress) {
            options.onProgress({ loadedBytes: transferProgress });
          }
        });
      }
      await batch.do();
      return buffer;
    });
  }
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Downloads an Azure Blob to a local file.
   * Fails if the the given file path already exits.
   * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.
   *
   * @param filePath -
   * @param offset - From which position of the block blob to download.
   * @param count - How much data to be downloaded. Will download to the end when passing undefined.
   * @param options - Options to Blob download options.
   * @returns The response data for blob download operation,
   *                                                 but with readableStreamBody set to undefined since its
   *                                                 content is already read and written into a local file
   *                                                 at the specified path.
   */
  async downloadToFile(filePath, offset = 0, count, options = {}) {
    return tracingClient.withSpan("BlobClient-downloadToFile", options, async (updatedOptions) => {
      const response = await this.download(offset, count, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));
      if (response.readableStreamBody) {
        await readStreamToLocalFile(response.readableStreamBody);
      }
      response.blobDownloadStream = void 0;
      return response;
    });
  }
  getBlobAndContainerNamesFromUrl() {
    let containerName;
    let blobName;
    try {
      const parsedUrl = new URL(this.url);
      if (parsedUrl.host.split(".")[1] === "blob") {
        const pathComponents = parsedUrl.pathname.match("/([^/]*)(/(.*))?");
        containerName = pathComponents[1];
        blobName = pathComponents[3];
      } else if (isIpEndpointStyle(parsedUrl)) {
        const pathComponents = parsedUrl.pathname.match("/([^/]*)/([^/]*)(/(.*))?");
        containerName = pathComponents[2];
        blobName = pathComponents[4];
      } else {
        const pathComponents = parsedUrl.pathname.match("/([^/]*)(/(.*))?");
        containerName = pathComponents[1];
        blobName = pathComponents[3];
      }
      containerName = decodeURIComponent(containerName);
      blobName = decodeURIComponent(blobName);
      blobName = blobName.replace(/\\/g, "/");
      if (!containerName) {
        throw new Error("Provided containerName is invalid.");
      }
      return { blobName, containerName };
    } catch (error) {
      throw new Error("Unable to extract blobName and containerName with provided information.");
    }
  }
  /**
   * Asynchronously copies a blob to a destination within the storage account.
   * In version 2012-02-12 and later, the source for a Copy Blob operation can be
   * a committed blob in any Azure storage account.
   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
   * an Azure file in any Azure storage account.
   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
   * operation to copy from another storage account.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/copy-blob
   *
   * @param copySource - url to the source Azure Blob/File.
   * @param options - Optional options to the Blob Start Copy From URL operation.
   */
  async startCopyFromURL(copySource2, options = {}) {
    return tracingClient.withSpan("BlobClient-startCopyFromURL", options, async (updatedOptions) => {
      var _a2, _b2, _c2;
      options.conditions = options.conditions || {};
      options.sourceConditions = options.sourceConditions || {};
      return assertResponse(await this.blobContext.startCopyFromURL(copySource2, {
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        metadata: options.metadata,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        sourceModifiedAccessConditions: {
          sourceIfMatch: options.sourceConditions.ifMatch,
          sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
          sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
          sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,
          sourceIfTags: options.sourceConditions.tagConditions
        },
        immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn,
        immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode,
        legalHold: options.legalHold,
        rehydratePriority: options.rehydratePriority,
        tier: toAccessTier(options.tier),
        blobTagsString: toBlobTagsString(options.tags),
        sealBlob: options.sealBlob,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Only available for BlobClient constructed with a shared key credential.
   *
   * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties
   * and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  generateSasUrl(options) {
    return new Promise((resolve) => {
      if (!(this.credential instanceof StorageSharedKeyCredential)) {
        throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
      }
      const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).toString();
      resolve(appendToURLQuery(this.url, sas));
    });
  }
  /**
   * Only available for BlobClient constructed with a shared key credential.
   *
   * Generates string to sign for a Blob Service Shared Access Signature (SAS) URI based on
   * the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
  generateSasStringToSign(options) {
    if (!(this.credential instanceof StorageSharedKeyCredential)) {
      throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
    }
    return generateBlobSASQueryParametersInternal(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).stringToSign;
  }
  /**
   *
   * Generates a Blob Service Shared Access Signature (SAS) URI based on
   * the client properties and parameters passed in. The SAS is signed by the input user delegation key.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  generateUserDelegationSasUrl(options, userDelegationKey) {
    return new Promise((resolve) => {
      const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), userDelegationKey, this.accountName).toString();
      resolve(appendToURLQuery(this.url, sas));
    });
  }
  /**
   * Only available for BlobClient constructed with a shared key credential.
   *
   * Generates string to sign for a Blob Service Shared Access Signature (SAS) URI based on
   * the client properties and parameters passed in. The SAS is signed by the input user delegation key.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  generateUserDelegationSasStringToSign(options, userDelegationKey) {
    return generateBlobSASQueryParametersInternal(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), userDelegationKey, this.accountName).stringToSign;
  }
  /**
   * Delete the immutablility policy on the blob.
   *
   * @param options - Optional options to delete immutability policy on the blob.
   */
  async deleteImmutabilityPolicy(options = {}) {
    return tracingClient.withSpan("BlobClient-deleteImmutabilityPolicy", options, async (updatedOptions) => {
      return assertResponse(await this.blobContext.deleteImmutabilityPolicy({
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Set immutability policy on the blob.
   *
   * @param options - Optional options to set immutability policy on the blob.
   */
  async setImmutabilityPolicy(immutabilityPolicy, options = {}) {
    return tracingClient.withSpan("BlobClient-setImmutabilityPolicy", options, async (updatedOptions) => {
      return assertResponse(await this.blobContext.setImmutabilityPolicy({
        immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,
        immutabilityPolicyMode: immutabilityPolicy.policyMode,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Set legal hold on the blob.
   *
   * @param options - Optional options to set legal hold on the blob.
   */
  async setLegalHold(legalHoldEnabled, options = {}) {
    return tracingClient.withSpan("BlobClient-setLegalHold", options, async (updatedOptions) => {
      return assertResponse(await this.blobContext.setLegalHold(legalHoldEnabled, {
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * The Get Account Information operation returns the sku name and account kind
   * for the specified account.
   * The Get Account Information operation is available on service versions beginning
   * with version 2018-03-28.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/get-account-information
   *
   * @param options - Options to the Service Get Account Info operation.
   * @returns Response data for the Service Get Account Info operation.
   */
  async getAccountInfo(options = {}) {
    return tracingClient.withSpan("BlobClient-getAccountInfo", options, async (updatedOptions) => {
      return assertResponse(await this.blobContext.getAccountInfo({
        abortSignal: options.abortSignal,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
}
class AppendBlobClient extends BlobClient {
  constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    let pipeline;
    let url2;
    options = options || {};
    if (isPipelineLike(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      url2 = urlOrConnectionString;
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      const containerName = credentialOrPipelineOrContainerName;
      const blobName = blobNameOrOptions;
      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (isNode) {
          const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
          }
          pipeline = newPipeline(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = newPipeline(new AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    super(url2, pipeline);
    this.appendBlobContext = this.storageClientContext.appendBlob;
  }
  /**
   * Creates a new AppendBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.
   */
  withSnapshot(snapshot2) {
    return new AppendBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
  }
  /**
   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
   * @see https://learn.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param options - Options to the Append Block Create operation.
   *
   *
   * Example usage:
   *
   * ```js
   * const appendBlobClient = containerClient.getAppendBlobClient("<blob name>");
   * await appendBlobClient.create();
   * ```
   */
  async create(options = {}) {
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("AppendBlobClient-create", options, async (updatedOptions) => {
      var _a2, _b2, _c2;
      return assertResponse(await this.appendBlobContext.create(0, {
        abortSignal: options.abortSignal,
        blobHttpHeaders: options.blobHTTPHeaders,
        leaseAccessConditions: options.conditions,
        metadata: options.metadata,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn,
        immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode,
        legalHold: options.legalHold,
        blobTagsString: toBlobTagsString(options.tags),
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
   * If the blob with the same name already exists, the content of the existing blob will remain unchanged.
   * @see https://learn.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param options -
   */
  async createIfNotExists(options = {}) {
    const conditions = { ifNoneMatch: ETagAny };
    return tracingClient.withSpan("AppendBlobClient-createIfNotExists", options, async (updatedOptions) => {
      var _a2, _b2;
      try {
        const res = assertResponse(await this.create(Object.assign(Object.assign({}, updatedOptions), { conditions })));
        return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
      } catch (e2) {
        if (((_a2 = e2.details) === null || _a2 === void 0 ? void 0 : _a2.errorCode) === "BlobAlreadyExists") {
          return Object.assign(Object.assign({ succeeded: false }, (_b2 = e2.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e2.response });
        }
        throw e2;
      }
    });
  }
  /**
   * Seals the append blob, making it read only.
   *
   * @param options -
   */
  async seal(options = {}) {
    options.conditions = options.conditions || {};
    return tracingClient.withSpan("AppendBlobClient-seal", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.appendBlobContext.seal({
        abortSignal: options.abortSignal,
        appendPositionAccessConditions: options.conditions,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Commits a new block of data to the end of the existing append blob.
   * @see https://learn.microsoft.com/rest/api/storageservices/append-block
   *
   * @param body - Data to be appended.
   * @param contentLength - Length of the body in bytes.
   * @param options - Options to the Append Block operation.
   *
   *
   * Example usage:
   *
   * ```js
   * const content = "Hello World!";
   *
   * // Create a new append blob and append data to the blob.
   * const newAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
   * await newAppendBlobClient.create();
   * await newAppendBlobClient.appendBlock(content, content.length);
   *
   * // Append data to an existing append blob.
   * const existingAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
   * await existingAppendBlobClient.appendBlock(content, content.length);
   * ```
   */
  async appendBlock(body2, contentLength2, options = {}) {
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("AppendBlobClient-appendBlock", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.appendBlobContext.appendBlock(contentLength2, body2, {
        abortSignal: options.abortSignal,
        appendPositionAccessConditions: options.conditions,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        requestOptions: {
          onUploadProgress: options.onProgress
        },
        transactionalContentMD5: options.transactionalContentMD5,
        transactionalContentCrc64: options.transactionalContentCrc64,
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * The Append Block operation commits a new block of data to the end of an existing append blob
   * where the contents are read from a source url.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/append-block-from-url
   *
   * @param sourceURL -
   *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can
   *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
   *                 must either be public or must be authenticated via a shared access signature. If the source blob is
   *                 public, no authentication is required to perform the operation.
   * @param sourceOffset - Offset in source to be appended
   * @param count - Number of bytes to be appended as a block
   * @param options -
   */
  async appendBlockFromURL(sourceURL, sourceOffset, count, options = {}) {
    options.conditions = options.conditions || {};
    options.sourceConditions = options.sourceConditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("AppendBlobClient-appendBlockFromURL", options, async (updatedOptions) => {
      var _a2, _b2, _c2, _d2, _e;
      return assertResponse(await this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {
        abortSignal: options.abortSignal,
        sourceRange: rangeToString({ offset: sourceOffset, count }),
        sourceContentMD5: options.sourceContentMD5,
        sourceContentCrc64: options.sourceContentCrc64,
        leaseAccessConditions: options.conditions,
        appendPositionAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        sourceModifiedAccessConditions: {
          sourceIfMatch: (_b2 = options.sourceConditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch,
          sourceIfModifiedSince: (_c2 = options.sourceConditions) === null || _c2 === void 0 ? void 0 : _c2.ifModifiedSince,
          sourceIfNoneMatch: (_d2 = options.sourceConditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch,
          sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince
        },
        copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
}
class BlockBlobClient extends BlobClient {
  constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    let pipeline;
    let url2;
    options = options || {};
    if (isPipelineLike(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      url2 = urlOrConnectionString;
      if (blobNameOrOptions && typeof blobNameOrOptions !== "string") {
        options = blobNameOrOptions;
      }
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      const containerName = credentialOrPipelineOrContainerName;
      const blobName = blobNameOrOptions;
      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (isNode) {
          const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
          }
          pipeline = newPipeline(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = newPipeline(new AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    super(url2, pipeline);
    this.blockBlobContext = this.storageClientContext.blockBlob;
    this._blobContext = this.storageClientContext.blob;
  }
  /**
   * Creates a new BlockBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a URL to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.
   */
  withSnapshot(snapshot2) {
    return new BlockBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
  }
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Quick query for a JSON or CSV formatted blob.
   *
   * Example usage (Node.js):
   *
   * ```js
   * // Query and convert a blob to a string
   * const queryBlockBlobResponse = await blockBlobClient.query("select * from BlobStorage");
   * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();
   * console.log("Query blob content:", downloaded);
   *
   * async function streamToBuffer(readableStream) {
   *   return new Promise((resolve, reject) => {
   *     const chunks = [];
   *     readableStream.on("data", (data) => {
   *       chunks.push(typeof data === "string" ? Buffer.from(data) : data);
   *     });
   *     readableStream.on("end", () => {
   *       resolve(Buffer.concat(chunks));
   *     });
   *     readableStream.on("error", reject);
   *   });
   * }
   * ```
   *
   * @param query -
   * @param options -
   */
  async query(query, options = {}) {
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    if (!isNode) {
      throw new Error("This operation currently is only supported in Node.js.");
    }
    return tracingClient.withSpan("BlockBlobClient-query", options, async (updatedOptions) => {
      var _a2;
      const response = assertResponse(await this._blobContext.query({
        abortSignal: options.abortSignal,
        queryRequest: {
          queryType: "SQL",
          expression: query,
          inputSerialization: toQuerySerialization(options.inputTextConfiguration),
          outputSerialization: toQuerySerialization(options.outputTextConfiguration)
        },
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        cpkInfo: options.customerProvidedKey,
        tracingOptions: updatedOptions.tracingOptions
      }));
      return new BlobQueryResponse(response, {
        abortSignal: options.abortSignal,
        onProgress: options.onProgress,
        onError: options.onError
      });
    });
  }
  /**
   * Creates a new block blob, or updates the content of an existing block blob.
   * Updating an existing block blob overwrites any existing metadata on the blob.
   * Partial updates are not supported; the content of the existing blob is
   * overwritten with the new content. To perform a partial update of a block blob's,
   * use {@link stageBlock} and {@link commitBlockList}.
   *
   * This is a non-parallel uploading method, please use {@link uploadFile},
   * {@link uploadStream} or {@link uploadBrowserData} for better performance
   * with concurrency uploading.
   *
   * @see https://learn.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
   *                               which returns a new Readable stream whose offset is from data source beginning.
   * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
   *                               string including non non-Base64/Hex-encoded characters.
   * @param options - Options to the Block Blob Upload operation.
   * @returns Response data for the Block Blob Upload operation.
   *
   * Example usage:
   *
   * ```js
   * const content = "Hello world!";
   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
   * ```
   */
  async upload(body2, contentLength2, options = {}) {
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("BlockBlobClient-upload", options, async (updatedOptions) => {
      var _a2, _b2, _c2;
      return assertResponse(await this.blockBlobContext.upload(contentLength2, body2, {
        abortSignal: options.abortSignal,
        blobHttpHeaders: options.blobHTTPHeaders,
        leaseAccessConditions: options.conditions,
        metadata: options.metadata,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        requestOptions: {
          onUploadProgress: options.onProgress
        },
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn,
        immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode,
        legalHold: options.legalHold,
        tier: toAccessTier(options.tier),
        blobTagsString: toBlobTagsString(options.tags),
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Creates a new Block Blob where the contents of the blob are read from a given URL.
   * This API is supported beginning with the 2020-04-08 version. Partial updates
   * are not supported with Put Blob from URL; the content of an existing blob is overwritten with
   * the content of the new blob.  To perform partial updates to a block blob’s contents using a
   * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.
   *
   * @param sourceURL - Specifies the URL of the blob. The value
   *                           may be a URL of up to 2 KB in length that specifies a blob.
   *                           The value should be URL-encoded as it would appear
   *                           in a request URI. The source blob must either be public
   *                           or must be authenticated via a shared access signature.
   *                           If the source blob is public, no authentication is required
   *                           to perform the operation. Here are some examples of source object URLs:
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
   * @param options - Optional parameters.
   */
  async syncUploadFromURL(sourceURL, options = {}) {
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("BlockBlobClient-syncUploadFromURL", options, async (updatedOptions) => {
      var _a2, _b2, _c2, _d2, _e, _f;
      return assertResponse(await this.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign({}, options), { blobHttpHeaders: options.blobHTTPHeaders, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }), sourceModifiedAccessConditions: {
        sourceIfMatch: (_b2 = options.sourceConditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch,
        sourceIfModifiedSince: (_c2 = options.sourceConditions) === null || _c2 === void 0 ? void 0 : _c2.ifModifiedSince,
        sourceIfNoneMatch: (_d2 = options.sourceConditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch,
        sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,
        sourceIfTags: (_f = options.sourceConditions) === null || _f === void 0 ? void 0 : _f.tagConditions
      }, cpkInfo: options.customerProvidedKey, copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization), tier: toAccessTier(options.tier), blobTagsString: toBlobTagsString(options.tags), copySourceTags: options.copySourceTags, tracingOptions: updatedOptions.tracingOptions })));
    });
  }
  /**
   * Uploads the specified block to the block blob's "staging area" to be later
   * committed by a call to commitBlockList.
   * @see https://learn.microsoft.com/rest/api/storageservices/put-block
   *
   * @param blockId - A 64-byte value that is base64-encoded
   * @param body - Data to upload to the staging area.
   * @param contentLength - Number of bytes to upload.
   * @param options - Options to the Block Blob Stage Block operation.
   * @returns Response data for the Block Blob Stage Block operation.
   */
  async stageBlock(blockId2, body2, contentLength2, options = {}) {
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("BlockBlobClient-stageBlock", options, async (updatedOptions) => {
      return assertResponse(await this.blockBlobContext.stageBlock(blockId2, contentLength2, body2, {
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        requestOptions: {
          onUploadProgress: options.onProgress
        },
        transactionalContentMD5: options.transactionalContentMD5,
        transactionalContentCrc64: options.transactionalContentCrc64,
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * The Stage Block From URL operation creates a new block to be committed as part
   * of a blob where the contents are read from a URL.
   * This API is available starting in version 2018-03-28.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/put-block-from-url
   *
   * @param blockId - A 64-byte value that is base64-encoded
   * @param sourceURL - Specifies the URL of the blob. The value
   *                           may be a URL of up to 2 KB in length that specifies a blob.
   *                           The value should be URL-encoded as it would appear
   *                           in a request URI. The source blob must either be public
   *                           or must be authenticated via a shared access signature.
   *                           If the source blob is public, no authentication is required
   *                           to perform the operation. Here are some examples of source object URLs:
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
   * @param offset - From which position of the blob to download, greater than or equal to 0
   * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined
   * @param options - Options to the Block Blob Stage Block From URL operation.
   * @returns Response data for the Block Blob Stage Block From URL operation.
   */
  async stageBlockFromURL(blockId2, sourceURL, offset = 0, count, options = {}) {
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("BlockBlobClient-stageBlockFromURL", options, async (updatedOptions) => {
      return assertResponse(await this.blockBlobContext.stageBlockFromURL(blockId2, 0, sourceURL, {
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        sourceContentMD5: options.sourceContentMD5,
        sourceContentCrc64: options.sourceContentCrc64,
        sourceRange: offset === 0 && !count ? void 0 : rangeToString({ offset, count }),
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Writes a blob by specifying the list of block IDs that make up the blob.
   * In order to be written as part of a blob, a block must have been successfully written
   * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to
   * update a blob by uploading only those blocks that have changed, then committing the new and existing
   * blocks together. Any blocks not specified in the block list and permanently deleted.
   * @see https://learn.microsoft.com/rest/api/storageservices/put-block-list
   *
   * @param blocks -  Array of 64-byte value that is base64-encoded
   * @param options - Options to the Block Blob Commit Block List operation.
   * @returns Response data for the Block Blob Commit Block List operation.
   */
  async commitBlockList(blocks2, options = {}) {
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("BlockBlobClient-commitBlockList", options, async (updatedOptions) => {
      var _a2, _b2, _c2;
      return assertResponse(await this.blockBlobContext.commitBlockList({ latest: blocks2 }, {
        abortSignal: options.abortSignal,
        blobHttpHeaders: options.blobHTTPHeaders,
        leaseAccessConditions: options.conditions,
        metadata: options.metadata,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn,
        immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode,
        legalHold: options.legalHold,
        tier: toAccessTier(options.tier),
        blobTagsString: toBlobTagsString(options.tags),
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Returns the list of blocks that have been uploaded as part of a block blob
   * using the specified block list filter.
   * @see https://learn.microsoft.com/rest/api/storageservices/get-block-list
   *
   * @param listType - Specifies whether to return the list of committed blocks,
   *                                        the list of uncommitted blocks, or both lists together.
   * @param options - Options to the Block Blob Get Block List operation.
   * @returns Response data for the Block Blob Get Block List operation.
   */
  async getBlockList(listType2, options = {}) {
    return tracingClient.withSpan("BlockBlobClient-getBlockList", options, async (updatedOptions) => {
      var _a2;
      const res = assertResponse(await this.blockBlobContext.getBlockList(listType2, {
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        tracingOptions: updatedOptions.tracingOptions
      }));
      if (!res.committedBlocks) {
        res.committedBlocks = [];
      }
      if (!res.uncommittedBlocks) {
        res.uncommittedBlocks = [];
      }
      return res;
    });
  }
  // High level functions
  /**
   * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.
   *
   * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
   * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
   * to commit the block list.
   *
   * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
   * `blobContentType`, enabling the browser to provide
   * functionality based on file type.
   *
   * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView
   * @param options -
   */
  async uploadData(data, options = {}) {
    return tracingClient.withSpan("BlockBlobClient-uploadData", options, async (updatedOptions) => {
      if (isNode) {
        let buffer;
        if (data instanceof Buffer) {
          buffer = data;
        } else if (data instanceof ArrayBuffer) {
          buffer = Buffer.from(data);
        } else {
          data = data;
          buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
        }
        return this.uploadSeekableInternal((offset, size) => buffer.slice(offset, offset + size), buffer.byteLength, updatedOptions);
      } else {
        const browserBlob = new Blob([data]);
        return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);
      }
    });
  }
  /**
   * ONLY AVAILABLE IN BROWSERS.
   *
   * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.
   *
   * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call
   * {@link commitBlockList} to commit the block list.
   *
   * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is
   * `blobContentType`, enabling the browser to provide
   * functionality based on file type.
   *
   * @deprecated Use {@link uploadData} instead.
   *
   * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView
   * @param options - Options to upload browser data.
   * @returns Response data for the Blob Upload operation.
   */
  async uploadBrowserData(browserData, options = {}) {
    return tracingClient.withSpan("BlockBlobClient-uploadBrowserData", options, async (updatedOptions) => {
      const browserBlob = new Blob([browserData]);
      return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);
    });
  }
  /**
   *
   * Uploads data to block blob. Requires a bodyFactory as the data source,
   * which need to return a {@link HttpRequestBody} object with the offset and size provided.
   *
   * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is
   * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.
   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
   * to commit the block list.
   *
   * @param bodyFactory -
   * @param size - size of the data to upload.
   * @param options - Options to Upload to Block Blob operation.
   * @returns Response data for the Blob Upload operation.
   */
  async uploadSeekableInternal(bodyFactory, size, options = {}) {
    var _a2, _b2;
    let blockSize = (_a2 = options.blockSize) !== null && _a2 !== void 0 ? _a2 : 0;
    if (blockSize < 0 || blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {
      throw new RangeError(`blockSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`);
    }
    const maxSingleShotSize = (_b2 = options.maxSingleShotSize) !== null && _b2 !== void 0 ? _b2 : BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;
    if (maxSingleShotSize < 0 || maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {
      throw new RangeError(`maxSingleShotSize option must be >= 0 and <= ${BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`);
    }
    if (blockSize === 0) {
      if (size > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * BLOCK_BLOB_MAX_BLOCKS) {
        throw new RangeError(`${size} is too larger to upload to a block blob.`);
      }
      if (size > maxSingleShotSize) {
        blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);
        if (blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {
          blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;
        }
      }
    }
    if (!options.blobHTTPHeaders) {
      options.blobHTTPHeaders = {};
    }
    if (!options.conditions) {
      options.conditions = {};
    }
    return tracingClient.withSpan("BlockBlobClient-uploadSeekableInternal", options, async (updatedOptions) => {
      if (size <= maxSingleShotSize) {
        return assertResponse(await this.upload(bodyFactory(0, size), size, updatedOptions));
      }
      const numBlocks = Math.floor((size - 1) / blockSize) + 1;
      if (numBlocks > BLOCK_BLOB_MAX_BLOCKS) {
        throw new RangeError(`The buffer's size is too big or the BlockSize is too small;the number of blocks must be <= ${BLOCK_BLOB_MAX_BLOCKS}`);
      }
      const blockList = [];
      const blockIDPrefix = randomUUID();
      let transferProgress = 0;
      const batch = new Batch(options.concurrency);
      for (let i = 0; i < numBlocks; i++) {
        batch.addOperation(async () => {
          const blockID = generateBlockID(blockIDPrefix, i);
          const start = blockSize * i;
          const end = i === numBlocks - 1 ? size : start + blockSize;
          const contentLength2 = end - start;
          blockList.push(blockID);
          await this.stageBlock(blockID, bodyFactory(start, contentLength2), contentLength2, {
            abortSignal: options.abortSignal,
            conditions: options.conditions,
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          });
          transferProgress += contentLength2;
          if (options.onProgress) {
            options.onProgress({
              loadedBytes: transferProgress
            });
          }
        });
      }
      await batch.do();
      return this.commitBlockList(blockList, updatedOptions);
    });
  }
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Uploads a local file in blocks to a block blob.
   *
   * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.
   * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList
   * to commit the block list.
   *
   * @param filePath - Full path of local file
   * @param options - Options to Upload to Block Blob operation.
   * @returns Response data for the Blob Upload operation.
   */
  async uploadFile(filePath, options = {}) {
    return tracingClient.withSpan("BlockBlobClient-uploadFile", options, async (updatedOptions) => {
      const size = (await fsStat()).size;
      return this.uploadSeekableInternal((offset, count) => {
        return () => fsCreateReadStream();
      }, size, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));
    });
  }
  /**
   * ONLY AVAILABLE IN NODE.JS RUNTIME.
   *
   * Uploads a Node.js Readable stream into block blob.
   *
   * PERFORMANCE IMPROVEMENT TIPS:
   * * Input stream highWaterMark is better to set a same value with bufferSize
   *    parameter, which will avoid Buffer.concat() operations.
   *
   * @param stream - Node.js Readable stream
   * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB
   * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,
   *                                 positive correlation with max uploading concurrency. Default value is 5
   * @param options - Options to Upload Stream to Block Blob operation.
   * @returns Response data for the Blob Upload operation.
   */
  async uploadStream(stream, bufferSize = DEFAULT_BLOCK_BUFFER_SIZE_BYTES, maxConcurrency = 5, options = {}) {
    if (!options.blobHTTPHeaders) {
      options.blobHTTPHeaders = {};
    }
    if (!options.conditions) {
      options.conditions = {};
    }
    return tracingClient.withSpan("BlockBlobClient-uploadStream", options, async (updatedOptions) => {
      let blockNum = 0;
      const blockIDPrefix = randomUUID();
      let transferProgress = 0;
      const blockList = [];
      const scheduler = new BufferScheduler(
        stream,
        bufferSize,
        maxConcurrency,
        async (body2, length) => {
          const blockID = generateBlockID(blockIDPrefix, blockNum);
          blockList.push(blockID);
          blockNum++;
          await this.stageBlock(blockID, body2, length, {
            customerProvidedKey: options.customerProvidedKey,
            conditions: options.conditions,
            encryptionScope: options.encryptionScope,
            tracingOptions: updatedOptions.tracingOptions
          });
          transferProgress += length;
          if (options.onProgress) {
            options.onProgress({ loadedBytes: transferProgress });
          }
        },
        // concurrency should set a smaller value than maxConcurrency, which is helpful to
        // reduce the possibility when a outgoing handler waits for stream data, in
        // this situation, outgoing handlers are blocked.
        // Outgoing queue shouldn't be empty.
        Math.ceil(maxConcurrency / 4 * 3)
      );
      await scheduler.do();
      return assertResponse(await this.commitBlockList(blockList, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions })));
    });
  }
}
class PageBlobClient extends BlobClient {
  constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
    let pipeline;
    let url2;
    options = options || {};
    if (isPipelineLike(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      options = blobNameOrOptions;
      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      url2 = urlOrConnectionString;
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string" && blobNameOrOptions && typeof blobNameOrOptions === "string") {
      const containerName = credentialOrPipelineOrContainerName;
      const blobName = blobNameOrOptions;
      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (isNode) {
          const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
          if (!options.proxyOptions) {
            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
          }
          pipeline = newPipeline(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url2 = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + "?" + extractedCreds.accountSas;
        pipeline = newPipeline(new AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName and blobName parameters");
    }
    super(url2, pipeline);
    this.pageBlobContext = this.storageClientContext.pageBlob;
  }
  /**
   * Creates a new PageBlobClient object identical to the source but with the
   * specified snapshot timestamp.
   * Provide "" will remove the snapshot and return a Client to the base blob.
   *
   * @param snapshot - The snapshot timestamp.
   * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.
   */
  withSnapshot(snapshot2) {
    return new PageBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot2.length === 0 ? void 0 : snapshot2), this.pipeline);
  }
  /**
   * Creates a page blob of the specified length. Call uploadPages to upload data
   * data to a page blob.
   * @see https://learn.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param size - size of the page blob.
   * @param options - Options to the Page Blob Create operation.
   * @returns Response data for the Page Blob Create operation.
   */
  async create(size, options = {}) {
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("PageBlobClient-create", options, async (updatedOptions) => {
      var _a2, _b2, _c2;
      return assertResponse(await this.pageBlobContext.create(0, size, {
        abortSignal: options.abortSignal,
        blobHttpHeaders: options.blobHTTPHeaders,
        blobSequenceNumber: options.blobSequenceNumber,
        leaseAccessConditions: options.conditions,
        metadata: options.metadata,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        immutabilityPolicyExpiry: (_b2 = options.immutabilityPolicy) === null || _b2 === void 0 ? void 0 : _b2.expiriesOn,
        immutabilityPolicyMode: (_c2 = options.immutabilityPolicy) === null || _c2 === void 0 ? void 0 : _c2.policyMode,
        legalHold: options.legalHold,
        tier: toAccessTier(options.tier),
        blobTagsString: toBlobTagsString(options.tags),
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Creates a page blob of the specified length. Call uploadPages to upload data
   * data to a page blob. If the blob with the same name already exists, the content
   * of the existing blob will remain unchanged.
   * @see https://learn.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param size - size of the page blob.
   * @param options -
   */
  async createIfNotExists(size, options = {}) {
    return tracingClient.withSpan("PageBlobClient-createIfNotExists", options, async (updatedOptions) => {
      var _a2, _b2;
      try {
        const conditions = { ifNoneMatch: ETagAny };
        const res = assertResponse(await this.create(size, Object.assign(Object.assign({}, options), { conditions, tracingOptions: updatedOptions.tracingOptions })));
        return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
      } catch (e2) {
        if (((_a2 = e2.details) === null || _a2 === void 0 ? void 0 : _a2.errorCode) === "BlobAlreadyExists") {
          return Object.assign(Object.assign({ succeeded: false }, (_b2 = e2.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e2.response });
        }
        throw e2;
      }
    });
  }
  /**
   * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.
   * @see https://learn.microsoft.com/rest/api/storageservices/put-page
   *
   * @param body - Data to upload
   * @param offset - Offset of destination page blob
   * @param count - Content length of the body, also number of bytes to be uploaded
   * @param options - Options to the Page Blob Upload Pages operation.
   * @returns Response data for the Page Blob Upload Pages operation.
   */
  async uploadPages(body2, offset, count, options = {}) {
    options.conditions = options.conditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("PageBlobClient-uploadPages", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.pageBlobContext.uploadPages(count, body2, {
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        requestOptions: {
          onUploadProgress: options.onProgress
        },
        range: rangeToString({ offset, count }),
        sequenceNumberAccessConditions: options.conditions,
        transactionalContentMD5: options.transactionalContentMD5,
        transactionalContentCrc64: options.transactionalContentCrc64,
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * The Upload Pages operation writes a range of pages to a page blob where the
   * contents are read from a URL.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/put-page-from-url
   *
   * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication
   * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob
   * @param destOffset - Offset of destination page blob
   * @param count - Number of bytes to be uploaded from source page blob
   * @param options -
   */
  async uploadPagesFromURL(sourceURL, sourceOffset, destOffset, count, options = {}) {
    options.conditions = options.conditions || {};
    options.sourceConditions = options.sourceConditions || {};
    ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);
    return tracingClient.withSpan("PageBlobClient-uploadPagesFromURL", options, async (updatedOptions) => {
      var _a2, _b2, _c2, _d2, _e;
      return assertResponse(await this.pageBlobContext.uploadPagesFromURL(sourceURL, rangeToString({ offset: sourceOffset, count }), 0, rangeToString({ offset: destOffset, count }), {
        abortSignal: options.abortSignal,
        sourceContentMD5: options.sourceContentMD5,
        sourceContentCrc64: options.sourceContentCrc64,
        leaseAccessConditions: options.conditions,
        sequenceNumberAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        sourceModifiedAccessConditions: {
          sourceIfMatch: (_b2 = options.sourceConditions) === null || _b2 === void 0 ? void 0 : _b2.ifMatch,
          sourceIfModifiedSince: (_c2 = options.sourceConditions) === null || _c2 === void 0 ? void 0 : _c2.ifModifiedSince,
          sourceIfNoneMatch: (_d2 = options.sourceConditions) === null || _d2 === void 0 ? void 0 : _d2.ifNoneMatch,
          sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince
        },
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        copySourceAuthorization: httpAuthorizationToString(options.sourceAuthorization),
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Frees the specified pages from the page blob.
   * @see https://learn.microsoft.com/rest/api/storageservices/put-page
   *
   * @param offset - Starting byte position of the pages to clear.
   * @param count - Number of bytes to clear.
   * @param options - Options to the Page Blob Clear Pages operation.
   * @returns Response data for the Page Blob Clear Pages operation.
   */
  async clearPages(offset = 0, count, options = {}) {
    options.conditions = options.conditions || {};
    return tracingClient.withSpan("PageBlobClient-clearPages", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.pageBlobContext.clearPages(0, {
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        range: rangeToString({ offset, count }),
        sequenceNumberAccessConditions: options.conditions,
        cpkInfo: options.customerProvidedKey,
        encryptionScope: options.encryptionScope,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Returns the list of valid page ranges for a page blob or snapshot of a page blob.
   * @see https://learn.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param options - Options to the Page Blob Get Ranges operation.
   * @returns Response data for the Page Blob Get Ranges operation.
   */
  async getPageRanges(offset = 0, count, options = {}) {
    options.conditions = options.conditions || {};
    return tracingClient.withSpan("PageBlobClient-getPageRanges", options, async (updatedOptions) => {
      var _a2;
      const response = assertResponse(await this.pageBlobContext.getPageRanges({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        range: rangeToString({ offset, count }),
        tracingOptions: updatedOptions.tracingOptions
      }));
      return rangeResponseFromModel(response);
    });
  }
  /**
   * getPageRangesSegment returns a single segment of page ranges starting from the
   * specified Marker. Use an empty Marker to start enumeration from the beginning.
   * After getting a segment, process it, and then call getPageRangesSegment again
   * (passing the the previously-returned Marker) to get the next segment.
   * @see https://learn.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
   * @param options - Options to PageBlob Get Page Ranges Segment operation.
   */
  async listPageRangesSegment(offset = 0, count, marker2, options = {}) {
    return tracingClient.withSpan("PageBlobClient-getPageRangesSegment", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.pageBlobContext.getPageRanges({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        range: rangeToString({ offset, count }),
        marker: marker2,
        maxPageSize: options.maxPageSize,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesResponseModel}
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param marker - A string value that identifies the portion of
   *                          the get of page ranges to be returned with the next getting operation. The
   *                          operation returns the ContinuationToken value within the response body if the
   *                          getting operation did not return all page ranges remaining within the current page.
   *                          The ContinuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of get
   *                          items. The marker value is opaque to the client.
   * @param options - Options to List Page Ranges operation.
   */
  listPageRangeItemSegments() {
    return __asyncGenerator(this, arguments, function* listPageRangeItemSegments_1(offset = 0, count, marker2, options = {}) {
      let getPageRangeItemSegmentsResponse;
      if (!!marker2 || marker2 === void 0) {
        do {
          getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesSegment(offset, count, marker2, options));
          marker2 = getPageRangeItemSegmentsResponse.continuationToken;
          yield yield __await(yield __await(getPageRangeItemSegmentsResponse));
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param options - Options to List Page Ranges operation.
   */
  listPageRangeItems() {
    return __asyncGenerator(this, arguments, function* listPageRangeItems_1(offset = 0, count, options = {}) {
      var _a2, e_1, _b2, _c2;
      let marker2;
      try {
        for (var _d2 = true, _e = __asyncValues(this.listPageRangeItemSegments(offset, count, marker2, options)), _f; _f = yield __await(_e.next()), _a2 = _f.done, !_a2; _d2 = true) {
          _c2 = _f.value;
          _d2 = false;
          const getPageRangesSegment = _c2;
          yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (!_d2 && !_a2 && (_b2 = _e.return)) yield __await(_b2.call(_e));
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to list of page ranges for a page blob.
   * @see https://learn.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   *  .byPage() returns an async iterable iterator to list of page ranges for a page blob.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * // Get the pageBlobClient before you run these snippets,
   * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>").getPageBlobClient("<your-blob-name>");`
   * let i = 1;
   * for await (const pageRange of pageBlobClient.listPageRanges()) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * let iter = pageBlobClient.listPageRanges();
   * let pageRangeItem = await iter.next();
   * while (!pageRangeItem.done) {
   *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);
   *   pageRangeItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of pageBlobClient.listPageRanges().byPage({ maxPageSize: 20 })) {
   *   for (const pageRange of response) {
   *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = pageBlobClient.listPageRanges().byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 page ranges
   * for (const pageRange of response) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   *
   * // Passing next marker as continuationToken
   *
   * iterator = pageBlobClient.listPageRanges().byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints 10 page ranges
   * for (const blob of response) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   * ```
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param options - Options to the Page Blob Get Ranges operation.
   * @returns An asyncIterableIterator that supports paging.
   */
  listPageRanges(offset = 0, count, options = {}) {
    options.conditions = options.conditions || {};
    const iter = this.listPageRangeItems(offset, count, options);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.listPageRangeItemSegments(offset, count, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));
      }
    };
  }
  /**
   * Gets the collection of page ranges that differ between a specified snapshot and this page blob.
   * @see https://learn.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page blob
   * @param count - Number of bytes to get ranges diff.
   * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   * @returns Response data for the Page Blob Get Page Range Diff operation.
   */
  async getPageRangesDiff(offset, count, prevSnapshot, options = {}) {
    options.conditions = options.conditions || {};
    return tracingClient.withSpan("PageBlobClient-getPageRangesDiff", options, async (updatedOptions) => {
      var _a2;
      const result = assertResponse(await this.pageBlobContext.getPageRangesDiff({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        prevsnapshot: prevSnapshot,
        range: rangeToString({ offset, count }),
        tracingOptions: updatedOptions.tracingOptions
      }));
      return rangeResponseFromModel(result);
    });
  }
  /**
   * getPageRangesDiffSegment returns a single segment of page ranges starting from the
   * specified Marker for difference between previous snapshot and the target page blob.
   * Use an empty Marker to start enumeration from the beginning.
   * After getting a segment, process it, and then call getPageRangesDiffSegment again
   * (passing the the previously-returned Marker) to get the next segment.
   * @see https://learn.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
   * @param marker - A string value that identifies the portion of the get to be returned with the next get operation.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   */
  async listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker2, options = {}) {
    return tracingClient.withSpan("PageBlobClient-getPageRangesDiffSegment", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.pageBlobContext.getPageRangesDiff({
        abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,
        leaseAccessConditions: options === null || options === void 0 ? void 0 : options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.conditions), { ifTags: (_a2 = options === null || options === void 0 ? void 0 : options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        prevsnapshot: prevSnapshotOrUrl,
        range: rangeToString({
          offset,
          count
        }),
        marker: marker2,
        maxPageSize: options === null || options === void 0 ? void 0 : options.maxPageSize,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesDiffResponseModel}
   *
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
   * @param marker - A string value that identifies the portion of
   *                          the get of page ranges to be returned with the next getting operation. The
   *                          operation returns the ContinuationToken value within the response body if the
   *                          getting operation did not return all page ranges remaining within the current page.
   *                          The ContinuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of get
   *                          items. The marker value is opaque to the client.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   */
  listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker2, options) {
    return __asyncGenerator(this, arguments, function* listPageRangeDiffItemSegments_1() {
      let getPageRangeItemSegmentsResponse;
      if (!!marker2 || marker2 === void 0) {
        do {
          getPageRangeItemSegmentsResponse = yield __await(this.listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker2, options));
          marker2 = getPageRangeItemSegmentsResponse.continuationToken;
          yield yield __await(yield __await(getPageRangeItemSegmentsResponse));
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects
   *
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   */
  listPageRangeDiffItems(offset, count, prevSnapshotOrUrl, options) {
    return __asyncGenerator(this, arguments, function* listPageRangeDiffItems_1() {
      var _a2, e_2, _b2, _c2;
      let marker2;
      try {
        for (var _d2 = true, _e = __asyncValues(this.listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker2, options)), _f; _f = yield __await(_e.next()), _a2 = _f.done, !_a2; _d2 = true) {
          _c2 = _f.value;
          _d2 = false;
          const getPageRangesSegment = _c2;
          yield __await(yield* __asyncDelegator(__asyncValues(ExtractPageRangeInfoItems(getPageRangesSegment))));
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (!_d2 && !_a2 && (_b2 = _e.return)) yield __await(_b2.call(_e));
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.
   * @see https://learn.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   *  .byPage() returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * // Get the pageBlobClient before you run these snippets,
   * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>").getPageBlobClient("<your-blob-name>");`
   * let i = 1;
   * for await (const pageRange of pageBlobClient.listPageRangesDiff()) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * let iter = pageBlobClient.listPageRangesDiff();
   * let pageRangeItem = await iter.next();
   * while (!pageRangeItem.done) {
   *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);
   *   pageRangeItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 20 })) {
   *   for (const pageRange of response) {
   *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 page ranges
   * for (const pageRange of response) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   *
   * // Passing next marker as continuationToken
   *
   * iterator = pageBlobClient.listPageRangesDiff().byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints 10 page ranges
   * for (const blob of response) {
   *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);
   * }
   * ```
   * @param offset - Starting byte position of the page ranges.
   * @param count - Number of bytes to get.
   * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.
   * @param options - Options to the Page Blob Get Ranges operation.
   * @returns An asyncIterableIterator that supports paging.
   */
  listPageRangesDiff(offset, count, prevSnapshot, options = {}) {
    options.conditions = options.conditions || {};
    const iter = this.listPageRangeDiffItems(offset, count, prevSnapshot, Object.assign({}, options));
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.listPageRangeDiffItemSegments(offset, count, prevSnapshot, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));
      }
    };
  }
  /**
   * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.
   * @see https://learn.microsoft.com/rest/api/storageservices/get-page-ranges
   *
   * @param offset - Starting byte position of the page blob
   * @param count - Number of bytes to get ranges diff.
   * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.
   * @param options - Options to the Page Blob Get Page Ranges Diff operation.
   * @returns Response data for the Page Blob Get Page Range Diff operation.
   */
  async getPageRangesDiffForManagedDisks(offset, count, prevSnapshotUrl2, options = {}) {
    options.conditions = options.conditions || {};
    return tracingClient.withSpan("PageBlobClient-GetPageRangesDiffForManagedDisks", options, async (updatedOptions) => {
      var _a2;
      const response = assertResponse(await this.pageBlobContext.getPageRangesDiff({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        prevSnapshotUrl: prevSnapshotUrl2,
        range: rangeToString({ offset, count }),
        tracingOptions: updatedOptions.tracingOptions
      }));
      return rangeResponseFromModel(response);
    });
  }
  /**
   * Resizes the page blob to the specified size (which must be a multiple of 512).
   * @see https://learn.microsoft.com/rest/api/storageservices/set-blob-properties
   *
   * @param size - Target size
   * @param options - Options to the Page Blob Resize operation.
   * @returns Response data for the Page Blob Resize operation.
   */
  async resize(size, options = {}) {
    options.conditions = options.conditions || {};
    return tracingClient.withSpan("PageBlobClient-resize", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.pageBlobContext.resize(size, {
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        encryptionScope: options.encryptionScope,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Sets a page blob's sequence number.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
   *
   * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.
   * @param sequenceNumber - Required if sequenceNumberAction is max or update
   * @param options - Options to the Page Blob Update Sequence Number operation.
   * @returns Response data for the Page Blob Update Sequence Number operation.
   */
  async updateSequenceNumber(sequenceNumberAction2, sequenceNumber, options = {}) {
    options.conditions = options.conditions || {};
    return tracingClient.withSpan("PageBlobClient-updateSequenceNumber", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.pageBlobContext.updateSequenceNumber(sequenceNumberAction2, {
        abortSignal: options.abortSignal,
        blobSequenceNumber: sequenceNumber,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.
   * The snapshot is copied such that only the differential changes between the previously
   * copied snapshot are transferred to the destination.
   * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.
   * @see https://learn.microsoft.com/rest/api/storageservices/incremental-copy-blob
   * @see https://learn.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots
   *
   * @param copySource - Specifies the name of the source page blob snapshot. For example,
   *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
   * @param options - Options to the Page Blob Copy Incremental operation.
   * @returns Response data for the Page Blob Copy Incremental operation.
   */
  async startCopyIncremental(copySource2, options = {}) {
    return tracingClient.withSpan("PageBlobClient-startCopyIncremental", options, async (updatedOptions) => {
      var _a2;
      return assertResponse(await this.pageBlobContext.copyIncremental(copySource2, {
        abortSignal: options.abortSignal,
        modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a2 = options.conditions) === null || _a2 === void 0 ? void 0 : _a2.tagConditions }),
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
}
async function getBodyAsText(batchResponse) {
  const blob = await batchResponse.blobBody;
  return blobToString(blob);
}
function utf8ByteLength(str) {
  return new Blob([str]).size;
}
const HTTP_HEADER_DELIMITER = ": ";
const SPACE_DELIMITER = " ";
const NOT_FOUND = -1;
class BatchResponseParser {
  constructor(batchResponse, subRequests) {
    if (!batchResponse || !batchResponse.contentType) {
      throw new RangeError("batchResponse is malformed or doesn't contain valid content-type.");
    }
    if (!subRequests || subRequests.size === 0) {
      throw new RangeError("Invalid state: subRequests is not provided or size is 0.");
    }
    this.batchResponse = batchResponse;
    this.subRequests = subRequests;
    this.responseBatchBoundary = this.batchResponse.contentType.split("=")[1];
    this.perResponsePrefix = `--${this.responseBatchBoundary}${HTTP_LINE_ENDING}`;
    this.batchResponseEnding = `--${this.responseBatchBoundary}--`;
  }
  // For example of response, please refer to https://learn.microsoft.com/en-us/rest/api/storageservices/blob-batch#response
  async parseBatchResponse() {
    if (this.batchResponse._response.status !== HTTPURLConnection.HTTP_ACCEPTED) {
      throw new Error(`Invalid state: batch request failed with status: '${this.batchResponse._response.status}'.`);
    }
    const responseBodyAsText = await getBodyAsText(this.batchResponse);
    const subResponses = responseBodyAsText.split(this.batchResponseEnding)[0].split(this.perResponsePrefix).slice(1);
    const subResponseCount = subResponses.length;
    if (subResponseCount !== this.subRequests.size && subResponseCount !== 1) {
      throw new Error("Invalid state: sub responses' count is not equal to sub requests' count.");
    }
    const deserializedSubResponses = new Array(subResponseCount);
    let subResponsesSucceededCount = 0;
    let subResponsesFailedCount = 0;
    for (let index = 0; index < subResponseCount; index++) {
      const subResponse = subResponses[index];
      const deserializedSubResponse = {};
      deserializedSubResponse.headers = toHttpHeadersLike(createHttpHeaders());
      const responseLines = subResponse.split(`${HTTP_LINE_ENDING}`);
      let subRespHeaderStartFound = false;
      let subRespHeaderEndFound = false;
      let subRespFailed = false;
      let contentId = NOT_FOUND;
      for (const responseLine of responseLines) {
        if (!subRespHeaderStartFound) {
          if (responseLine.startsWith(HeaderConstants.CONTENT_ID)) {
            contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);
          }
          if (responseLine.startsWith(HTTP_VERSION_1_1)) {
            subRespHeaderStartFound = true;
            const tokens = responseLine.split(SPACE_DELIMITER);
            deserializedSubResponse.status = parseInt(tokens[1]);
            deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);
          }
          continue;
        }
        if (responseLine.trim() === "") {
          if (!subRespHeaderEndFound) {
            subRespHeaderEndFound = true;
          }
          continue;
        }
        if (!subRespHeaderEndFound) {
          if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) {
            throw new Error(`Invalid state: find non-empty line '${responseLine}' without HTTP header delimiter '${HTTP_HEADER_DELIMITER}'.`);
          }
          const tokens = responseLine.split(HTTP_HEADER_DELIMITER);
          deserializedSubResponse.headers.set(tokens[0], tokens[1]);
          if (tokens[0] === HeaderConstants.X_MS_ERROR_CODE) {
            deserializedSubResponse.errorCode = tokens[1];
            subRespFailed = true;
          }
        } else {
          if (!deserializedSubResponse.bodyAsText) {
            deserializedSubResponse.bodyAsText = "";
          }
          deserializedSubResponse.bodyAsText += responseLine;
        }
      }
      if (contentId !== NOT_FOUND && Number.isInteger(contentId) && contentId >= 0 && contentId < this.subRequests.size && deserializedSubResponses[contentId] === void 0) {
        deserializedSubResponse._request = this.subRequests.get(contentId);
        deserializedSubResponses[contentId] = deserializedSubResponse;
      } else {
        logger.error(`subResponses[${index}] is dropped as the Content-ID is not found or invalid, Content-ID: ${contentId}`);
      }
      if (subRespFailed) {
        subResponsesFailedCount++;
      } else {
        subResponsesSucceededCount++;
      }
    }
    return {
      subResponses: deserializedSubResponses,
      subResponsesSucceededCount,
      subResponsesFailedCount
    };
  }
}
var MutexLockStatus;
(function(MutexLockStatus2) {
  MutexLockStatus2[MutexLockStatus2["LOCKED"] = 0] = "LOCKED";
  MutexLockStatus2[MutexLockStatus2["UNLOCKED"] = 1] = "UNLOCKED";
})(MutexLockStatus || (MutexLockStatus = {}));
class Mutex {
  /**
   * Lock for a specific key. If the lock has been acquired by another customer, then
   * will wait until getting the lock.
   *
   * @param key - lock key
   */
  static async lock(key) {
    return new Promise((resolve) => {
      if (this.keys[key] === void 0 || this.keys[key] === MutexLockStatus.UNLOCKED) {
        this.keys[key] = MutexLockStatus.LOCKED;
        resolve();
      } else {
        this.onUnlockEvent(key, () => {
          this.keys[key] = MutexLockStatus.LOCKED;
          resolve();
        });
      }
    });
  }
  /**
   * Unlock a key.
   *
   * @param key -
   */
  static async unlock(key) {
    return new Promise((resolve) => {
      if (this.keys[key] === MutexLockStatus.LOCKED) {
        this.emitUnlockEvent(key);
      }
      delete this.keys[key];
      resolve();
    });
  }
  static onUnlockEvent(key, handler) {
    if (this.listeners[key] === void 0) {
      this.listeners[key] = [handler];
    } else {
      this.listeners[key].push(handler);
    }
  }
  static emitUnlockEvent(key) {
    if (this.listeners[key] !== void 0 && this.listeners[key].length > 0) {
      const handler = this.listeners[key].shift();
      setImmediate(() => {
        handler.call(this);
      });
    }
  }
}
Mutex.keys = {};
Mutex.listeners = {};
class BlobBatch {
  constructor() {
    this.batch = "batch";
    this.batchRequest = new InnerBatchRequest();
  }
  /**
   * Get the value of Content-Type for a batch request.
   * The value must be multipart/mixed with a batch boundary.
   * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252
   */
  getMultiPartContentType() {
    return this.batchRequest.getMultipartContentType();
  }
  /**
   * Get assembled HTTP request body for sub requests.
   */
  getHttpRequestBody() {
    return this.batchRequest.getHttpRequestBody();
  }
  /**
   * Get sub requests that are added into the batch request.
   */
  getSubRequests() {
    return this.batchRequest.getSubRequests();
  }
  async addSubRequestInternal(subRequest, assembleSubRequestFunc) {
    await Mutex.lock(this.batch);
    try {
      this.batchRequest.preAddSubRequest(subRequest);
      await assembleSubRequestFunc();
      this.batchRequest.postAddSubRequest(subRequest);
    } finally {
      await Mutex.unlock(this.batch);
    }
  }
  setBatchType(batchType) {
    if (!this.batchType) {
      this.batchType = batchType;
    }
    if (this.batchType !== batchType) {
      throw new RangeError(`BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`);
    }
  }
  async deleteBlob(urlOrBlobClient, credentialOrOptions, options) {
    let url2;
    let credential;
    if (typeof urlOrBlobClient === "string" && (isNode && credentialOrOptions instanceof StorageSharedKeyCredential || credentialOrOptions instanceof AnonymousCredential || isTokenCredential(credentialOrOptions))) {
      url2 = urlOrBlobClient;
      credential = credentialOrOptions;
    } else if (urlOrBlobClient instanceof BlobClient) {
      url2 = urlOrBlobClient.url;
      credential = urlOrBlobClient.credential;
      options = credentialOrOptions;
    } else {
      throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
    }
    if (!options) {
      options = {};
    }
    return tracingClient.withSpan("BatchDeleteRequest-addSubRequest", options, async (updatedOptions) => {
      this.setBatchType("delete");
      await this.addSubRequestInternal({
        url: url2,
        credential
      }, async () => {
        await new BlobClient(url2, this.batchRequest.createPipeline(credential)).delete(updatedOptions);
      });
    });
  }
  async setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {
    let url2;
    let credential;
    let tier2;
    if (typeof urlOrBlobClient === "string" && (isNode && credentialOrTier instanceof StorageSharedKeyCredential || credentialOrTier instanceof AnonymousCredential || isTokenCredential(credentialOrTier))) {
      url2 = urlOrBlobClient;
      credential = credentialOrTier;
      tier2 = tierOrOptions;
    } else if (urlOrBlobClient instanceof BlobClient) {
      url2 = urlOrBlobClient.url;
      credential = urlOrBlobClient.credential;
      tier2 = credentialOrTier;
      options = tierOrOptions;
    } else {
      throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
    }
    if (!options) {
      options = {};
    }
    return tracingClient.withSpan("BatchSetTierRequest-addSubRequest", options, async (updatedOptions) => {
      this.setBatchType("setAccessTier");
      await this.addSubRequestInternal({
        url: url2,
        credential
      }, async () => {
        await new BlobClient(url2, this.batchRequest.createPipeline(credential)).setAccessTier(tier2, updatedOptions);
      });
    });
  }
}
class InnerBatchRequest {
  constructor() {
    this.operationCount = 0;
    this.body = "";
    const tempGuid = randomUUID();
    this.boundary = `batch_${tempGuid}`;
    this.subRequestPrefix = `--${this.boundary}${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TYPE}: application/http${HTTP_LINE_ENDING}${HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`;
    this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`;
    this.batchRequestEnding = `--${this.boundary}--`;
    this.subRequests = /* @__PURE__ */ new Map();
  }
  /**
   * Create pipeline to assemble sub requests. The idea here is to use existing
   * credential and serialization/deserialization components, with additional policies to
   * filter unnecessary headers, assemble sub requests into request's body
   * and intercept request from going to wire.
   * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
   */
  createPipeline(credential) {
    const corePipeline = createEmptyPipeline();
    corePipeline.addPolicy(serializationPolicy({
      stringifyXML
    }), { phase: "Serialize" });
    corePipeline.addPolicy(batchHeaderFilterPolicy());
    corePipeline.addPolicy(batchRequestAssemblePolicy(this), { afterPhase: "Sign" });
    if (isTokenCredential(credential)) {
      corePipeline.addPolicy(bearerTokenAuthenticationPolicy({
        credential,
        scopes: StorageOAuthScopes,
        challengeCallbacks: { authorizeRequestOnChallenge: authorizeRequestOnTenantChallenge }
      }), { phase: "Sign" });
    } else if (credential instanceof StorageSharedKeyCredential) {
      corePipeline.addPolicy(storageSharedKeyCredentialPolicy({
        accountName: credential.accountName,
        accountKey: credential.accountKey
      }), { phase: "Sign" });
    }
    const pipeline = new Pipeline([]);
    pipeline._credential = credential;
    pipeline._corePipeline = corePipeline;
    return pipeline;
  }
  appendSubRequestToBody(request2) {
    this.body += [
      this.subRequestPrefix,
      // sub request constant prefix
      `${HeaderConstants.CONTENT_ID}: ${this.operationCount}`,
      // sub request's content ID
      "",
      // empty line after sub request's content ID
      `${request2.method.toString()} ${getURLPathAndQuery(request2.url)} ${HTTP_VERSION_1_1}${HTTP_LINE_ENDING}`
      // sub request start line with method
    ].join(HTTP_LINE_ENDING);
    for (const [name, value] of request2.headers) {
      this.body += `${name}: ${value}${HTTP_LINE_ENDING}`;
    }
    this.body += HTTP_LINE_ENDING;
  }
  preAddSubRequest(subRequest) {
    if (this.operationCount >= BATCH_MAX_REQUEST) {
      throw new RangeError(`Cannot exceed ${BATCH_MAX_REQUEST} sub requests in a single batch`);
    }
    const path = getURLPath(subRequest.url);
    if (!path || path === "") {
      throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);
    }
  }
  postAddSubRequest(subRequest) {
    this.subRequests.set(this.operationCount, subRequest);
    this.operationCount++;
  }
  // Return the http request body with assembling the ending line to the sub request body.
  getHttpRequestBody() {
    return `${this.body}${this.batchRequestEnding}${HTTP_LINE_ENDING}`;
  }
  getMultipartContentType() {
    return this.multipartContentType;
  }
  getSubRequests() {
    return this.subRequests;
  }
}
function batchRequestAssemblePolicy(batchRequest) {
  return {
    name: "batchRequestAssemblePolicy",
    async sendRequest(request2) {
      batchRequest.appendSubRequestToBody(request2);
      return {
        request: request2,
        status: 200,
        headers: createHttpHeaders()
      };
    }
  };
}
function batchHeaderFilterPolicy() {
  return {
    name: "batchHeaderFilterPolicy",
    async sendRequest(request2, next) {
      let xMsHeaderName = "";
      for (const [name] of request2.headers) {
        if (iEqual(name, HeaderConstants.X_MS_VERSION)) {
          xMsHeaderName = name;
        }
      }
      if (xMsHeaderName !== "") {
        request2.headers.delete(xMsHeaderName);
      }
      return next(request2);
    }
  };
}
class BlobBatchClient {
  constructor(url2, credentialOrPipeline, options) {
    let pipeline;
    if (isPipelineLike(credentialOrPipeline)) {
      pipeline = credentialOrPipeline;
    } else if (!credentialOrPipeline) {
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else {
      pipeline = newPipeline(credentialOrPipeline, options);
    }
    const storageClientContext = new StorageContextClient(url2, getCoreClientOptions(pipeline));
    const path = getURLPath(url2);
    if (path && path !== "/") {
      this.serviceOrContainerContext = storageClientContext.container;
    } else {
      this.serviceOrContainerContext = storageClientContext.service;
    }
  }
  /**
   * Creates a {@link BlobBatch}.
   * A BlobBatch represents an aggregated set of operations on blobs.
   */
  createBatch() {
    return new BlobBatch();
  }
  async deleteBlobs(urlsOrBlobClients, credentialOrOptions, options) {
    const batch = new BlobBatch();
    for (const urlOrBlobClient of urlsOrBlobClients) {
      if (typeof urlOrBlobClient === "string") {
        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);
      } else {
        await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);
      }
    }
    return this.submitBatch(batch);
  }
  async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, options) {
    const batch = new BlobBatch();
    for (const urlOrBlobClient of urlsOrBlobClients) {
      if (typeof urlOrBlobClient === "string") {
        await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);
      } else {
        await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);
      }
    }
    return this.submitBatch(batch);
  }
  /**
   * Submit batch request which consists of multiple subrequests.
   *
   * Get `blobBatchClient` and other details before running the snippets.
   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`
   *
   * Example usage:
   *
   * ```js
   * let batchRequest = new BlobBatch();
   * await batchRequest.deleteBlob(urlInString0, credential0);
   * await batchRequest.deleteBlob(urlInString1, credential1, {
   *  deleteSnapshots: "include"
   * });
   * const batchResp = await blobBatchClient.submitBatch(batchRequest);
   * console.log(batchResp.subResponsesSucceededCount);
   * ```
   *
   * Example using a lease:
   *
   * ```js
   * let batchRequest = new BlobBatch();
   * await batchRequest.setBlobAccessTier(blockBlobClient0, "Cool");
   * await batchRequest.setBlobAccessTier(blockBlobClient1, "Cool", {
   *  conditions: { leaseId: leaseId }
   * });
   * const batchResp = await blobBatchClient.submitBatch(batchRequest);
   * console.log(batchResp.subResponsesSucceededCount);
   * ```
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/blob-batch
   *
   * @param batchRequest - A set of Delete or SetTier operations.
   * @param options -
   */
  async submitBatch(batchRequest, options = {}) {
    if (!batchRequest || batchRequest.getSubRequests().size === 0) {
      throw new RangeError("Batch request should contain one or more sub requests.");
    }
    return tracingClient.withSpan("BlobBatchClient-submitBatch", options, async (updatedOptions) => {
      const batchRequestBody = batchRequest.getHttpRequestBody();
      const rawBatchResponse = assertResponse(await this.serviceOrContainerContext.submitBatch(utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign({}, updatedOptions)));
      const batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());
      const responseSummary = await batchResponseParser.parseBatchResponse();
      const res = {
        _response: rawBatchResponse._response,
        contentType: rawBatchResponse.contentType,
        errorCode: rawBatchResponse.errorCode,
        requestId: rawBatchResponse.requestId,
        clientRequestId: rawBatchResponse.clientRequestId,
        version: rawBatchResponse.version,
        subResponses: responseSummary.subResponses,
        subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,
        subResponsesFailedCount: responseSummary.subResponsesFailedCount
      };
      return res;
    });
  }
}
class ContainerClient extends StorageClient2 {
  /**
   * The name of the container.
   */
  get containerName() {
    return this._containerName;
  }
  constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, options) {
    let pipeline;
    let url2;
    options = options || {};
    if (isPipelineLike(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = credentialOrPipelineOrContainerName;
    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {
      url2 = urlOrConnectionString;
      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);
    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== "string") {
      url2 = urlOrConnectionString;
      pipeline = newPipeline(new AnonymousCredential(), options);
    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === "string") {
      const containerName = credentialOrPipelineOrContainerName;
      const extractedCreds = extractConnectionStringParts(urlOrConnectionString);
      if (extractedCreds.kind === "AccountConnString") {
        if (isNode) {
          const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
          url2 = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName));
          if (!options.proxyOptions) {
            options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
          }
          pipeline = newPipeline(sharedKeyCredential, options);
        } else {
          throw new Error("Account connection string is only supported in Node.js environment");
        }
      } else if (extractedCreds.kind === "SASConnString") {
        url2 = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)) + "?" + extractedCreds.accountSas;
        pipeline = newPipeline(new AnonymousCredential(), options);
      } else {
        throw new Error("Connection string must be either an Account connection string or a SAS connection string");
      }
    } else {
      throw new Error("Expecting non-empty strings for containerName parameter");
    }
    super(url2, pipeline);
    this._containerName = this.getContainerNameFromUrl();
    this.containerContext = this.storageClientContext.container;
  }
  /**
   * Creates a new container under the specified account. If the container with
   * the same name already exists, the operation fails.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/create-container
   * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
   *
   * @param options - Options to Container Create operation.
   *
   *
   * Example usage:
   *
   * ```js
   * const containerClient = blobServiceClient.getContainerClient("<container name>");
   * const createContainerResponse = await containerClient.create();
   * console.log("Container was created successfully", createContainerResponse.requestId);
   * ```
   */
  async create(options = {}) {
    return tracingClient.withSpan("ContainerClient-create", options, async (updatedOptions) => {
      return assertResponse(await this.containerContext.create(updatedOptions));
    });
  }
  /**
   * Creates a new container under the specified account. If the container with
   * the same name already exists, it is not changed.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/create-container
   * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
   *
   * @param options -
   */
  async createIfNotExists(options = {}) {
    return tracingClient.withSpan("ContainerClient-createIfNotExists", options, async (updatedOptions) => {
      var _a2, _b2;
      try {
        const res = await this.create(updatedOptions);
        return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
      } catch (e2) {
        if (((_a2 = e2.details) === null || _a2 === void 0 ? void 0 : _a2.errorCode) === "ContainerAlreadyExists") {
          return Object.assign(Object.assign({ succeeded: false }, (_b2 = e2.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e2.response });
        } else {
          throw e2;
        }
      }
    });
  }
  /**
   * Returns true if the Azure container resource represented by this client exists; false otherwise.
   *
   * NOTE: use this function with care since an existing container might be deleted by other clients or
   * applications. Vice versa new containers with the same name might be added by other clients or
   * applications after this function completes.
   *
   * @param options -
   */
  async exists(options = {}) {
    return tracingClient.withSpan("ContainerClient-exists", options, async (updatedOptions) => {
      try {
        await this.getProperties({
          abortSignal: options.abortSignal,
          tracingOptions: updatedOptions.tracingOptions
        });
        return true;
      } catch (e2) {
        if (e2.statusCode === 404) {
          return false;
        }
        throw e2;
      }
    });
  }
  /**
   * Creates a {@link BlobClient}
   *
   * @param blobName - A blob name
   * @returns A new BlobClient object for the given blob name.
   */
  getBlobClient(blobName) {
    return new BlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
  }
  /**
   * Creates an {@link AppendBlobClient}
   *
   * @param blobName - An append blob name
   */
  getAppendBlobClient(blobName) {
    return new AppendBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
  }
  /**
   * Creates a {@link BlockBlobClient}
   *
   * @param blobName - A block blob name
   *
   *
   * Example usage:
   *
   * ```js
   * const content = "Hello world!";
   *
   * const blockBlobClient = containerClient.getBlockBlobClient("<blob name>");
   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
   * ```
   */
  getBlockBlobClient(blobName) {
    return new BlockBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
  }
  /**
   * Creates a {@link PageBlobClient}
   *
   * @param blobName - A page blob name
   */
  getPageBlobClient(blobName) {
    return new PageBlobClient(appendToURLPath(this.url, EscapePath(blobName)), this.pipeline);
  }
  /**
   * Returns all user-defined metadata and system properties for the specified
   * container. The data returned does not include the container's list of blobs.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/get-container-properties
   *
   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
   * they originally contained uppercase characters. This differs from the metadata keys returned by
   * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which
   * will retain their original casing.
   *
   * @param options - Options to Container Get Properties operation.
   */
  async getProperties(options = {}) {
    if (!options.conditions) {
      options.conditions = {};
    }
    return tracingClient.withSpan("ContainerClient-getProperties", options, async (updatedOptions) => {
      return assertResponse(await this.containerContext.getProperties(Object.assign(Object.assign({ abortSignal: options.abortSignal }, options.conditions), { tracingOptions: updatedOptions.tracingOptions })));
    });
  }
  /**
   * Marks the specified container for deletion. The container and any blobs
   * contained within it are later deleted during garbage collection.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/delete-container
   *
   * @param options - Options to Container Delete operation.
   */
  async delete(options = {}) {
    if (!options.conditions) {
      options.conditions = {};
    }
    return tracingClient.withSpan("ContainerClient-delete", options, async (updatedOptions) => {
      return assertResponse(await this.containerContext.delete({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: options.conditions,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Marks the specified container for deletion if it exists. The container and any blobs
   * contained within it are later deleted during garbage collection.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/delete-container
   *
   * @param options - Options to Container Delete operation.
   */
  async deleteIfExists(options = {}) {
    return tracingClient.withSpan("ContainerClient-deleteIfExists", options, async (updatedOptions) => {
      var _a2, _b2;
      try {
        const res = await this.delete(updatedOptions);
        return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });
      } catch (e2) {
        if (((_a2 = e2.details) === null || _a2 === void 0 ? void 0 : _a2.errorCode) === "ContainerNotFound") {
          return Object.assign(Object.assign({ succeeded: false }, (_b2 = e2.response) === null || _b2 === void 0 ? void 0 : _b2.parsedHeaders), { _response: e2.response });
        }
        throw e2;
      }
    });
  }
  /**
   * Sets one or more user-defined name-value pairs for the specified container.
   *
   * If no option provided, or no metadata defined in the parameter, the container
   * metadata will be removed.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/set-container-metadata
   *
   * @param metadata - Replace existing metadata with this value.
   *                            If no value provided the existing metadata will be removed.
   * @param options - Options to Container Set Metadata operation.
   */
  async setMetadata(metadata2, options = {}) {
    if (!options.conditions) {
      options.conditions = {};
    }
    if (options.conditions.ifUnmodifiedSince) {
      throw new RangeError("the IfUnmodifiedSince must have their default values because they are ignored by the blob service");
    }
    return tracingClient.withSpan("ContainerClient-setMetadata", options, async (updatedOptions) => {
      return assertResponse(await this.containerContext.setMetadata({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        metadata: metadata2,
        modifiedAccessConditions: options.conditions,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Gets the permissions for the specified container. The permissions indicate
   * whether container data may be accessed publicly.
   *
   * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.
   * For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will get "2018-12-31T03:44:23.882Z".
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/get-container-acl
   *
   * @param options - Options to Container Get Access Policy operation.
   */
  async getAccessPolicy(options = {}) {
    if (!options.conditions) {
      options.conditions = {};
    }
    return tracingClient.withSpan("ContainerClient-getAccessPolicy", options, async (updatedOptions) => {
      const response = assertResponse(await this.containerContext.getAccessPolicy({
        abortSignal: options.abortSignal,
        leaseAccessConditions: options.conditions,
        tracingOptions: updatedOptions.tracingOptions
      }));
      const res = {
        _response: response._response,
        blobPublicAccess: response.blobPublicAccess,
        date: response.date,
        etag: response.etag,
        errorCode: response.errorCode,
        lastModified: response.lastModified,
        requestId: response.requestId,
        clientRequestId: response.clientRequestId,
        signedIdentifiers: [],
        version: response.version
      };
      for (const identifier of response) {
        let accessPolicy = void 0;
        if (identifier.accessPolicy) {
          accessPolicy = {
            permissions: identifier.accessPolicy.permissions
          };
          if (identifier.accessPolicy.expiresOn) {
            accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);
          }
          if (identifier.accessPolicy.startsOn) {
            accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);
          }
        }
        res.signedIdentifiers.push({
          accessPolicy,
          id: identifier.id
        });
      }
      return res;
    });
  }
  /**
   * Sets the permissions for the specified container. The permissions indicate
   * whether blobs in a container may be accessed publicly.
   *
   * When you set permissions for a container, the existing permissions are replaced.
   * If no access or containerAcl provided, the existing container ACL will be
   * removed.
   *
   * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.
   * During this interval, a shared access signature that is associated with the stored access policy will
   * fail with status code 403 (Forbidden), until the access policy becomes active.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/set-container-acl
   *
   * @param access - The level of public access to data in the container.
   * @param containerAcl - Array of elements each having a unique Id and details of the access policy.
   * @param options - Options to Container Set Access Policy operation.
   */
  async setAccessPolicy(access2, containerAcl2, options = {}) {
    options.conditions = options.conditions || {};
    return tracingClient.withSpan("ContainerClient-setAccessPolicy", options, async (updatedOptions) => {
      const acl = [];
      for (const identifier of containerAcl2 || []) {
        acl.push({
          accessPolicy: {
            expiresOn: identifier.accessPolicy.expiresOn ? truncatedISO8061Date(identifier.accessPolicy.expiresOn) : "",
            permissions: identifier.accessPolicy.permissions,
            startsOn: identifier.accessPolicy.startsOn ? truncatedISO8061Date(identifier.accessPolicy.startsOn) : ""
          },
          id: identifier.id
        });
      }
      return assertResponse(await this.containerContext.setAccessPolicy({
        abortSignal: options.abortSignal,
        access: access2,
        containerAcl: acl,
        leaseAccessConditions: options.conditions,
        modifiedAccessConditions: options.conditions,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Get a {@link BlobLeaseClient} that manages leases on the container.
   *
   * @param proposeLeaseId - Initial proposed lease Id.
   * @returns A new BlobLeaseClient object for managing leases on the container.
   */
  getBlobLeaseClient(proposeLeaseId) {
    return new BlobLeaseClient(this, proposeLeaseId);
  }
  /**
   * Creates a new block blob, or updates the content of an existing block blob.
   *
   * Updating an existing block blob overwrites any existing metadata on the blob.
   * Partial updates are not supported; the content of the existing blob is
   * overwritten with the new content. To perform a partial update of a block blob's,
   * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.
   *
   * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},
   * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better
   * performance with concurrency uploading.
   *
   * @see https://learn.microsoft.com/rest/api/storageservices/put-blob
   *
   * @param blobName - Name of the block blob to create or update.
   * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function
   *                               which returns a new Readable stream whose offset is from data source beginning.
   * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
   *                               string including non non-Base64/Hex-encoded characters.
   * @param options - Options to configure the Block Blob Upload operation.
   * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.
   */
  async uploadBlockBlob(blobName, body2, contentLength2, options = {}) {
    return tracingClient.withSpan("ContainerClient-uploadBlockBlob", options, async (updatedOptions) => {
      const blockBlobClient = this.getBlockBlobClient(blobName);
      const response = await blockBlobClient.upload(body2, contentLength2, updatedOptions);
      return {
        blockBlobClient,
        response
      };
    });
  }
  /**
   * Marks the specified blob or snapshot for deletion. The blob is later deleted
   * during garbage collection. Note that in order to delete a blob, you must delete
   * all of its snapshots. You can delete both at the same time with the Delete
   * Blob operation.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/delete-blob
   *
   * @param blobName -
   * @param options - Options to Blob Delete operation.
   * @returns Block blob deletion response data.
   */
  async deleteBlob(blobName, options = {}) {
    return tracingClient.withSpan("ContainerClient-deleteBlob", options, async (updatedOptions) => {
      let blobClient = this.getBlobClient(blobName);
      if (options.versionId) {
        blobClient = blobClient.withVersion(options.versionId);
      }
      return blobClient.delete(updatedOptions);
    });
  }
  /**
   * listBlobFlatSegment returns a single segment of blobs starting from the
   * specified Marker. Use an empty Marker to start enumeration from the beginning.
   * After getting a segment, process it, and then call listBlobsFlatSegment again
   * (passing the the previously-returned Marker) to get the next segment.
   * @see https://learn.microsoft.com/rest/api/storageservices/list-blobs
   *
   * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
   * @param options - Options to Container List Blob Flat Segment operation.
   */
  async listBlobFlatSegment(marker2, options = {}) {
    return tracingClient.withSpan("ContainerClient-listBlobFlatSegment", options, async (updatedOptions) => {
      const response = assertResponse(await this.containerContext.listBlobFlatSegment(Object.assign(Object.assign({ marker: marker2 }, options), { tracingOptions: updatedOptions.tracingOptions })));
      const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: ConvertInternalResponseOfListBlobFlat(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {
        const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: BlobNameToString(blobItemInternal.name), tags: toTags(blobItemInternal.blobTags), objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInternal.objectReplicationMetadata) });
        return blobItem;
      }) }) });
      return wrappedResponse;
    });
  }
  /**
   * listBlobHierarchySegment returns a single segment of blobs starting from
   * the specified Marker. Use an empty Marker to start enumeration from the
   * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment
   * again (passing the the previously-returned Marker) to get the next segment.
   * @see https://learn.microsoft.com/rest/api/storageservices/list-blobs
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.
   * @param options - Options to Container List Blob Hierarchy Segment operation.
   */
  async listBlobHierarchySegment(delimiter2, marker2, options = {}) {
    return tracingClient.withSpan("ContainerClient-listBlobHierarchySegment", options, async (updatedOptions) => {
      var _a2;
      const response = assertResponse(await this.containerContext.listBlobHierarchySegment(delimiter2, Object.assign(Object.assign({ marker: marker2 }, options), { tracingOptions: updatedOptions.tracingOptions })));
      const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: ConvertInternalResponseOfListBlobHierarchy(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {
        const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: BlobNameToString(blobItemInternal.name), tags: toTags(blobItemInternal.blobTags), objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInternal.objectReplicationMetadata) });
        return blobItem;
      }), blobPrefixes: (_a2 = response.segment.blobPrefixes) === null || _a2 === void 0 ? void 0 : _a2.map((blobPrefixInternal) => {
        const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });
        return blobPrefix;
      }) }) });
      return wrappedResponse;
    });
  }
  /**
   * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse
   *
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the ContinuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The ContinuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to list blobs operation.
   */
  listSegments(marker_1) {
    return __asyncGenerator(this, arguments, function* listSegments_1(marker2, options = {}) {
      let listBlobsFlatSegmentResponse;
      if (!!marker2 || marker2 === void 0) {
        do {
          listBlobsFlatSegmentResponse = yield __await(this.listBlobFlatSegment(marker2, options));
          marker2 = listBlobsFlatSegmentResponse.continuationToken;
          yield yield __await(yield __await(listBlobsFlatSegmentResponse));
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator of {@link BlobItem} objects
   *
   * @param options - Options to list blobs operation.
   */
  listItems() {
    return __asyncGenerator(this, arguments, function* listItems_1(options = {}) {
      var _a2, e_1, _b2, _c2;
      let marker2;
      try {
        for (var _d2 = true, _e = __asyncValues(this.listSegments(marker2, options)), _f; _f = yield __await(_e.next()), _a2 = _f.done, !_a2; _d2 = true) {
          _c2 = _f.value;
          _d2 = false;
          const listBlobsFlatSegmentResponse = _c2;
          yield __await(yield* __asyncDelegator(__asyncValues(listBlobsFlatSegmentResponse.segment.blobItems)));
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (!_d2 && !_a2 && (_b2 = _e.return)) yield __await(_b2.call(_e));
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to list all the blobs
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the blobs in pages.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * // Get the containerClient before you run these snippets,
   * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>");`
   * let i = 1;
   * for await (const blob of containerClient.listBlobsFlat()) {
   *   console.log(`Blob ${i++}: ${blob.name}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * let iter = containerClient.listBlobsFlat();
   * let blobItem = await iter.next();
   * while (!blobItem.done) {
   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
   *   blobItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {
   *   for (const blob of response.segment.blobItems) {
   *     console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 blob names
   * for (const blob of response.segment.blobItems) {
   *   console.log(`Blob ${i++}: ${blob.name}`);
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   *
   * // Passing next marker as continuationToken
   *
   * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints 10 blob names
   * for (const blob of response.segment.blobItems) {
   *   console.log(`Blob ${i++}: ${blob.name}`);
   * }
   * ```
   *
   * @param options - Options to list blobs.
   * @returns An asyncIterableIterator that supports paging.
   */
  listBlobsFlat(options = {}) {
    const include2 = [];
    if (options.includeCopy) {
      include2.push("copy");
    }
    if (options.includeDeleted) {
      include2.push("deleted");
    }
    if (options.includeMetadata) {
      include2.push("metadata");
    }
    if (options.includeSnapshots) {
      include2.push("snapshots");
    }
    if (options.includeVersions) {
      include2.push("versions");
    }
    if (options.includeUncommitedBlobs) {
      include2.push("uncommittedblobs");
    }
    if (options.includeTags) {
      include2.push("tags");
    }
    if (options.includeDeletedWithVersions) {
      include2.push("deletedwithversions");
    }
    if (options.includeImmutabilityPolicy) {
      include2.push("immutabilitypolicy");
    }
    if (options.includeLegalHold) {
      include2.push("legalhold");
    }
    if (options.prefix === "") {
      options.prefix = void 0;
    }
    const updatedOptions = Object.assign(Object.assign({}, options), include2.length > 0 ? { include: include2 } : {});
    const iter = this.listItems(updatedOptions);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));
      }
    };
  }
  /**
   * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the ContinuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The ContinuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to list blobs operation.
   */
  listHierarchySegments(delimiter_1, marker_1) {
    return __asyncGenerator(this, arguments, function* listHierarchySegments_1(delimiter2, marker2, options = {}) {
      let listBlobsHierarchySegmentResponse;
      if (!!marker2 || marker2 === void 0) {
        do {
          listBlobsHierarchySegmentResponse = yield __await(this.listBlobHierarchySegment(delimiter2, marker2, options));
          marker2 = listBlobsHierarchySegmentResponse.continuationToken;
          yield yield __await(yield __await(listBlobsHierarchySegmentResponse));
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param options - Options to list blobs operation.
   */
  listItemsByHierarchy(delimiter_1) {
    return __asyncGenerator(this, arguments, function* listItemsByHierarchy_1(delimiter2, options = {}) {
      var _a2, e_2, _b2, _c2;
      let marker2;
      try {
        for (var _d2 = true, _e = __asyncValues(this.listHierarchySegments(delimiter2, marker2, options)), _f; _f = yield __await(_e.next()), _a2 = _f.done, !_a2; _d2 = true) {
          _c2 = _f.value;
          _d2 = false;
          const listBlobsHierarchySegmentResponse = _c2;
          const segment = listBlobsHierarchySegmentResponse.segment;
          if (segment.blobPrefixes) {
            for (const prefix2 of segment.blobPrefixes) {
              yield yield __await(Object.assign({ kind: "prefix" }, prefix2));
            }
          }
          for (const blob of segment.blobItems) {
            yield yield __await(Object.assign({ kind: "blob" }, blob));
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (!_d2 && !_a2 && (_b2 = _e.return)) yield __await(_b2.call(_e));
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to list all the blobs by hierarchy.
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * for await (const item of containerClient.listBlobsByHierarchy("/")) {
   *   if (item.kind === "prefix") {
   *     console.log(`\tBlobPrefix: ${item.name}`);
   *   } else {
   *     console.log(`\tBlobItem: name - ${item.name}`);
   *   }
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let iter = containerClient.listBlobsByHierarchy("/", { prefix: "prefix1/" });
   * let entity = await iter.next();
   * while (!entity.done) {
   *   let item = entity.value;
   *   if (item.kind === "prefix") {
   *     console.log(`\tBlobPrefix: ${item.name}`);
   *   } else {
   *     console.log(`\tBlobItem: name - ${item.name}`);
   *   }
   *   entity = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * console.log("Listing blobs by hierarchy by page");
   * for await (const response of containerClient.listBlobsByHierarchy("/").byPage()) {
   *   const segment = response.segment;
   *   if (segment.blobPrefixes) {
   *     for (const prefix of segment.blobPrefixes) {
   *       console.log(`\tBlobPrefix: ${prefix.name}`);
   *     }
   *   }
   *   for (const blob of response.segment.blobItems) {
   *     console.log(`\tBlobItem: name - ${blob.name}`);
   *   }
   * }
   * ```
   *
   * Example using paging with a max page size:
   *
   * ```js
   * console.log("Listing blobs by hierarchy by page, specifying a prefix and a max page size");
   *
   * let i = 1;
   * for await (const response of containerClient
   *   .listBlobsByHierarchy("/", { prefix: "prefix2/sub1/" })
   *   .byPage({ maxPageSize: 2 })) {
   *   console.log(`Page ${i++}`);
   *   const segment = response.segment;
   *
   *   if (segment.blobPrefixes) {
   *     for (const prefix of segment.blobPrefixes) {
   *       console.log(`\tBlobPrefix: ${prefix.name}`);
   *     }
   *   }
   *
   *   for (const blob of response.segment.blobItems) {
   *     console.log(`\tBlobItem: name - ${blob.name}`);
   *   }
   * }
   * ```
   *
   * @param delimiter - The character or string used to define the virtual hierarchy
   * @param options - Options to list blobs operation.
   */
  listBlobsByHierarchy(delimiter2, options = {}) {
    if (delimiter2 === "") {
      throw new RangeError("delimiter should contain one or more characters");
    }
    const include2 = [];
    if (options.includeCopy) {
      include2.push("copy");
    }
    if (options.includeDeleted) {
      include2.push("deleted");
    }
    if (options.includeMetadata) {
      include2.push("metadata");
    }
    if (options.includeSnapshots) {
      include2.push("snapshots");
    }
    if (options.includeVersions) {
      include2.push("versions");
    }
    if (options.includeUncommitedBlobs) {
      include2.push("uncommittedblobs");
    }
    if (options.includeTags) {
      include2.push("tags");
    }
    if (options.includeDeletedWithVersions) {
      include2.push("deletedwithversions");
    }
    if (options.includeImmutabilityPolicy) {
      include2.push("immutabilitypolicy");
    }
    if (options.includeLegalHold) {
      include2.push("legalhold");
    }
    if (options.prefix === "") {
      options.prefix = void 0;
    }
    const updatedOptions = Object.assign(Object.assign({}, options), include2.length > 0 ? { include: include2 } : {});
    const iter = this.listItemsByHierarchy(delimiter2, updatedOptions);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      async next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.listHierarchySegments(delimiter2, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));
      }
    };
  }
  /**
   * The Filter Blobs operation enables callers to list blobs in the container whose tags
   * match a given search expression.
   *
   * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                        The given expression must evaluate to true for a blob to be returned in the results.
   *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the continuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The continuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to find blobs by tags.
   */
  async findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options = {}) {
    return tracingClient.withSpan("ContainerClient-findBlobsByTagsSegment", options, async (updatedOptions) => {
      const response = assertResponse(await this.containerContext.filterBlobs({
        abortSignal: options.abortSignal,
        where: tagFilterSqlExpression,
        marker: marker2,
        maxPageSize: options.maxPageSize,
        tracingOptions: updatedOptions.tracingOptions
      }));
      const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {
        var _a2;
        let tagValue = "";
        if (((_a2 = blob.tags) === null || _a2 === void 0 ? void 0 : _a2.blobTagSet.length) === 1) {
          tagValue = blob.tags.blobTagSet[0].value;
        }
        return Object.assign(Object.assign({}, blob), { tags: toTags(blob.tags), tagValue });
      }) });
      return wrappedResponse;
    });
  }
  /**
   * Returns an AsyncIterableIterator for ContainerFindBlobsByTagsSegmentResponse.
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the continuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The continuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to find blobs by tags.
   */
  findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {
    return __asyncGenerator(this, arguments, function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker2, options = {}) {
      let response;
      if (!!marker2 || marker2 === void 0) {
        do {
          response = yield __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options));
          response.blobs = response.blobs || [];
          marker2 = response.continuationToken;
          yield yield __await(response);
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator for blobs.
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param options - Options to findBlobsByTagsItems.
   */
  findBlobsByTagsItems(tagFilterSqlExpression_1) {
    return __asyncGenerator(this, arguments, function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {
      var _a2, e_3, _b2, _c2;
      let marker2;
      try {
        for (var _d2 = true, _e = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker2, options)), _f; _f = yield __await(_e.next()), _a2 = _f.done, !_a2; _d2 = true) {
          _c2 = _f.value;
          _d2 = false;
          const segment = _c2;
          yield __await(yield* __asyncDelegator(__asyncValues(segment.blobs)));
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (!_d2 && !_a2 && (_b2 = _e.return)) yield __await(_b2.call(_e));
        } finally {
          if (e_3) throw e_3.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to find all blobs with specified tag
   * under the specified container.
   *
   * .byPage() returns an async iterable iterator to list the blobs in pages.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * let i = 1;
   * for await (const blob of containerClient.findBlobsByTags("tagkey='tagvalue'")) {
   *   console.log(`Blob ${i++}: ${blob.name}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * const iter = containerClient.findBlobsByTags("tagkey='tagvalue'");
   * let blobItem = await iter.next();
   * while (!blobItem.done) {
   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
   *   blobItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
   *   if (response.blobs) {
   *     for (const blob of response.blobs) {
   *       console.log(`Blob ${i++}: ${blob.name}`);
   *     }
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = containerClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 blob names
   * if (response.blobs) {
   *   for (const blob of response.blobs) {
   *     console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   * // Passing next marker as continuationToken
   * iterator = containerClient
   *   .findBlobsByTags("tagkey='tagvalue'")
   *   .byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints blob names
   * if (response.blobs) {
   *   for (const blob of response.blobs) {
   *      console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   * ```
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param options - Options to find blobs by tags.
   */
  findBlobsByTags(tagFilterSqlExpression, options = {}) {
    const listSegmentOptions = Object.assign({}, options);
    const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));
      }
    };
  }
  /**
   * The Get Account Information operation returns the sku name and account kind
   * for the specified account.
   * The Get Account Information operation is available on service versions beginning
   * with version 2018-03-28.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/get-account-information
   *
   * @param options - Options to the Service Get Account Info operation.
   * @returns Response data for the Service Get Account Info operation.
   */
  async getAccountInfo(options = {}) {
    return tracingClient.withSpan("ContainerClient-getAccountInfo", options, async (updatedOptions) => {
      return assertResponse(await this.containerContext.getAccountInfo({
        abortSignal: options.abortSignal,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  getContainerNameFromUrl() {
    let containerName;
    try {
      const parsedUrl = new URL(this.url);
      if (parsedUrl.hostname.split(".")[1] === "blob") {
        containerName = parsedUrl.pathname.split("/")[1];
      } else if (isIpEndpointStyle(parsedUrl)) {
        containerName = parsedUrl.pathname.split("/")[2];
      } else {
        containerName = parsedUrl.pathname.split("/")[1];
      }
      containerName = decodeURIComponent(containerName);
      if (!containerName) {
        throw new Error("Provided containerName is invalid.");
      }
      return containerName;
    } catch (error) {
      throw new Error("Unable to extract containerName with provided information.");
    }
  }
  /**
   * Only available for ContainerClient constructed with a shared key credential.
   *
   * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties
   * and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  generateSasUrl(options) {
    return new Promise((resolve) => {
      if (!(this.credential instanceof StorageSharedKeyCredential)) {
        throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
      }
      const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName }, options), this.credential).toString();
      resolve(appendToURLQuery(this.url, sas));
    });
  }
  /**
   * Only available for ContainerClient constructed with a shared key credential.
   *
   * Generates string to sign for a Blob Container Service Shared Access Signature (SAS) URI
   * based on the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/
  generateSasStringToSign(options) {
    if (!(this.credential instanceof StorageSharedKeyCredential)) {
      throw new RangeError("Can only generate the SAS when the client is initialized with a shared key credential");
    }
    return generateBlobSASQueryParametersInternal(Object.assign({ containerName: this._containerName }, options), this.credential).stringToSign;
  }
  /**
   * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties
   * and parameters passed in. The SAS is signed by the input user delegation key.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  generateUserDelegationSasUrl(options, userDelegationKey) {
    return new Promise((resolve) => {
      const sas = generateBlobSASQueryParameters(Object.assign({ containerName: this._containerName }, options), userDelegationKey, this.accountName).toString();
      resolve(appendToURLQuery(this.url, sas));
    });
  }
  /**
   * Generates string to sign for a Blob Container Service Shared Access Signature (SAS) URI
   * based on the client properties and parameters passed in. The SAS is signed by the input user delegation key.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas
   *
   * @param options - Optional parameters.
   * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`
   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  generateUserDelegationSasStringToSign(options, userDelegationKey) {
    return generateBlobSASQueryParametersInternal(Object.assign({ containerName: this._containerName }, options), userDelegationKey, this.accountName).stringToSign;
  }
  /**
   * Creates a BlobBatchClient object to conduct batch operations.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/blob-batch
   *
   * @returns A new BlobBatchClient object for this container.
   */
  getBlobBatchClient() {
    return new BlobBatchClient(this.url, this.pipeline);
  }
}
class AccountSASPermissions {
  constructor() {
    this.read = false;
    this.write = false;
    this.delete = false;
    this.deleteVersion = false;
    this.list = false;
    this.add = false;
    this.create = false;
    this.update = false;
    this.process = false;
    this.tag = false;
    this.filter = false;
    this.setImmutabilityPolicy = false;
    this.permanentDelete = false;
  }
  /**
   * Parse initializes the AccountSASPermissions fields from a string.
   *
   * @param permissions -
   */
  static parse(permissions) {
    const accountSASPermissions = new AccountSASPermissions();
    for (const c of permissions) {
      switch (c) {
        case "r":
          accountSASPermissions.read = true;
          break;
        case "w":
          accountSASPermissions.write = true;
          break;
        case "d":
          accountSASPermissions.delete = true;
          break;
        case "x":
          accountSASPermissions.deleteVersion = true;
          break;
        case "l":
          accountSASPermissions.list = true;
          break;
        case "a":
          accountSASPermissions.add = true;
          break;
        case "c":
          accountSASPermissions.create = true;
          break;
        case "u":
          accountSASPermissions.update = true;
          break;
        case "p":
          accountSASPermissions.process = true;
          break;
        case "t":
          accountSASPermissions.tag = true;
          break;
        case "f":
          accountSASPermissions.filter = true;
          break;
        case "i":
          accountSASPermissions.setImmutabilityPolicy = true;
          break;
        case "y":
          accountSASPermissions.permanentDelete = true;
          break;
        default:
          throw new RangeError(`Invalid permission character: ${c}`);
      }
    }
    return accountSASPermissions;
  }
  /**
   * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it
   * and boolean values for them.
   *
   * @param permissionLike -
   */
  static from(permissionLike) {
    const accountSASPermissions = new AccountSASPermissions();
    if (permissionLike.read) {
      accountSASPermissions.read = true;
    }
    if (permissionLike.write) {
      accountSASPermissions.write = true;
    }
    if (permissionLike.delete) {
      accountSASPermissions.delete = true;
    }
    if (permissionLike.deleteVersion) {
      accountSASPermissions.deleteVersion = true;
    }
    if (permissionLike.filter) {
      accountSASPermissions.filter = true;
    }
    if (permissionLike.tag) {
      accountSASPermissions.tag = true;
    }
    if (permissionLike.list) {
      accountSASPermissions.list = true;
    }
    if (permissionLike.add) {
      accountSASPermissions.add = true;
    }
    if (permissionLike.create) {
      accountSASPermissions.create = true;
    }
    if (permissionLike.update) {
      accountSASPermissions.update = true;
    }
    if (permissionLike.process) {
      accountSASPermissions.process = true;
    }
    if (permissionLike.setImmutabilityPolicy) {
      accountSASPermissions.setImmutabilityPolicy = true;
    }
    if (permissionLike.permanentDelete) {
      accountSASPermissions.permanentDelete = true;
    }
    return accountSASPermissions;
  }
  /**
   * Produces the SAS permissions string for an Azure Storage account.
   * Call this method to set AccountSASSignatureValues Permissions field.
   *
   * Using this method will guarantee the resource types are in
   * an order accepted by the service.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
   *
   */
  toString() {
    const permissions = [];
    if (this.read) {
      permissions.push("r");
    }
    if (this.write) {
      permissions.push("w");
    }
    if (this.delete) {
      permissions.push("d");
    }
    if (this.deleteVersion) {
      permissions.push("x");
    }
    if (this.filter) {
      permissions.push("f");
    }
    if (this.tag) {
      permissions.push("t");
    }
    if (this.list) {
      permissions.push("l");
    }
    if (this.add) {
      permissions.push("a");
    }
    if (this.create) {
      permissions.push("c");
    }
    if (this.update) {
      permissions.push("u");
    }
    if (this.process) {
      permissions.push("p");
    }
    if (this.setImmutabilityPolicy) {
      permissions.push("i");
    }
    if (this.permanentDelete) {
      permissions.push("y");
    }
    return permissions.join("");
  }
}
class AccountSASResourceTypes {
  constructor() {
    this.service = false;
    this.container = false;
    this.object = false;
  }
  /**
   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid resource type.
   *
   * @param resourceTypes -
   */
  static parse(resourceTypes) {
    const accountSASResourceTypes = new AccountSASResourceTypes();
    for (const c of resourceTypes) {
      switch (c) {
        case "s":
          accountSASResourceTypes.service = true;
          break;
        case "c":
          accountSASResourceTypes.container = true;
          break;
        case "o":
          accountSASResourceTypes.object = true;
          break;
        default:
          throw new RangeError(`Invalid resource type: ${c}`);
      }
    }
    return accountSASResourceTypes;
  }
  /**
   * Converts the given resource types to a string.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas
   *
   */
  toString() {
    const resourceTypes = [];
    if (this.service) {
      resourceTypes.push("s");
    }
    if (this.container) {
      resourceTypes.push("c");
    }
    if (this.object) {
      resourceTypes.push("o");
    }
    return resourceTypes.join("");
  }
}
class AccountSASServices {
  constructor() {
    this.blob = false;
    this.file = false;
    this.queue = false;
    this.table = false;
  }
  /**
   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an
   * Error if it encounters a character that does not correspond to a valid service.
   *
   * @param services -
   */
  static parse(services) {
    const accountSASServices = new AccountSASServices();
    for (const c of services) {
      switch (c) {
        case "b":
          accountSASServices.blob = true;
          break;
        case "f":
          accountSASServices.file = true;
          break;
        case "q":
          accountSASServices.queue = true;
          break;
        case "t":
          accountSASServices.table = true;
          break;
        default:
          throw new RangeError(`Invalid service character: ${c}`);
      }
    }
    return accountSASServices;
  }
  /**
   * Converts the given services to a string.
   *
   */
  toString() {
    const services = [];
    if (this.blob) {
      services.push("b");
    }
    if (this.table) {
      services.push("t");
    }
    if (this.queue) {
      services.push("q");
    }
    if (this.file) {
      services.push("f");
    }
    return services.join("");
  }
}
function generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {
  return generateAccountSASQueryParametersInternal(accountSASSignatureValues, sharedKeyCredential).sasQueryParameters;
}
function generateAccountSASQueryParametersInternal(accountSASSignatureValues, sharedKeyCredential) {
  const version2 = accountSASSignatureValues.version ? accountSASSignatureValues.version : SERVICE_VERSION;
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.setImmutabilityPolicy && version2 < "2020-08-04") {
    throw RangeError("'version' must be >= '2020-08-04' when provided 'i' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.deleteVersion && version2 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when provided 'x' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.permanentDelete && version2 < "2019-10-10") {
    throw RangeError("'version' must be >= '2019-10-10' when provided 'y' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.tag && version2 < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when provided 't' permission.");
  }
  if (accountSASSignatureValues.permissions && accountSASSignatureValues.permissions.filter && version2 < "2019-12-12") {
    throw RangeError("'version' must be >= '2019-12-12' when provided 'f' permission.");
  }
  if (accountSASSignatureValues.encryptionScope && version2 < "2020-12-06") {
    throw RangeError("'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.");
  }
  const parsedPermissions = AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());
  const parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString();
  const parsedResourceTypes = AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();
  let stringToSign;
  if (version2 >= "2020-12-06") {
    stringToSign = [
      sharedKeyCredential.accountName,
      parsedPermissions,
      parsedServices,
      parsedResourceTypes,
      accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : "",
      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),
      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : "",
      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "",
      version2,
      accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : "",
      ""
      // Account SAS requires an additional newline character
    ].join("\n");
  } else {
    stringToSign = [
      sharedKeyCredential.accountName,
      parsedPermissions,
      parsedServices,
      parsedResourceTypes,
      accountSASSignatureValues.startsOn ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false) : "",
      truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),
      accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : "",
      accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : "",
      version2,
      ""
      // Account SAS requires an additional newline character
    ].join("\n");
  }
  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);
  return {
    sasQueryParameters: new SASQueryParameters(version2, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, accountSASSignatureValues.encryptionScope),
    stringToSign
  };
}
class BlobServiceClient extends StorageClient2 {
  /**
   *
   * Creates an instance of BlobServiceClient from connection string.
   *
   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.
   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
   *                                  Account connection string example -
   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
   *                                  SAS connection string example -
   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
   * @param options - Optional. Options to configure the HTTP pipeline.
   */
  static fromConnectionString(connectionString, options) {
    options = options || {};
    const extractedCreds = extractConnectionStringParts(connectionString);
    if (extractedCreds.kind === "AccountConnString") {
      if (isNode) {
        const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);
        if (!options.proxyOptions) {
          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);
        }
        const pipeline = newPipeline(sharedKeyCredential, options);
        return new BlobServiceClient(extractedCreds.url, pipeline);
      } else {
        throw new Error("Account connection string is only supported in Node.js environment");
      }
    } else if (extractedCreds.kind === "SASConnString") {
      const pipeline = newPipeline(new AnonymousCredential(), options);
      return new BlobServiceClient(extractedCreds.url + "?" + extractedCreds.accountSas, pipeline);
    } else {
      throw new Error("Connection string must be either an Account connection string or a SAS connection string");
    }
  }
  constructor(url2, credentialOrPipeline, options) {
    let pipeline;
    if (isPipelineLike(credentialOrPipeline)) {
      pipeline = credentialOrPipeline;
    } else if (isNode && credentialOrPipeline instanceof StorageSharedKeyCredential || credentialOrPipeline instanceof AnonymousCredential || isTokenCredential(credentialOrPipeline)) {
      pipeline = newPipeline(credentialOrPipeline, options);
    } else {
      pipeline = newPipeline(new AnonymousCredential(), options);
    }
    super(url2, pipeline);
    this.serviceContext = this.storageClientContext.service;
  }
  /**
   * Creates a {@link ContainerClient} object
   *
   * @param containerName - A container name
   * @returns A new ContainerClient object for the given container name.
   *
   * Example usage:
   *
   * ```js
   * const containerClient = blobServiceClient.getContainerClient("<container name>");
   * ```
   */
  getContainerClient(containerName) {
    return new ContainerClient(appendToURLPath(this.url, encodeURIComponent(containerName)), this.pipeline);
  }
  /**
   * Create a Blob container. @see https://learn.microsoft.com/en-us/rest/api/storageservices/create-container
   *
   * @param containerName - Name of the container to create.
   * @param options - Options to configure Container Create operation.
   * @returns Container creation response and the corresponding container client.
   */
  async createContainer(containerName, options = {}) {
    return tracingClient.withSpan("BlobServiceClient-createContainer", options, async (updatedOptions) => {
      const containerClient = this.getContainerClient(containerName);
      const containerCreateResponse = await containerClient.create(updatedOptions);
      return {
        containerClient,
        containerCreateResponse
      };
    });
  }
  /**
   * Deletes a Blob container.
   *
   * @param containerName - Name of the container to delete.
   * @param options - Options to configure Container Delete operation.
   * @returns Container deletion response.
   */
  async deleteContainer(containerName, options = {}) {
    return tracingClient.withSpan("BlobServiceClient-deleteContainer", options, async (updatedOptions) => {
      const containerClient = this.getContainerClient(containerName);
      return containerClient.delete(updatedOptions);
    });
  }
  /**
   * Restore a previously deleted Blob container.
   * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.
   *
   * @param deletedContainerName - Name of the previously deleted container.
   * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.
   * @param options - Options to configure Container Restore operation.
   * @returns Container deletion response.
   */
  async undeleteContainer(deletedContainerName2, deletedContainerVersion2, options = {}) {
    return tracingClient.withSpan("BlobServiceClient-undeleteContainer", options, async (updatedOptions) => {
      const containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName2);
      const containerContext = containerClient["storageClientContext"].container;
      const containerUndeleteResponse = assertResponse(await containerContext.restore({
        deletedContainerName: deletedContainerName2,
        deletedContainerVersion: deletedContainerVersion2,
        tracingOptions: updatedOptions.tracingOptions
      }));
      return { containerClient, containerUndeleteResponse };
    });
  }
  /**
   * Rename an existing Blob Container.
   *
   * @param sourceContainerName - The name of the source container.
   * @param destinationContainerName - The new name of the container.
   * @param options - Options to configure Container Rename operation.
   */
  /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */
  // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.
  async renameContainer(sourceContainerName2, destinationContainerName, options = {}) {
    return tracingClient.withSpan("BlobServiceClient-renameContainer", options, async (updatedOptions) => {
      var _a2;
      const containerClient = this.getContainerClient(destinationContainerName);
      const containerContext = containerClient["storageClientContext"].container;
      const containerRenameResponse = assertResponse(await containerContext.rename(sourceContainerName2, Object.assign(Object.assign({}, updatedOptions), { sourceLeaseId: (_a2 = options.sourceCondition) === null || _a2 === void 0 ? void 0 : _a2.leaseId })));
      return { containerClient, containerRenameResponse };
    });
  }
  /**
   * Gets the properties of a storage account’s Blob service, including properties
   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
   *
   * @param options - Options to the Service Get Properties operation.
   * @returns Response data for the Service Get Properties operation.
   */
  async getProperties(options = {}) {
    return tracingClient.withSpan("BlobServiceClient-getProperties", options, async (updatedOptions) => {
      return assertResponse(await this.serviceContext.getProperties({
        abortSignal: options.abortSignal,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Sets properties for a storage account’s Blob service endpoint, including properties
   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties
   *
   * @param properties -
   * @param options - Options to the Service Set Properties operation.
   * @returns Response data for the Service Set Properties operation.
   */
  async setProperties(properties, options = {}) {
    return tracingClient.withSpan("BlobServiceClient-setProperties", options, async (updatedOptions) => {
      return assertResponse(await this.serviceContext.setProperties(properties, {
        abortSignal: options.abortSignal,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Retrieves statistics related to replication for the Blob service. It is only
   * available on the secondary location endpoint when read-access geo-redundant
   * replication is enabled for the storage account.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats
   *
   * @param options - Options to the Service Get Statistics operation.
   * @returns Response data for the Service Get Statistics operation.
   */
  async getStatistics(options = {}) {
    return tracingClient.withSpan("BlobServiceClient-getStatistics", options, async (updatedOptions) => {
      return assertResponse(await this.serviceContext.getStatistics({
        abortSignal: options.abortSignal,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * The Get Account Information operation returns the sku name and account kind
   * for the specified account.
   * The Get Account Information operation is available on service versions beginning
   * with version 2018-03-28.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/get-account-information
   *
   * @param options - Options to the Service Get Account Info operation.
   * @returns Response data for the Service Get Account Info operation.
   */
  async getAccountInfo(options = {}) {
    return tracingClient.withSpan("BlobServiceClient-getAccountInfo", options, async (updatedOptions) => {
      return assertResponse(await this.serviceContext.getAccountInfo({
        abortSignal: options.abortSignal,
        tracingOptions: updatedOptions.tracingOptions
      }));
    });
  }
  /**
   * Returns a list of the containers under the specified account.
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/list-containers2
   *
   * @param marker - A string value that identifies the portion of
   *                        the list of containers to be returned with the next listing operation. The
   *                        operation returns the continuationToken value within the response body if the
   *                        listing operation did not return all containers remaining to be listed
   *                        with the current page. The continuationToken value can be used as the value for
   *                        the marker parameter in a subsequent call to request the next page of list
   *                        items. The marker value is opaque to the client.
   * @param options - Options to the Service List Container Segment operation.
   * @returns Response data for the Service List Container Segment operation.
   */
  async listContainersSegment(marker2, options = {}) {
    return tracingClient.withSpan("BlobServiceClient-listContainersSegment", options, async (updatedOptions) => {
      return assertResponse(await this.serviceContext.listContainersSegment(Object.assign(Object.assign({ abortSignal: options.abortSignal, marker: marker2 }, options), { include: typeof options.include === "string" ? [options.include] : options.include, tracingOptions: updatedOptions.tracingOptions })));
    });
  }
  /**
   * The Filter Blobs operation enables callers to list blobs across all containers whose tags
   * match a given search expression. Filter blobs searches across all containers within a
   * storage account but can be scoped within the expression to a single container.
   *
   * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                        The given expression must evaluate to true for a blob to be returned in the results.
   *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the continuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The continuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to find blobs by tags.
   */
  async findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options = {}) {
    return tracingClient.withSpan("BlobServiceClient-findBlobsByTagsSegment", options, async (updatedOptions) => {
      const response = assertResponse(await this.serviceContext.filterBlobs({
        abortSignal: options.abortSignal,
        where: tagFilterSqlExpression,
        marker: marker2,
        maxPageSize: options.maxPageSize,
        tracingOptions: updatedOptions.tracingOptions
      }));
      const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {
        var _a2;
        let tagValue = "";
        if (((_a2 = blob.tags) === null || _a2 === void 0 ? void 0 : _a2.blobTagSet.length) === 1) {
          tagValue = blob.tags.blobTagSet[0].value;
        }
        return Object.assign(Object.assign({}, blob), { tags: toTags(blob.tags), tagValue });
      }) });
      return wrappedResponse;
    });
  }
  /**
   * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param marker - A string value that identifies the portion of
   *                          the list of blobs to be returned with the next listing operation. The
   *                          operation returns the continuationToken value within the response body if the
   *                          listing operation did not return all blobs remaining to be listed
   *                          with the current page. The continuationToken value can be used as the value for
   *                          the marker parameter in a subsequent call to request the next page of list
   *                          items. The marker value is opaque to the client.
   * @param options - Options to find blobs by tags.
   */
  findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {
    return __asyncGenerator(this, arguments, function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker2, options = {}) {
      let response;
      if (!!marker2 || marker2 === void 0) {
        do {
          response = yield __await(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker2, options));
          response.blobs = response.blobs || [];
          marker2 = response.continuationToken;
          yield yield __await(response);
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator for blobs.
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param options - Options to findBlobsByTagsItems.
   */
  findBlobsByTagsItems(tagFilterSqlExpression_1) {
    return __asyncGenerator(this, arguments, function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {
      var _a2, e_1, _b2, _c2;
      let marker2;
      try {
        for (var _d2 = true, _e = __asyncValues(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker2, options)), _f; _f = yield __await(_e.next()), _a2 = _f.done, !_a2; _d2 = true) {
          _c2 = _f.value;
          _d2 = false;
          const segment = _c2;
          yield __await(yield* __asyncDelegator(__asyncValues(segment.blobs)));
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (!_d2 && !_a2 && (_b2 = _e.return)) yield __await(_b2.call(_e));
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to find all blobs with specified tag
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the blobs in pages.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
   *
   * Example using `for await` syntax:
   *
   * ```js
   * let i = 1;
   * for await (const blob of blobServiceClient.findBlobsByTags("tagkey='tagvalue'")) {
   *   console.log(`Blob ${i++}: ${container.name}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * const iter = blobServiceClient.findBlobsByTags("tagkey='tagvalue'");
   * let blobItem = await iter.next();
   * while (!blobItem.done) {
   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
   *   blobItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
   *   if (response.blobs) {
   *     for (const blob of response.blobs) {
   *       console.log(`Blob ${i++}: ${blob.name}`);
   *     }
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 blob names
   * if (response.blobs) {
   *   for (const blob of response.blobs) {
   *     console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   * // Passing next marker as continuationToken
   * iterator = blobServiceClient
   *   .findBlobsByTags("tagkey='tagvalue'")
   *   .byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints blob names
   * if (response.blobs) {
   *   for (const blob of response.blobs) {
   *      console.log(`Blob ${i++}: ${blob.name}`);
   *   }
   * }
   * ```
   *
   * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.
   *                                         The given expression must evaluate to true for a blob to be returned in the results.
   *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
   *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
   * @param options - Options to find blobs by tags.
   */
  findBlobsByTags(tagFilterSqlExpression, options = {}) {
    const listSegmentOptions = Object.assign({}, options);
    const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));
      }
    };
  }
  /**
   * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses
   *
   * @param marker - A string value that identifies the portion of
   *                        the list of containers to be returned with the next listing operation. The
   *                        operation returns the continuationToken value within the response body if the
   *                        listing operation did not return all containers remaining to be listed
   *                        with the current page. The continuationToken value can be used as the value for
   *                        the marker parameter in a subsequent call to request the next page of list
   *                        items. The marker value is opaque to the client.
   * @param options - Options to list containers operation.
   */
  listSegments(marker_1) {
    return __asyncGenerator(this, arguments, function* listSegments_1(marker2, options = {}) {
      let listContainersSegmentResponse;
      if (!!marker2 || marker2 === void 0) {
        do {
          listContainersSegmentResponse = yield __await(this.listContainersSegment(marker2, options));
          listContainersSegmentResponse.containerItems = listContainersSegmentResponse.containerItems || [];
          marker2 = listContainersSegmentResponse.continuationToken;
          yield yield __await(yield __await(listContainersSegmentResponse));
        } while (marker2);
      }
    });
  }
  /**
   * Returns an AsyncIterableIterator for Container Items
   *
   * @param options - Options to list containers operation.
   */
  listItems() {
    return __asyncGenerator(this, arguments, function* listItems_1(options = {}) {
      var _a2, e_2, _b2, _c2;
      let marker2;
      try {
        for (var _d2 = true, _e = __asyncValues(this.listSegments(marker2, options)), _f; _f = yield __await(_e.next()), _a2 = _f.done, !_a2; _d2 = true) {
          _c2 = _f.value;
          _d2 = false;
          const segment = _c2;
          yield __await(yield* __asyncDelegator(__asyncValues(segment.containerItems)));
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (!_d2 && !_a2 && (_b2 = _e.return)) yield __await(_b2.call(_e));
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    });
  }
  /**
   * Returns an async iterable iterator to list all the containers
   * under the specified account.
   *
   * .byPage() returns an async iterable iterator to list the containers in pages.
   *
   * Example using `for await` syntax:
   *
   * ```js
   * let i = 1;
   * for await (const container of blobServiceClient.listContainers()) {
   *   console.log(`Container ${i++}: ${container.name}`);
   * }
   * ```
   *
   * Example using `iter.next()`:
   *
   * ```js
   * let i = 1;
   * const iter = blobServiceClient.listContainers();
   * let containerItem = await iter.next();
   * while (!containerItem.done) {
   *   console.log(`Container ${i++}: ${containerItem.value.name}`);
   *   containerItem = await iter.next();
   * }
   * ```
   *
   * Example using `byPage()`:
   *
   * ```js
   * // passing optional maxPageSize in the page settings
   * let i = 1;
   * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {
   *   if (response.containerItems) {
   *     for (const container of response.containerItems) {
   *       console.log(`Container ${i++}: ${container.name}`);
   *     }
   *   }
   * }
   * ```
   *
   * Example using paging with a marker:
   *
   * ```js
   * let i = 1;
   * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });
   * let response = (await iterator.next()).value;
   *
   * // Prints 2 container names
   * if (response.containerItems) {
   *   for (const container of response.containerItems) {
   *     console.log(`Container ${i++}: ${container.name}`);
   *   }
   * }
   *
   * // Gets next marker
   * let marker = response.continuationToken;
   * // Passing next marker as continuationToken
   * iterator = blobServiceClient
   *   .listContainers()
   *   .byPage({ continuationToken: marker, maxPageSize: 10 });
   * response = (await iterator.next()).value;
   *
   * // Prints 10 container names
   * if (response.containerItems) {
   *   for (const container of response.containerItems) {
   *      console.log(`Container ${i++}: ${container.name}`);
   *   }
   * }
   * ```
   *
   * @param options - Options to list containers.
   * @returns An asyncIterableIterator that supports paging.
   */
  listContainers(options = {}) {
    if (options.prefix === "") {
      options.prefix = void 0;
    }
    const include2 = [];
    if (options.includeDeleted) {
      include2.push("deleted");
    }
    if (options.includeMetadata) {
      include2.push("metadata");
    }
    if (options.includeSystem) {
      include2.push("system");
    }
    const listSegmentOptions = Object.assign(Object.assign({}, options), include2.length > 0 ? { include: include2 } : {});
    const iter = this.listItems(listSegmentOptions);
    return {
      /**
       * The next method, part of the iteration protocol
       */
      next() {
        return iter.next();
      },
      /**
       * The connection to the async iterator, part of the iteration protocol
       */
      [Symbol.asyncIterator]() {
        return this;
      },
      /**
       * Return an AsyncIterableIterator that works a page at a time
       */
      byPage: (settings = {}) => {
        return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));
      }
    };
  }
  /**
   * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).
   *
   * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
   * bearer token authentication.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key
   *
   * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time
   * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time
   */
  async getUserDelegationKey(startsOn, expiresOn2, options = {}) {
    return tracingClient.withSpan("BlobServiceClient-getUserDelegationKey", options, async (updatedOptions) => {
      const response = assertResponse(await this.serviceContext.getUserDelegationKey({
        startsOn: truncatedISO8061Date(startsOn, false),
        expiresOn: truncatedISO8061Date(expiresOn2, false)
      }, {
        abortSignal: options.abortSignal,
        tracingOptions: updatedOptions.tracingOptions
      }));
      const userDelegationKey = {
        signedObjectId: response.signedObjectId,
        signedTenantId: response.signedTenantId,
        signedStartsOn: new Date(response.signedStartsOn),
        signedExpiresOn: new Date(response.signedExpiresOn),
        signedService: response.signedService,
        signedVersion: response.signedVersion,
        value: response.value
      };
      const res = Object.assign({ _response: response._response, requestId: response.requestId, clientRequestId: response.clientRequestId, version: response.version, date: response.date, errorCode: response.errorCode }, userDelegationKey);
      return res;
    });
  }
  /**
   * Creates a BlobBatchClient object to conduct batch operations.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/blob-batch
   *
   * @returns A new BlobBatchClient object for this service.
   */
  getBlobBatchClient() {
    return new BlobBatchClient(this.url, this.pipeline);
  }
  /**
   * Only available for BlobServiceClient constructed with a shared key credential.
   *
   * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties
   * and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/create-account-sas
   *
   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.
   * @param permissions - Specifies the list of permissions to be associated with the SAS.
   * @param resourceTypes - Specifies the resource types associated with the shared access signature.
   * @param options - Optional parameters.
   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  generateAccountSasUrl(expiresOn2, permissions = AccountSASPermissions.parse("r"), resourceTypes = "sco", options = {}) {
    if (!(this.credential instanceof StorageSharedKeyCredential)) {
      throw RangeError("Can only generate the account SAS when the client is initialized with a shared key credential");
    }
    if (expiresOn2 === void 0) {
      const now = /* @__PURE__ */ new Date();
      expiresOn2 = new Date(now.getTime() + 3600 * 1e3);
    }
    const sas = generateAccountSASQueryParameters(Object.assign({
      permissions,
      expiresOn: expiresOn2,
      resourceTypes,
      services: AccountSASServices.parse("b").toString()
    }, options), this.credential).toString();
    return appendToURLQuery(this.url, sas);
  }
  /**
   * Only available for BlobServiceClient constructed with a shared key credential.
   *
   * Generates string to sign for a Blob account Shared Access Signature (SAS) URI based on
   * the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.
   *
   * @see https://learn.microsoft.com/en-us/rest/api/storageservices/create-account-sas
   *
   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.
   * @param permissions - Specifies the list of permissions to be associated with the SAS.
   * @param resourceTypes - Specifies the resource types associated with the shared access signature.
   * @param options - Optional parameters.
   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.
   */
  generateSasStringToSign(expiresOn2, permissions = AccountSASPermissions.parse("r"), resourceTypes = "sco", options = {}) {
    if (!(this.credential instanceof StorageSharedKeyCredential)) {
      throw RangeError("Can only generate the account SAS when the client is initialized with a shared key credential");
    }
    if (expiresOn2 === void 0) {
      const now = /* @__PURE__ */ new Date();
      expiresOn2 = new Date(now.getTime() + 3600 * 1e3);
    }
    return generateAccountSASQueryParametersInternal(Object.assign({
      permissions,
      expiresOn: expiresOn2,
      resourceTypes,
      services: AccountSASServices.parse("b").toString()
    }, options), this.credential).stringToSign;
  }
}
var KnownEncryptionAlgorithmType;
(function(KnownEncryptionAlgorithmType2) {
  KnownEncryptionAlgorithmType2["AES256"] = "AES256";
})(KnownEncryptionAlgorithmType || (KnownEncryptionAlgorithmType = {}));
const index_browser = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AnonymousCredential,
  AnonymousCredentialPolicy,
  AppendBlobClient,
  BaseRequestPolicy,
  BlobBatch,
  BlobBatchClient,
  BlobClient,
  BlobLeaseClient,
  BlobServiceClient,
  BlockBlobClient,
  get BlockBlobTier() {
    return BlockBlobTier;
  },
  ContainerClient,
  Credential,
  CredentialPolicy,
  get KnownEncryptionAlgorithmType() {
    return KnownEncryptionAlgorithmType;
  },
  PageBlobClient,
  Pipeline,
  get PremiumPageBlobTier() {
    return PremiumPageBlobTier;
  },
  RestError,
  StorageBrowserPolicy,
  StorageBrowserPolicyFactory,
  StorageOAuthScopes,
  StorageRetryPolicy,
  StorageRetryPolicyFactory,
  get StorageRetryPolicyType() {
    return StorageRetryPolicyType$1;
  },
  isPipelineLike,
  logger,
  newPipeline
}, Symbol.toStringTag, { value: "Module" }));
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(index_browser);
var internal$2 = {};
var Helpers$1 = {};
var hasRequiredHelpers$1;
function requireHelpers$1() {
  if (hasRequiredHelpers$1) return Helpers$1;
  hasRequiredHelpers$1 = 1;
  Object.defineProperty(Helpers$1, "__esModule", { value: true });
  Helpers$1.assertAzureTransferConfig = assertAzureTransferConfig;
  Helpers$1.buildBlobUrl = buildBlobUrl;
  Helpers$1.buildBlobName = buildBlobName;
  const internal_1 = requireInternal$5();
  const internal_2 = requireInternal$4();
  function assertAzureTransferConfig(transferConfig) {
    (0, internal_2.assertTransferConfig)(transferConfig);
    if (!("authentication" in transferConfig))
      throw new internal_1.FalsyValueError("transferConfig.authentication");
    (0, internal_1.assertPrimitiveType)(transferConfig.authentication, "transferConfig.authentication", "string");
  }
  function buildBlobUrl(input) {
    assertAzureTransferConfig(input.transferConfig);
    const { authentication, baseUrl } = input.transferConfig;
    return `${baseUrl}/${(0, internal_2.buildObjectKey)(input.reference)}?${authentication}`;
  }
  function buildBlobName(reference) {
    const { relativeDirectory, objectName } = reference;
    return (relativeDirectory ? `${relativeDirectory}/` : "") + objectName;
  }
  return Helpers$1;
}
var hasRequiredInternal$2;
function requireInternal$2() {
  if (hasRequiredInternal$2) return internal$2;
  hasRequiredInternal$2 = 1;
  (function(exports) {
    var __createBinding = internal$2 && internal$2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = internal$2 && internal$2.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireHelpers$1(), exports);
  })(internal$2);
  return internal$2;
}
var hasRequiredBlobServiceClientWrapper;
function requireBlobServiceClientWrapper() {
  if (hasRequiredBlobServiceClientWrapper) return BlobServiceClientWrapper;
  hasRequiredBlobServiceClientWrapper = 1;
  var __decorate = BlobServiceClientWrapper && BlobServiceClientWrapper.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = BlobServiceClientWrapper && BlobServiceClientWrapper.__metadata || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
  };
  Object.defineProperty(BlobServiceClientWrapper, "__esModule", { value: true });
  BlobServiceClientWrapper.BlobServiceClientWrapper = void 0;
  const storage_blob_1 = require$$0;
  const inversify_1 = /* @__PURE__ */ requireCjs();
  const internal_1 = requireInternal$4();
  const internal_2 = requireInternal$2();
  let BlobServiceClientWrapper$1 = class BlobServiceClientWrapper {
    constructor(client2) {
      this._client = client2;
    }
    getContainerClient(containerName) {
      return this._client.getContainerClient(containerName);
    }
    getBlobClient(reference) {
      return this._client.getContainerClient(reference.baseDirectory).getBlobClient((0, internal_2.buildBlobName)(reference));
    }
    getBlockBlobClient(reference) {
      return this._client.getContainerClient(reference.baseDirectory).getBlockBlobClient((0, internal_2.buildBlobName)(reference));
    }
    async getDirectoriesNextPage(options) {
      const iterator2 = this._client.listContainers().byPage({
        maxPageSize: options.maxPageSize,
        continuationToken: options.continuationToken
      });
      const response = (await iterator2.next()).value;
      const directories = response.containerItems.map((directory) => ({ baseDirectory: directory.name }));
      const page = {
        entities: directories,
        next: response.continuationToken == "" ? void 0 : () => this.getDirectoriesNextPage({
          maxPageSize: options.maxPageSize,
          continuationToken: response.continuationToken
        })
      };
      return page;
    }
    async getObjectsNextPage(directory, options) {
      const containerClient = this._client.getContainerClient(directory.baseDirectory);
      const iterator2 = containerClient.listBlobsFlat().byPage({
        maxPageSize: options.maxPageSize,
        continuationToken: options.continuationToken
      });
      const response = (await iterator2.next()).value;
      const objects = response.segment.blobItems.map((item) => (0, internal_1.buildObjectReference)((0, internal_1.buildObjectKey)({
        ...directory,
        objectName: item.name
      })));
      const page = {
        entities: objects,
        next: response.continuationToken == "" ? void 0 : () => this.getObjectsNextPage(directory, {
          maxPageSize: options.maxPageSize,
          continuationToken: response.continuationToken
        })
      };
      return page;
    }
  };
  BlobServiceClientWrapper.BlobServiceClientWrapper = BlobServiceClientWrapper$1;
  BlobServiceClientWrapper.BlobServiceClientWrapper = BlobServiceClientWrapper$1 = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [storage_blob_1.BlobServiceClient])
  ], BlobServiceClientWrapper$1);
  return BlobServiceClientWrapper;
}
var BlockBlobClientWrapper = {};
var hasRequiredBlockBlobClientWrapper;
function requireBlockBlobClientWrapper() {
  if (hasRequiredBlockBlobClientWrapper) return BlockBlobClientWrapper;
  hasRequiredBlockBlobClientWrapper = 1;
  Object.defineProperty(BlockBlobClientWrapper, "__esModule", { value: true });
  BlockBlobClientWrapper.BlockBlobClientWrapper = void 0;
  const stream_1 = require$$0$1;
  let BlockBlobClientWrapper$1 = class BlockBlobClientWrapper {
    constructor(_client) {
      this._client = _client;
    }
    getBlobHTTPHeaders(headers) {
      return headers === void 0 ? void 0 : {
        blobContentEncoding: headers.contentEncoding,
        blobCacheControl: headers.cacheControl,
        blobContentType: headers.contentType
      };
    }
    async download(options) {
      const downloadResponse = await this._client.download(void 0, void 0, options);
      return downloadResponse.readableStreamBody;
    }
    async upload(data, metadata2, headers) {
      const blobHTTPHeaders = this.getBlobHTTPHeaders(headers);
      if (data instanceof Buffer)
        await this._client.upload(data, data.byteLength, {
          metadata: metadata2,
          blobHTTPHeaders
        });
      else if (data instanceof stream_1.Readable)
        await this._client.uploadStream(data, void 0, void 0, {
          metadata: metadata2,
          blobHTTPHeaders
        });
      else
        await this._client.uploadFile(data, { metadata: metadata2, blobHTTPHeaders });
    }
    async uploadInMultipleParts(data, options, headers) {
      const blobHTTPHeaders = this.getBlobHTTPHeaders(headers);
      const { metadata: metadata2, partSize, queueSize } = options ?? {};
      if (data instanceof stream_1.Readable)
        await this._client.uploadStream(data, partSize, queueSize, {
          metadata: metadata2,
          blobHTTPHeaders
        });
      else
        await this._client.uploadFile(data, {
          metadata: metadata2,
          blockSize: partSize,
          concurrency: queueSize,
          blobHTTPHeaders
        });
    }
  };
  BlockBlobClientWrapper.BlockBlobClientWrapper = BlockBlobClientWrapper$1;
  return BlockBlobClientWrapper;
}
var BlockBlobClientWrapperFactory = {};
var hasRequiredBlockBlobClientWrapperFactory;
function requireBlockBlobClientWrapperFactory() {
  if (hasRequiredBlockBlobClientWrapperFactory) return BlockBlobClientWrapperFactory;
  hasRequiredBlockBlobClientWrapperFactory = 1;
  var __decorate = BlockBlobClientWrapperFactory && BlockBlobClientWrapperFactory.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  Object.defineProperty(BlockBlobClientWrapperFactory, "__esModule", { value: true });
  BlockBlobClientWrapperFactory.BlockBlobClientWrapperFactory = void 0;
  const storage_blob_1 = require$$0;
  const inversify_1 = /* @__PURE__ */ requireCjs();
  const internal_1 = requireInternal$4();
  const internal_2 = requireInternal$2();
  const BlockBlobClientWrapper_1 = requireBlockBlobClientWrapper();
  let BlockBlobClientWrapperFactory$1 = class BlockBlobClientWrapperFactory {
    create(input) {
      const blobClient = new storage_blob_1.BlockBlobClient((0, internal_1.instanceOfUrlTransferInput)(input) ? input.url : (0, internal_2.buildBlobUrl)(input));
      return new BlockBlobClientWrapper_1.BlockBlobClientWrapper(blobClient);
    }
  };
  BlockBlobClientWrapperFactory.BlockBlobClientWrapperFactory = BlockBlobClientWrapperFactory$1;
  BlockBlobClientWrapperFactory.BlockBlobClientWrapperFactory = BlockBlobClientWrapperFactory$1 = __decorate([
    (0, inversify_1.injectable)()
  ], BlockBlobClientWrapperFactory$1);
  return BlockBlobClientWrapperFactory;
}
var hasRequiredWrappers;
function requireWrappers() {
  if (hasRequiredWrappers) return wrappers;
  hasRequiredWrappers = 1;
  (function(exports) {
    var __createBinding = wrappers && wrappers.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = wrappers && wrappers.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireBlobServiceClientWrapper(), exports);
    __exportStar(requireBlockBlobClientWrapper(), exports);
    __exportStar(requireBlockBlobClientWrapperFactory(), exports);
  })(wrappers);
  return wrappers;
}
var hasRequiredAzureClientStorage;
function requireAzureClientStorage() {
  if (hasRequiredAzureClientStorage) return AzureClientStorage;
  hasRequiredAzureClientStorage = 1;
  var __decorate = AzureClientStorage && AzureClientStorage.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = AzureClientStorage && AzureClientStorage.__metadata || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
  };
  var __param = AzureClientStorage && AzureClientStorage.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  Object.defineProperty(AzureClientStorage, "__esModule", { value: true });
  AzureClientStorage.AzureClientStorage = void 0;
  const fs_1 = require$$0$1;
  const path_1 = require$$0$1;
  const inversify_1 = /* @__PURE__ */ requireCjs();
  const internal_1 = requireInternal$4();
  const internal_2 = requireInternal$3();
  const object_storage_core_1 = requireLib$2();
  const wrappers_1 = requireWrappers();
  let AzureClientStorage$1 = class AzureClientStorage extends object_storage_core_1.ClientStorage {
    constructor(_clientWrapperFactory) {
      super();
      this._clientWrapperFactory = _clientWrapperFactory;
    }
    async download(input) {
      if ("reference" in input)
        (0, internal_1.assertRelativeDirectory)(input.reference.relativeDirectory);
      if ((0, internal_2.isLocalTransferInput)(input))
        await fs_1.promises.mkdir((0, path_1.dirname)(input.localPath), { recursive: true });
      const options = {
        abortSignal: input.abortSignal
      };
      const downloadStream = await this._clientWrapperFactory.create(input).download(options);
      return (0, internal_2.streamToTransferType)(downloadStream, input.transferType, input.localPath);
    }
    async upload(input) {
      if ("reference" in input)
        (0, internal_1.assertRelativeDirectory)(input.reference.relativeDirectory);
      if (typeof input.data === "string")
        await (0, internal_2.assertFileNotEmpty)(input.data);
      return this._clientWrapperFactory.create(input).upload(input.data, input.metadata);
    }
    async uploadInMultipleParts(input) {
      if ("reference" in input)
        (0, internal_1.assertRelativeDirectory)(input.reference.relativeDirectory);
      if (typeof input.data === "string")
        await (0, internal_2.assertFileNotEmpty)(input.data);
      return this._clientWrapperFactory.create(input).uploadInMultipleParts(input.data, input.options);
    }
  };
  AzureClientStorage.AzureClientStorage = AzureClientStorage$1;
  AzureClientStorage.AzureClientStorage = AzureClientStorage$1 = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(object_storage_core_1.Types.Client.clientWrapperFactory)),
    __metadata("design:paramtypes", [wrappers_1.BlockBlobClientWrapperFactory])
  ], AzureClientStorage$1);
  return AzureClientStorage;
}
var AzureClientStorageBindings = {};
var hasRequiredAzureClientStorageBindings;
function requireAzureClientStorageBindings() {
  if (hasRequiredAzureClientStorageBindings) return AzureClientStorageBindings;
  hasRequiredAzureClientStorageBindings = 1;
  Object.defineProperty(AzureClientStorageBindings, "__esModule", { value: true });
  AzureClientStorageBindings.AzureClientStorageBindings = void 0;
  const object_storage_core_1 = requireLib$2();
  const BlockBlobClientWrapperFactory_1 = requireBlockBlobClientWrapperFactory();
  const AzureClientStorage_1 = requireAzureClientStorage();
  let AzureClientStorageBindings$1 = class AzureClientStorageBindings extends object_storage_core_1.ClientStorageDependency {
    constructor() {
      super(...arguments);
      this.dependencyName = "azure";
    }
    register(container2) {
      container2.bind(object_storage_core_1.Types.Client.clientWrapperFactory).to(BlockBlobClientWrapperFactory_1.BlockBlobClientWrapperFactory).inSingletonScope();
      container2.bind(object_storage_core_1.ClientStorage).to(AzureClientStorage_1.AzureClientStorage).inSingletonScope();
    }
  };
  AzureClientStorageBindings.AzureClientStorageBindings = AzureClientStorageBindings$1;
  return AzureClientStorageBindings;
}
var hasRequiredClient;
function requireClient() {
  if (hasRequiredClient) return client$1;
  hasRequiredClient = 1;
  (function(exports) {
    var __createBinding = client$1 && client$1.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = client$1 && client$1.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireAzureClientStorage(), exports);
    __exportStar(requireAzureClientStorageBindings(), exports);
  })(client$1);
  return client$1;
}
var server = {};
var Interfaces = {};
var hasRequiredInterfaces;
function requireInterfaces() {
  if (hasRequiredInterfaces) return Interfaces;
  hasRequiredInterfaces = 1;
  Object.defineProperty(Interfaces, "__esModule", { value: true });
  return Interfaces;
}
var AzureServerStorage = {};
var internal$1 = {};
var Helpers = {};
var hasRequiredHelpers;
function requireHelpers() {
  if (hasRequiredHelpers) return Helpers;
  hasRequiredHelpers = 1;
  Object.defineProperty(Helpers, "__esModule", { value: true });
  Helpers.buildBlobSASParameters = buildBlobSASParameters;
  Helpers.buildContainerSASParameters = buildContainerSASParameters;
  const storage_blob_1 = require$$0;
  function buildBlobSASParameters(containerName, readOrWrite, expiresOn2, accountName, accountKey, blobName) {
    const permissions = new storage_blob_1.BlobSASPermissions();
    permissions.read = readOrWrite === "read";
    permissions.write = readOrWrite === "write";
    const parameters = (0, storage_blob_1.generateBlobSASQueryParameters)({
      containerName,
      blobName,
      permissions,
      expiresOn: expiresOn2
    }, new storage_blob_1.StorageSharedKeyCredential(accountName, accountKey));
    return parameters.toString();
  }
  function buildContainerSASParameters(containerName, expiresOn2, accountName, accountKey) {
    const permissions = getContainerSASPermissions();
    const parameters = (0, storage_blob_1.generateBlobSASQueryParameters)({
      containerName,
      permissions,
      expiresOn: expiresOn2
    }, new storage_blob_1.StorageSharedKeyCredential(accountName, accountKey));
    return parameters.toString();
  }
  function getContainerSASPermissions() {
    const permissions = new storage_blob_1.ContainerSASPermissions();
    permissions.read = true;
    permissions.write = true;
    permissions.delete = true;
    permissions.list = true;
    return permissions;
  }
  return Helpers;
}
var hasRequiredInternal$1;
function requireInternal$1() {
  if (hasRequiredInternal$1) return internal$1;
  hasRequiredInternal$1 = 1;
  (function(exports) {
    var __createBinding = internal$1 && internal$1.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = internal$1 && internal$1.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireHelpers(), exports);
  })(internal$1);
  return internal$1;
}
var hasRequiredAzureServerStorage;
function requireAzureServerStorage() {
  if (hasRequiredAzureServerStorage) return AzureServerStorage;
  hasRequiredAzureServerStorage = 1;
  var __decorate = AzureServerStorage && AzureServerStorage.__decorate || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var __metadata = AzureServerStorage && AzureServerStorage.__metadata || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
  };
  var __param = AzureServerStorage && AzureServerStorage.__param || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var AzureServerStorage_1;
  Object.defineProperty(AzureServerStorage, "__esModule", { value: true });
  AzureServerStorage.AzureServerStorage = void 0;
  const fs_1 = require$$0$1;
  const path_1 = require$$0$1;
  const storage_blob_1 = require$$0;
  const inversify_1 = /* @__PURE__ */ requireCjs();
  const internal_1 = requireInternal$4();
  const internal_2 = requireInternal$3();
  const object_storage_core_1 = requireLib$2();
  const common_1 = requireCommon$1();
  const internal_3 = requireInternal$2();
  const internal_4 = requireInternal$1();
  const wrappers_1 = requireWrappers();
  let AzureServerStorage$1 = AzureServerStorage_1 = class AzureServerStorage extends object_storage_core_1.ServerStorage {
    constructor(config, client2) {
      super();
      this._config = config;
      this._client = client2;
    }
    async download(reference, transferType, localPath) {
      (0, internal_1.assertRelativeDirectory)(reference.relativeDirectory);
      if (transferType === "local") {
        (0, internal_2.assertLocalFile)(localPath);
        await fs_1.promises.mkdir((0, path_1.dirname)(localPath), { recursive: true });
      }
      const downloadStream = await new wrappers_1.BlockBlobClientWrapper(this._client.getBlockBlobClient(reference)).download();
      return (0, internal_2.streamToTransferType)(downloadStream, transferType, localPath);
    }
    async upload(reference, data, metadata2, headers) {
      (0, internal_1.assertRelativeDirectory)(reference.relativeDirectory);
      if (typeof data === "string")
        await (0, internal_2.assertFileNotEmpty)(data);
      return new wrappers_1.BlockBlobClientWrapper(this._client.getBlockBlobClient(reference)).upload(data, metadata2, headers);
    }
    async uploadInMultipleParts(reference, data, options, headers) {
      (0, internal_1.assertRelativeDirectory)(reference.relativeDirectory);
      if (typeof data === "string")
        await (0, internal_2.assertFileNotEmpty)(data);
      return new wrappers_1.BlockBlobClientWrapper(this._client.getBlockBlobClient(reference)).uploadInMultipleParts(data, options, headers);
    }
    async createBaseDirectory(directory) {
      await this._client.getContainerClient(directory.baseDirectory).create();
    }
    getListDirectoriesPagedIterator(maxPageSize2 = 1e3) {
      const pageIterator = new object_storage_core_1.EntityPageListIterator(() => this._client.getDirectoriesNextPage({ maxPageSize: maxPageSize2 }));
      return pageIterator;
    }
    getListObjectsPagedIterator(directory, maxPageSize2 = 1e3) {
      const pageIterator = new object_storage_core_1.EntityPageListIterator(() => this._client.getObjectsNextPage(directory, { maxPageSize: maxPageSize2 }));
      return pageIterator;
    }
    /**
     * @deprecated Use listObjects method instead.
     */
    // eslint-disable-next-line deprecation/deprecation
    async list(directory) {
      return this.listObjects(directory);
    }
    async deleteBaseDirectory(directory) {
      return this.handleNotFound(async () => {
        await this._client.getContainerClient(directory.baseDirectory).delete();
      });
    }
    async deleteObject(reference) {
      (0, internal_1.assertRelativeDirectory)(reference.relativeDirectory);
      return this.handleNotFound(async () => {
        await this._client.getBlobClient(reference).delete();
      });
    }
    async baseDirectoryExists(directory) {
      return this._client.getContainerClient(directory.baseDirectory).exists();
    }
    async objectExists(reference) {
      (0, internal_1.assertRelativeDirectory)(reference.relativeDirectory);
      return this._client.getBlobClient(reference).exists();
    }
    async updateMetadata(reference, metadata2) {
      (0, internal_1.assertRelativeDirectory)(reference.relativeDirectory);
      await this._client.getBlobClient(reference).setMetadata(metadata2);
    }
    async getObjectProperties(reference) {
      (0, internal_1.assertRelativeDirectory)(reference.relativeDirectory);
      const { lastModified, contentLength: contentLength2, metadata: metadata2, _response } = await this._client.getBlobClient(reference).getProperties();
      return {
        lastModified,
        reference,
        size: contentLength2,
        metadata: metadata2,
        contentEncoding: _response.parsedHeaders.contentEncoding,
        contentType: _response.parsedHeaders.contentType,
        cacheControl: _response.parsedHeaders.cacheControl
      };
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async getDownloadUrl(reference, expiry) {
      (0, internal_1.assertRelativeDirectory)(reference.relativeDirectory);
      const blobClient = this._client.getBlockBlobClient(reference);
      const parameters = (0, internal_4.buildBlobSASParameters)(reference.baseDirectory, "read", (0, internal_2.getExpiryDate)(expiry), this._config.accountName, this._config.accountKey, (0, internal_3.buildBlobName)(reference));
      return `${blobClient.url}?${parameters}`;
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async getUploadUrl(reference, expiry) {
      (0, internal_1.assertRelativeDirectory)(reference.relativeDirectory);
      const blobClient = this._client.getBlockBlobClient(reference);
      const parameters = (0, internal_4.buildBlobSASParameters)(reference.baseDirectory, "write", (0, internal_2.getExpiryDate)(expiry), this._config.accountName, this._config.accountKey, (0, internal_3.buildBlobName)(reference));
      return `${blobClient.url}?${parameters}`;
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async getDownloadConfig(directory, expiry) {
      (0, internal_1.assertRelativeDirectory)(directory.relativeDirectory);
      const expiresOn2 = (0, internal_2.getExpiryDate)(expiry);
      const parameters = (0, internal_4.buildBlobSASParameters)(directory.baseDirectory, "read", expiresOn2, this._config.accountName, this._config.accountKey);
      return {
        authentication: parameters,
        expiration: expiresOn2,
        baseUrl: this._config.baseUrl
      };
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async getUploadConfig(directory, expiry) {
      (0, internal_1.assertRelativeDirectory)(directory.relativeDirectory);
      const expiresOn2 = (0, internal_2.getExpiryDate)(expiry);
      const parameters = (0, internal_4.buildBlobSASParameters)(directory.baseDirectory, "write", expiresOn2, this._config.accountName, this._config.accountKey);
      return {
        authentication: parameters,
        expiration: expiresOn2,
        baseUrl: this._config.baseUrl
      };
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async getDirectoryAccessConfig(directory, expiry) {
      (0, internal_1.assertRelativeDirectory)(directory.relativeDirectory);
      const expiresOn2 = (0, internal_2.getExpiryDate)(expiry);
      const parameters = (0, internal_4.buildContainerSASParameters)(directory.baseDirectory, expiresOn2, this._config.accountName, this._config.accountKey);
      return {
        authentication: parameters,
        expiration: expiresOn2,
        baseUrl: this._config.baseUrl
      };
    }
    async copyObject(sourceStorage, sourceReference, targetReference) {
      (0, internal_1.assertRelativeDirectory)(sourceReference.relativeDirectory);
      (0, internal_1.assertRelativeDirectory)(targetReference.relativeDirectory);
      if (!(sourceStorage instanceof AzureServerStorage_1)) {
        throw new Error(`Source storage must be an instance of ${AzureServerStorage_1.name} to use ${AzureServerStorage_1.prototype.copyObject.name} method.`);
      }
      const sourceUrl2 = await sourceStorage.getDownloadUrl(sourceReference);
      const targetBlobClient = this._client.getBlobClient(targetReference);
      const copyPoller = await targetBlobClient.beginCopyFromURL(sourceUrl2);
      await copyPoller.pollUntilDone();
    }
    async releaseResources() {
    }
    async handleNotFound(operation) {
      try {
        await operation();
      } catch (error) {
        if (error instanceof storage_blob_1.RestError && error.statusCode === 404) {
          return;
        }
        throw error;
      }
    }
  };
  AzureServerStorage.AzureServerStorage = AzureServerStorage$1;
  AzureServerStorage.AzureServerStorage = AzureServerStorage$1 = AzureServerStorage_1 = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(common_1.Types.AzureServer.config)),
    __metadata("design:paramtypes", [Object, wrappers_1.BlobServiceClientWrapper])
  ], AzureServerStorage$1);
  return AzureServerStorage;
}
var AzureServerStorageBindings = {};
var hasRequiredAzureServerStorageBindings;
function requireAzureServerStorageBindings() {
  if (hasRequiredAzureServerStorageBindings) return AzureServerStorageBindings;
  hasRequiredAzureServerStorageBindings = 1;
  Object.defineProperty(AzureServerStorageBindings, "__esModule", { value: true });
  AzureServerStorageBindings.AzureServerStorageBindings = void 0;
  const storage_blob_1 = require$$0;
  const internal_1 = requireInternal$5();
  const object_storage_core_1 = requireLib$2();
  const common_1 = requireCommon$1();
  const AzureServerStorage_1 = requireAzureServerStorage();
  const BlobServiceClientWrapper_1 = requireBlobServiceClientWrapper();
  let AzureServerStorageBindings$1 = class AzureServerStorageBindings extends object_storage_core_1.ServerStorageDependency {
    constructor() {
      super(...arguments);
      this.dependencyName = "azure";
    }
    register(container2, config) {
      if (!config.accountName)
        throw new internal_1.ConfigError("accountName");
      if (!config.accountKey)
        throw new internal_1.ConfigError("accountKey");
      if (!config.baseUrl)
        throw new internal_1.ConfigError("baseUrl");
      container2.bind(common_1.Types.AzureServer.config).toConstantValue(config);
      container2.bind(object_storage_core_1.ServerStorage).to(AzureServerStorage_1.AzureServerStorage).inSingletonScope();
      container2.bind(BlobServiceClientWrapper_1.BlobServiceClientWrapper).toSelf().inSingletonScope();
      container2.bind(storage_blob_1.BlobServiceClient).toConstantValue(new storage_blob_1.BlobServiceClient(config.baseUrl, new storage_blob_1.StorageSharedKeyCredential(config.accountName, config.accountKey)));
    }
  };
  AzureServerStorageBindings.AzureServerStorageBindings = AzureServerStorageBindings$1;
  return AzureServerStorageBindings;
}
var hasRequiredServer;
function requireServer() {
  if (hasRequiredServer) return server;
  hasRequiredServer = 1;
  (function(exports) {
    var __createBinding = server && server.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = server && server.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireWrappers(), exports);
    __exportStar(requireInterfaces(), exports);
    __exportStar(requireAzureServerStorage(), exports);
    __exportStar(requireAzureServerStorageBindings(), exports);
  })(server);
  return server;
}
var hasRequiredLib$1;
function requireLib$1() {
  if (hasRequiredLib$1) return lib$2;
  hasRequiredLib$1 = 1;
  (function(exports) {
    var __createBinding = lib$2 && lib$2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = lib$2 && lib$2.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireCommon$1(), exports);
    __exportStar(requireClient(), exports);
    __exportStar(requireServer(), exports);
  })(lib$2);
  return lib$2;
}
var internal = {};
var ApiResponseInterfaces = {};
var hasRequiredApiResponseInterfaces;
function requireApiResponseInterfaces() {
  if (hasRequiredApiResponseInterfaces) return ApiResponseInterfaces;
  hasRequiredApiResponseInterfaces = 1;
  Object.defineProperty(ApiResponseInterfaces, "__esModule", { value: true });
  return ApiResponseInterfaces;
}
var IModelsErrorParser2 = {};
var hasRequiredIModelsErrorParser;
function requireIModelsErrorParser() {
  if (hasRequiredIModelsErrorParser) return IModelsErrorParser2;
  hasRequiredIModelsErrorParser = 1;
  Object.defineProperty(IModelsErrorParser2, "__esModule", { value: true });
  IModelsErrorParser2.IModelsErrorParser = void 0;
  const internal_1 = requireInternal$6();
  const imodels_client_management_1 = require$$4;
  class LocksErrorImpl extends internal_1.IModelsErrorBaseImpl {
    constructor(params) {
      super(params);
      this.objectIds = params.objectIds;
    }
  }
  class ConflictingLocksErrorImpl extends internal_1.IModelsErrorBaseImpl {
    constructor(params) {
      super(params);
      this.conflictingLocks = params.conflictingLocks;
    }
  }
  let IModelsErrorParser$12 = class IModelsErrorParser3 extends internal_1.IModelsErrorParser {
    static parse(response, originalError) {
      const errorFromApi = response.body;
      const errorCode = IModelsErrorParser3.parseCode(errorFromApi?.error?.code);
      if (errorCode === imodels_client_management_1.IModelsErrorCode.NewerChangesExist) {
        const errorMessage2 = IModelsErrorParser3.parseAndFormatLockErrorMessage(errorFromApi?.error?.message, errorFromApi?.error?.objectIds);
        return new LocksErrorImpl({
          code: errorCode,
          message: errorMessage2,
          originalError,
          objectIds: errorFromApi?.error?.objectIds
        });
      }
      if (errorCode === imodels_client_management_1.IModelsErrorCode.ConflictWithAnotherUser) {
        const errorMessage2 = IModelsErrorParser3.parseAndFormatLockConflictErrorMessage(errorFromApi?.error?.message, errorFromApi?.error?.conflictingLocks);
        return new ConflictingLocksErrorImpl({
          code: errorCode,
          message: errorMessage2,
          originalError,
          conflictingLocks: errorFromApi?.error?.conflictingLocks
        });
      }
      return internal_1.IModelsErrorParser.parse(response, originalError);
    }
    static parseAndFormatLockErrorMessage(message, objectIds) {
      let result = message ?? internal_1.IModelsErrorParser._defaultErrorMessage;
      if (!objectIds || objectIds.length === 0)
        return result;
      result += ` Object ids: ${objectIds.join(" ,")}`;
      return result;
    }
    static parseAndFormatLockConflictErrorMessage(message, conflictingLocks) {
      let result = message ?? internal_1.IModelsErrorParser._defaultErrorMessage;
      if (!conflictingLocks || conflictingLocks.length === 0)
        return result;
      result += " Conflicting locks:\n";
      for (let i = 0; i < conflictingLocks.length; i++) {
        result += `${i + 1}. Object id: ${conflictingLocks[i].objectId}, lock level: ${conflictingLocks[i].lockLevel}, briefcase ids: ${conflictingLocks[i].briefcaseIds.join(", ")}
`;
      }
      return result;
    }
  };
  IModelsErrorParser2.IModelsErrorParser = IModelsErrorParser$12;
  return IModelsErrorParser2;
}
var NodeLocalFileSystem = {};
var hasRequiredNodeLocalFileSystem;
function requireNodeLocalFileSystem() {
  if (hasRequiredNodeLocalFileSystem) return NodeLocalFileSystem;
  hasRequiredNodeLocalFileSystem = 1;
  Object.defineProperty(NodeLocalFileSystem, "__esModule", { value: true });
  NodeLocalFileSystem.NodeLocalFileSystem = void 0;
  const fs_1 = require$$0$1;
  let NodeLocalFileSystem$1 = class NodeLocalFileSystem {
    async createDirectory(directory) {
      await fs_1.promises.mkdir(directory, { recursive: true });
    }
    async getFileSize(filePath) {
      const fileStats = await fs_1.promises.stat(filePath);
      return fileStats.size;
    }
    async fileExists(filePath) {
      return this.pathIsAccessible(filePath);
    }
    async deleteFile(filePath) {
      return fs_1.promises.unlink(filePath);
    }
    async pathIsAccessible(path) {
      try {
        await fs_1.promises.access(path, fs_1.constants.F_OK);
        return true;
      } catch {
        return false;
      }
    }
  };
  NodeLocalFileSystem.NodeLocalFileSystem = NodeLocalFileSystem$1;
  return NodeLocalFileSystem;
}
var hasRequiredInternal;
function requireInternal() {
  if (hasRequiredInternal) return internal;
  hasRequiredInternal = 1;
  (function(exports) {
    var __createBinding = internal && internal.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = internal && internal.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireApiResponseInterfaces(), exports);
    __exportStar(requireIModelsErrorParser(), exports);
    __exportStar(requireNodeLocalFileSystem(), exports);
  })(internal);
  return internal;
}
var operations$1 = {};
var OperationExports$1 = {};
var BaselineFileOperations = {};
var hasRequiredBaselineFileOperations;
function requireBaselineFileOperations() {
  if (hasRequiredBaselineFileOperations) return BaselineFileOperations;
  hasRequiredBaselineFileOperations = 1;
  Object.defineProperty(BaselineFileOperations, "__esModule", { value: true });
  BaselineFileOperations.BaselineFileOperations = void 0;
  const internal_1 = requireInternal$6();
  let BaselineFileOperations$1 = class BaselineFileOperations extends internal_1.OperationsBase {
    /**
     * Gets a single Baseline file by iModel id. This method returns a Baseline file in its full representation. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-baseline-file-details/
     * Get iModel Baseline File Details} operation from iModels API.
     * @param {GetSingleBaselineFileParams} params parameters for this operation. See {@link GetSingleBaselineFileParams}.
     * @returns {Promise<BaselineFile>} a Baseline file for the specified iModel. See {@link BaselineFile}.
     */
    async getSingle(params) {
      const response = await this.sendGetRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getBaselineUrl({ iModelId: params.iModelId }),
        headers: params.headers
      });
      return response.body.baselineFile;
    }
  };
  BaselineFileOperations.BaselineFileOperations = BaselineFileOperations$1;
  return BaselineFileOperations;
}
var IModelOperations$1 = {};
var operations = {};
var OperationExports = {};
var IModelOperations2 = {};
var SharedFunctions = {};
var hasRequiredSharedFunctions;
function requireSharedFunctions() {
  if (hasRequiredSharedFunctions) return SharedFunctions;
  hasRequiredSharedFunctions = 1;
  Object.defineProperty(SharedFunctions, "__esModule", { value: true });
  SharedFunctions.assertLink = SharedFunctions.assertStringHeaderValue = SharedFunctions.getUser = void 0;
  async function getUser2(authorization, userOperations, urlFormatter, userLink, headers) {
    if (!userLink)
      return void 0;
    const { iModelId, userId } = urlFormatter.parseUserUrl(userLink);
    return userOperations.getSingle({
      authorization,
      iModelId,
      userId,
      headers
    });
  }
  SharedFunctions.getUser = getUser2;
  function assertStringHeaderValue2(headerName, headerValue) {
    const isString2 = typeof headerValue === "string" || headerValue instanceof String;
    if (!isString2)
      throw new Error(`Assertion failed: header's ${headerName} value is not a string.`);
  }
  SharedFunctions.assertStringHeaderValue = assertStringHeaderValue2;
  function assertLink2(link) {
    if (!link || !link.href)
      throw new Error("Assertion failed: link is falsy.");
  }
  SharedFunctions.assertLink = assertLink2;
  return SharedFunctions;
}
var hasRequiredIModelOperations$1;
function requireIModelOperations$1() {
  if (hasRequiredIModelOperations$1) return IModelOperations2;
  hasRequiredIModelOperations$1 = 1;
  Object.defineProperty(IModelOperations2, "__esModule", { value: true });
  IModelOperations2.IModelOperations = void 0;
  const internal_1 = requireInternal$6();
  const types_1 = requireTypes$4();
  const Constants_1 = requireConstants();
  const SharedFunctions_1 = requireSharedFunctions();
  let IModelOperations$12 = class IModelOperations extends internal_1.OperationsBase {
    constructor(options, _iModelsClient) {
      super(options);
      this._iModelsClient = _iModelsClient;
    }
    /**
     * Gets iModels for a specific iTwin. This method returns iModels in their minimal representation. The returned iterator
     * internally queries entities in pages. Wraps the {@link https://developer.bentley.com/apis/imodels-v2/operations/get-itwin-imodels/ Get iTwin iModels}
     * operation from iModels API.
     * @param {GetIModelListParams} params parameters for this operation. See {@link GetIModelListParams}.
     * @returns {EntityListIterator<MinimalIModel>} iterator for iModel list. See {@link EntityListIterator}, {@link MinimalIModel}.
     */
    getMinimalList(params) {
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getIModelListUrl({ urlParams: params.urlParams }),
        preferReturn: types_1.PreferReturn.Minimal,
        entityCollectionAccessor: (response) => response.body.iModels,
        headers: params.headers
      }));
    }
    /**
     * Gets iModels for a specific iTwin. This method returns iModels in their full representation. The returned iterator
     * internally queries entities in pages. Wraps the {@link https://developer.bentley.com/apis/imodels-v2/operations/get-itwin-imodels/ Get iTwin iModels}
     * operation from iModels API.
     * @param {GetIModelListParams} params parameters for this operation. See {@link GetIModelListParams}.
     * @returns {EntityListIterator<IModel>} iterator for iModel list. See {@link EntityListIterator}, {@link IModel}.
     */
    getRepresentationList(params) {
      const entityCollectionAccessor = (response) => {
        const iModels = response.body.iModels;
        const mappedIModels = iModels.map((iModel) => this.appendRelatedEntityCallbacks(params.authorization, iModel, params.headers));
        return mappedIModels;
      };
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getIModelListUrl({ urlParams: params.urlParams }),
        preferReturn: types_1.PreferReturn.Representation,
        entityCollectionAccessor,
        headers: params.headers
      }));
    }
    /**
     * Gets a single iModel by its id. This method returns an iModel in its full representation. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-details/ Get iModel} operation from iModels API.
     * @param {GetSingleIModelParams} params parameters for this operation. See {@link GetSingleIModelParams}.
     * @returns {Promise<iModel>} an iModel with specified id. See {@link IModel}.
     */
    async getSingle(params) {
      const response = await this.sendGetRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getSingleIModelUrl({ iModelId: params.iModelId }),
        headers: params.headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, response.body.iModel, params.headers);
      return result;
    }
    /**
     * Creates an empty iModel with specified properties. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel/ Create iModel} operation from iModels API.
     * @param {CreateEmptyIModelParams} params parameters for this operation. See {@link CreateEmptyIModelParams}.
     * @returns {Promise<iModel>} newly created iModel. See {@link IModel}.
     */
    async createEmpty(params) {
      const createIModelBody = this.getCreateEmptyIModelRequestBody(params.iModelProperties);
      if (createIModelBody.geographicCoordinateSystem && createIModelBody.creationMode !== "empty") {
        throw new internal_1.IModelsErrorImpl({
          code: types_1.IModelsErrorCode.InvalidIModelGCSCreationMode,
          message: "For empty iModels, GeographicCoordinateSystem can only be set when creationMode is 'empty'.",
          originalError: void 0,
          statusCode: void 0,
          details: void 0
        });
      }
      let createdIModel = await this.sendIModelPostRequest(params.authorization, createIModelBody, params.headers);
      if (createdIModel.state === types_1.IModelState.NotInitialized) {
        await this.waitForEmptyIModelInitialization({
          authorization: params.authorization,
          headers: params.headers,
          iModelId: createdIModel.id,
          timeOutInMs: params.timeOutInMs
        });
        createdIModel = await this.getSingle({
          authorization: params.authorization,
          iModelId: createdIModel.id
        });
      }
      const result = this.appendRelatedEntityCallbacks(params.authorization, createdIModel, params.headers);
      return result;
    }
    /**
     * Creates an iModel from a template. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel/ Create iModel} operation from iModels API.
     * It uses the `template` request body property to specify the source iModel which will be used as a template. Internally
     * this method creates the iModel instance and then repeatedly queries the iModel state until the iModel is initialized.
     * The execution of this method can take up to several minutes due to waiting for initialization to complete.
     * @param {CreateIModelFromTemplateParams} params parameters for this operation. See {@link CreateIModelFromTemplateParams}.
     * @returns {Promise<iModel>} newly created iModel. See {@link IModel}.
     * @throws an error that implements `iModelsError` interface with code {@link IModelsErrorCode.IModelFromTemplateInitializationFailed} if
     * iModel initialization failed or did not complete in time. See {@link IModelsErrorCode}.
     */
    async createFromTemplate(params) {
      const createIModelBody = this.getCreateIModelFromTemplateRequestBody(params.iModelProperties);
      const createdIModel = await this.sendIModelPostRequest(params.authorization, createIModelBody, params.headers);
      await this.waitForTemplatedIModelInitialization({
        authorization: params.authorization,
        iModelId: createdIModel.id,
        headers: params.headers,
        timeOutInMs: params.timeOutInMs
      });
      return this.getSingle({
        authorization: params.authorization,
        iModelId: createdIModel.id,
        headers: params.headers
      });
    }
    /**
     * Clones the specified iModel. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/clone-imodel/ Clone iModel} operation from iModels API.
     * Internally this method clones the iModel and then repeatedly queries the new iModel's state until it is initialized.
     * The execution of this method can take up to several minutes due to waiting for initialization to complete.
     * @param {CloneIModelParams} params parameters for this operation. See {@link CloneIModelParams}.
     * @returns {Promise<IModel>} newly created iModel. See {@link IModel}.
     * @throws an error that implements `iModelsError` interface with code {@link IModelsErrorCode.ClonedIModelInitializationFailed} if
     * iModel initialization failed or {@link IModelsErrorCode.ClonedIModelInitializationTimedOut} if operation did not complete in time.
     * See {@link IModelsErrorCode}.
     */
    async clone(params) {
      const cloneIModelBody = this.getCloneIModelRequestBody(params.iModelProperties);
      const cloneIModelResponse = await this.sendPostRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getCloneIModelUrl({ iModelId: params.iModelId }),
        body: cloneIModelBody,
        headers: params.headers
      });
      const locationHeaderValue = cloneIModelResponse.headers.get(Constants_1.Constants.headers.location);
      (0, SharedFunctions_1.assertStringHeaderValue)(Constants_1.Constants.headers.location, locationHeaderValue);
      const { iModelId: clonedIModelId } = this._options.urlFormatter.parseIModelUrl(locationHeaderValue);
      await this.waitForClonedIModelInitialization({
        authorization: params.authorization,
        iModelId: clonedIModelId,
        headers: params.headers,
        timeOutInMs: params.timeOutInMs
      });
      return this.getSingle({
        authorization: params.authorization,
        iModelId: clonedIModelId
      });
    }
    /**
     * Forks the specified iModel. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/fork-imodel/ Fork iModel} operation from iModels API.
     * Internally this method forks the iModel and then repeatedly queries the new iModel's creation state until it is succeeded.
     * The execution of this method can take up to several minutes due to waiting for initialization to complete.
     * @param {ForkIModelParams} params parameters for this operation. See {@link ForkIModelParams}.
     * @returns {Promise<IModel>} newly created iModel. See {@link IModel}.
     * @throws an error that implements `iModelsError` interface with code {@link IModelsErrorCode.IModelForkInitializationFailed} if
     * iModel initialization failed, {@link IModelsErrorCode.IModelForkInitializationTimedOut} if operation did not complete in time or
     * {@link IModelsErrorCode.MainIModelIsMissingFederationGuids} if the iModel from which user is attempting to create a fork does not
     * have {@link https://www.itwinjs.org/bis/guide/fundamentals/federationguids/ FederationGuid} property set on all its elements.
     * See {@link IModelsErrorCode}.
     */
    async fork(params) {
      const forkIModelBody = this.getForkIModelRequestBody(params.iModelProperties);
      const forkIModelResponse = await this.sendPostRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getForkIModelUrl({ iModelId: params.iModelId }),
        body: forkIModelBody,
        headers: params.headers
      });
      const locationHeaderValue = forkIModelResponse.headers.get(Constants_1.Constants.headers.location);
      (0, SharedFunctions_1.assertStringHeaderValue)(Constants_1.Constants.headers.location, locationHeaderValue);
      const { iModelId: forkIModelId } = this._options.urlFormatter.parseIModelUrl(locationHeaderValue);
      await this.waitForIModelForkInitialization({
        authorization: params.authorization,
        iModelId: forkIModelId,
        headers: params.headers,
        timeOutInMs: params.timeOutInMs
      });
      return this.getSingle({
        authorization: params.authorization,
        iModelId: forkIModelId
      });
    }
    /**
     * Updates iModel properties. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/update-imodel/ Update iModel} operation from iModels API.
     * @param {UpdateIModelParams} params parameters for this operation. See {@link UpdateIModelParams}.
     * @returns {Promise<IModel>} updated iModel. See {@link IModel}.
     */
    async update(params) {
      const updateIModelBody = this.getUpdateIModelRequestBody(params.iModelProperties);
      const updateIModelResponse = await this.sendPatchRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getSingleIModelUrl({ iModelId: params.iModelId }),
        body: updateIModelBody,
        headers: params.headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, updateIModelResponse.body.iModel, params.headers);
      return result;
    }
    /**
     * Deletes an iModel with specified id. Wraps the {@link https://developer.bentley.com/apis/imodels-v2/operations/delete-imodel/ Delete iModel}
     * operation from iModels API.
     * @param {DeleteIModelParams} params parameters for this operation. See {@link DeleteIModelParams}.
     * @returns {Promise<void>} a promise that resolves after operation completes.
     */
    async delete(params) {
      await this.sendDeleteRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getSingleIModelUrl({ iModelId: params.iModelId }),
        headers: params.headers
      });
    }
    appendRelatedEntityCallbacks(authorization, iModel, headers) {
      const getCreator = async () => this.getCreator(authorization, iModel._links.creator?.href, headers);
      const result = {
        ...iModel,
        getCreator
      };
      return result;
    }
    getCreateEmptyIModelRequestBody(iModelProperties) {
      const result = {
        iTwinId: iModelProperties.iTwinId,
        name: iModelProperties.name,
        description: iModelProperties.description,
        extent: iModelProperties.extent,
        containersEnabled: iModelProperties.containersEnabled,
        creationMode: iModelProperties.creationMode,
        geographicCoordinateSystem: iModelProperties.geographicCoordinateSystem
      };
      return result;
    }
    async sendIModelPostRequest(authorization, createIModelBody, headers) {
      const createIModelResponse = await this.sendPostRequest({
        authorization,
        url: this._options.urlFormatter.getCreateIModelUrl(),
        body: createIModelBody,
        headers
      });
      return createIModelResponse.body.iModel;
    }
    async getCreator(authorization, creatorLink, headers) {
      if (!creatorLink)
        return void 0;
      const { iModelId, userId } = this._options.urlFormatter.parseUserUrl(creatorLink);
      return this._iModelsClient.users.getSingle({
        authorization,
        iModelId,
        userId,
        headers
      });
    }
    getCreateIModelFromTemplateRequestBody(iModelProperties) {
      const emptyIModelParams = this.getCreateEmptyIModelRequestBody(iModelProperties);
      return {
        ...emptyIModelParams,
        template: {
          iModelId: iModelProperties.template.iModelId,
          changesetId: iModelProperties.template.changesetId
        }
      };
    }
    getCloneIModelRequestBody(iModelProperties) {
      return {
        iTwinId: iModelProperties.iTwinId,
        name: iModelProperties.name,
        description: iModelProperties.description,
        changesetId: iModelProperties.changesetId,
        changesetIndex: iModelProperties.changesetIndex,
        containersEnabled: iModelProperties.containersEnabled
      };
    }
    getForkIModelRequestBody(iModelProperties) {
      return {
        iTwinId: iModelProperties.iTwinId,
        name: iModelProperties.name,
        description: iModelProperties.description,
        changesetId: iModelProperties.changesetId,
        changesetIndex: iModelProperties.changesetIndex,
        preserveHistory: iModelProperties.preserveHistory,
        containersEnabled: iModelProperties.containersEnabled
      };
    }
    getUpdateIModelRequestBody(iModelProperties) {
      return {
        name: iModelProperties.name,
        description: iModelProperties.description,
        extent: iModelProperties.extent
      };
    }
    async isIModelInitialized(params) {
      const { state: state2 } = await this._iModelsClient.operations.getCreateIModelDetails({
        authorization: params.authorization,
        iModelId: params.iModelId,
        headers: params.headers
      });
      if (state2 !== types_1.IModelCreationState.Scheduled && state2 !== types_1.IModelCreationState.WaitingForFile && state2 !== types_1.IModelCreationState.Successful)
        throw new internal_1.IModelsErrorImpl({
          code: params.errorCodeOnFailure,
          message: `iModel initialization failed with state '${state2}'`,
          originalError: void 0,
          statusCode: void 0,
          details: void 0
        });
      return state2 === types_1.IModelCreationState.Successful;
    }
    async isIModelForkInitialized(params) {
      const { state: state2 } = await this._iModelsClient.operations.getCreateIModelDetails({
        authorization: params.authorization,
        iModelId: params.iModelId,
        headers: params.headers
      });
      if (state2 === types_1.IModelCreationState.MainIModelIsMissingFederationGuids)
        throw new internal_1.IModelsErrorImpl({
          code: types_1.IModelsErrorCode.MainIModelIsMissingFederationGuids,
          message: "iModel fork initialization failed because some elements in the main iModel do not have FederationGuid property set.",
          originalError: void 0,
          statusCode: void 0,
          details: void 0
        });
      if (state2 !== types_1.IModelCreationState.Scheduled && state2 !== types_1.IModelCreationState.WaitingForFile && state2 !== types_1.IModelCreationState.Successful)
        throw new internal_1.IModelsErrorImpl({
          code: types_1.IModelsErrorCode.IModelForkInitializationFailed,
          message: `iModel fork initialization failed with state '${state2}'`,
          originalError: void 0,
          statusCode: void 0,
          details: void 0
        });
      return state2 === types_1.IModelCreationState.Successful;
    }
    async waitForEmptyIModelInitialization(params) {
      return (0, internal_1.waitForCondition)({
        conditionToSatisfy: async () => this.isIModelInitialized({
          authorization: params.authorization,
          iModelId: params.iModelId,
          errorCodeOnFailure: types_1.IModelsErrorCode.EmptyIModelInitializationFailed,
          headers: params.headers
        }),
        timeoutErrorFactory: () => new internal_1.IModelsErrorImpl({
          code: types_1.IModelsErrorCode.EmptyIModelInitializationFailed,
          message: "Timed out waiting for empty iModel initialization.",
          originalError: void 0,
          statusCode: void 0,
          details: void 0
        }),
        timeOutInMs: params.timeOutInMs
      });
    }
    async waitForTemplatedIModelInitialization(params) {
      return (0, internal_1.waitForCondition)({
        conditionToSatisfy: async () => this.isIModelInitialized({
          authorization: params.authorization,
          iModelId: params.iModelId,
          errorCodeOnFailure: types_1.IModelsErrorCode.IModelFromTemplateInitializationFailed,
          headers: params.headers
        }),
        timeoutErrorFactory: () => new internal_1.IModelsErrorImpl({
          code: types_1.IModelsErrorCode.IModelFromTemplateInitializationTimedOut,
          message: "Timed out waiting for Baseline File initialization.",
          originalError: void 0,
          statusCode: void 0,
          details: void 0
        }),
        timeOutInMs: params.timeOutInMs
      });
    }
    async waitForClonedIModelInitialization(params) {
      return (0, internal_1.waitForCondition)({
        conditionToSatisfy: async () => this.isIModelInitialized({
          authorization: params.authorization,
          iModelId: params.iModelId,
          errorCodeOnFailure: types_1.IModelsErrorCode.ClonedIModelInitializationFailed,
          headers: params.headers
        }),
        timeoutErrorFactory: () => new internal_1.IModelsErrorImpl({
          code: types_1.IModelsErrorCode.ClonedIModelInitializationTimedOut,
          message: "Timed out waiting for Cloned iModel initialization.",
          originalError: void 0,
          statusCode: void 0,
          details: void 0
        }),
        timeOutInMs: params.timeOutInMs
      });
    }
    async waitForIModelForkInitialization(params) {
      return (0, internal_1.waitForCondition)({
        conditionToSatisfy: async () => this.isIModelForkInitialized({
          authorization: params.authorization,
          iModelId: params.iModelId,
          headers: params.headers
        }),
        timeoutErrorFactory: () => new internal_1.IModelsErrorImpl({
          code: types_1.IModelsErrorCode.IModelForkInitializationTimedOut,
          message: "Timed out waiting for iModel fork initialization.",
          originalError: void 0,
          statusCode: void 0,
          details: void 0
        }),
        timeOutInMs: params.timeOutInMs
      });
    }
  };
  IModelOperations2.IModelOperations = IModelOperations$12;
  return IModelOperations2;
}
var BriefcaseOperations$1 = {};
var hasRequiredBriefcaseOperations$1;
function requireBriefcaseOperations$1() {
  if (hasRequiredBriefcaseOperations$1) return BriefcaseOperations$1;
  hasRequiredBriefcaseOperations$1 = 1;
  Object.defineProperty(BriefcaseOperations$1, "__esModule", { value: true });
  BriefcaseOperations$1.BriefcaseOperations = void 0;
  const internal_1 = requireInternal$6();
  const types_1 = requireTypes$4();
  const SharedFunctions_1 = requireSharedFunctions();
  class BriefcaseOperations3 extends internal_1.OperationsBase {
    constructor(options, _iModelsClient) {
      super(options);
      this._iModelsClient = _iModelsClient;
    }
    /**
     * Gets Briefcases of a specific iModel. This method returns Briefcases in their minimal representation. The returned iterator
     * internally queries entities in pages. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-briefcases/ Get iModel Briefcases}
     * operation from iModels API.
     * @param {GetBriefcaseListParams} params parameters for this operation. See {@link GetBriefcaseListParams}.
     * @returns {EntityListIterator<MinimalBriefcase>} iterator for Briefcase list. See {@link EntityListIterator},
     * {@link MinimalBriefcase}.
     */
    getMinimalList(params) {
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getBriefcaseListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
        preferReturn: types_1.PreferReturn.Minimal,
        entityCollectionAccessor: (response) => response.body.briefcases,
        headers: params.headers
      }));
    }
    /**
     * Gets Briefcases of a specific iModel. This method returns Briefcases in their full representation. The returned iterator
     * internally queries entities in pages. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-briefcases/ Get iModel Briefcases}
     * operation from iModels API.
     * @param {GetBriefcaseListParams} params parameters for this operation. See {@link GetBriefcaseListParams}.
     * @returns {EntityListIterator<Briefcase>} iterator for Briefcase list. See {@link EntityListIterator}, {@link Briefcase}.
     */
    getRepresentationList(params) {
      const entityCollectionAccessor = (response) => {
        const briefcases = response.body.briefcases;
        const mappedBriefcases = briefcases.map((briefcase) => this.appendRelatedEntityCallbacks(params.authorization, briefcase, params.headers));
        return mappedBriefcases;
      };
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getBriefcaseListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
        preferReturn: types_1.PreferReturn.Representation,
        entityCollectionAccessor,
        headers: params.headers
      }));
    }
    /**
     * Gets a single Briefcase by its id. This method returns a Briefcase in its full representation. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-briefcase-details/ Get iModel Briefcase}
     * operation from iModels API.
     * @param {GetSingleBriefcaseParams} params parameters for this operation. See {@link GetSingleBriefcaseParams}.
     * @returns {Promise<Briefcase>} an Briefcase with specified id. See {@link iModel}.
     */
    async getSingle(params) {
      const response = await this.sendGetRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getSingleBriefcaseUrl({ iModelId: params.iModelId, briefcaseId: params.briefcaseId }),
        headers: params.headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, response.body.briefcase, params.headers);
      return result;
    }
    appendRelatedEntityCallbacks(authorization, briefcase, headers) {
      const getOwner = async () => (0, SharedFunctions_1.getUser)(authorization, this._iModelsClient.users, this._options.urlFormatter, briefcase._links.owner?.href, headers);
      const checkpointLink = briefcase._links.checkpoint;
      (0, SharedFunctions_1.assertLink)(checkpointLink);
      const getCheckpoint = async () => {
        const response = await this.sendGetRequest({
          authorization,
          url: checkpointLink.href,
          headers
        });
        return response.body.checkpoint;
      };
      const result = {
        ...briefcase,
        getOwner,
        getCheckpoint
      };
      return result;
    }
  }
  BriefcaseOperations$1.BriefcaseOperations = BriefcaseOperations3;
  return BriefcaseOperations$1;
}
var ChangesetOperations$1 = {};
var hasRequiredChangesetOperations$1;
function requireChangesetOperations$1() {
  if (hasRequiredChangesetOperations$1) return ChangesetOperations$1;
  hasRequiredChangesetOperations$1 = 1;
  Object.defineProperty(ChangesetOperations$1, "__esModule", { value: true });
  ChangesetOperations$1.ChangesetOperations = void 0;
  const internal_1 = requireInternal$6();
  const types_1 = requireTypes$4();
  const SharedFunctions_1 = requireSharedFunctions();
  class ChangesetOperations3 extends internal_1.OperationsBase {
    constructor(options, _iModelsClient) {
      super(options);
      this._iModelsClient = _iModelsClient;
    }
    /**
     * Gets Changesets for a specific iModel. This method returns Changesets in their minimal representation. The
     * returned iterator internally queries entities in pages. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changesets/ Get iModel Changesets}
     * operation from iModels API.
     * @param {GetChangesetListParams} params parameters for this operation. See {@link GetChangesetListParams}.
     * @returns {EntityListIterator<MinimalChangeset>} iterator for Changeset list. See {@link EntityListIterator},
     * {@link MinimalChangeset}.
     */
    getMinimalList(params) {
      const entityCollectionAccessor = (response) => {
        const changesets = response.body.changesets;
        const mappedChangesets = changesets.map((changeset) => this.appendRelatedMinimalEntityCallbacks(params.authorization, changeset, params.headers));
        return mappedChangesets;
      };
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getChangesetListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
        preferReturn: types_1.PreferReturn.Minimal,
        entityCollectionAccessor,
        headers: params.headers
      }));
    }
    /**
     * Gets Changesets for a specific iModel. This method returns Changesets in their full representation. The returned
     * iterator internally queries entities in pages. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changesets/ Get iModel Changesets}
     * operation from iModels API.
     * @param {GetChangesetListParams} params parameters for this operation. See {@link GetChangesetListParams}.
     * @returns {EntityListIterator<Changeset>} iterator for Changeset list. See {@link EntityListIterator},
     * {@link Changeset}.
     */
    getRepresentationList(params) {
      const entityCollectionAccessor = (response) => {
        const changesets = response.body.changesets;
        const mappedChangesets = changesets.map((changeset) => this.appendRelatedEntityCallbacks(params.authorization, changeset, params.headers));
        return mappedChangesets;
      };
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getChangesetListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
        preferReturn: types_1.PreferReturn.Representation,
        entityCollectionAccessor,
        headers: params.headers
      }));
    }
    /**
     * Gets a single Changeset identified by either index or id. This method returns a Changeset in its full representation.
     * Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changeset-details/ Get iModel Changeset}
     * operation from iModels API.
     * @param {GetSingleChangesetParams} params parameters for this operation. See {@link GetSingleChangesetParams}.
     * @returns {Promise<Changeset>} a Changeset with specified id or index. See {@link Changeset}.
     */
    async getSingle(params) {
      const changeset = await this.querySingleInternal(params);
      return changeset;
    }
    async querySingleInternal(params) {
      const { authorization, iModelId, headers, ...changesetIdOrIndex } = params;
      const response = await this.sendGetRequest({
        authorization,
        url: this._options.urlFormatter.getSingleChangesetUrl({ iModelId, ...changesetIdOrIndex }),
        headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, response.body.changeset, params.headers);
      return result;
    }
    appendRelatedMinimalEntityCallbacks(authorization, changeset, headers) {
      const getCreator = async () => (0, SharedFunctions_1.getUser)(authorization, this._iModelsClient.users, this._options.urlFormatter, changeset._links.creator?.href, headers);
      const result = {
        ...changeset,
        getCreator
      };
      return result;
    }
    appendRelatedEntityCallbacks(authorization, changeset, headers) {
      const getNamedVersion = async () => this.getNamedVersion(authorization, changeset._links.namedVersion?.href, headers);
      const getCurrentOrPrecedingCheckpoint = async () => this.getCurrentOrPrecedingCheckpoint(authorization, changeset._links.currentOrPrecedingCheckpoint?.href, headers);
      const changesetWithMinimalCallbacks = this.appendRelatedMinimalEntityCallbacks(authorization, changeset, headers);
      const result = {
        ...changesetWithMinimalCallbacks,
        getNamedVersion,
        getCurrentOrPrecedingCheckpoint
      };
      return result;
    }
    async getNamedVersion(authorization, namedVersionLink, headers) {
      if (!namedVersionLink)
        return void 0;
      const { iModelId, namedVersionId } = this._options.urlFormatter.parseNamedVersionUrl(namedVersionLink);
      return this._iModelsClient.namedVersions.getSingle({
        authorization,
        iModelId,
        namedVersionId,
        headers
      });
    }
    async getCurrentOrPrecedingCheckpoint(authorization, currentOrPrecedingCheckpointLink, headers) {
      if (!currentOrPrecedingCheckpointLink)
        return void 0;
      const entityIds = this._options.urlFormatter.parseCheckpointUrl(currentOrPrecedingCheckpointLink);
      return this._iModelsClient.checkpoints.getSingle({
        authorization,
        ...entityIds,
        headers
      });
    }
  }
  ChangesetOperations$1.ChangesetOperations = ChangesetOperations3;
  return ChangesetOperations$1;
}
var ChangesetExtendedDataOperations$1 = {};
var hasRequiredChangesetExtendedDataOperations$1;
function requireChangesetExtendedDataOperations$1() {
  if (hasRequiredChangesetExtendedDataOperations$1) return ChangesetExtendedDataOperations$1;
  hasRequiredChangesetExtendedDataOperations$1 = 1;
  Object.defineProperty(ChangesetExtendedDataOperations$1, "__esModule", { value: true });
  ChangesetExtendedDataOperations$1.ChangesetExtendedDataOperations = void 0;
  const internal_1 = requireInternal$6();
  class ChangesetExtendedDataOperations3 extends internal_1.OperationsBase {
    constructor(options) {
      super(options);
    }
    /**
     * Gets Changesets Extended Data for a specific iModel. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changesets-extended-data/ Get iModel Changesets Extended Data}
     * operation from iModels API.
     * @param {GetChangesetExtendedDataListParams} params parameters for this operation. See {@link GetChangesetExtendedDataListParams}.
     * @returns {EntityListIterator<ChangesetExtendedData>} iterator for Changeset Extended Data list. See {@link EntityListIterator}.
     */
    getList(params) {
      const entityCollectionAccessor = (response) => {
        const apiResponse = response.body.extendedData;
        const mappedChangesetExtendedData = apiResponse.map((extendedData) => this.convertToChangesetExtendedData(extendedData));
        return mappedChangesetExtendedData;
      };
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getChangesetExtendedDataListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
        entityCollectionAccessor,
        headers: params.headers
      }));
    }
    /**
     * Gets a single Changeset Extended Data identified by either Changeset index or id. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changeset-extended-data-details/ Get iModel Changeset Extended Data}
     * operation from iModels API.
     * @param {GetSingleChangesetExtendedDataParams} params parameters for this operation. See {@link GetSingleChangesetExtendedDataParams}.
     * @returns {Promise<ChangesetExtendedData>} a Changeset Extended Data with the specified changeset id or index. See {@link ChangesetExtendedData}.
     */
    async getSingle(params) {
      const { authorization, iModelId, headers, ...changesetIdOrIndex } = params;
      const response = await this.sendGetRequest({
        authorization,
        url: this._options.urlFormatter.getSingleChangesetExtendedDataUrl({ iModelId, ...changesetIdOrIndex }),
        headers
      });
      return this.convertToChangesetExtendedData(response.body.extendedData);
    }
    convertToChangesetExtendedData(changesetExtendedDataApiResponse) {
      return {
        changesetId: changesetExtendedDataApiResponse.changesetId,
        changesetIndex: changesetExtendedDataApiResponse.changesetIndex,
        data: this.convertBase64StringToObject(changesetExtendedDataApiResponse.data)
      };
    }
    convertBase64StringToObject(input) {
      if (typeof window !== "undefined") {
        const binString = atob(input);
        const bytes = Uint8Array.from(binString, (m) => m.charCodeAt(0));
        return JSON.parse(new TextDecoder().decode(bytes));
      } else {
        const decodedString = Buffer.from(input, "base64").toString("utf8");
        return JSON.parse(decodedString);
      }
    }
  }
  ChangesetExtendedDataOperations$1.ChangesetExtendedDataOperations = ChangesetExtendedDataOperations3;
  return ChangesetExtendedDataOperations$1;
}
var ChangesetGroupOperations$1 = {};
var hasRequiredChangesetGroupOperations$1;
function requireChangesetGroupOperations$1() {
  if (hasRequiredChangesetGroupOperations$1) return ChangesetGroupOperations$1;
  hasRequiredChangesetGroupOperations$1 = 1;
  Object.defineProperty(ChangesetGroupOperations$1, "__esModule", { value: true });
  ChangesetGroupOperations$1.ChangesetGroupOperations = void 0;
  const internal_1 = requireInternal$6();
  const SharedFunctions_1 = requireSharedFunctions();
  class ChangesetGroupOperations3 extends internal_1.OperationsBase {
    constructor(options, _iModelsClient) {
      super(options);
      this._iModelsClient = _iModelsClient;
    }
    /**
     * Gets Changeset Groups for a specific iModel. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changeset-groups/ Get iModel Changeset Groups}
     * operation from iModels API.
     * @param {GetChangesetGroupListParams} params parameters for this operation. See {@link GetChangesetGroupListParams}.
     * @returns {EntityListIterator<ChangesetGroup>} iterator for Changeset Group list, which internally queries entities in pages.
     * See {@link EntityListIterator}, {@link ChangesetGroup}.
     */
    getList(params) {
      const entityCollectionAccessor = (response) => {
        const changesetGroups = response.body.changesetGroups;
        const mappedChangesetGroups = changesetGroups.map((changesetGroup) => this.appendRelatedEntityCallbacks(params.authorization, changesetGroup, params.headers));
        return mappedChangesetGroups;
      };
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getChangesetGroupListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
        entityCollectionAccessor,
        headers: params.headers
      }));
    }
    /**
     * Gets a single Changeset Group identified by id. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changeset-group-details/ Get iModel Changeset Group}
     * operation from iModels API.
     * @param {GetSingleChangesetGroupParams} params parameters for this operation. See {@link GetSingleChangesetGroupParams}.
     * @returns {Promise<ChangesetGroup>} a Changeset Group with the specified id. See {@link ChangesetGroup}.
     */
    async getSingle(params) {
      const response = await this.sendGetRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getSingleChangesetGroupUrl({ iModelId: params.iModelId, changesetGroupId: params.changesetGroupId }),
        headers: params.headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, response.body.changesetGroup, params.headers);
      return result;
    }
    appendRelatedEntityCallbacks(authorization, changesetGroup, headers) {
      const getCreator = async () => (0, SharedFunctions_1.getUser)(authorization, this._iModelsClient.users, this._options.urlFormatter, changesetGroup._links.creator?.href, headers);
      const result = {
        ...changesetGroup,
        getCreator
      };
      return result;
    }
  }
  ChangesetGroupOperations$1.ChangesetGroupOperations = ChangesetGroupOperations3;
  return ChangesetGroupOperations$1;
}
var NamedVersionOperations2 = {};
var hasRequiredNamedVersionOperations;
function requireNamedVersionOperations() {
  if (hasRequiredNamedVersionOperations) return NamedVersionOperations2;
  hasRequiredNamedVersionOperations = 1;
  Object.defineProperty(NamedVersionOperations2, "__esModule", { value: true });
  NamedVersionOperations2.NamedVersionOperations = void 0;
  const internal_1 = requireInternal$6();
  const types_1 = requireTypes$4();
  const SharedFunctions_1 = requireSharedFunctions();
  let NamedVersionOperations$12 = class NamedVersionOperations extends internal_1.OperationsBase {
    constructor(options, _iModelsClient) {
      super(options);
      this._iModelsClient = _iModelsClient;
    }
    /**
     * Gets Named Versions of a specific iModel. This method returns Named Versions in their minimal representation. The
     * returned iterator internally queries entities in pages. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-named-versions/ Get iModel Named Versions}
     * operation from iModels API.
     * @param {GetNamedVersionListParams} params parameters for this operation. See {@link GetNamedVersionListParams}.
     * @returns {EntityListIterator<MinimalNamedVersion>} iterator for Named Version list. See {@link EntityListIterator},
     * {@link MinimalNamedVersion}.
     */
    getMinimalList(params) {
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getNamedVersionListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
        preferReturn: types_1.PreferReturn.Minimal,
        entityCollectionAccessor: (response) => response.body.namedVersions,
        headers: params.headers
      }));
    }
    /**
     * Gets Named Versions of a specific iModel. This method returns Named Versions in their full representation. The
     * returned iterator internally queries entities in pages. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-named-versions/
     * Get iModel Named Versions} operation from iModels API.
     * @param {GetNamedVersionListParams} params parameters for this operation. See {@link GetNamedVersionListParams}.
     * @returns {EntityListIterator<NamedVersion>} iterator for Named Version list. See {@link EntityListIterator},
     * {@link NamedVersion}.
     */
    getRepresentationList(params) {
      const entityCollectionAccessor = (response) => {
        const namedVersions = response.body.namedVersions;
        const mappedNamedVersions = namedVersions.map((namedVersion) => this.appendRelatedEntityCallbacks(params.authorization, namedVersion, params.headers));
        return mappedNamedVersions;
      };
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getNamedVersionListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
        preferReturn: types_1.PreferReturn.Representation,
        entityCollectionAccessor,
        headers: params.headers
      }));
    }
    /**
     * Gets a single Named Version by its id. This method returns a Named Version in its full representation. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-named-version-details/
     * Get iModel Named Version} operation from iModels API.
     * @param {GetSingleNamedVersionParams} params parameters for this operation. See {@link GetSingleNamedVersionParams}.
     * @returns {Promise<NamedVersion>} a Named Version with specified id. See {@link NamedVersion}.
     */
    async getSingle(params) {
      const response = await this.sendGetRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getSingleNamedVersionUrl({ iModelId: params.iModelId, namedVersionId: params.namedVersionId }),
        headers: params.headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, response.body.namedVersion, params.headers);
      return result;
    }
    /**
     * Creates a Named Version with specified properties. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel-named-version/
     * Create iModel Named Version} operation from iModels API.
     * @param {CreateNamedVersionParams} params parameters for this operation. See {@link CreateNamedVersionParams}.
     * @returns {Promise<NamedVersion>} newly created Named Version. See {@link NamedVersion}.
     */
    async create(params) {
      const createNamedVersionBody = this.getCreateNamedVersionRequestBody(params.namedVersionProperties);
      const createNamedVersionResponse = await this.sendPostRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getNamedVersionListUrl({ iModelId: params.iModelId }),
        body: createNamedVersionBody,
        headers: params.headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, createNamedVersionResponse.body.namedVersion, params.headers);
      return result;
    }
    /**
     * Updates Named Version with specified properties. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/update-imodel-named-version/
     * Update iModel Named Version} operation from iModels API.
     * @param {UpdateNamedVersionParams} params parameters for this operation. See {@link UpdateNamedVersionParams}.
     * @returns {Promise<NamedVersion>} updated Named Version. See {@link NamedVersion}.
     */
    async update(params) {
      const updateNamedVersionBody = this.getUpdateNamedVersionRequestBody(params.namedVersionProperties);
      const updateNamedVersionResponse = await this.sendPatchRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getSingleNamedVersionUrl({ iModelId: params.iModelId, namedVersionId: params.namedVersionId }),
        body: updateNamedVersionBody,
        headers: params.headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, updateNamedVersionResponse.body.namedVersion, params.headers);
      return result;
    }
    getCreateNamedVersionRequestBody(namedVersionProperties) {
      return {
        name: namedVersionProperties.name,
        description: namedVersionProperties.description,
        changesetId: namedVersionProperties.changesetId
      };
    }
    getUpdateNamedVersionRequestBody(namedVersionProperties) {
      return {
        name: namedVersionProperties.name,
        description: namedVersionProperties.description,
        state: namedVersionProperties.state
      };
    }
    appendRelatedEntityCallbacks(authorization, namedVersion, headers) {
      const getCreator = async () => (0, SharedFunctions_1.getUser)(authorization, this._iModelsClient.users, this._options.urlFormatter, namedVersion._links.creator?.href, headers);
      const getChangeset = async () => this.getChangeset(authorization, namedVersion._links.changeset?.href, headers);
      const result = {
        ...namedVersion,
        getCreator,
        getChangeset
      };
      return result;
    }
    async getChangeset(authorization, changesetLink, headers) {
      if (!changesetLink)
        return void 0;
      const entityIds = this._options.urlFormatter.parseChangesetUrl(changesetLink);
      return this._iModelsClient.changesets.getSingle({
        authorization,
        ...entityIds,
        headers
      });
    }
  };
  NamedVersionOperations2.NamedVersionOperations = NamedVersionOperations$12;
  return NamedVersionOperations2;
}
var CheckpointOperations2 = {};
var hasRequiredCheckpointOperations;
function requireCheckpointOperations() {
  if (hasRequiredCheckpointOperations) return CheckpointOperations2;
  hasRequiredCheckpointOperations = 1;
  Object.defineProperty(CheckpointOperations2, "__esModule", { value: true });
  CheckpointOperations2.CheckpointOperations = void 0;
  const internal_1 = requireInternal$6();
  let CheckpointOperations$12 = class CheckpointOperations extends internal_1.OperationsBase {
    /**
     * Gets a single Checkpoint generated either on a specific Changeset or for a specific Named Version. This method
     * returns a Checkpoint in its full representation. Wraps
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-changeset-checkpoint/ Get Changeset Checkpoint},
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-named-version-checkpoint/ Get Named Version Checkpoint} and
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-briefcase-checkpoint/ Get Briefcase Checkpoint}
     * operations from iModels API.
     * @param {GetSingleCheckpointParams} params parameters for this operation. See {@link GetSingleCheckpointParams}.
     * @returns {Promise<Checkpoint>} a Checkpoint for the specified parent entity. See {@link Checkpoint}.
     */
    async getSingle(params) {
      const { authorization, iModelId, headers, ...parentEntityId } = params;
      const response = await this.sendGetRequest({
        authorization,
        url: this._options.urlFormatter.getCheckpointUrl({ iModelId, ...parentEntityId }),
        headers
      });
      return response.body.checkpoint;
    }
  };
  CheckpointOperations2.CheckpointOperations = CheckpointOperations$12;
  return CheckpointOperations2;
}
var ThumbnailOperations2 = {};
var hasRequiredThumbnailOperations;
function requireThumbnailOperations() {
  if (hasRequiredThumbnailOperations) return ThumbnailOperations2;
  hasRequiredThumbnailOperations = 1;
  Object.defineProperty(ThumbnailOperations2, "__esModule", { value: true });
  ThumbnailOperations2.ThumbnailOperations = void 0;
  const internal_1 = requireInternal$6();
  const types_1 = requireTypes$4();
  let ThumbnailOperations$12 = class ThumbnailOperations extends internal_1.OperationsBase {
    /**
     * Downloads a thumbnail for a specific iModel. The Thumbnail returned is either a default one or a custom
     * uploaded one. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-thumbnail/ Download iModel Thumbnail}
     * operation from iModels API.
     * @param {DownloadThumbnailParams} params parameters for this operation. See {@link DownloadThumbnailParams}.
     * @returns {Promise<Thumbnail>} downloaded Thumbnail. See {@link Thumbnail}. The method returns the data in binary
     * form which can then be consumed depending on the environment.
     * @example
     * Save data to local file (Node.js):
     * ```
     *  const thumbnail: Thumbnail = await iModelsClient.thumbnails.download({ ... });
     *  await fs.promises.writeFile("thumbnail.png", Buffer.from(thumbnail.data.buffer), "binary");
     * ```
     */
    async download(params) {
      const urlParams = {
        ...params.urlParams,
        size: params.urlParams?.size ?? types_1.ThumbnailSize.Small
      };
      const url2 = this._options.urlFormatter.getThumbnailUrl({ iModelId: params.iModelId, urlParams });
      const response = await this.sendGetRequest({
        authorization: params.authorization,
        url: url2,
        responseType: types_1.ContentType.Png,
        headers: params.headers
      });
      return {
        size: urlParams.size,
        imageType: types_1.ContentType.Png,
        image: response.body
      };
    }
    /**
     * Uploads a custom iModel Thumbnail. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/upload-imodel-thumbnail/ Upload iModel Thumbnail}
     * operation from iModels API.
     * @param {UploadThumbnailParams} params parameters for this operation. See {@link UploadThumbnailParams}.
     * @returns {Promise<void>} a promise that resolves after operation completes.
     */
    async upload(params) {
      const url2 = this._options.urlFormatter.getThumbnailUrl({ iModelId: params.iModelId });
      await this.sendPutRequest({
        authorization: params.authorization,
        url: url2,
        contentType: params.thumbnailProperties.imageType,
        body: params.thumbnailProperties.image,
        headers: params.headers
      });
    }
  };
  ThumbnailOperations2.ThumbnailOperations = ThumbnailOperations$12;
  return ThumbnailOperations2;
}
var UserOperations2 = {};
var hasRequiredUserOperations;
function requireUserOperations() {
  if (hasRequiredUserOperations) return UserOperations2;
  hasRequiredUserOperations = 1;
  Object.defineProperty(UserOperations2, "__esModule", { value: true });
  UserOperations2.UserOperations = void 0;
  const internal_1 = requireInternal$6();
  const types_1 = requireTypes$4();
  let UserOperations$12 = class UserOperations extends internal_1.OperationsBase {
    /** Gets Users who have ever been connected to the iModel specified by the iModel id. This method returns Users in
     * their minimal representation. The returned iterator internally queries entities in pages. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-users/ Get iModel Users}
     * operation from iModels API.
     * @param {GetUserListParams} params parameters for this operation. See {@link GetUserListParams}.
     * @returns {EntityListIterator<MinimalUser>} iterator for User list. See {@link EntityListIterator}, {@link MinimalUser}.
     */
    getMinimalList(params) {
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getUserListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
        preferReturn: types_1.PreferReturn.Minimal,
        entityCollectionAccessor: (response) => response.body.users,
        headers: params.headers
      }));
    }
    /**
     * Gets Users who have ever been connected to the iModel specified by the iModel id. This method returns Users in their
     * full representation. The returned iterator internally queries entities in pages. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-users/ Get iModel Users}
     * operation from iModels API.
     * @param {GetUserListParams} params parameters for this operation. See {@link GetUserListParams}.
     * @returns {EntityListIterator<User>} iterator for User list. See {@link EntityListIterator}, {@link User}.
     */
    getRepresentationList(params) {
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getUserListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
        preferReturn: types_1.PreferReturn.Representation,
        entityCollectionAccessor: (response) => response.body.users,
        headers: params.headers
      }));
    }
    /**
     * Gets a single User by its id. This method returns a User in its full representation. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-user-details/ Get iModel User}
     * operation from iModels API.
     * @param {GetSingleUserParams} params parameters for this operation. See {@link GetSingleUserParams}.
     * @returns {Promise<User>} a User with specified id. See {@link User}.
     */
    async getSingle(params) {
      const response = await this.sendGetRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getSingleUserUrl({ iModelId: params.iModelId, userId: params.userId }),
        headers: params.headers
      });
      return response.body.user;
    }
  };
  UserOperations2.UserOperations = UserOperations$12;
  return UserOperations2;
}
var UserPermissionOperations2 = {};
var hasRequiredUserPermissionOperations;
function requireUserPermissionOperations() {
  if (hasRequiredUserPermissionOperations) return UserPermissionOperations2;
  hasRequiredUserPermissionOperations = 1;
  Object.defineProperty(UserPermissionOperations2, "__esModule", { value: true });
  UserPermissionOperations2.UserPermissionOperations = void 0;
  const internal_1 = requireInternal$6();
  let UserPermissionOperations$12 = class UserPermissionOperations extends internal_1.OperationsBase {
    /**
     * Retrieves Permissions the current user has for the specified iModel. The current user is determined based on
     * passed authorization information. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-user-permissions/ Get iModel User Permissions}
     * operation from iModels API. iModels Permissions may be configured on a iTwin level or an iModel level.
     * This operation will return Permissions configured for this specific iModel or iTwin Permissions if iModel
     * Permissions are not configured.
     * @param {GetUserPermissionsParams} params parameters for this operation. See {@link GetUserPermissionsParams}.
     * @returns {Promise<UserPermissions>} User Permissions. See {@link UserPermissions}.
     */
    async get(params) {
      const response = await this.sendGetRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getUserPermissionsUrl({ iModelId: params.iModelId }),
        headers: params.headers
      });
      return response.body;
    }
  };
  UserPermissionOperations2.UserPermissionOperations = UserPermissionOperations$12;
  return UserPermissionOperations2;
}
var OperationOperations2 = {};
var hasRequiredOperationOperations;
function requireOperationOperations() {
  if (hasRequiredOperationOperations) return OperationOperations2;
  hasRequiredOperationOperations = 1;
  Object.defineProperty(OperationOperations2, "__esModule", { value: true });
  OperationOperations2.OperationOperations = void 0;
  const internal_1 = requireInternal$6();
  let OperationOperations$12 = class OperationOperations extends internal_1.OperationsBase {
    constructor(options) {
      super(options);
    }
    /**
     * Returns the information about iModel creation process. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-create-imodel-operation-details/ Get Create iModel Operation Details}
     * operation from iModels API.
     * @param {GetCreateIModelOperationDetailsParams} params parameters for this operation. See {@link GetCreateIModelOperationDetailsParams}.
     * @returns {Promise<CreateIModelOperationDetails>} iModel creation details. See {@link CreateIModelOperationDetails}.
     */
    async getCreateIModelDetails(params) {
      const response = await this.sendGetRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getCreateIModelOperationDetailsUrl({ iModelId: params.iModelId }),
        headers: params.headers
      });
      return response.body.createOperation;
    }
  };
  OperationOperations2.OperationOperations = OperationOperations$12;
  return OperationOperations2;
}
var hasRequiredOperationExports$1;
function requireOperationExports$1() {
  if (hasRequiredOperationExports$1) return OperationExports;
  hasRequiredOperationExports$1 = 1;
  (function(exports) {
    var __createBinding = OperationExports && OperationExports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = OperationExports && OperationExports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireIModelOperations$1(), exports);
    __exportStar(requireBriefcaseOperations$1(), exports);
    __exportStar(requireChangesetOperations$1(), exports);
    __exportStar(requireChangesetExtendedDataOperations$1(), exports);
    __exportStar(requireChangesetGroupOperations$1(), exports);
    __exportStar(requireNamedVersionOperations(), exports);
    __exportStar(requireCheckpointOperations(), exports);
    __exportStar(requireThumbnailOperations(), exports);
    __exportStar(requireUserOperations(), exports);
    __exportStar(requireUserPermissionOperations(), exports);
    __exportStar(requireOperationOperations(), exports);
  })(OperationExports);
  return OperationExports;
}
var OperationOptions$1 = {};
var hasRequiredOperationOptions$1;
function requireOperationOptions$1() {
  if (hasRequiredOperationOptions$1) return OperationOptions$1;
  hasRequiredOperationOptions$1 = 1;
  Object.defineProperty(OperationOptions$1, "__esModule", { value: true });
  return OperationOptions$1;
}
var IModelsApiUrlFormatter$1 = {};
var hasRequiredIModelsApiUrlFormatter$1;
function requireIModelsApiUrlFormatter$1() {
  if (hasRequiredIModelsApiUrlFormatter$1) return IModelsApiUrlFormatter$1;
  hasRequiredIModelsApiUrlFormatter$1 = 1;
  Object.defineProperty(IModelsApiUrlFormatter$1, "__esModule", { value: true });
  IModelsApiUrlFormatter$1.IModelsApiUrlFormatter = void 0;
  class IModelsApiUrlFormatter3 {
    constructor(baseUrl) {
      this.baseUrl = baseUrl;
      this._regexIgnoreCaseOption = "i";
      this._groupNames = {
        iModelId: "iModelId",
        changesetIdOrIndex: "changesetIdOrIndex",
        namedVersionId: "namedVersionId",
        userId: "userId"
      };
      this._numericRegex = new RegExp("^\\d+$");
      this._changesetUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/changesets/(?<${this._groupNames.changesetIdOrIndex}>[^/]*)`, this._regexIgnoreCaseOption);
      this._checkpointUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/changesets/(?<${this._groupNames.changesetIdOrIndex}>.*)/checkpoint`, this._regexIgnoreCaseOption);
      this._namedVersionUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/namedversions/(?<${this._groupNames.namedVersionId}>[^/]*)`, this._regexIgnoreCaseOption);
      this._userUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/users/(?<${this._groupNames.userId}>[^/]*)`, this._regexIgnoreCaseOption);
      this._iModelUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>[^/]*)`, this._regexIgnoreCaseOption);
    }
    getCreateIModelUrl() {
      return this.baseUrl;
    }
    getCloneIModelUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/clone`;
    }
    getForkIModelUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/fork`;
    }
    getSingleIModelUrl(params) {
      return `${this.baseUrl}/${params.iModelId}`;
    }
    getIModelListUrl(params) {
      return `${this.baseUrl}${this.formQueryString({ ...params.urlParams })}`;
    }
    getSingleBriefcaseUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/briefcases/${params.briefcaseId}`;
    }
    getBriefcaseListUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/briefcases${this.formQueryString({ ...params.urlParams })}`;
    }
    getSingleChangesetUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/changesets/${params.changesetId ?? params.changesetIndex}`;
    }
    getChangesetListUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/changesets${this.formQueryString({ ...params.urlParams })}`;
    }
    getSingleChangesetExtendedDataUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/changesets/${params.changesetId ?? params.changesetIndex}/extendeddata`;
    }
    getChangesetExtendedDataListUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/changesets/extendeddata${this.formQueryString({ ...params.urlParams })}`;
    }
    getSingleChangesetGroupUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/changesetgroups/${params.changesetGroupId}`;
    }
    getChangesetGroupListUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/changesetgroups${this.formQueryString({ ...params.urlParams })}`;
    }
    parseChangesetUrl(url2) {
      const matchedGroups = this._changesetUrlRegex.exec(url2).groups;
      return {
        iModelId: matchedGroups[this._groupNames.iModelId],
        ...this.parseChangesetIdOrIndex(matchedGroups[this._groupNames.changesetIdOrIndex])
      };
    }
    getSingleNamedVersionUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/namedversions/${params.namedVersionId}`;
    }
    getNamedVersionListUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/namedversions${this.formQueryString({ ...params.urlParams })}`;
    }
    getCheckpointUrl(params) {
      let parentEntityUrlPath;
      if (params.namedVersionId)
        parentEntityUrlPath = `namedversions/${params.namedVersionId}`;
      else if (params.changesetId || params.changesetIndex != null)
        parentEntityUrlPath = `changesets/${params.changesetId ?? params.changesetIndex}`;
      else
        parentEntityUrlPath = "briefcases";
      return `${this.baseUrl}/${params.iModelId}/${parentEntityUrlPath}/checkpoint`;
    }
    getThumbnailUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/thumbnail${this.formQueryString({ ...params.urlParams })}`;
    }
    getUserListUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/users${this.formQueryString({ ...params.urlParams })}`;
    }
    getSingleUserUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/users/${params.userId}`;
    }
    getUserPermissionsUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/permissions`;
    }
    getCreateIModelOperationDetailsUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/operations/create`;
    }
    parseCheckpointUrl(url2) {
      const matchedGroups = this._checkpointUrlRegex.exec(url2).groups;
      return {
        iModelId: matchedGroups[this._groupNames.iModelId],
        ...this.parseChangesetIdOrIndex(matchedGroups[this._groupNames.changesetIdOrIndex])
      };
    }
    parseNamedVersionUrl(url2) {
      const matchedGroups = this._namedVersionUrlRegex.exec(url2).groups;
      return {
        iModelId: matchedGroups[this._groupNames.iModelId],
        namedVersionId: matchedGroups[this._groupNames.namedVersionId]
      };
    }
    parseUserUrl(url2) {
      const matchedGroups = this._userUrlRegex.exec(url2).groups;
      return {
        iModelId: matchedGroups[this._groupNames.iModelId],
        userId: matchedGroups[this._groupNames.userId]
      };
    }
    parseIModelUrl(url2) {
      const matchedGroups = this._iModelUrlRegex.exec(url2).groups;
      return {
        iModelId: matchedGroups[this._groupNames.iModelId]
      };
    }
    formQueryString(urlParameters) {
      let queryString = "";
      for (const urlParameterKey in urlParameters) {
        if (!Object.prototype.hasOwnProperty.call(urlParameters, urlParameterKey))
          continue;
        const urlParameterValue = urlParameters[urlParameterKey];
        if (!this.shouldAppendToUrl(urlParameterValue))
          continue;
        queryString = this.appendToQueryString(queryString, urlParameterKey, urlParameterValue);
      }
      return queryString;
    }
    /**
     * API could return Changeset urls that either contain id or index since both are valid identifiers
     * so here we handle both scenarios. We assume if the value contains only digits and is shorter than 40
     * symbols it is a numeric index, otherwise, it is a string id.
     */
    parseChangesetIdOrIndex(changesetIdOrIndex) {
      const containsOnlyDigits = this._numericRegex.test(changesetIdOrIndex);
      if (containsOnlyDigits && changesetIdOrIndex.length < 40)
        return {
          changesetIndex: parseInt(changesetIdOrIndex, 10)
        };
      return {
        changesetId: changesetIdOrIndex
      };
    }
    shouldAppendToUrl(urlParameterValue) {
      if (urlParameterValue === null || urlParameterValue === void 0)
        return false;
      if (typeof urlParameterValue === "string" && !urlParameterValue.trim())
        return false;
      return true;
    }
    appendToQueryString(existingQueryString, parameterKey, parameterValue) {
      const separator = existingQueryString.length === 0 ? "?" : "&";
      return `${existingQueryString}${separator}${parameterKey}=${this.stringify(parameterValue)}`;
    }
    stringify(urlParameterValue) {
      if (this.isSingleOrderBy(urlParameterValue)) {
        return this.stringifyOrderByParameterValue([urlParameterValue]);
      } else if (this.isMultipleOrderBy(urlParameterValue)) {
        return this.stringifyOrderByParameterValue(urlParameterValue);
      }
      return urlParameterValue.toString();
    }
    isSingleOrderBy(parameterValue) {
      return parameterValue.property !== void 0;
    }
    isMultipleOrderBy(parameterValue) {
      return parameterValue?.[0]?.property !== void 0;
    }
    stringifyOrderByParameterValue(orderByCriteria) {
      let result = "";
      for (let i = 0; i < orderByCriteria.length; i++) {
        if (i !== 0)
          result += ",";
        const criterion = orderByCriteria[i];
        result += criterion.property;
        if (criterion.operator !== void 0)
          result += ` ${criterion.operator}`;
      }
      return result;
    }
  }
  IModelsApiUrlFormatter$1.IModelsApiUrlFormatter = IModelsApiUrlFormatter3;
  return IModelsApiUrlFormatter$1;
}
var hasRequiredOperations$1;
function requireOperations$1() {
  if (hasRequiredOperations$1) return operations;
  hasRequiredOperations$1 = 1;
  (function(exports) {
    var __createBinding = operations && operations.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = operations && operations.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireOperationExports$1(), exports);
    __exportStar(requireOperationParamExports$1(), exports);
    __exportStar(requireOperationOptions$1(), exports);
    __exportStar(requireIModelsApiUrlFormatter$1(), exports);
    __exportStar(requireSharedFunctions(), exports);
  })(operations);
  return operations;
}
var hasRequiredIModelOperations;
function requireIModelOperations() {
  if (hasRequiredIModelOperations) return IModelOperations$1;
  hasRequiredIModelOperations = 1;
  Object.defineProperty(IModelOperations$1, "__esModule", { value: true });
  IModelOperations$1.IModelOperations = void 0;
  const internal_1 = requireInternal$6();
  const operations_1 = requireOperations$1();
  const imodels_client_management_1 = require$$4;
  const types_1 = requireTypes$3();
  const BaselineFileOperations_1 = requireBaselineFileOperations();
  class IModelOperations3 extends operations_1.IModelOperations {
    constructor(options, iModelsClient) {
      super(options, iModelsClient);
      this._baselineFileOperations = new BaselineFileOperations_1.BaselineFileOperations(options);
    }
    /**
    * Creates an iModel from Baseline file with specified properties. Wraps the
    * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel/ Create iModel} operation from iModels API.
    * Internally it creates an iModel instance, uploads the Baseline file, confirms Baseline
    * file upload and then repeatedly queries the Baseline file state until the iModel is initialized. The execution of
    * this method can take up to several minutes due to waiting for initialization to complete. It also depends on the
    * Baseline file size - the larger the file, the longer the upload will take.
    * @param {CreateIModelFromBaselineParams} params parameters for this operation. See {@link CreateIModelFromBaselineParams}.
    * @returns {Promise<IModel>} newly created iModel. See {@link IModel}.
    * @throws an error that implements `iModelsError` interface with code {@link IModelsErrorCode.BaselineFileInitializationFailed} if
    * Baseline file initialization failed or {@link IModelsErrorCode.BaselineFileInitializationTimedOut} if the operation did not complete in time.
    * See {@link IModelsErrorCode}.
    */
    async createFromBaseline(params) {
      const baselineFileSize = await this._options.localFileSystem.getFileSize(params.iModelProperties.filePath);
      const createIModelBody = this.getCreateIModelFromBaselineRequestBody(params.iModelProperties, baselineFileSize);
      const createdIModel = await this.sendIModelPostRequest(params.authorization, createIModelBody, params.headers);
      (0, operations_1.assertLink)(createdIModel._links.upload);
      const uploadUrl = createdIModel._links.upload.href;
      await this._options.cloudStorage.upload({
        url: uploadUrl,
        data: params.iModelProperties.filePath
      });
      (0, operations_1.assertLink)(createdIModel._links.complete);
      const confirmUploadUrl = createdIModel._links.complete.href;
      await this.sendPostRequest({
        authorization: params.authorization,
        url: confirmUploadUrl,
        body: void 0,
        headers: params.headers
      });
      await this.waitForBaselineFileInitialization({
        authorization: params.authorization,
        iModelId: createdIModel.id,
        headers: params.headers,
        timeOutInMs: params.timeOutInMs
      });
      return this.getSingle({
        authorization: params.authorization,
        iModelId: createdIModel.id,
        headers: params.headers
      });
    }
    getCreateIModelFromBaselineRequestBody(iModelProperties, baselineFileSize) {
      return {
        ...this.getCreateEmptyIModelRequestBody(iModelProperties),
        baselineFile: {
          size: baselineFileSize
        }
      };
    }
    async waitForBaselineFileInitialization(params) {
      const isBaselineInitialized = async () => {
        const { state: state2 } = await this._baselineFileOperations.getSingle(params);
        if (state2 !== types_1.BaselineFileState.Initialized && state2 !== types_1.BaselineFileState.WaitingForFile && state2 !== types_1.BaselineFileState.InitializationScheduled)
          throw new internal_1.IModelsErrorImpl({
            code: imodels_client_management_1.IModelsErrorCode.BaselineFileInitializationFailed,
            message: `Baseline File initialization failed with state '${state2}.'`,
            originalError: void 0,
            statusCode: void 0,
            details: void 0
          });
        return state2 === types_1.BaselineFileState.Initialized;
      };
      return (0, internal_1.waitForCondition)({
        conditionToSatisfy: isBaselineInitialized,
        timeoutErrorFactory: () => new internal_1.IModelsErrorImpl({
          code: imodels_client_management_1.IModelsErrorCode.BaselineFileInitializationTimedOut,
          message: "Timed out waiting for Baseline File initialization.",
          originalError: void 0,
          statusCode: void 0,
          details: void 0
        }),
        timeOutInMs: params.timeOutInMs
      });
    }
  }
  IModelOperations$1.IModelOperations = IModelOperations3;
  return IModelOperations$1;
}
var BriefcaseOperations2 = {};
var hasRequiredBriefcaseOperations;
function requireBriefcaseOperations() {
  if (hasRequiredBriefcaseOperations) return BriefcaseOperations2;
  hasRequiredBriefcaseOperations = 1;
  Object.defineProperty(BriefcaseOperations2, "__esModule", { value: true });
  BriefcaseOperations2.BriefcaseOperations = void 0;
  const operations_1 = requireOperations$1();
  let BriefcaseOperations$12 = class BriefcaseOperations extends operations_1.BriefcaseOperations {
    /**
     * Acquires a new Briefcase with specified properties. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/acquire-imodel-briefcase/ Acquire iModel Briefcase}
     * operation from iModels API.
     * @param {AcquireBriefcaseParams} params parameters for this operation. See {@link AcquireBriefcaseParams}.
     * @returns {Promise<Briefcase>} newly acquired Briefcase. See {@link Briefcase}.
     */
    async acquire(params) {
      const acquireBriefcaseBody = this.getAcquireBriefcaseRequestBody(params.briefcaseProperties);
      const acquireBriefcaseResponse = await this.sendPostRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getBriefcaseListUrl({ iModelId: params.iModelId }),
        body: acquireBriefcaseBody,
        headers: params.headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, acquireBriefcaseResponse.body.briefcase, params.headers);
      return result;
    }
    /**
     * Releases the specified Briefcase. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/release-imodel-briefcase/ Release iModel Briefcase}
     * operation from iModels API.
     * @param {ReleaseBriefcaseParams} params parameters for this operation. See {@link ReleaseBriefcaseParams}.
     * @returns {Promise<void>} a promise that resolves after operation completes.
     */
    async release(params) {
      await this.sendDeleteRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getSingleBriefcaseUrl({ iModelId: params.iModelId, briefcaseId: params.briefcaseId }),
        headers: params.headers
      });
    }
    getAcquireBriefcaseRequestBody(briefcaseProperties) {
      if (!briefcaseProperties)
        return void 0;
      return {
        deviceName: briefcaseProperties.deviceName
      };
    }
  };
  BriefcaseOperations2.BriefcaseOperations = BriefcaseOperations$12;
  return BriefcaseOperations2;
}
var ChangesetOperations2 = {};
var FileDownload = {};
var hasRequiredFileDownload;
function requireFileDownload() {
  if (hasRequiredFileDownload) return FileDownload;
  hasRequiredFileDownload = 1;
  Object.defineProperty(FileDownload, "__esModule", { value: true });
  FileDownload.downloadFile = void 0;
  require_Reflect();
  const fs = require$$0$1;
  const internal_1 = requireInternal$6();
  const imodels_client_management_1 = require$$4;
  async function downloadFile(params) {
    const targetFileStream = fs.createWriteStream(params.localPath);
    try {
      const downloadStream = await params.storage.download({
        ...params,
        transferType: "stream"
      });
      downloadStream.pipe(targetFileStream);
      if (params.totalDownloadCallback || params.latestDownloadedChunkSizeCallback) {
        let bytesDownloaded = 0;
        downloadStream.on("data", (chunk) => {
          bytesDownloaded += chunk?.length;
          params.totalDownloadCallback?.(bytesDownloaded);
          params.latestDownloadedChunkSizeCallback?.(chunk?.length);
        });
      }
      await new Promise((resolve, reject) => {
        downloadStream.on("error", reject);
        targetFileStream.on("close", resolve);
      });
    } catch (error) {
      targetFileStream.end();
      throw adaptAbortError(error);
    }
  }
  FileDownload.downloadFile = downloadFile;
  function adaptAbortError(error) {
    if (!(error instanceof Error) || error.name !== "AbortError")
      return error;
    return new internal_1.IModelsErrorImpl({
      code: imodels_client_management_1.IModelsErrorCode.DownloadAborted,
      message: `Download was aborted. Message: ${error.message}}.`,
      originalError: error,
      statusCode: void 0,
      details: void 0
    });
  }
  return FileDownload;
}
var LimitedParallelQueue = {};
var hasRequiredLimitedParallelQueue;
function requireLimitedParallelQueue() {
  if (hasRequiredLimitedParallelQueue) return LimitedParallelQueue;
  hasRequiredLimitedParallelQueue = 1;
  Object.defineProperty(LimitedParallelQueue, "__esModule", { value: true });
  LimitedParallelQueue.LimitedParallelQueue = void 0;
  let LimitedParallelQueue$1 = class LimitedParallelQueue {
    constructor(config) {
      this._queue = [];
      this._maxParallelPromises = config.maxParallelPromises;
    }
    push(item) {
      this._queue.push(item);
    }
    async waitAll() {
      const currentlyExecutingPromises = new Array();
      while (this._queue.length !== 0 || currentlyExecutingPromises.length !== 0) {
        while (this._queue.length !== 0 && currentlyExecutingPromises.length < this._maxParallelPromises) {
          const itemToExecute = this._queue.shift();
          const executingItem = itemToExecute().then(() => {
            const indexOfItemInQueue = currentlyExecutingPromises.indexOf(executingItem);
            currentlyExecutingPromises.splice(indexOfItemInQueue, 1);
          });
          currentlyExecutingPromises.push(executingItem);
        }
        await Promise.race(currentlyExecutingPromises);
      }
    }
  };
  LimitedParallelQueue.LimitedParallelQueue = LimitedParallelQueue$1;
  return LimitedParallelQueue;
}
var hasRequiredChangesetOperations;
function requireChangesetOperations() {
  if (hasRequiredChangesetOperations) return ChangesetOperations2;
  hasRequiredChangesetOperations = 1;
  Object.defineProperty(ChangesetOperations2, "__esModule", { value: true });
  ChangesetOperations2.ChangesetOperations = void 0;
  const path = require$$0$1;
  const internal_1 = requireInternal$6();
  const operations_1 = requireOperations$1();
  const imodels_client_management_1 = require$$4;
  const FileDownload_1 = requireFileDownload();
  const LimitedParallelQueue_1 = requireLimitedParallelQueue();
  let ChangesetOperations$12 = class ChangesetOperations extends operations_1.ChangesetOperations {
    /**
     * Creates a Changeset. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel-changeset/ Create iModel Changeset}
     * operation from iModels API. Internally it creates a Changeset instance, uploads the Changeset
     * file and confirms Changeset file upload. The execution of this method depends on the Changeset file size - the larger
     * the file, the longer the upload will take.
     * @param {CreateChangesetParams} params parameters for this operation. See {@link CreateChangesetParams}.
     * @returns newly created Changeset. See {@link Changeset}.
     */
    async create(params) {
      const changesetFileSize = await this._options.localFileSystem.getFileSize(params.changesetProperties.filePath);
      const createChangesetBody = this.getCreateChangesetRequestBody(params.changesetProperties, changesetFileSize);
      const createChangesetResponse = await this.sendPostRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getChangesetListUrl({ iModelId: params.iModelId }),
        body: createChangesetBody,
        headers: params.headers
      });
      const uploadLink = createChangesetResponse.body.changeset._links.upload;
      (0, operations_1.assertLink)(uploadLink);
      await this._options.cloudStorage.upload({
        url: uploadLink.href,
        data: params.changesetProperties.filePath
      });
      const completeLink = createChangesetResponse.body.changeset._links.complete;
      (0, operations_1.assertLink)(completeLink);
      const confirmUploadBody = this.getConfirmUploadRequestBody(params.changesetProperties);
      const confirmUploadResponse = await this.sendPatchRequest({
        authorization: params.authorization,
        url: completeLink.href,
        body: confirmUploadBody,
        headers: params.headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, confirmUploadResponse.body.changeset, params.headers);
      return result;
    }
    /**
     * Downloads a single Changeset identified by either index or id. If an error occurs when downloading a Changeset
     * this operation queries the failed Changeset by id and retries the download once. If the Changeset file with
     * the expected name already exists in the target directory and the file size matches the one expected the Changeset
     * is not downloaded again.
     * @param {DownloadSingleChangesetParams} params parameters for this operation. See {@link DownloadSingleChangesetParams}.
     * @returns downloaded Changeset. See {@link DownloadedChangeset}.
     */
    async downloadSingle(params) {
      await this._options.localFileSystem.createDirectory(params.targetDirectoryPath);
      const changeset = await this.querySingleInternal(params);
      return this.downloadSingleChangeset({ ...params, changeset });
    }
    /**
     * Downloads Changeset list. Internally the method uses {@link ChangesetOperations.getRepresentationList} to query the
     * Changeset collection so this operation supports most of the the same url parameters to specify what Changesets to
     * download. One of the most common properties used are `afterIndex` and `lastIndex` to download Changeset range. This
     * operation downloads Changesets in parallel. If an error occurs when downloading a Changeset this operation queries
     * the failed Changeset by id and retries the download once. If the Changeset file with the expected name already
     * exists in the target directory and the file size matches the one expected the Changeset is not downloaded again.
     * @param {DownloadChangesetListParams} params parameters for this operation. See {@link DownloadChangesetListParams}.
     * @returns downloaded Changeset metadata along with the downloaded file path. See {@link DownloadedChangeset}.
     */
    async downloadList(params) {
      await this._options.localFileSystem.createDirectory(params.targetDirectoryPath);
      const [downloadCallback, downloadFailedCallback] = await this.provideDownloadCallbacks(params) ?? [];
      let result = [];
      for await (const changesetPage of this.getRepresentationList(params).byPage()) {
        const changesetsWithFilePath = changesetPage.map((changeset) => ({
          ...changeset,
          filePath: path.join(params.targetDirectoryPath, this.createFileName(changeset.id))
        }));
        result = result.concat(changesetsWithFilePath);
        changesetsWithFilePath.sort((changeset1, changeset2) => changeset1.fileSize - changeset2.fileSize);
        const queue = new LimitedParallelQueue_1.LimitedParallelQueue({ maxParallelPromises: 10 });
        for (const changeset of changesetsWithFilePath)
          queue.push(async () => this.downloadChangesetFileWithRetry({
            authorization: params.authorization,
            iModelId: params.iModelId,
            changeset,
            abortSignal: params.abortSignal,
            downloadCallback,
            firstDownloadFailedCallback: downloadFailedCallback,
            headers: params.headers
          }));
        await queue.waitAll();
      }
      return result;
    }
    getCreateChangesetRequestBody(changesetProperties, changesetFileSize) {
      return {
        id: changesetProperties.id,
        description: changesetProperties.description,
        parentId: changesetProperties.parentId,
        briefcaseId: changesetProperties.briefcaseId,
        containingChanges: changesetProperties.containingChanges,
        fileSize: changesetFileSize,
        synchronizationInfo: changesetProperties.synchronizationInfo,
        groupId: changesetProperties.groupId
      };
    }
    getConfirmUploadRequestBody(changesetProperties) {
      return {
        state: imodels_client_management_1.ChangesetState.FileUploaded,
        briefcaseId: changesetProperties.briefcaseId
      };
    }
    async downloadSingleChangeset(params) {
      const changesetWithPath = {
        ...params.changeset,
        filePath: path.join(params.targetDirectoryPath, this.createFileName(params.changeset.id))
      };
      const downloadCallback = params.progressCallback ? (bytes) => params.progressCallback?.(bytes, changesetWithPath.fileSize) : void 0;
      await this.downloadChangesetFileWithRetry({
        authorization: params.authorization,
        iModelId: params.iModelId,
        changeset: changesetWithPath,
        abortSignal: params.abortSignal,
        downloadCallback,
        headers: params.headers
      });
      return changesetWithPath;
    }
    async downloadChangesetFileWithRetry(params) {
      const targetFilePath = params.changeset.filePath;
      if (await this.isChangesetAlreadyDownloaded(targetFilePath, params.changeset.fileSize))
        return;
      const downloadParams = {
        storage: this._options.cloudStorage,
        localPath: targetFilePath,
        abortSignal: params.abortSignal
      };
      let bytesDownloaded = 0;
      if (params.downloadCallback) {
        downloadParams.latestDownloadedChunkSizeCallback = (downloaded) => {
          bytesDownloaded += downloaded;
          params.downloadCallback?.(downloaded);
        };
      }
      try {
        const downloadLink = params.changeset._links.download;
        (0, operations_1.assertLink)(downloadLink);
        await (0, FileDownload_1.downloadFile)({
          ...downloadParams,
          url: downloadLink.href
        });
      } catch (error) {
        this.throwIfAbortError(error, params.changeset);
        params.firstDownloadFailedCallback?.(bytesDownloaded);
        const changeset = await this.querySingleInternal({
          authorization: params.authorization,
          iModelId: params.iModelId,
          changesetId: params.changeset.id,
          headers: params.headers
        });
        try {
          const newDownloadLink = changeset._links.download;
          (0, operations_1.assertLink)(newDownloadLink);
          await (0, FileDownload_1.downloadFile)({
            ...downloadParams,
            url: newDownloadLink.href
          });
        } catch (errorAfterRetry) {
          this.throwIfAbortError(error, params.changeset);
          let originalError;
          if (errorAfterRetry instanceof Error)
            originalError = errorAfterRetry;
          throw new internal_1.IModelsErrorImpl({
            code: imodels_client_management_1.IModelsErrorCode.ChangesetDownloadFailed,
            message: `Failed to download changeset. Changeset id: ${params.changeset.id}, changeset index: ${params.changeset.index}, error: ${JSON.stringify(errorAfterRetry)}.`,
            originalError,
            statusCode: void 0,
            details: void 0
          });
        }
      }
    }
    async isChangesetAlreadyDownloaded(targetFilePath, expectedFileSize) {
      const fileExists = await this._options.localFileSystem.fileExists(targetFilePath);
      if (!fileExists)
        return false;
      const existingFileSize = await this._options.localFileSystem.getFileSize(targetFilePath);
      if (existingFileSize === expectedFileSize)
        return true;
      await this._options.localFileSystem.deleteFile(targetFilePath);
      return false;
    }
    createFileName(changesetId) {
      return `${changesetId}.cs`;
    }
    async provideDownloadCallbacks(params) {
      if (!params.progressCallback)
        return;
      let totalSize = 0;
      let totalDownloaded = 0;
      for await (const changesetPage of this.getMinimalList(params).byPage()) {
        for (const changeset of changesetPage) {
          totalSize += changeset.fileSize;
          const filePath = path.join(params.targetDirectoryPath, this.createFileName(changeset.id));
          if (await this.isChangesetAlreadyDownloaded(filePath, changeset.fileSize))
            totalDownloaded += changeset.fileSize;
        }
      }
      const progressCallback = (downloaded) => {
        totalDownloaded += downloaded;
        params.progressCallback?.(totalDownloaded, totalSize);
      };
      const downloadFailedCallback = (downloadedBeforeFailure) => totalSize += downloadedBeforeFailure;
      return [progressCallback, downloadFailedCallback];
    }
    throwIfAbortError(error, changeset) {
      if (!(0, imodels_client_management_1.isIModelsApiError)(error) || error.code !== imodels_client_management_1.IModelsErrorCode.DownloadAborted)
        return;
      error.message = `Changeset(s) download was aborted. Changeset id: ${changeset.id}}.`;
      throw error;
    }
  };
  ChangesetOperations2.ChangesetOperations = ChangesetOperations$12;
  return ChangesetOperations2;
}
var ChangesetExtendedDataOperations2 = {};
var hasRequiredChangesetExtendedDataOperations;
function requireChangesetExtendedDataOperations() {
  if (hasRequiredChangesetExtendedDataOperations) return ChangesetExtendedDataOperations2;
  hasRequiredChangesetExtendedDataOperations = 1;
  Object.defineProperty(ChangesetExtendedDataOperations2, "__esModule", { value: true });
  ChangesetExtendedDataOperations2.ChangesetExtendedDataOperations = void 0;
  const operations_1 = requireOperations$1();
  let ChangesetExtendedDataOperations$12 = class ChangesetExtendedDataOperations extends operations_1.ChangesetExtendedDataOperations {
    /**
    * Creates Changeset Extended Data. Wraps the
    * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel-changeset-extended-data/ Create Changeset Extended Data}
    * operation from iModels API.
    * @param {CreateChangesetExtendedDataParams} params parameters for this operation. See {@link CreateChangesetExtendedDataParams}.
    * @returns {Promise<ChangesetExtendedData>} newly created Changeset Extended Data. See {@link ChangesetExtendedData}.
    */
    async create(params) {
      const { authorization, iModelId, headers, changesetExtendedDataProperties, ...changesetIdOrIndex } = params;
      const createChangesetExtendedDataBody = this.getCreateChangesetExtendedDataRequestBody(changesetExtendedDataProperties);
      const createChangesetExtendedDataResponse = await this.sendPostRequest({
        authorization,
        url: this._options.urlFormatter.getSingleChangesetExtendedDataUrl({ iModelId, ...changesetIdOrIndex }),
        body: createChangesetExtendedDataBody,
        headers
      });
      return this.convertToChangesetExtendedData(createChangesetExtendedDataResponse.body.extendedData);
    }
    getCreateChangesetExtendedDataRequestBody(changesetExtendedDataProperties) {
      const dataJson = JSON.stringify(changesetExtendedDataProperties.data);
      const data = Buffer.from(dataJson).toString("base64");
      return { data };
    }
  };
  ChangesetExtendedDataOperations2.ChangesetExtendedDataOperations = ChangesetExtendedDataOperations$12;
  return ChangesetExtendedDataOperations2;
}
var ChangesetGroupOperations2 = {};
var hasRequiredChangesetGroupOperations;
function requireChangesetGroupOperations() {
  if (hasRequiredChangesetGroupOperations) return ChangesetGroupOperations2;
  hasRequiredChangesetGroupOperations = 1;
  Object.defineProperty(ChangesetGroupOperations2, "__esModule", { value: true });
  ChangesetGroupOperations2.ChangesetGroupOperations = void 0;
  const operations_1 = requireOperations$1();
  let ChangesetGroupOperations$12 = class ChangesetGroupOperations extends operations_1.ChangesetGroupOperations {
    /**
     * Creates a Changeset Group. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel-changeset-group/ Create iModel Changeset Group}
     * operation from iModels API.
     * @param {CreateChangesetGroupParams} params parameters for this operation. See {@link CreateChangesetGroupParams}.
     * @returns {Promise<ChangesetGroup>} newly created Changeset Group. See {@link ChangesetGroup}.
     */
    async create(params) {
      const createChangesetGroupBody = this.getCreateChangesetGroupRequestBody(params.changesetGroupProperties);
      const createChangesetGroupResponse = await this.sendPostRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getChangesetGroupListUrl({ iModelId: params.iModelId }),
        body: createChangesetGroupBody,
        headers: params.headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, createChangesetGroupResponse.body.changesetGroup, params.headers);
      return result;
    }
    /**
     * Closes an existing Changeset Group. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/update-imodel-changeset-group/ Update iModel Changeset Group}
     * operation from iModels API.
     * @param {UpdateChangesetGroupParams} params parameters for this operation. See {@link UpdateChangesetGroupParams}.
     * @returns {Promise<ChangesetGroup>} updated Changeset Group. See {@link ChangesetGroup}.
     */
    async update(params) {
      const updateChangesetGroupBody = this.getUpdateChangesetGroupRequestBody(params.changesetGroupProperties);
      const updateChangesetGroupResponse = await this.sendPatchRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getSingleChangesetGroupUrl({ iModelId: params.iModelId, changesetGroupId: params.changesetGroupId }),
        body: updateChangesetGroupBody,
        headers: params.headers
      });
      const result = this.appendRelatedEntityCallbacks(params.authorization, updateChangesetGroupResponse.body.changesetGroup, params.headers);
      return result;
    }
    getCreateChangesetGroupRequestBody(changesetGroupProperties) {
      return {
        description: changesetGroupProperties.description
      };
    }
    getUpdateChangesetGroupRequestBody(changesetGroupProperties) {
      return {
        state: changesetGroupProperties.state
      };
    }
  };
  ChangesetGroupOperations2.ChangesetGroupOperations = ChangesetGroupOperations$12;
  return ChangesetGroupOperations2;
}
var LockOperations = {};
var hasRequiredLockOperations;
function requireLockOperations() {
  if (hasRequiredLockOperations) return LockOperations;
  hasRequiredLockOperations = 1;
  Object.defineProperty(LockOperations, "__esModule", { value: true });
  LockOperations.LockOperations = void 0;
  const internal_1 = requireInternal$6();
  let LockOperations$1 = class LockOperations extends internal_1.OperationsBase {
    /**
     * Gets Locks for a specific iModel. This method returns Locks in their full representation. The returned iterator
     * internally queries entities in pages. Wraps the
     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-locks/ Get iModel Locks} operation from
     * iModels API.
     * @param {GetLockListParams} params parameters for this operation. See {@link GetLockListParams}.
     * @returns {EntityListIterator<Lock>} iterator for Lock list. See {@link EntityListIterator}, {@link Lock}.
     */
    getList(params) {
      return new internal_1.EntityListIteratorImpl(async () => this.getEntityCollectionPage({
        authorization: params.authorization,
        url: this._options.urlFormatter.getLockListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),
        entityCollectionAccessor: (response) => response.body.locks,
        headers: params.headers
      }));
    }
    /**
     * Updates Lock for a specific Briefcase. This operation is used to acquire new locks and change the lock level for
     * already existing ones. Wraps the {@link https://developer.bentley.com/apis/imodels-v2/operations/update-imodel-locks/
     * Update iModel Locks} operation from iModels API.
     * @param {UpdateLockParams} params parameters for this operation. See {@link UpdateLockParams}.
     * @returns {Promise<Lock>} updated Lock. See {@link Lock}.
     */
    async update(params) {
      const updateLockBody = this.getUpdateLockBody(params);
      const updateLockResponse = await this.sendPatchRequest({
        authorization: params.authorization,
        url: this._options.urlFormatter.getLockListUrl({ iModelId: params.iModelId }),
        body: updateLockBody,
        headers: params.headers
      });
      return updateLockResponse.body.lock;
    }
    getUpdateLockBody(params) {
      return {
        briefcaseId: params.briefcaseId,
        changesetId: params.changesetId,
        lockedObjects: params.lockedObjects
      };
    }
  };
  LockOperations.LockOperations = LockOperations$1;
  return LockOperations;
}
var hasRequiredOperationExports;
function requireOperationExports() {
  if (hasRequiredOperationExports) return OperationExports$1;
  hasRequiredOperationExports = 1;
  (function(exports) {
    var __createBinding = OperationExports$1 && OperationExports$1.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = OperationExports$1 && OperationExports$1.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireBaselineFileOperations(), exports);
    __exportStar(requireIModelOperations(), exports);
    __exportStar(requireBriefcaseOperations(), exports);
    __exportStar(requireChangesetOperations(), exports);
    __exportStar(requireChangesetExtendedDataOperations(), exports);
    __exportStar(requireChangesetGroupOperations(), exports);
    __exportStar(requireLockOperations(), exports);
  })(OperationExports$1);
  return OperationExports$1;
}
var OperationOptions = {};
var hasRequiredOperationOptions;
function requireOperationOptions() {
  if (hasRequiredOperationOptions) return OperationOptions;
  hasRequiredOperationOptions = 1;
  Object.defineProperty(OperationOptions, "__esModule", { value: true });
  require_Reflect();
  return OperationOptions;
}
var IModelsApiUrlFormatter2 = {};
var hasRequiredIModelsApiUrlFormatter;
function requireIModelsApiUrlFormatter() {
  if (hasRequiredIModelsApiUrlFormatter) return IModelsApiUrlFormatter2;
  hasRequiredIModelsApiUrlFormatter = 1;
  Object.defineProperty(IModelsApiUrlFormatter2, "__esModule", { value: true });
  IModelsApiUrlFormatter2.IModelsApiUrlFormatter = void 0;
  const operations_1 = requireOperations$1();
  let IModelsApiUrlFormatter$12 = class IModelsApiUrlFormatter extends operations_1.IModelsApiUrlFormatter {
    getBaselineUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/baselinefile`;
    }
    getLockListUrl(params) {
      return `${this.baseUrl}/${params.iModelId}/locks${this.formQueryString({ ...params.urlParams })}`;
    }
  };
  IModelsApiUrlFormatter2.IModelsApiUrlFormatter = IModelsApiUrlFormatter$12;
  return IModelsApiUrlFormatter2;
}
var hasRequiredOperations;
function requireOperations() {
  if (hasRequiredOperations) return operations$1;
  hasRequiredOperations = 1;
  (function(exports) {
    var __createBinding = operations$1 && operations$1.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = operations$1 && operations$1.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireOperationExports(), exports);
    __exportStar(requireOperationParamExports(), exports);
    __exportStar(requireOperationOptions(), exports);
    __exportStar(requireFileDownload(), exports);
    __exportStar(requireIModelsApiUrlFormatter(), exports);
  })(operations$1);
  return operations$1;
}
var hasRequiredIModelsClient;
function requireIModelsClient() {
  if (hasRequiredIModelsClient) return IModelsClient2;
  hasRequiredIModelsClient = 1;
  Object.defineProperty(IModelsClient2, "__esModule", { value: true });
  IModelsClient2.IModelsClient = void 0;
  require_Reflect();
  const internal_1 = requireInternal$6();
  const Constants_1 = requireConstants();
  const object_storage_azure_1 = requireLib$1();
  const imodels_client_management_1 = require$$4;
  const internal_2 = requireInternal();
  const IModelsErrorParser_1 = requireIModelsErrorParser();
  const operations_1 = requireOperations();
  let IModelsClient$12 = class IModelsClient3 extends imodels_client_management_1.IModelsClient {
    /**
     * Class constructor.
     * @param {iModelsClientOptions} options client options. If `options` are `undefined` or if some of the properties
     * are `undefined` the client uses defaults. See {@link iModelsClientOptions}.
     */
    constructor(options) {
      const filledIModelsClientOptions = IModelsClient3.fillAuthoringClientConfiguration(options);
      super(filledIModelsClientOptions);
      this._operationsOptions = {
        ...filledIModelsClientOptions,
        urlFormatter: new operations_1.IModelsApiUrlFormatter(filledIModelsClientOptions.api.baseUrl)
      };
    }
    /**
     * `ClientStorage` instance that is used for file transfer operations. This uses the user provided instance or default one,
     * see {@link IModelsClientOptions}.
     */
    get cloudStorage() {
      return this._operationsOptions.cloudStorage;
    }
    /** iModel operations. See {@link iModelOperations}. */
    get iModels() {
      return new operations_1.IModelOperations(this._operationsOptions, this);
    }
    /** Baseline file operations. See {@link BaselineFileOperations}. */
    get baselineFiles() {
      return new operations_1.BaselineFileOperations(this._operationsOptions);
    }
    /** Briefcase operations. See {@link BriefcaseOperations}. */
    get briefcases() {
      return new operations_1.BriefcaseOperations(this._operationsOptions, this);
    }
    /** Changeset operations. See {@link ChangesetOperations}. */
    get changesets() {
      return new operations_1.ChangesetOperations(this._operationsOptions, this);
    }
    /** Changeset Extended Data operations. See {@link ChangesetExtendedDataOperations}. */
    get changesetExtendedData() {
      return new operations_1.ChangesetExtendedDataOperations(this._operationsOptions);
    }
    /** Changeset Group operations. See {@link ChangesetGroupOperations}. */
    get changesetGroups() {
      return new operations_1.ChangesetGroupOperations(this._operationsOptions, this);
    }
    /** Lock operations. See {@link LockOperations}. */
    get locks() {
      return new operations_1.LockOperations(this._operationsOptions);
    }
    static fillAuthoringClientConfiguration(options) {
      const retryPolicy2 = options?.retryPolicy ?? new internal_1.AxiosRetryPolicy({
        maxRetries: Constants_1.Constants.retryPolicy.maxRetries,
        backoffAlgorithm: new internal_1.ExponentialBackoffAlgorithm({
          baseDelayInMs: Constants_1.Constants.retryPolicy.baseDelayInMs,
          factor: Constants_1.Constants.retryPolicy.delayFactor
        })
      });
      return {
        api: this.fillApiConfiguration(options?.api),
        restClient: options?.restClient ?? new internal_1.AxiosRestClient(IModelsErrorParser_1.IModelsErrorParser.parse, retryPolicy2),
        localFileSystem: options?.localFileSystem ?? new internal_2.NodeLocalFileSystem(),
        cloudStorage: options?.cloudStorage ?? new object_storage_azure_1.AzureClientStorage(new object_storage_azure_1.BlockBlobClientWrapperFactory()),
        headers: options?.headers ?? {},
        retryPolicy: retryPolicy2
      };
    }
  };
  IModelsClient2.IModelsClient = IModelsClient$12;
  return IModelsClient2;
}
var hasRequiredLib;
function requireLib() {
  if (hasRequiredLib) return lib$3;
  hasRequiredLib = 1;
  (function(exports) {
    var __createBinding = lib$3 && lib$3.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = lib$3 && lib$3.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(requireTypes$4(), exports);
    __exportStar(requireOperationParamExports$1(), exports);
    __exportStar(requireTypes$3(), exports);
    __exportStar(requireOperationParamExports(), exports);
    __exportStar(requireIModelsClient(), exports);
  })(lib$3);
  return lib$3;
}
var libExports = requireLib();
const layoutRestoreIconSvg = "data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2016%2016'%20enable-background='new%200%200%2016%2016'%3e%3cg%3e%3cpath%20d='m14%207h-4v-7h-4v7h-4l6%205z'/%3e%3cpath%20d='m14.1%2011.1v3h-12.1v-3h-2v4.9h16v-4.9z'/%3e%3c/g%3e%3c/svg%3e";
const layoutSaveIconSvg = "data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2016%2016'%20enable-background='new%200%200%2016%2016'%3e%3cpath%20d='m6%2013h4v-7h2.6l-4.6-5.9-4.7%205.9h2.7z'/%3e%3cpath%20d='m14%2011v3h-12v-3h-2v5h16v-5z'/%3e%3c/svg%3e";
function ViewportContent({ contentId, imodel, viewState, renderViewOverlay }) {
  let [iModel] = reactExports.useState(UiFramework.getIModelConnection());
  const [defaultViewState] = reactExports.useState(UiFramework.getDefaultViewState());
  const [viewport, setViewport] = reactExports.useState(void 0);
  const viewportRef = reactExports.useRef(void 0);
  reactExports.useEffect(() => {
    return IModelApp.viewManager.onSelectedViewportChanged.addListener((selectedViewport) => {
      if (!viewportRef.current)
        return;
      if (selectedViewport.current === viewportRef.current)
        return;
      const activeContentId = UiFramework.content.getActiveId();
      if (activeContentId !== contentId)
        return;
      void IModelApp.viewManager.setSelectedView(viewportRef.current);
    });
  }, [contentId, viewport]);
  iModel = imodel ?? iModel;
  viewState = viewState ?? defaultViewState;
  if (!iModel)
    return null;
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    reactExports.createElement(ViewportComponent, { viewState, imodel: iModel, viewportRef: (v) => {
      viewportRef.current = v;
      setViewport(v);
    } }),
    reactExports.createElement(ViewOverlayRenderer, { viewport, renderViewOverlay })
  );
}
function ViewOverlayRenderer({ viewport, renderViewOverlay }) {
  if (!viewport)
    return null;
  if (renderViewOverlay) {
    return renderViewOverlay(viewport);
  }
  return reactExports.createElement(DefaultViewOverlay, { viewport, analysisTimeline: true, solarTimeline: true, scheduleAnimation: true });
}
function getIModelSpecificKey(inKey, iModelConnection) {
  const imodelId = iModelConnection?.iModelId ?? "unknownImodel";
  return `[${imodelId}]${inKey}`;
}
async function getSavedViewLayoutProps(activeFrontstageId, iModelConnection) {
  const localSettings = new LocalStateStorage();
  const result = await localSettings.getSetting("ContentGroupLayout", getIModelSpecificKey(activeFrontstageId, iModelConnection));
  if (!result.setting)
    return void 0;
  const savedViewLayoutProps = result.setting;
  return savedViewLayoutProps;
}
class SaveContentLayoutTool extends Tool {
  static get minArgs() {
    return 0;
  }
  static get maxArgs() {
    return 0;
  }
  static get keyin() {
    return "content layout save";
  }
  static get englishKeyin() {
    return this.keyin;
  }
  async run() {
    const frontstageDef = UiFramework.frontstages.activeFrontstageDef;
    if (!frontstageDef)
      return true;
    const activeLayout = UiFramework.content.layouts.activeLayout;
    if (!activeLayout)
      return true;
    const activeContentGroup = UiFramework.content.layouts.activeContentGroup;
    if (!activeContentGroup)
      return true;
    const localSettings = new LocalStateStorage();
    const savedViewLayoutProps = StageContentLayout.viewLayoutToProps(activeLayout, activeContentGroup, true);
    if (savedViewLayoutProps.contentLayoutProps)
      delete savedViewLayoutProps.contentLayoutProps;
    if (frontstageDef.contentGroupProvider)
      savedViewLayoutProps.contentGroupProps = frontstageDef.contentGroupProvider.prepareToSaveProps(savedViewLayoutProps.contentGroupProps);
    savedViewLayoutProps.contentGroupProps.contents = savedViewLayoutProps.contentGroupProps.contents.map((content) => {
      const newContent = content;
      delete newContent.content;
      return newContent;
    });
    await localSettings.saveSetting("ContentGroupLayout", getIModelSpecificKey(frontstageDef.id, UiFramework.getIModelConnection()), savedViewLayoutProps);
    return true;
  }
}
SaveContentLayoutTool.toolId = "SaveContentLayoutTool";
SaveContentLayoutTool.iconSpec = layoutSaveIconSvg;
class RestoreSavedContentLayoutTool extends Tool {
  static get minArgs() {
    return 0;
  }
  static get maxArgs() {
    return 0;
  }
  static get keyin() {
    return "content layout restore";
  }
  static get englishKeyin() {
    return this.keyin;
  }
  async run() {
    const frontstageDef = UiFramework.frontstages.activeFrontstageDef;
    if (!frontstageDef)
      return true;
    const iModelConnection = UiFramework.getIModelConnection();
    if (!iModelConnection)
      return true;
    const savedViewLayoutProps = await getSavedViewLayoutProps(frontstageDef.id, iModelConnection);
    if (!savedViewLayoutProps)
      return true;
    let contentGroupProps = savedViewLayoutProps.contentGroupProps;
    if (frontstageDef.contentGroupProvider)
      contentGroupProps = frontstageDef.contentGroupProvider.applyUpdatesToSavedProps(savedViewLayoutProps.contentGroupProps);
    const contentGroup = new ContentGroup({
      ...contentGroupProps,
      contents: contentGroupProps.contents.map((content) => {
        return {
          ...content,
          content: reactExports.createElement(ViewportContent, null)
        };
      })
    });
    await UiFramework.content.layouts.setActiveContentGroup(contentGroup);
    StageContentLayout.emphasizeElementsFromProps(contentGroup, savedViewLayoutProps);
    return true;
  }
}
RestoreSavedContentLayoutTool.toolId = "RestoreSavedContentLayoutTool";
RestoreSavedContentLayoutTool.iconSpec = layoutRestoreIconSvg;
class AppUiTestProviders {
  /** convenience method for getting localized strings from keys */
  static translate(key) {
    return IModelApp.localization.getLocalizedString(`${AppUiTestProviders.localizationNamespace}:${key}`);
  }
}
AppUiTestProviders.localizationNamespace = "AppuiTestProviders";
AppUiTestProviders.syncEventIdHideCustomDialogButton = "appui-test-providers:sync-custom-dialog-button";
AppUiTestProviders.syncEventIdHideCustomViewOverlay = "appui-test-providers:sync-custom-view-overlay-button";
const genericToolSvg = "data:image/svg+xml,%3csvg%20viewBox='0%200%2016%2016'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='m4.3587%2010.6414a.49093.49093%200%200%201%200%20.6941l-1.5232%201.5232a.4908.4908%200%200%201%20-.6941-.6941l1.5232-1.5232a.49075.49075%200%200%201%20.6941%200zm8.5-8.5a.49093.49093%200%200%201%200%20.6941l-1.5233%201.5232a.49077.49077%200%200%201%20-.694-.6941l1.5232-1.5232a.49075.49075%200%200%201%20.6941%200zm-8.5%202.2173a.49093.49093%200%200%201%20-.6941%200l-1.5232-1.5232a.4908.4908%200%200%201%20.6941-.6941l1.5232%201.5232a.49093.49093%200%200%201%200%20.6941zm8.5%208.5a.49093.49093%200%200%201%20-.6941%200l-1.5232-1.5232a.49077.49077%200%201%201%20.694-.6941l1.5233%201.5232a.49093.49093%200%200%201%200%20.6941zm-5.3587-5.8587a.5.5%200%201%201%20-.5.5.50005.50005%200%200%201%20.5-.5zm7%200h-3.00311l-3.49689-3.49689v-3.00311a.5.5%200%200%200%20-1%200v3.00311l-3.49689%203.49689h-3.00311a.5.5%200%200%200%200%201h3.00311l3.49689%203.49689v3.00311a.5.5%200%200%200%201%200v-3.00311l3.49689-3.49689h3.00311a.5.5%200%200%200%200-1zm-10.0827.5%203.0827-3.0827%203.0827%203.0827-3.0827%203.08264z'%20fill-rule='evenodd'/%3e%3c/svg%3e";
class GenericLocateTool extends PrimitiveTool {
  static get toolId() {
    return "uiItemsProvidersTest-GenericLocateTool";
  }
  static get toolStringKey() {
    return `tools.${GenericLocateTool.toolId}.`;
  }
  autoLockTarget() {
  }
  // NOTE: For selecting elements we only care about iModel, so don't lock target model automatically.
  wantSelectionClearOnMiss(_ev) {
    return SelectionMode.Replace === this.getSelectionMode();
  }
  wantPickableDecorations() {
    return false;
  }
  // Allow pickable decorations selection to be independent of manipulators...
  getSelectionMethod() {
    return SelectionMethod.Pick;
  }
  getSelectionMode() {
    return SelectionMode.Replace;
  }
  requireWriteableTarget() {
    return false;
  }
  async filterHit(_hit, _out) {
    return Promise.resolve(LocateFilterStatus.Accept);
  }
  static getPrompt(name) {
    const key = `tools.${this.toolId}.Prompts.${name}`;
    return AppUiTestProviders.translate(key);
  }
  async process(_elementId, _point) {
    return this.exitTool();
  }
  async onDataButtonUp(ev) {
    const hit = await IModelApp.locateManager.doLocate(new LocateResponse(), true, ev.point, ev.viewport, ev.inputSource);
    if (this.elementId === void 0) {
      if (hit !== void 0) {
        this.elementId = hit.sourceId;
        if (GenericLocateTool.useDefaultPosition)
          await this.process(hit.sourceId);
        else
          this.setupAndPromptForNextAction();
      }
    } else if (!GenericLocateTool.useDefaultPosition) {
      this.userPoint = ev.point;
      if (hit !== void 0)
        this.userPoint = hit.hitPoint;
      await this.process(this.elementId, this.userPoint);
    }
    return EventHandled.Yes;
  }
  async onResetButtonUp(_ev) {
    await this.onReinitialize();
    return EventHandled.No;
  }
  outputMarkupPrompt(msg) {
    IModelApp.notifications.outputPrompt(GenericLocateTool.getPrompt(msg));
  }
  setupAndPromptForNextAction() {
    if (!this.elementId) {
      this.outputMarkupPrompt("identifyElement");
    } else if (!GenericLocateTool.useDefaultPosition) {
      this.outputMarkupPrompt("identifyPosition");
      IModelApp.accuSnap.enableSnap(true);
    }
  }
  async onPostInstall() {
    await super.onPostInstall();
    const iModelConnection = UiFramework.getIModelConnection();
    if (!iModelConnection)
      return;
    if (iModelConnection.selectionSet.size === 1) {
      iModelConnection.selectionSet.elements.forEach((elementId, _val, _set) => {
        void this.process(elementId);
      });
      await IModelApp.toolAdmin.startDefaultTool();
    } else {
      iModelConnection.selectionSet.emptyAll();
      this.outputMarkupPrompt("identifyElement");
      IModelApp.toolAdmin.setCursor("arrow");
      IModelApp.toolAdmin.setLocateCircleOn(true);
      IModelApp.toolAdmin.toolState.coordLockOvr = CoordinateLockOverrides.All;
      IModelApp.locateManager.initToolLocate();
      IModelApp.locateManager.options.allowDecorations = true;
      IModelApp.accuSnap.enableLocate(true);
      IModelApp.accuSnap.enableSnap(false);
    }
  }
  async onRestartTool() {
    return this.exitTool();
  }
  static async startTool() {
    return new GenericLocateTool().run();
  }
  static getActionButtonDef(itemPriority, groupPriority) {
    const overrides = void 0 !== groupPriority ? { groupPriority } : {};
    const iconSpec = this.iconSpec;
    return ToolbarItemUtilities.createActionButton(GenericLocateTool.toolId, itemPriority, iconSpec, GenericLocateTool.flyover, async () => {
      await IModelApp.tools.run(GenericLocateTool.toolId, IModelApp.viewManager.selectedView, true);
    }, overrides);
  }
}
GenericLocateTool.iconSpec = genericToolSvg;
GenericLocateTool.useDefaultPosition = false;
const inspectIconSvg = "data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2016%2016'%20enable-background='new%200%200%2016%2016'%3e%3cpath%20d='m11%209.7c.7-1%201.1-2.2%201.1-3.5.1-3.5-2.7-6.2-6-6.2-3.4%200-6.1%202.7-6.1%206.1%200%203.4%202.7%206.1%206.1%206.1%201.3%200%202.5-.4%203.5-1.1l4.9%204.9%201.4-1.4-4.9-4.9m-5%20.5c-2.3%200-4.1-1.8-4.1-4.1%200-2.3%201.8-4.1%204.1-4.1s4.1%201.8%204.1%204.1c0%202.3-1.8%204.1-4.1%204.1'/%3e%3c/svg%3e";
class InspectUiItemInfoTool extends PrimitiveTool {
  constructor() {
    super(...arguments);
    this._currentX = 0;
    this._currentY = 0;
    this._lastElement = null;
    this._mouseMove = (ev) => {
      this._currentX = ev.pageX;
      this._currentY = ev.pageY;
      if (!this._timerId) {
        this._timerId = window.setTimeout(() => this.processMove(), 100);
      }
    };
  }
  static get minArgs() {
    return 0;
  }
  static get maxArgs() {
    return 0;
  }
  requireWriteableTarget() {
    return false;
  }
  static get flyover() {
    return "inspect ui components";
  }
  // if supporting localized key-ins return a localized string
  static get keyin() {
    return "inspect ui components";
  }
  static get englishKeyin() {
    return "inspect ui components";
  }
  processMove() {
    const element = document.elementFromPoint(this._currentX, this._currentY);
    if (element && element !== this._lastElement) {
      console.log(`type = ${element.tagName}`);
      let item = element.querySelector("[data-item-id]");
      if (!item)
        item = element.closest("[data-item-id]");
      if (item) {
        console.log(`item = ${item.tagName}`);
        const para = document.createElement("div");
        let out = "";
        const names = [
          "type",
          "id",
          "priority",
          "location",
          "group",
          "provider"
        ];
        [
          "data-item-type",
          "data-item-id",
          "data-item-priority",
          "data-item-location",
          "data-item-group-priority",
          "data-item-provider-id"
        ].forEach((value, index) => {
          const attValue = item?.getAttribute(value);
          if (attValue)
            out += `${names[index]}: ${attValue}<br>`;
        });
        para.innerHTML = out;
        IModelApp.notifications.openToolTip(item.ownerDocument.body, para, {
          x: this._currentX,
          y: this._currentY
        });
      }
    }
    this._timerId = void 0;
  }
  async run(..._args) {
    const status = await super.run(_args);
    if (status)
      window.addEventListener("mousemove", this._mouseMove);
    return status;
  }
  async cleanup() {
    if (this._timerId) {
      window.clearTimeout(this._timerId);
      this._timerId = void 0;
    }
    window.removeEventListener("mousemove", this._mouseMove);
    console.log("inspect listener removed");
  }
  async onCleanup() {
    await super.onCleanup();
    await this.cleanup();
  }
  async exitTool() {
    await this.cleanup();
    return IModelApp.toolAdmin.startDefaultTool();
  }
  async onRestartTool() {
    const tool = new InspectUiItemInfoTool();
    if (!await tool.run())
      return this.exitTool();
  }
  async onDataButtonDown(_ev) {
    this.setupAndPromptForNextAction();
    return EventHandled.No;
  }
  async onResetButtonUp(_ev) {
    await this.exitTool();
    return EventHandled.Yes;
  }
  setupAndPromptForNextAction() {
    IModelApp.notifications.outputPrompt("click over UI item");
  }
}
InspectUiItemInfoTool._counter = 0;
InspectUiItemInfoTool.toolId = "InspectUiItemInfoTool";
InspectUiItemInfoTool.iconSpec = inspectIconSvg;
var ColorOptions;
(function(ColorOptions2) {
  ColorOptions2[ColorOptions2["Red"] = 0] = "Red";
  ColorOptions2[ColorOptions2["White"] = 1] = "White";
  ColorOptions2[ColorOptions2["Blue"] = 2] = "Blue";
  ColorOptions2[ColorOptions2["Yellow"] = 3] = "Yellow";
  ColorOptions2[ColorOptions2["Orange"] = 4] = "Orange";
})(ColorOptions || (ColorOptions = {}));
class AbstractDialogDataProvider extends DialogLayoutDataProvider {
  constructor() {
    super(...arguments);
    this._optionsValue = {
      value: ColorOptions.Blue
    };
    this._colorValue = { value: ColorByName.blue };
    this._useLengthValue = { value: true };
    this._lengthDescription = new LengthDescription();
    this._lengthValue = { value: 1.5 };
    this._weightValue = { value: 3 };
    this._lockValue = { value: true };
    this._cityValue = { value: "Huntsville" };
    this._stateValue = { value: "AL" };
    this.applyUiPropertyChange = (updatedValue) => {
      if (updatedValue.propertyName === AbstractDialogDataProvider._useLengthName) {
        this.useLength = updatedValue.value.value;
        this.showInfoFromUi(updatedValue);
        this.syncLengthState();
        return;
      }
      if (updatedValue.propertyName === AbstractDialogDataProvider._optionsName) {
        if (this._optionsValue.value !== updatedValue.value.value) {
          this.option = updatedValue.value.value;
          this.showInfoFromUi(updatedValue);
        }
      } else if (updatedValue.propertyName === AbstractDialogDataProvider._lockToggleName) {
        this.lock = updatedValue.value.value;
        this.showInfoFromUi(updatedValue);
      } else if (updatedValue.propertyName === AbstractDialogDataProvider._cityName) {
        this.city = updatedValue.value.value;
        this.showInfoFromUi(updatedValue);
      } else if (updatedValue.propertyName === AbstractDialogDataProvider._stateName) {
        this.stateName = updatedValue.value.value;
        this.showInfoFromUi(updatedValue);
      } else if (updatedValue.propertyName === AbstractDialogDataProvider._lengthName) {
        this.length = updatedValue.value.value;
        this.showInfoFromUi(updatedValue);
      } else if (updatedValue.propertyName === AbstractDialogDataProvider._colorName) {
        this.colorValue = updatedValue.value.value;
        this.showColorInfoFromUi(updatedValue);
      } else if (updatedValue.propertyName === AbstractDialogDataProvider._weightName) {
        this.weight = updatedValue.value.value;
        this.showInfoFromUi(updatedValue);
      } else {
        return;
      }
    };
  }
  supplyButtonData() {
    const buttons = [];
    buttons.push({ type: DialogButtonType.OK, onClick: () => {
    } });
    buttons.push({ type: DialogButtonType.Cancel, onClick: () => {
    } });
    return buttons;
  }
  get option() {
    return this._optionsValue.value;
  }
  set option(option) {
    this._optionsValue = { value: option };
  }
  get colorValue() {
    return this._colorValue.value;
  }
  set colorValue(newValue) {
    this._colorValue.value = newValue;
  }
  get colorDef() {
    return ColorDef.create(this._optionsValue.value);
  }
  set colorDef(colorValue) {
    this._optionsValue.value = colorValue.tbgr;
  }
  get useLength() {
    return this._useLengthValue.value;
  }
  set useLength(option) {
    this._useLengthValue.value = option;
  }
  get length() {
    return this._lengthValue.value;
  }
  set length(option) {
    this._lengthValue.value = option;
  }
  get weight() {
    return this._weightValue.value;
  }
  set weight(weightValue) {
    this._weightValue.value = weightValue;
  }
  get lock() {
    return this._lockValue.value;
  }
  set lock(option) {
    this._lockValue.value = option;
  }
  get city() {
    return this._cityValue.value;
  }
  set city(option) {
    this._cityValue.value = option;
  }
  get stateName() {
    return this._stateValue.value;
  }
  set stateName(option) {
    this._stateValue.value = option;
  }
  supplyDialogItems() {
    const dialogItems = new Array();
    dialogItems.push({
      value: this._optionsValue,
      property: AbstractDialogDataProvider._getEnumAsPicklistDescription(),
      editorPosition: { rowPriority: 0, columnIndex: 2 }
    });
    dialogItems.push({
      value: this._colorValue,
      property: AbstractDialogDataProvider._getColorDescription(),
      editorPosition: { rowPriority: 0, columnIndex: 4 }
    });
    dialogItems.push({
      value: this._weightValue,
      property: AbstractDialogDataProvider._getWeightDescription(),
      editorPosition: { rowPriority: 3, columnIndex: 2 }
    });
    dialogItems.push({
      value: this._lockValue,
      property: AbstractDialogDataProvider._getLockToggleDescription(),
      editorPosition: { rowPriority: 5, columnIndex: 2 }
    });
    dialogItems.push({
      value: this._cityValue,
      property: AbstractDialogDataProvider._getCityDescription(),
      editorPosition: { rowPriority: 10, columnIndex: 2 }
    });
    dialogItems.push({
      value: this._stateValue,
      property: AbstractDialogDataProvider._getStateDescription(),
      editorPosition: { rowPriority: 10, columnIndex: 4 }
    });
    const lengthLock = {
      value: this._useLengthValue,
      property: AbstractDialogDataProvider._getUseLengthDescription(),
      editorPosition: { rowPriority: 20, columnIndex: 0 }
    };
    dialogItems.push({
      value: this._lengthValue,
      property: this._lengthDescription,
      editorPosition: { rowPriority: 20, columnIndex: 2 },
      isDisabled: false,
      lockProperty: lengthLock
    });
    return dialogItems;
  }
  showColorInfoFromUi(updatedValue) {
    const tempColorDef = ColorDef.create(updatedValue.value.value);
    const msg = `Property '${updatedValue.propertyName}' updated to value ${tempColorDef.toRgbString()}`;
    IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, msg));
  }
  showInfoFromUi(updatedValue) {
    const msg = `Property '${updatedValue.propertyName}' updated to value ${String(updatedValue.value.value)}`;
    IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, msg));
  }
  syncLengthState() {
    const syncItem = {
      value: this._lengthValue,
      propertyName: AbstractDialogDataProvider._lengthName,
      isDisabled: !this.useLength
    };
    this.fireSyncPropertiesEvent([syncItem]);
  }
}
AbstractDialogDataProvider._optionsName = "enumAsPicklist";
AbstractDialogDataProvider._getEnumAsPicklistDescription = () => {
  return {
    name: AbstractDialogDataProvider._optionsName,
    displayLabel: "Options",
    typename: "enum",
    editor: {
      name: "themed-enum"
    },
    enum: {
      choices: [
        { label: "Red", value: ColorOptions.Red },
        { label: "White", value: ColorOptions.White },
        { label: "Blue", value: ColorOptions.Blue },
        { label: "Yellow", value: ColorOptions.Yellow },
        { label: "Orange", value: ColorOptions.Orange }
      ]
    }
  };
};
AbstractDialogDataProvider._colorName = "color";
AbstractDialogDataProvider._getColorDescription = () => {
  return {
    name: AbstractDialogDataProvider._colorName,
    displayLabel: "Color",
    typename: "number",
    editor: {
      name: "color-picker",
      params: [
        {
          type: PropertyEditorParamTypes.ColorData,
          colorValues: [
            ColorByName.blue,
            ColorByName.red,
            ColorByName.green,
            ColorByName.yellow,
            ColorByName.black,
            ColorByName.gray,
            ColorByName.purple,
            ColorByName.pink
          ],
          numColumns: 3
        }
      ]
    }
  };
};
AbstractDialogDataProvider._useLengthName = "useLength";
AbstractDialogDataProvider._getUseLengthDescription = () => {
  return {
    name: AbstractDialogDataProvider._useLengthName,
    displayLabel: "",
    typename: "boolean",
    editor: {
      params: [
        {
          type: PropertyEditorParamTypes.SuppressEditorLabel,
          suppressLabelPlaceholder: true
        }
      ]
    }
  };
};
AbstractDialogDataProvider._lengthName = "length";
AbstractDialogDataProvider._weightName = "weight";
AbstractDialogDataProvider._getWeightDescription = () => {
  return {
    name: AbstractDialogDataProvider._weightName,
    displayLabel: "Weight",
    typename: StandardTypeNames.Number,
    editor: {
      name: StandardEditorNames.WeightPicker
    }
  };
};
AbstractDialogDataProvider._lockToggleName = "lockToggle";
AbstractDialogDataProvider._getLockToggleDescription = () => {
  return {
    name: AbstractDialogDataProvider._lockToggleName,
    displayLabel: "Lock",
    typename: StandardTypeNames.Boolean,
    editor: { name: StandardEditorNames.Toggle }
  };
};
AbstractDialogDataProvider._cityName = "city";
AbstractDialogDataProvider._getCityDescription = () => {
  return {
    name: AbstractDialogDataProvider._cityName,
    displayLabel: "City",
    typename: "string"
  };
};
AbstractDialogDataProvider._stateName = "stateName";
AbstractDialogDataProvider._getStateDescription = () => {
  return {
    name: AbstractDialogDataProvider._stateName,
    displayLabel: "State",
    typename: StandardTypeNames.String,
    editor: {
      params: [
        {
          type: PropertyEditorParamTypes.InputEditorSize,
          size: 4
          /* maxLength: 60,*/
        }
      ]
    }
  };
};
class OpenAbstractDialogTool extends Tool {
  static get minArgs() {
    return 0;
  }
  static get maxArgs() {
    return 0;
  }
  async run() {
    UiFramework.openDialog(new AbstractDialogDataProvider(), "Test Abstract Dialog", true, "appui-test-providers:AbstractDialog", {
      movable: true,
      width: "auto"
    });
    return true;
  }
  static get flyover() {
    return AppUiTestProviders.translate("tools.open-abstract-dialog");
  }
  // if supporting localized key-ins return a localized string
  static get keyin() {
    return this.englishKeyin;
  }
  static get englishKeyin() {
    return "open abstract dialog";
  }
}
OpenAbstractDialogTool.toolId = "appuiTestItemsProviders-OpenAbstractModalDialogTool";
OpenAbstractDialogTool.iconSpec = "icon-lightbulb-2";
function useTranslation() {
  const translate = reactExports.useCallback((key) => {
    return AppUiTestProviders.translate(key);
  }, []);
  return { translate };
}
function SampleModalDialog() {
  const { translate } = useTranslation();
  const closeDialog = reactExports.useCallback(() => {
    UiFramework.dialogs.modal.close();
  }, []);
  const handleOK = reactExports.useCallback(() => {
    closeDialog();
  }, [closeDialog]);
  const handleCancel = reactExports.useCallback(() => {
    closeDialog();
  }, [closeDialog]);
  return reactExports.createElement(
    Dialog$1,
    { isOpen: true, onClose: handleCancel, closeOnEsc: true, closeOnExternalClick: true, preventDocumentScroll: true },
    reactExports.createElement(Dialog$1.Backdrop, null),
    reactExports.createElement(
      Dialog$1.Main,
      { style: { width: 450, height: 300 } },
      reactExports.createElement(Dialog$1.TitleBar, { titleText: translate("Dialogs.SampleModal.title") }),
      reactExports.createElement(Dialog$1.Content, null, "Lorem ipsum dolor sit amet, posse imperdiet ius in, mundi cotidieque ei per. Vel scripta ornatus assentior cu. Duo nonumy equidem te, per ad malis deserunt consetetur. In per invidunt conceptam. Ea pri aeque corrumpit. Eum ea ipsum perfecto vulputate, an cum oblique ornatus."),
      reactExports.createElement(
        Dialog$1.ButtonBar,
        null,
        reactExports.createElement(Button, { styleType: "high-visibility", onClick: handleOK }, "OK"),
        reactExports.createElement(Button, { onClick: handleCancel }, "Cancel")
      )
    )
  );
}
const connectedQuerySvg = "data:image/svg+xml,%3csvg%20id='Calque_1'%20data-name='Calque%201'%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2016%2016'%3e%3cpath%20d='M11.42,10.52A4.19,4.19,0,0,1,8,12.26,4.24,4.24,0,0,1,4.25,10a3.59,3.59,0,0,1-.39-1H6L4.05,6.43h0l-1-1.3h0L0,9H1.83a4.71,4.71,0,0,0,.24,1,6.26,6.26,0,0,0,10.6,2.17l-.52-.69Z'/%3e%3cpath%20d='M16,7H14.17a4.71,4.71,0,0,0-.24-1A6.26,6.26,0,0,0,3.33,3.83l.52.69.73,1A4.19,4.19,0,0,1,8,3.74,4.24,4.24,0,0,1,11.75,6a3.59,3.59,0,0,1,.39,1H10L12,9.57h0l1,1.3h0Z'/%3e%3c/svg%3e";
class OpenCustomDialogTool extends Tool {
  static get minArgs() {
    return 0;
  }
  static get maxArgs() {
    return 0;
  }
  async run() {
    UiFramework.dialogs.modal.open(reactExports.createElement(SampleModalDialog, null));
    return true;
  }
  static get flyover() {
    return AppUiTestProviders.translate("tools.open-custom-dialog-tool");
  }
  // if supporting localized key-ins return a localized string
  static get keyin() {
    return this.englishKeyin;
  }
  static get englishKeyin() {
    return "open custom dialog";
  }
}
OpenCustomDialogTool.toolId = "appuiTestProviders-OpenCustomDialogTool";
OpenCustomDialogTool.iconSpec = connectedQuerySvg;
const windowAddSvg = "data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2016%2016'%3e%3cpath%20d='M7,12H1V4H12V7h1V0H0V13H7ZM11,1h1V2H11ZM9,1h1V2H9Z'/%3e%3cpath%20d='M11,8v3H8v2h3v3h2V13h3V11H13V8Z'/%3e%3c/svg%3e";
async function getViewDefinitions(imodel) {
  const viewQueryParams = { wantPrivate: false };
  const viewSpecs = await imodel.views.queryProps(viewQueryParams);
  return viewSpecs.filter((spec) => !spec.isPrivate).map((spec) => ({
    id: spec.id,
    class: spec.classFullName,
    label: spec.userLabel ?? spec.code.value
  }));
}
function ViewDefinitionSelector(props) {
  const [selectOptions, setSelectOptions] = reactExports.useState([]);
  reactExports.useEffect(() => {
    void getViewDefinitions(props.imodel).then((result) => {
      const options = result.map((definition) => ({
        value: definition.id,
        label: definition.label
      }));
      setSelectOptions(options);
    });
  }, [props.imodel]);
  return reactExports.createElement(
    "div",
    null,
    reactExports.createElement(Select, { onChange: props.onViewDefinitionSelected, value: props.selectedViewDefinition, options: selectOptions, size: "small" })
  );
}
function ViewsTable() {
  const activeIModelConnection = useActiveIModelConnection();
  const [iModelViews, setIModelViews] = reactExports.useState([]);
  reactExports.useEffect(() => {
    if (activeIModelConnection) {
      void getViewDefinitions(activeIModelConnection).then((result) => {
        setIModelViews(result);
      });
    }
  }, [activeIModelConnection]);
  const viewData = reactExports.useMemo(() => {
    return iModelViews.map((spec) => ({
      id: spec.id,
      class: spec.class,
      label: spec.label
    }));
  }, [iModelViews]);
  const columns = reactExports.useMemo(() => [
    {
      Header: "View Id",
      accessor: "id"
    },
    {
      Header: "Class Name",
      accessor: "class"
    },
    {
      Header: "Label",
      accessor: "label"
    }
  ], []);
  return reactExports.createElement(Table, { columns, data: viewData, emptyTableContent: "No views to display." });
}
function PopoutDialog() {
  return reactExports.createElement(
    "div",
    { className: "test-popout-dialog" },
    reactExports.createElement(ViewsTable, null)
  );
}
class OpenPopoutDialogTool extends Tool {
  static get minArgs() {
    return 0;
  }
  static get maxArgs() {
    return 0;
  }
  async run() {
    if (UiFramework.childWindows.find("DialogPopout"))
      return false;
    const location = {
      width: 800,
      height: 600,
      left: 100,
      top: 100
    };
    UiFramework.childWindows.open("DialogPopout", "Dialog Popout", reactExports.createElement(PopoutDialog, null), location);
    return true;
  }
  static get flyover() {
    return "open popout dialog";
  }
  // if supporting localized key-ins return a localized string
  static get keyin() {
    return this.englishKeyin;
  }
  static get englishKeyin() {
    return "open popout dialog";
  }
  static getActionButtonDef(itemPriority, groupPriority, isHidden) {
    const overrides = {
      groupPriority,
      isHidden
    };
    return ToolbarItemUtilities.createActionButton(OpenPopoutDialogTool.toolId, itemPriority, this.iconSpec, OpenPopoutDialogTool.flyover, async () => {
      await IModelApp.tools.run(OpenPopoutDialogTool.toolId);
    }, overrides);
  }
}
OpenPopoutDialogTool.toolId = "appuiTestProviders-OpenPopoutDialogTool";
OpenPopoutDialogTool.iconSpec = windowAddSvg;
const windowPopoutSvg = "data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2016%2016'%3e%3cpath%20d='m16%200v5.4l-1.9-2-8.4%208.4-1.5-1.5%208.3-8.4-1.9-1.9'/%3e%3cpath%20d='M16,16V7H15v8H1V1H9V0H0V16Z'/%3e%3c/svg%3e";
function PopupTestView({ contentId, showViewPicker }) {
  const menuItems = reactExports.useMemo(() => {
    return [
      {
        id: "Item1",
        label: "Item ~1",
        icon: "icon-placeholder",
        submenu: [
          {
            id: "0",
            item: {
              label: "SubMenu Item ~1",
              icon: "icon-placeholder",
              execute: () => {
              }
            }
          },
          {
            id: "1",
            item: {
              label: "SubMenu Item ~2",
              icon: "icon-placeholder",
              execute: () => {
              }
            }
          }
        ]
      },
      {
        id: "Item2",
        item: { label: "Item ~2", icon: "icon-placeholder", execute: () => {
        } }
      },
      {
        id: "Item3",
        item: { label: "Item ~3", icon: "icon-placeholder", execute: () => {
        } }
      }
    ];
  }, []);
  const activeIModelConnection = useActiveIModelConnection();
  const divRef = reactExports.useRef(null);
  const [initialViewState, setInitialViewState] = reactExports.useState(UiFramework.getDefaultViewState());
  const viewportRef = reactExports.useRef(null);
  reactExports.useEffect(() => {
    async function fetchView() {
      if (void 0 === initialViewState && activeIModelConnection) {
        const definitions = await getViewDefinitions(activeIModelConnection);
        if (definitions && definitions.length) {
          const viewState = await activeIModelConnection.views.load(definitions[0].id);
          setInitialViewState(viewState);
        }
      }
    }
    void fetchView();
  }, [activeIModelConnection, initialViewState]);
  const onViewDefinitionChanged = reactExports.useCallback(async (viewId) => {
    if (activeIModelConnection && viewId) {
      const viewState = await activeIModelConnection.views.load(viewId);
      setInitialViewState(viewState);
    }
  }, [activeIModelConnection]);
  const handleContextMenu = reactExports.useCallback((e2) => {
    e2.preventDefault();
    UiFramework.openContextMenu(menuItems, { x: e2.pageX, y: e2.pageY });
    return false;
  }, [menuItems]);
  return reactExports.createElement(
    "div",
    { ref: divRef, style: {
      display: "grid",
      gridTemplateRows: "auto 1fr",
      height: "100%",
      position: "relative",
      minWidth: "400px",
      minHeight: "300px"
    } },
    !!showViewPicker && initialViewState && reactExports.createElement(
      "div",
      null,
      reactExports.createElement(ViewDefinitionSelector, { imodel: initialViewState.iModel, selectedViewDefinition: initialViewState.id, onViewDefinitionSelected: onViewDefinitionChanged })
    ),
    initialViewState && reactExports.createElement(
      "div",
      null,
      reactExports.createElement(FloatingViewportContent, { contentId, initialViewState, onContextMenu: handleContextMenu, viewportRef })
    ),
    reactExports.createElement(Button, { onClick: () => {
      viewportRef?.current?.openToolTip("Test tooltip", { x: 100, y: 50 });
    } }, "Open tooltip")
  );
}
class OpenPopoutViewTool extends Tool {
  static get dialogId() {
    return `appui-test-app:popup-view-dialog-${OpenPopoutViewTool._counter}`;
  }
  static get minArgs() {
    return 0;
  }
  static get maxArgs() {
    return 0;
  }
  async run() {
    await this._run();
    return true;
  }
  async _run() {
    const location = {
      width: 800,
      height: 600,
      left: 0,
      top: 0
    };
    UiFramework.childWindows.open("ViewPopout", "View Popout", reactExports.createElement(PopupTestView, { contentId: "appui-test-app:popout-test", showViewPicker: true }), location);
  }
  static get flyover() {
    return "open view popout";
  }
  // if supporting localized key-ins return a localized string
  static get keyin() {
    return "open view popout";
  }
  static get englishKeyin() {
    return "open view popout";
  }
  static getActionButtonDef(itemPriority, groupPriority) {
    const overrides = {
      groupPriority
    };
    return ToolbarItemUtilities.createActionButton(OpenPopoutViewTool.toolId, itemPriority, OpenPopoutViewTool.iconSpec, OpenPopoutViewTool.flyover, async () => {
      await IModelApp.tools.run(OpenPopoutViewTool.toolId);
    }, overrides);
  }
}
OpenPopoutViewTool._counter = 0;
OpenPopoutViewTool.toolId = "OpenViewPopout";
OpenPopoutViewTool.iconSpec = windowPopoutSvg;
function SynchronizedFloatingView({ contentId, viewport }) {
  const activeIModelConnection = useActiveIModelConnection();
  const divRef = reactExports.useRef(null);
  const [floatingViewport, setFloatingViewport] = reactExports.useState();
  const [initialViewState, setInitialViewState] = reactExports.useState(void 0);
  const [twoDViewDefinitions, setTwoDViewDefinitions] = reactExports.useState([]);
  const [threeDViewDefinitions, setThreeDViewDefinitions] = reactExports.useState([]);
  const [noViewsMessage, setNoViewsMessage] = reactExports.useState("No 2D views available.");
  reactExports.useEffect(() => {
    if (!activeIModelConnection)
      return;
    const acceptedSpatialViewClasses = [
      "BisCore:SpatialViewDefinition",
      "BisCore:OrthographicViewDefinition"
    ];
    const acceptedDrawingViewClasses = [
      "BisCore:DrawingViewDefinition",
      "BisCore:SheetViewDefinition"
    ];
    void getViewDefinitions(activeIModelConnection).then((viewDefinitions) => {
      const localThreeTwoDViewDefs = viewDefinitions.filter((def) => {
        return acceptedSpatialViewClasses.indexOf(def.class) > -1;
      });
      const localTwoTwoDViewDefs = viewDefinitions.filter((def) => {
        return acceptedDrawingViewClasses.indexOf(def.class) > -1;
      });
      setTwoDViewDefinitions(localTwoTwoDViewDefs);
      setThreeDViewDefinitions(localThreeTwoDViewDefs);
      const isMainViewport3d = viewport.view.is3d();
      setNoViewsMessage(isMainViewport3d ? "No 2d views available." : "No 3d views available.");
      let initialViewIdToLoad;
      if (isMainViewport3d && localTwoTwoDViewDefs && localTwoTwoDViewDefs.length > 0) {
        initialViewIdToLoad = localTwoTwoDViewDefs[0].id;
      } else if (!isMainViewport3d && localThreeTwoDViewDefs && localThreeTwoDViewDefs.length > 0) {
        initialViewIdToLoad = localThreeTwoDViewDefs[0].id;
      }
      if (initialViewIdToLoad) {
        void activeIModelConnection.views.load(initialViewIdToLoad).then((viewState) => {
          setInitialViewState(viewState);
        });
      }
    });
  }, [activeIModelConnection, viewport]);
  reactExports.useEffect(() => {
    return ViewportComponentEvents.onViewIdChangedEvent.addListener(async (args) => {
      if (args.newId === args.oldId)
        return;
      const frontstageDef = UiFramework.frontstages.activeFrontstageDef;
      if (!frontstageDef)
        return;
      const isChangeForCurrentFloatingViewport = floatingViewport === args.viewport;
      if (isChangeForCurrentFloatingViewport) {
        const noChangeRequired = args.viewport.view.is2d() && viewport.view.is3d() || args.viewport.view.is3d() && viewport.view.is2d();
        if (!noChangeRequired) {
          if (args.viewport.view.is2d() && threeDViewDefinitions.length > 0) {
            await activeIModelConnection?.views.load(threeDViewDefinitions[0].id).then((newViewStateForMainVP) => {
              viewport.changeView(newViewStateForMainVP);
            });
          } else if (args.viewport.view.is3d() && twoDViewDefinitions.length > 0) {
            await activeIModelConnection?.views.load(twoDViewDefinitions[0].id).then((newViewStateForMainVP) => {
              viewport.changeView(newViewStateForMainVP);
            });
          }
        }
      } else {
        const noChangeRequired = args.viewport.view.is2d() && floatingViewport?.view.is3d() || args.viewport.view.is3d() && floatingViewport?.view.is2d();
        if (!noChangeRequired) {
          if (args.viewport.view.is2d() && threeDViewDefinitions.length > 0) {
            await activeIModelConnection?.views.load(threeDViewDefinitions[0].id).then((newViewStateForFloatingVP) => {
              setInitialViewState(newViewStateForFloatingVP);
            });
          } else if (args.viewport.view.is3d() && twoDViewDefinitions.length > 0) {
            await activeIModelConnection?.views.load(twoDViewDefinitions[0].id).then((newViewStateForFloatingVP) => {
              setInitialViewState(newViewStateForFloatingVP);
            });
          }
        }
      }
    }, [
      activeIModelConnection?.views,
      contentId,
      threeDViewDefinitions,
      twoDViewDefinitions
    ]);
  }, [
    activeIModelConnection,
    contentId,
    floatingViewport,
    viewport,
    threeDViewDefinitions,
    twoDViewDefinitions
  ]);
  if (initialViewState) {
    return reactExports.createElement(
      "div",
      { className: "test-syncrhonized-test-view", ref: divRef },
      reactExports.createElement("div", { id: "floatingviewportcontainerdiv" }, initialViewState && // eslint-disable-next-line @typescript-eslint/no-deprecated
      reactExports.createElement(FloatingViewportContent, { contentId, initialViewState, viewportRef: (v) => {
        setFloatingViewport(v ?? void 0);
      } }))
    );
  } else {
    return reactExports.createElement(
      "div",
      { className: "test-popup-test-view", ref: divRef },
      reactExports.createElement("div", { className: "no-views-message" }, noViewsMessage)
    );
  }
}
const panoramaconSvg = "data:image/svg+xml,%3c?xml%20version='1.0'%20encoding='utf-8'?%3e%3c!--%20Generator:%20Adobe%20Illustrator%2023.0.0,%20SVG%20Export%20Plug-In%20.%20SVG%20Version:%206.00%20Build%200)%20--%3e%3csvg%20version='1.1'%20id='Layer_1'%20xmlns='http://www.w3.org/2000/svg'%20xmlns:xlink='http://www.w3.org/1999/xlink'%20x='0px'%20y='0px'%20viewBox='0%200%2015.99%2015.67'%20style='enable-background:new%200%200%2015.99%2015.67;'%20xml:space='preserve'%3e%3cpath%20d='M3.9375,8.67H4.875c0.19576-0.02474,0.3344-0.2035,0.30966-0.39926C5.16421,8.10894,5.0368,7.98153,4.875,7.96108H3.9375%20c-0.19576,0.02474-0.3344,0.2035-0.30966,0.39926C3.64829,8.52214,3.7757,8.64955,3.9375,8.67z'/%3e%3cpath%20d='M12.375,9.2459h-2.15625L9.875,8.35937c-0.14805-0.2549-0.42413-0.40788-0.71875-0.39829H6.75%20C6.44624,7.94032,6.15733,8.09503,6.00625,8.35937L5.66875,9.2459H3.625C3.27504,9.25078,2.99526,9.53835,3,9.88831v5.13928%20C2.99526,15.37755,3.27504,15.66512,3.625,15.67h8.75c0.34996-0.00488,0.62974-0.29245,0.625-0.64241V9.88831%20C13.00474,9.53835,12.72496,9.25078,12.375,9.2459z%20M8,15.02759c-1.41917,0.039-2.60125-1.07986-2.64025-2.49903%20s1.07986-2.60125,2.49903-2.64025s2.60125,1.07986,2.64025,2.49903C10.49968,12.41089,10.5,12.43444,10.5,12.458%20C10.51894,13.85782,9.39981,15.00809,8,15.02759z%20M10.8125,10.53072c-0.1774,0.00488-0.32516-0.13498-0.33004-0.31238%20c-0.00488-0.1774,0.13498-0.32516,0.31238-0.33004c0.1774-0.00488,0.32516,0.13498,0.33004,0.31238%20c0.00008,0.00295,0.00012,0.00589,0.00012,0.00884C11.12737,10.3845,10.98748,10.52828,10.8125,10.53072z'/%3e%3cpath%20d='M8,10.67c-0.98746-0.02714-1.80996,0.75136-1.83709,1.73882c-0.02714,0.98746,0.75136,1.80996,1.73882,1.83709%20s1.80996-0.75136,1.83709-1.73882c0.00045-0.01636,0.00068-0.03273,0.00068-0.04909C9.75272,11.48398,8.97402,10.68356,8,10.67'/%3e%3cpath%20d='M11,1.67H5l-5-1v12l2-0.4v-1.02l-1,0.2V1.89l3,0.6v4.47h0.88C4.92026,6.95835,4.96057,6.96171,5,6.97v-4.3h6v5.58h1V2.49%20l3-0.6v9.56l-1-0.2v1.02l2,0.4v-12L11,1.67z'/%3e%3c/svg%3e";
class OpenSynchronizedViewTool extends Tool {
  static get dialogId() {
    return `ui-test-app:popup-view-dialog-${OpenSynchronizedViewTool._counter}`;
  }
  static get minArgs() {
    return 0;
  }
  static get maxArgs() {
    return 0;
  }
  async run() {
    await this._run();
    return true;
  }
  async _run() {
    OpenSynchronizedViewTool._counter = OpenSynchronizedViewTool._counter + 1;
    let x;
    let y;
    const stage = UiFramework.frontstages.activeFrontstageDef;
    if (stage && stage.nineZoneState) {
      const floatingContentCount = stage.floatingContentControls?.length ?? 0;
      if (floatingContentCount < 1 && stage.nineZoneState.size.width > 800 && stage.nineZoneState.size.height > 600) {
        x = 0.3 * stage.nineZoneState.size.width + 40 * (floatingContentCount - 1);
        y = 0.3 * stage.nineZoneState.size.height + 40 * (floatingContentCount - 1);
      }
    }
    UiFramework.dialogs.modeless.open(reactExports.createElement(IModelViewDialog, { x, y, id: OpenSynchronizedViewTool.dialogId, title: `IModel View (${OpenSynchronizedViewTool._counter})` }), OpenSynchronizedViewTool.dialogId);
  }
  static get flyover() {
    return "open synchronized view dialog";
  }
  // if supporting localized key-ins return a localized string
  static get keyin() {
    return "open synchronized view dialog";
  }
  static get englishKeyin() {
    return "open view dialog";
  }
}
OpenSynchronizedViewTool._counter = 0;
OpenSynchronizedViewTool.toolId = "OpenViewDialog";
OpenSynchronizedViewTool.iconSpec = panoramaconSvg;
function IModelViewDialog({ x, y, id: id2, title }) {
  const [viewport] = reactExports.useState(() => IModelApp.viewManager.selectedView);
  const initialOffset = x || y ? {
    left: x ?? 0,
    top: y ?? 0,
    transform: "none"
  } : {};
  if (!viewport)
    return null;
  return reactExports.createElement(
    Dialog$1,
    { isOpen: true, onClose: () => {
      UiFramework.dialogs.modeless.close(id2);
    }, closeOnEsc: true, isDraggable: true, isResizable: true, preventDocumentScroll: true },
    reactExports.createElement(
      Dialog$1.Main,
      { style: { width: "40vw", height: "40vh", ...initialOffset } },
      reactExports.createElement(Dialog$1.TitleBar, { titleText: title }),
      reactExports.createElement(
        Dialog$1.Content,
        { style: { padding: 0 } },
        reactExports.createElement(SynchronizedFloatingView, { contentId: id2, viewport })
      )
    )
  );
}
class RegisterUiProviderTool extends Tool {
  static get minArgs() {
    return 1;
  }
  static get maxArgs() {
    return 1;
  }
  async run(providerId) {
    const provider = RegisterUiProviderTool.providers.find((p) => p.id === providerId);
    if (!provider)
      return false;
    UiItemsManager.register(provider);
    return true;
  }
  async parseAndRun(...args) {
    return this.run(args[0]);
  }
}
RegisterUiProviderTool.toolId = "RegisterUiProviderTool";
RegisterUiProviderTool.providers = [];
class UnregisterUiProviderTool extends Tool {
  static get minArgs() {
    return 1;
  }
  static get maxArgs() {
    return 1;
  }
  async run(providerId) {
    UiItemsManager.unregister(providerId);
    return true;
  }
  async parseAndRun(...args) {
    return this.run(args[0]);
  }
}
UnregisterUiProviderTool.toolId = "UnregisterUiProviderTool";
const sampleToolSvg = "data:image/svg+xml,%3c?xml%20version='1.0'%20encoding='utf-8'?%3e%3c!--%20Generator:%20Adobe%20Illustrator%2022.0.0,%20SVG%20Export%20Plug-In%20.%20SVG%20Version:%206.00%20Build%200)%20--%3e%3csvg%20version='1.1'%20id='Layer_1'%20xmlns='http://www.w3.org/2000/svg'%20xmlns:xlink='http://www.w3.org/1999/xlink'%20x='0px'%20y='0px'%20viewBox='0%200%2016%2016'%20style='enable-background:new%200%200%2016%2016;'%20xml:space='preserve'%3e%3cpath%20d='M5.2378,0C2.3541,0,0.0117,2.339,0.0117,5.2184s2.3424,5.2086,5.2261,5.2086c0.374,0,0.7381-0.0393,1.0826-0.1179%20C6.3302,9.8964,6.409,9.5033,6.5467,9.1396C6.1826,9.2674,5.7889,9.3362,5.3756,9.346C5.3263,9.3558,5.287,9.3558,5.2378,9.3558%20c-2.2932,0-4.1533-1.8574-4.1533-4.1374c0-2.2898,1.8601-4.1472,4.1533-4.1472c2.2833,0,4.1435,1.8574,4.1435,4.1472%20c0,0.0688,0,0.1278-0.0097,0.1966C9.3615,5.8277,9.2828,6.2208,9.145,6.5845c0.3642-0.1278,0.7578-0.1966,1.1712-0.2064%20c0.0886-0.344,0.1279-0.7076,0.1378-1.081V5.2184C10.454,2.339,8.1215,0,5.2378,0z'/%3e%3ccircle%20cx='8.901'%20cy='9.6262'%20r='0.7076'/%3e%3ccircle%20cx='12.4846'%20cy='9.6973'%20r='0.7076'/%3e%3ccircle%20cx='3.4659'%20cy='3.825'%20r='0.6954'/%3e%3ccircle%20cx='6.9878'%20cy='3.8949'%20r='0.6954'/%3e%3cg%3e%3cpath%20d='M7.8262,7.3215c-0.1673,0.1278-0.3248,0.285-0.4626,0.4422C7.3243,7.7343,7.2947,7.695,7.2652,7.6458%20c-0.1476-0.285-0.3543-0.5307-0.6004-0.7272C6.2416,6.5746,5.7102,6.3879,5.159,6.3977c-0.8562,0.0197-1.6239,0.511-2.0078,1.2776%20C3.0725,7.8424,2.8757,7.9112,2.7084,7.8227C2.5509,7.7441,2.482,7.5476,2.5608,7.3903c0.4921-0.9926,1.4763-1.6215,2.5786-1.651%20h0.0787c0.7185,0,1.3976,0.2653,1.929,0.7371C7.4227,6.7024,7.6589,6.9972,7.8262,7.3215z'/%3e%3c/g%3e%3cg%3e%3cpath%20d='M10.6861,13.5634c-1.1166,0-2.1616-0.6368-2.6779-1.6395c-0.0839-0.1635-0.0195-0.3643,0.1441-0.4481%20c0.1645-0.0854,0.3648-0.0203,0.4496,0.1439c0.4113,0.7986,1.2542,1.2809,2.1436,1.2768c0.869-0.0236,1.65-0.5237,2.0386-1.3077%20c0.0806-0.1651,0.2802-0.2334,0.4472-0.1505c0.1645,0.0813,0.2321,0.2814,0.1507,0.4465%20c-0.4984,1.0052-1.5018,1.6476-2.6184,1.6769C10.7374,13.5626,10.7121,13.5634,10.6861,13.5634z'/%3e%3c/g%3e%3cg%3e%3cpath%20d='M10.6989,6.3907c2.3777,0,4.312,1.9309,4.312,4.3043s-1.9344,4.3043-4.312,4.3043s-4.312-1.9309-4.312-4.3043%20S8.3213,6.3907,10.6989,6.3907%20M10.6989,5.39c-2.9342,0-5.3128,2.3751-5.3128,5.305S7.7648,16,10.6989,16%20s5.3128-2.3751,5.3128-5.305S13.6331,5.39,10.6989,5.39L10.6989,5.39z'/%3e%3c/g%3e%3c/svg%3e";
var ToolOptions;
(function(ToolOptions2) {
  ToolOptions2[ToolOptions2["Red"] = 0] = "Red";
  ToolOptions2[ToolOptions2["White"] = 1] = "White";
  ToolOptions2[ToolOptions2["Blue"] = 2] = "Blue";
  ToolOptions2[ToolOptions2["Yellow"] = 3] = "Yellow";
  ToolOptions2[ToolOptions2["Green"] = 4] = "Green";
  ToolOptions2[ToolOptions2["Pink"] = 5] = "Pink";
})(ToolOptions || (ToolOptions = {}));
class SampleTool extends PrimitiveTool {
  constructor() {
    super(...arguments);
    this.points = [];
    this._showCoordinatesOnPointerMove = false;
    this._lengthDescription = new LengthDescription();
    this._surveyLengthDescription = new SurveyLengthDescription(SampleTool._surveyLengthName, "Survey");
    this._getChoices = () => {
      return [
        { label: SampleTool.getOptionString("Red"), value: ToolOptions.Red },
        { label: SampleTool.getOptionString("White"), value: ToolOptions.White },
        { label: SampleTool.getOptionString("Blue"), value: ToolOptions.Blue },
        {
          label: SampleTool.getOptionString("Yellow"),
          value: ToolOptions.Yellow
        },
        { label: SampleTool.getOptionString("Green"), value: ToolOptions.Green },
        { label: SampleTool.getOptionString("Pink"), value: ToolOptions.Pink }
      ];
    };
    this._getEnumAsPicklistDescription = () => {
      return {
        name: SampleTool._optionsName,
        displayLabel: SampleTool.getPrompt("Options"),
        typename: "enum",
        enum: {
          choices: this._getChoices()
        }
      };
    };
    this._optionsValue = { value: ToolOptions.Blue };
    this._colorValue = { value: ColorByName.blue };
    this._weightValue = { value: 3 };
    this._lockValue = { value: true };
    this._cityValue = { value: "Exton" };
    this._stateValue = { value: "PA" };
    this._coordinateValue = { value: "0.0, 0.0, 0.0" };
    this._stationValue = { value: this.formatStation(0) };
    this._useLengthValue = { value: true };
    this._lengthValue = { value: 1.5 };
    this._surveyLengthValue = { value: 51.25 };
    this._angleValue = { value: 0 };
  }
  toggleCoordinateUpdate() {
    this._showCoordinatesOnPointerMove = !this._showCoordinatesOnPointerMove;
  }
  static getPrompt(name) {
    const key = `tools.${this.toolId}.Prompts.${name}`;
    return AppUiTestProviders.translate(key);
  }
  static getOptionString(name) {
    const key = `tools.${this.toolId}.Options.${name}`;
    return AppUiTestProviders.translate(key);
  }
  get option() {
    return this._optionsValue.value;
  }
  set option(option) {
    this._optionsValue.value = option;
  }
  get colorValue() {
    return this._colorValue.value;
  }
  set colorValue(colorVal) {
    this._colorValue.value = colorVal;
  }
  get colorDef() {
    return ColorDef.create(this._colorValue.value);
  }
  set colorDef(colorVal) {
    this._colorValue.value = colorVal.tbgr;
  }
  get weight() {
    return this._weightValue.value;
  }
  set weight(weightVal) {
    this._weightValue.value = weightVal;
  }
  get lock() {
    return this._lockValue.value;
  }
  set lock(option) {
    this._lockValue.value = option;
  }
  get city() {
    return this._cityValue.value;
  }
  set city(option) {
    this._cityValue.value = option;
  }
  get state() {
    return this._stateValue.value;
  }
  set state(option) {
    this._stateValue.value = option;
  }
  get coordinate() {
    return this._coordinateValue.value;
  }
  set coordinate(option) {
    this._coordinateValue.value = option;
  }
  // ------------- display station value as text  ---------------
  get stationFormatterSpec() {
    if (this._stationFormatterSpec)
      return this._stationFormatterSpec;
    const formatterSpec = IModelApp.quantityFormatter.findFormatterSpecByQuantityType(QuantityType.Stationing);
    if (formatterSpec) {
      this._stationFormatterSpec = formatterSpec;
      return formatterSpec;
    }
    Logger.logError("UITestApp.SampleTool", "Station formatterSpec was expected to be set before tool started.");
    return void 0;
  }
  formatStation(numberValue) {
    if (this.stationFormatterSpec) {
      return IModelApp.quantityFormatter.formatQuantity(numberValue, this.stationFormatterSpec);
    }
    return numberValue.toFixed(2);
  }
  get station() {
    return this._stationValue.value;
  }
  set station(option) {
    this._stationValue.value = option;
  }
  get useLength() {
    return this._useLengthValue.value;
  }
  set useLength(option) {
    this._useLengthValue.value = option;
  }
  get length() {
    return this._lengthValue.value;
  }
  set length(option) {
    this._lengthValue.value = option;
  }
  get surveyLength() {
    return this._surveyLengthValue.value;
  }
  set surveyLength(option) {
    this._surveyLengthValue.value = option;
  }
  get angle() {
    return this._angleValue.value;
  }
  set angle(option) {
    this._angleValue.value = option;
  }
  // -------- end of ToolSettings ----------
  requireWriteableTarget() {
    return false;
  }
  async onPostInstall() {
    await super.onPostInstall();
    this.setupAndPromptForNextAction();
  }
  async onUnsuspend() {
    this.provideToolAssistance();
  }
  /** Establish current tool state and initialize drawing aides following onPostInstall, onDataButtonDown, onUndoPreviousStep, or other events that advance or back up the current tool state.
   * Enable snapping or auto-locate for AccuSnap.
   * Setup AccuDraw using AccuDrawHintBuilder.
   * Set view cursor when default cursor isn't applicable.
   * Provide tool assistance.
   */
  setupAndPromptForNextAction() {
    this.provideToolAssistance();
  }
  /** A tool is responsible for providing tool assistance appropriate to the current tool state following significant events.
   * After onPostInstall to establish instructions for the initial tool state.
   * After onUnsuspend to reestablish instructions when no longer suspended by a ViewTool or InputCollector.
   * After onDataButtonDown (or other tool event) advances or backs up the current tool state.
   * After onUndoPreviousStep or onRedoPreviousStep modifies the current tool state.
   */
  provideToolAssistance() {
    const mainInstruction = ToolAssistance.createInstruction(ToolAssistanceImage.CursorClick, SampleTool.getPrompt("GetPoint"));
    const instructions = ToolAssistance.createInstructions(mainInstruction);
    IModelApp.notifications.setToolAssistance(instructions);
  }
  showInfoFromCursorMenu(label) {
    const msg = `Context Menu selection - ${label}`;
    IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, msg));
  }
  async onKeyTransition(down, ev) {
    if (down && ev.key === "q") {
      this._stateValue.value = ev.key.concat(this._stateValue.value ?? "");
      this.syncToolSettingsProperties([
        { propertyName: SampleTool._stateName, value: this._stateValue }
      ]);
    }
    return EventHandled.Yes;
  }
  async onDataButtonDown(ev) {
    if (ev.isAltKey) {
      const menuItems = [];
      menuItems.push({
        id: "entry1",
        label: "Label1",
        iconNode: reactExports.createElement(SvgPlaceholder, null),
        execute: () => {
          this.showInfoFromCursorMenu("hello from entry1");
        }
      });
      menuItems.push({
        id: "entry2",
        item: {
          label: "Label2",
          icon: "icon-placeholder",
          execute: () => {
            this.showInfoFromCursorMenu("hello from entry2");
          }
        }
      });
      menuItems.push({
        id: "entry3",
        item: {
          label: "Label3",
          execute: () => {
            this.showInfoFromCursorMenu("hello from entry3");
          }
        },
        iconRight: "icon-placeholder"
      });
      menuItems.push({
        id: "entry4",
        item: {
          label: "Label4",
          execute: () => {
            this.showInfoFromCursorMenu("hello from entry4");
          }
        },
        iconRightNode: reactExports.createElement(SvgPlaceholder, null)
      });
      UiFramework.openCursorMenu({
        items: menuItems,
        position: {
          x: CursorInformation.cursorX,
          y: CursorInformation.cursorY
        }
      });
      return EventHandled.No;
    }
    if (this.points.length < 2)
      this.points.push(ev.point.clone());
    else
      this.points[1] = ev.point.clone();
    this.toggleCoordinateUpdate();
    this.setupAndPromptForNextAction();
    return EventHandled.No;
  }
  async onResetButtonUp(_ev) {
    await this.onReinitialize();
    return EventHandled.No;
  }
  syncCoordinateValue(coordinate, station, distance) {
    const coordinateValue = { value: coordinate };
    const syncItem = {
      value: coordinateValue,
      propertyName: SampleTool._coordinateName,
      isDisabled: true
    };
    const stationValue = { value: station };
    const stationSyncItem = {
      value: stationValue,
      propertyName: SampleTool._stationName,
      isDisabled: true
    };
    const surveyLengthValue = {
      value: distance,
      displayValue: this._surveyLengthDescription.format(distance)
    };
    const surveySyncItem = {
      value: surveyLengthValue,
      propertyName: SampleTool._surveyLengthName,
      isDisabled: true
    };
    this.syncToolSettingsProperties([
      syncItem,
      stationSyncItem,
      surveySyncItem
    ]);
  }
  async onMouseMotion(ev) {
    if (!this._showCoordinatesOnPointerMove)
      return;
    const point = ev.point.clone();
    const formattedString = `${point.x.toFixed(2)}, ${point.y.toFixed(2)}, ${point.z.toFixed(2)}`;
    let distance = 0;
    if (this.points.length > 0)
      distance = point.distance(this.points[0]);
    this.syncCoordinateValue(formattedString, this.formatStation(distance), distance);
  }
  async onRestartTool() {
    const tool = new SampleTool();
    if (!await tool.run())
      return this.exitTool();
  }
  /** Used to supply DefaultToolSettingProvider with a list of properties to use to generate ToolSettings.  If undefined then no ToolSettings will be displayed */
  supplyToolSettingsProperties() {
    const readonly = true;
    const toolSettings = new Array();
    toolSettings.push({
      value: this._optionsValue,
      property: this._getEnumAsPicklistDescription(),
      editorPosition: { rowPriority: 0, columnIndex: 2 }
    });
    toolSettings.push({
      value: this._colorValue,
      property: SampleTool._getColorDescription(),
      editorPosition: { rowPriority: 2, columnIndex: 2 }
    });
    toolSettings.push({
      value: this._weightValue,
      property: SampleTool._getWeightDescription(),
      editorPosition: { rowPriority: 3, columnIndex: 2 }
    });
    toolSettings.push({
      value: this._lockValue,
      property: SampleTool._getLockToggleDescription(),
      editorPosition: { rowPriority: 5, columnIndex: 2 }
    });
    toolSettings.push({
      value: this._cityValue,
      property: SampleTool._getCityDescription(),
      editorPosition: { rowPriority: 10, columnIndex: 2 }
    });
    toolSettings.push({
      value: { ...this._stateValue },
      property: SampleTool._getStateDescription(),
      editorPosition: { rowPriority: 10, columnIndex: 4 }
    });
    toolSettings.push({
      value: this._coordinateValue,
      property: SampleTool._getCoordinateDescription(),
      editorPosition: { rowPriority: 15, columnIndex: 2 },
      isDisabled: readonly
    });
    toolSettings.push({
      value: this._stationValue,
      property: SampleTool._getStationDescription(),
      editorPosition: { rowPriority: 16, columnIndex: 2 },
      isDisabled: readonly
    });
    const lengthLock = {
      value: this._useLengthValue,
      property: SampleTool._getUseLengthDescription(),
      editorPosition: { rowPriority: 20, columnIndex: 0 }
    };
    toolSettings.push({
      value: this._lengthValue,
      property: this._lengthDescription,
      editorPosition: { rowPriority: 20, columnIndex: 2 },
      isDisabled: false,
      lockProperty: lengthLock
    });
    toolSettings.push({
      value: this._surveyLengthValue,
      property: this._surveyLengthDescription,
      editorPosition: { rowPriority: 21, columnIndex: 2 },
      isDisabled: readonly
    });
    toolSettings.push({
      value: this._angleValue,
      property: new AngleDescription(),
      editorPosition: { rowPriority: 25, columnIndex: 2 }
    });
    return toolSettings;
  }
  showColorInfoFromUi(updatedValue) {
    const msg = `Property '${updatedValue.propertyName}' updated to value ${this.colorDef.toRgbString()}`;
    IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, msg));
  }
  showInfoFromUi(updatedValue) {
    const msg = `Property '${updatedValue.propertyName}' updated to value ${String(updatedValue.value.value)}`;
    IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, msg));
  }
  syncLengthState() {
    const lengthValue = {
      value: this.length,
      displayValue: this._lengthDescription.format(this.length)
    };
    const syncItem = {
      value: lengthValue,
      propertyName: SampleTool._lengthName,
      isDisabled: !this.useLength
    };
    this.syncToolSettingsProperties([syncItem]);
  }
  /** Used to send changes from UI back to Tool */
  async applyToolSettingPropertyChange(updatedValue) {
    if (updatedValue.propertyName === SampleTool._optionsName) {
      if (this._optionsValue.value !== updatedValue.value.value) {
        this.option = updatedValue.value.value;
        this.showInfoFromUi(updatedValue);
      }
    } else if (updatedValue.propertyName === SampleTool._lockToggleName) {
      this.lock = updatedValue.value.value;
      this.showInfoFromUi(updatedValue);
    } else if (updatedValue.propertyName === SampleTool._cityName) {
      this.city = updatedValue.value.value;
      this.showInfoFromUi(updatedValue);
    } else if (updatedValue.propertyName === SampleTool._stateName) {
      this.state = updatedValue.value.value;
      this.showInfoFromUi(updatedValue);
    } else if (updatedValue.propertyName === SampleTool._useLengthName) {
      this.useLength = updatedValue.value.value;
      this.showInfoFromUi(updatedValue);
      this.syncLengthState();
    } else if (updatedValue.propertyName === SampleTool._lengthName) {
      this.length = updatedValue.value.value;
      this.showInfoFromUi(updatedValue);
    } else if (updatedValue.propertyName === SampleTool._surveyLengthName) {
      this.surveyLength = updatedValue.value.value;
      this.showInfoFromUi(updatedValue);
    } else if (updatedValue.propertyName === SampleTool._colorName) {
      this.colorValue = updatedValue.value.value;
      this.showColorInfoFromUi(updatedValue);
    } else if (updatedValue.propertyName === SampleTool._weightName) {
      this.weight = updatedValue.value.value;
      this.showInfoFromUi(updatedValue);
    }
    return true;
  }
}
SampleTool.toolId = "uiItemsProvidersTest-SampleTool";
SampleTool.iconSpec = sampleToolSvg;
SampleTool._optionsName = "enumAsPicklist";
SampleTool._colorName = "color";
SampleTool._getColorDescription = () => {
  return {
    name: SampleTool._colorName,
    displayLabel: SampleTool.getPrompt("Color"),
    typename: "number",
    editor: {
      name: "color-picker",
      params: [
        {
          type: PropertyEditorParamTypes.ColorData,
          colorValues: [
            ColorByName.blue,
            ColorByName.red,
            ColorByName.green,
            ColorByName.yellow,
            ColorByName.black,
            ColorByName.gray,
            ColorByName.purple,
            ColorByName.pink
          ],
          numColumns: 2
        }
      ]
    }
  };
};
SampleTool._weightName = "weight";
SampleTool._getWeightDescription = () => {
  return {
    name: SampleTool._weightName,
    displayLabel: SampleTool.getPrompt("Weight"),
    typename: "number",
    editor: {
      name: StandardEditorNames.WeightPicker
    }
  };
};
SampleTool._lockToggleName = "lockToggle";
SampleTool._getLockToggleDescription = () => {
  return {
    name: SampleTool._lockToggleName,
    displayLabel: SampleTool.getPrompt("Lock"),
    typename: "boolean",
    editor: { name: "toggle" }
  };
};
SampleTool._cityName = "city";
SampleTool._getCityDescription = () => {
  return {
    name: SampleTool._cityName,
    displayLabel: SampleTool.getPrompt("City"),
    typename: "string"
  };
};
SampleTool._stateName = "state";
SampleTool._getStateDescription = () => {
  return {
    name: SampleTool._stateName,
    displayLabel: SampleTool.getPrompt("State"),
    typename: "string",
    editor: {
      params: [
        {
          type: PropertyEditorParamTypes.InputEditorSize,
          size: 4
          /* maxLength: 60,*/
        }
      ]
    }
  };
};
SampleTool._coordinateName = "coordinate";
SampleTool._getCoordinateDescription = () => {
  return {
    name: SampleTool._coordinateName,
    displayLabel: SampleTool.getPrompt("Coordinate"),
    typename: "string"
  };
};
SampleTool._stationName = "station";
SampleTool._getStationDescription = () => {
  return {
    name: SampleTool._stationName,
    displayLabel: SampleTool.getPrompt("Station"),
    typename: "string"
  };
};
SampleTool._useLengthName = "useLength";
SampleTool._getUseLengthDescription = () => {
  return {
    name: SampleTool._useLengthName,
    displayLabel: "",
    typename: "boolean",
    editor: {
      params: [
        {
          type: PropertyEditorParamTypes.SuppressEditorLabel,
          suppressLabelPlaceholder: true
        }
      ]
    }
  };
};
SampleTool._lengthName = "length";
SampleTool._surveyLengthName = "surveyLength";
const dynamicToolSvg = "data:image/svg+xml,%3c?xml%20version='1.0'%20encoding='utf-8'?%3e%3c!--%20Generator:%20Adobe%20Illustrator%2022.0.0,%20SVG%20Export%20Plug-In%20.%20SVG%20Version:%206.00%20Build%200)%20--%3e%3csvg%20version='1.1'%20id='Layer_1'%20xmlns='http://www.w3.org/2000/svg'%20xmlns:xlink='http://www.w3.org/1999/xlink'%20x='0px'%20y='0px'%20viewBox='0%200%2016%2016'%20style='enable-background:new%200%200%2016%2016;'%20xml:space='preserve'%3e%3cpath%20d='M5.2378,0C2.3541,0,0.0117,2.339,0.0117,5.2184s2.3424,5.2086,5.2261,5.2086c0.374,0,0.7381-0.0393,1.0826-0.1179%20C6.3302,9.8964,6.409,9.5033,6.5467,9.1396C6.1826,9.2674,5.7889,9.3362,5.3756,9.346C5.3263,9.3558,5.287,9.3558,5.2378,9.3558%20c-2.2932,0-4.1533-1.8574-4.1533-4.1374c0-2.2898,1.8601-4.1472,4.1533-4.1472c2.2833,0,4.1435,1.8574,4.1435,4.1472%20c0,0.0688,0,0.1278-0.0097,0.1966C9.3615,5.8277,9.2828,6.2208,9.145,6.5845c0.3642-0.1278,0.7578-0.1966,1.1712-0.2064%20c0.0886-0.344,0.1279-0.7076,0.1378-1.081V5.2184C10.454,2.339,8.1215,0,5.2378,0z'/%3e%3cg%3e%3cpath%20d='M10.6989,6.3907c2.3777,0,4.312,1.9309,4.312,4.3043s-1.9344,4.3043-4.312,4.3043s-4.312-1.9309-4.312-4.3043%20S8.3213,6.3907,10.6989,6.3907%20M10.6989,5.39c-2.9342,0-5.3128,2.3751-5.3128,5.305S7.7648,16,10.6989,16%20s5.3128-2.3751,5.3128-5.305S13.6331,5.39,10.6989,5.39L10.6989,5.39z'/%3e%3c/g%3e%3c/svg%3e";
var StateOptions;
(function(StateOptions2) {
  StateOptions2[StateOptions2["None"] = 0] = "None";
  StateOptions2[StateOptions2["Alabama"] = 1] = "Alabama";
  StateOptions2[StateOptions2["California"] = 2] = "California";
  StateOptions2[StateOptions2["Pennsylvania"] = 3] = "Pennsylvania";
  StateOptions2[StateOptions2["NewYork"] = 4] = "NewYork";
})(StateOptions || (StateOptions = {}));
const cities = [
  { state: StateOptions.None, cities: [] },
  {
    state: StateOptions.Alabama,
    cities: ["Birmingham", "Montgomery", "Huntsville", "Mobile"]
  },
  {
    state: StateOptions.California,
    cities: ["Los Angeles", "San Diego", "San Jose", "San Francisco"]
  },
  {
    state: StateOptions.Pennsylvania,
    cities: ["Philadelphia", "Pittsburgh", "Allentown", "Erie"]
  },
  {
    state: StateOptions.NewYork,
    cities: ["New York", "Buffalo", "Rochester", "Yonkers"]
  }
];
class ToolWithDynamicSettings extends PrimitiveTool {
  constructor() {
    super(...arguments);
    this.points = [];
    this._stateValue = { value: StateOptions.None };
    this._cityValue = { value: "" };
  }
  static translate(str) {
    return AppUiTestProviders.translate(`tools.${this.toolId}.${str}`);
  }
  static getStateDescription() {
    return {
      name: this._statePropertyName,
      displayLabel: this.translate("Prompts.State"),
      typename: "enum",
      enum: {
        choices: [
          {
            label: this.translate("State.None"),
            value: StateOptions.None
          },
          {
            label: this.translate("State.Alabama"),
            value: StateOptions.Alabama
          },
          {
            label: this.translate("State.California"),
            value: StateOptions.California
          },
          {
            label: this.translate("State.Pennsylvania"),
            value: StateOptions.Pennsylvania
          },
          {
            label: this.translate("State.NewYork"),
            value: StateOptions.NewYork
          }
        ]
      }
    };
  }
  get state() {
    return this._stateValue.value;
  }
  set state(option) {
    this._stateValue.value = option;
  }
  static getCityDescription(stateId) {
    const availableCitiesChoices = cities[stateId].cities.map((cityName) => {
      return { label: cityName, value: cityName };
    });
    return {
      name: this._cityPropertyName,
      displayLabel: this.translate("Prompts.City"),
      typename: "enum",
      enum: {
        choices: availableCitiesChoices
      }
    };
  }
  get city() {
    return this._cityValue.value;
  }
  set city(option) {
    this._cityValue.value = option;
  }
  // -------- end of ToolSettings ----------
  requireWriteableTarget() {
    return false;
  }
  async onPostInstall() {
    await super.onPostInstall();
    this.setupAndPromptForNextAction();
    this.points = [];
  }
  async onUnsuspend() {
    this.provideToolAssistance();
  }
  /** Establish current tool state and initialize drawing aides following onPostInstall, onDataButtonDown, onUndoPreviousStep, or other events that advance or back up the current tool state.
   * Enable snapping or auto-locate for AccuSnap.
   * Setup AccuDraw using AccuDrawHintBuilder.
   * Set view cursor when default cursor isn't applicable.
   * Provide tool assistance.
   */
  setupAndPromptForNextAction() {
    this.provideToolAssistance();
  }
  /** A tool is responsible for providing tool assistance appropriate to the current tool state following significant events.
   * After onPostInstall to establish instructions for the initial tool state.
   * After onUnsuspend to reestablish instructions when no longer suspended by a ViewTool or InputCollector.
   * After onDataButtonDown (or other tool event) advances or backs up the current tool state.
   * After onUndoPreviousStep or onRedoPreviousStep modifies the current tool state.
   */
  provideToolAssistance() {
    const mainInstruction = ToolAssistance.createInstruction(ToolAssistanceImage.CursorClick, ToolWithDynamicSettings.translate("Prompts.GetPoint"));
    const instructions = ToolAssistance.createInstructions(mainInstruction);
    IModelApp.notifications.setToolAssistance(instructions);
  }
  async onDataButtonDown(_ev) {
    this.setupAndPromptForNextAction();
    return EventHandled.No;
  }
  async onResetButtonUp(_ev) {
    await this.onReinitialize();
    return EventHandled.No;
  }
  async onRestartTool() {
    const tool = new ToolWithDynamicSettings();
    if (!await tool.run())
      return this.exitTool();
  }
  /** Used to supply DefaultToolSettingProvider with a list of properties to use to generate ToolSettings.  If undefined then no ToolSettings will be displayed */
  supplyToolSettingsProperties() {
    const toolSettings = new Array();
    toolSettings.push({
      value: this._stateValue,
      property: ToolWithDynamicSettings.getStateDescription(),
      editorPosition: { rowPriority: 1, columnIndex: 1 }
    });
    if (this.state.valueOf() > 0 && this.state.valueOf() < cities.length) {
      toolSettings.push({
        value: this._cityValue,
        property: ToolWithDynamicSettings.getCityDescription(this.state),
        editorPosition: { rowPriority: 2, columnIndex: 1 }
      });
    }
    return toolSettings;
  }
  /** Called from UI to update properties in tool */
  async applyToolSettingPropertyChange(updatedValue) {
    if (updatedValue.propertyName === ToolWithDynamicSettings._statePropertyName) {
      const newStateValue = updatedValue.value.value;
      if (this.state.valueOf() !== newStateValue) {
        this.state = newStateValue;
        this.city = cities[this.state].cities[0];
        this.reloadToolSettingsProperties();
      }
    }
    if (updatedValue.propertyName === ToolWithDynamicSettings._cityPropertyName) {
      const newCityValue = updatedValue.value.value;
      if (this.city.valueOf() !== newCityValue) {
        this.city = newCityValue;
      }
    }
    return true;
  }
}
ToolWithDynamicSettings.toolId = "uiItemsProvidersTest-ToolWithDynamicSettings";
ToolWithDynamicSettings.iconSpec = dynamicToolSvg;
ToolWithDynamicSettings._statePropertyName = "state";
ToolWithDynamicSettings._cityPropertyName = "city";
class SetWidgetStateTool extends Tool {
  static get minArgs() {
    return 2;
  }
  static get maxArgs() {
    return 2;
  }
  async run(widgetId, widgetState) {
    const frontstage = UiFramework.frontstages.activeFrontstageDef;
    if (!frontstage)
      return false;
    const widget = frontstage.findWidgetDef(widgetId);
    if (!widget)
      return false;
    widget.setWidgetState(widgetState);
    return true;
  }
  async parseAndRun(...args) {
    const widgetState = Number(args[1]);
    return this.run(args[0], widgetState);
  }
}
SetWidgetStateTool.toolId = "SetWidgetStateTool";
const availableSizes = ["default"];
function createPropertyRecord(type, value, editor) {
  return new PropertyRecord({
    valueFormat: PropertyValueFormat.Primitive,
    value
  }, {
    typename: type,
    name: "",
    displayLabel: "",
    editor: typeof editor === "string" ? { name: editor } : editor
  });
}
function createEnumProperty(editor) {
  const record = createPropertyRecord(StandardTypeNames.Enum, "red", editor);
  record.property.enum = {
    choices: [
      { label: "Yellow", value: "yellow" },
      { label: "Red", value: "red" },
      { label: "Green", value: "green" }
    ],
    isStrict: false
  };
  return record;
}
const customFormattedNumberParams = {
  type: PropertyEditorParamTypes.CustomFormattedNumber,
  formatFunction: (numberValue) => numberValue.toFixed(2),
  parseFunction: (stringValue) => ({
    value: Number.parseFloat(stringValue)
  })
};
const inputEditorSizeParams = {
  type: PropertyEditorParamTypes.InputEditorSize,
  size: 5,
  maxLength: 5
};
const propertyRecords = [
  createPropertyRecord(StandardTypeNames.String, "hi"),
  createPropertyRecord(StandardTypeNames.String, "hi", {
    name: StandardEditorNames.MultiLine,
    params: [
      {
        type: PropertyEditorParamTypes.MultilineText,
        rows: 5
      }
    ]
  }),
  // BROKEN!
  // createPropertyRecord(Type.String, "icon-app-2", {
  //   name: Editor.IconPicker,
  //   params: [
  //     {
  //       type: EditorParam.IconListData,
  //       iconValue: "icon-app-2",
  //       numColumns: 2,
  //       iconValues: ["icon-app-1", "icon-app-2", "icon-apps-itwin"],
  //     } as IconListEditorParams,
  //   ],
  // }),
  createPropertyRecord(StandardTypeNames.DateTime, new Date(2018, 0, 1)),
  createPropertyRecord(StandardTypeNames.ShortDate, new Date(2018, 0, 1)),
  createPropertyRecord(StandardTypeNames.Number, 1, {
    name: StandardEditorNames.Slider,
    params: [
      {
        type: PropertyEditorParamTypes.Slider,
        minimum: 0,
        maximum: 10
      }
    ]
  }),
  createPropertyRecord(StandardTypeNames.Number, 1, {
    name: StandardEditorNames.NumberCustom,
    params: [customFormattedNumberParams]
  }),
  createPropertyRecord(StandardTypeNames.Number, 1, {
    name: StandardEditorNames.NumberCustom,
    params: [
      customFormattedNumberParams,
      {
        type: PropertyEditorParamTypes.Icon,
        definition: { iconSpec: "icon-placeholder" }
      }
    ]
  }),
  createPropertyRecord(StandardTypeNames.Number, 1, StandardEditorNames.NumericInput),
  createPropertyRecord(StandardTypeNames.Number, 1, {
    name: StandardEditorNames.NumericInput,
    params: [inputEditorSizeParams]
  }),
  createPropertyRecord(StandardTypeNames.Number, 1, {
    name: StandardEditorNames.NumericInput,
    params: [
      {
        type: PropertyEditorParamTypes.Range,
        minimum: 0,
        maximum: 10,
        step: 0.5,
        precision: 1
      }
    ]
  }),
  createPropertyRecord(StandardTypeNames.Number, 1, {
    name: StandardEditorNames.NumericInput,
    params: [
      inputEditorSizeParams,
      {
        type: PropertyEditorParamTypes.Range,
        minimum: 0,
        maximum: 10,
        step: 0.25,
        precision: 2
      }
    ]
  }),
  createPropertyRecord(StandardTypeNames.Boolean, true),
  createPropertyRecord(StandardTypeNames.Boolean, true, StandardEditorNames.Toggle),
  createPropertyRecord(StandardTypeNames.Boolean, true, {
    name: "image-check-box",
    params: [
      {
        type: PropertyEditorParamTypes.CheckBoxImages,
        imageOff: "icon-visibility-hide-2",
        imageOn: "icon-visibility"
      }
    ]
  }),
  createEnumProperty(),
  createEnumProperty(StandardEditorNames.EnumButtonGroup),
  createEnumProperty({
    name: StandardEditorNames.EnumButtonGroup,
    params: [
      {
        type: PropertyEditorParamTypes.ButtonGroupData,
        buttons: [
          {
            iconSpec: "icon-app-1"
          },
          {
            iconSpec: "icon-app-2"
          },
          {
            iconSpec: "icon-apps-itwin"
          }
        ]
      }
    ]
  })
];
function EditorExampleComponent() {
  return reactExports.createElement(Flex, { flexDirection: "column", alignItems: "flex-start", gap: "m", style: { width: "100%" } }, propertyRecords.map((record, index) => {
    const editorKey = createEditorKey(record);
    const editorId = editorKey.replace(/[^A-Za-z]/g, "");
    return reactExports.createElement(
      Flex,
      { key: index, flexDirection: "column" },
      reactExports.createElement(
        Flex,
        { flexDirection: "row", gap: "xl" },
        reactExports.createElement(
          Flex.Item,
          { id: `Legacy${editorId}`, alignSelf: "flex-start", style: { width: "300px" } },
          reactExports.createElement(OldEditorRenderer, { record })
        ),
        reactExports.createElement(Divider, { orientation: "vertical" }),
        reactExports.createElement(
          Flex.Item,
          { id: `New${editorId}`, alignSelf: "flex-end", style: { width: "300px" } },
          reactExports.createElement(NewEditorRenderer, { record })
        )
      ),
      reactExports.createElement(
        Flex.Item,
        { alignSelf: "flex-start" },
        reactExports.createElement(
          Text,
          { variant: "small", isMuted: true },
          editorKey,
          record.property.editor && reactExports.createElement(
            DropdownMenu,
            { menuItems: (close) => [
              reactExports.createElement(
                MenuItem,
                { key: 1, onClick: close },
                reactExports.createElement(Text, { variant: "leading" }, "Editor config:"),
                reactExports.createElement("code", { style: { whiteSpace: "pre", display: "block" } }, JSON.stringify(record.property.editor, void 0, 2))
              )
            ] },
            reactExports.createElement(
              IconButton,
              { styleType: "borderless", size: "small" },
              reactExports.createElement(SvgDetails, null)
            )
          )
        )
      )
    );
  }));
}
function OldEditorRenderer({ record }) {
  return reactExports.createElement(Flex, { flexDirection: "row", flexWrap: "nowrap", alignItems: "flex-end" }, availableSizes.map((localSize) => reactExports.createElement(
    Flex.Item,
    { key: localSize },
    reactExports.createElement(EditorContainer, { propertyRecord: record, onCommit: () => void 0, onCancel: () => void 0 })
  )));
}
function NewEditorRenderer({ record }) {
  return reactExports.createElement(Flex, { flexDirection: "row", flexWrap: "nowrap", alignItems: "flex-end" }, availableSizes.map((localSize) => reactExports.createElement(
    Flex.Item,
    { key: localSize },
    reactExports.createElement(PropertyRecordEditor, {
      propertyRecord: record,
      onCommit: () => void 0,
      onCancel: () => void 0,
      editorSystem: "new",
      size: "small"
      // size={localSize}
    })
  )));
}
function createEditorKey(record) {
  return `${PropertyValueFormat[record.value.valueFormat]}:${record.property.typename}:${record.property.editor?.name ?? "Default"}[${record.property.editor?.params?.map((p) => p.type).join(",") ?? ""}]`.replace("[]", "");
}
const createTreeNodeItem = (id2, parentId) => {
  return {
    id: id2,
    parentId,
    label: PropertyRecord.fromString(id2, id2)
  };
};
const createHierarchy = (rootNodeCount, childrenNodeCount) => {
  const hierarchy = /* @__PURE__ */ new Map();
  const rootNodes = [];
  for (let i = 0; i < rootNodeCount; i++) {
    rootNodes[i] = createTreeNodeItem(`Node ${i.toString()}`);
    const nodes = [];
    if (i !== 1) {
      for (let x = 0; x < childrenNodeCount; x++) {
        nodes[x] = createTreeNodeItem(`Node ${i.toString()}-${x.toString()}`, rootNodes[i].id);
        const innerNodes = [];
        if (x !== 1) {
          for (let y = 0; y < 3; y++) {
            innerNodes[y] = createTreeNodeItem(`Node ${i}-${x}-${y}`, rootNodes[i].id);
          }
          nodes[x].children = innerNodes;
        }
      }
      rootNodes[i].children = nodes;
      hierarchy.set(rootNodes[i].id, nodes);
    }
  }
  hierarchy.set(void 0, rootNodes);
  return hierarchy;
};
createHierarchy(3, 3);
class TestUiDataProvider extends DialogLayoutDataProvider {
  constructor() {
    super(...arguments);
    this.currentPageIndex = 0;
    this.numberOfPages = 2;
    this._userValue = { value: "unknown" };
    this._cityValue = { value: "unknown" };
    this.applyUiPropertyChange = (updatedValue) => {
      this.processChangesInUi([updatedValue]);
    };
    this.handleNext = () => {
      if (this.currentPageIndex < this.numberOfPages) {
        this.currentPageIndex++;
        this.reloadDialogItems();
      }
    };
    this.handlePrevious = () => {
      if (this.currentPageIndex > 0) {
        this.currentPageIndex--;
        this.reloadDialogItems();
      }
    };
  }
  get user() {
    return this._userValue.value;
  }
  set user(option) {
    this._userValue.value = option;
  }
  get city() {
    return this._cityValue.value;
  }
  set city(option) {
    this._cityValue.value = option;
  }
  /** Called by UI to inform data provider of changes.  */
  processChangesInUi(properties) {
    if (properties.length > 0) {
      for (const prop of properties) {
        if (prop.propertyName === TestUiDataProvider.userPropertyName) {
          this.user = prop.value.value ? prop.value.value : "";
          continue;
        } else if (prop.propertyName === TestUiDataProvider.cityPropertyName) {
          this.city = prop.value.value ? prop.value.value : "";
          continue;
        }
      }
    }
    this.fireDialogButtonsReloadEvent();
    return { status: PropertyChangeStatus.Success };
  }
  /** Used Called by UI to request available properties when UI is manually created. */
  supplyDialogItems() {
    const items = [];
    items.push({
      value: this._userValue,
      property: TestUiDataProvider._getUserDescription(),
      editorPosition: { rowPriority: 1, columnIndex: 1 }
    });
    if (this.currentPageIndex > 0) {
      items.push({
        value: this._cityValue,
        property: TestUiDataProvider._getCityDescription(),
        editorPosition: { rowPriority: 2, columnIndex: 1 }
      });
    }
    return items;
  }
  disableUserInputReplaceDescription() {
    const newUserValue = { value: "xxx" };
    const syncItem = {
      value: newUserValue,
      propertyName: TestUiDataProvider.userPropertyName,
      isDisabled: true,
      property: TestUiDataProvider._getUserDescription()
    };
    this.fireSyncPropertiesEvent([syncItem]);
  }
  disableUserInput() {
    const newUserValue = { value: "xxx" };
    const syncItem = {
      value: newUserValue,
      propertyName: TestUiDataProvider.userPropertyName,
      isDisabled: true
    };
    this.fireSyncPropertiesEvent([syncItem]);
  }
  supplyButtonData() {
    const buttons = [];
    if (this.currentPageIndex > 0 && this.currentPageIndex < this.numberOfPages)
      buttons.push({
        type: DialogButtonType.Previous,
        onClick: this.handlePrevious
      });
    if (this.currentPageIndex < this.numberOfPages - 1)
      buttons.push({ type: DialogButtonType.Next, onClick: this.handleNext });
    if (this.currentPageIndex === this.numberOfPages - 1) {
      buttons.push({
        type: DialogButtonType.OK,
        onClick: () => {
        },
        disabled: this.user === "unknown" || this.city === "unknown"
      });
    }
    buttons.push({ type: DialogButtonType.Cancel, onClick: () => {
    } });
    return buttons;
  }
}
TestUiDataProvider.userPropertyName = "username";
TestUiDataProvider._getUserDescription = () => {
  return {
    name: TestUiDataProvider.userPropertyName,
    displayLabel: "User",
    typename: StandardTypeNames.String
  };
};
TestUiDataProvider.cityPropertyName = "city";
TestUiDataProvider._getCityDescription = () => {
  return {
    name: TestUiDataProvider.cityPropertyName,
    displayLabel: "City",
    typename: StandardTypeNames.String
  };
};
({
  contentGroup: new ContentGroup({
    id: "content-group",
    layout: StandardContentLayouts.singleView,
    contents: [
      {
        id: "content",
        classId: "",
        content: reactExports.createElement("h1", null, "Custom Content")
      }
    ]
  })
});
reactExports.createContext({
  activeId: void 0,
  setActiveId: () => {
  }
});
reactExports.createContext(void 0);
UiFramework.frontstages;
function createBlankConnection() {
  return BlankConnection.create({
    name: "Exton PA",
    location: Cartographic.fromDegrees({
      longitude: -75.686694,
      latitude: 40.065757,
      height: 0
    }),
    extents: new Range3d(-1e3, -1e3, -100, 1e3, 1e3, 100)
  });
}
function createBlankViewState(iModel) {
  const ext = iModel.projectExtents;
  const viewState = SpatialViewState.createBlank(iModel, ext.low, ext.high.minus(ext.low));
  viewState.setAllow3dManipulations(true);
  viewState.displayStyle.backgroundColor = ColorDef.white;
  const flags = viewState.viewFlags.copy({
    grid: false,
    renderMode: RenderMode.SmoothShade,
    backgroundMap: false
  });
  viewState.displayStyle.viewFlags = flags;
  IModelApp.viewManager.onViewOpen.addOnce((vp) => {
    if (vp.view.hasSameCoordinates(viewState)) {
      vp.applyViewState(viewState);
    }
  });
  return viewState;
}
async function openDemoIModel(demoIModel) {
  let iModelConnection;
  let viewState;
  if (demoIModel === "blank") {
    iModelConnection = createBlankConnection();
    viewState = createBlankViewState(iModelConnection);
  } else {
    iModelConnection = await CheckpointConnection.openRemote(
      demoIModel.iTwinId,
      demoIModel.iModelId
    );
    const viewCreator = new ViewCreator3d(iModelConnection);
    viewState = await viewCreator.createDefaultView();
  }
  UiFramework.setIModelConnection(iModelConnection, true);
  UiFramework.setDefaultViewState(viewState, true);
}
function AppUiStory(props) {
  const demoIModel = useStoryDemoIModel(props);
  const [initialized, setInitialized] = e.useState(false);
  e.useEffect(() => {
    let ignore = false;
    const startup = async () => {
      await IModelApp.startup({
        accuDraw: new FrameworkAccuDraw(),
        toolAdmin: new FrameworkToolAdmin(),
        hubAccess: new FrontendIModelsAccess(
          new libExports.IModelsClient({
            api: {
              baseUrl: "https://api.bentley.com/imodels"
            }
          })
        ),
        authorizationClient: new DemoAuthClient(),
        notifications: new AppNotificationManager()
      });
      await UiFramework.initialize(void 0);
      await IModelApp.quantityFormatter.setActiveUnitSystem("metric");
      BentleyCloudRpcManager.initializeClient(
        {
          info: {
            title: "visualization",
            version: "v4.0"
          },
          pathPrefix: "https://api.bentley.com/imodeljs"
        },
        [
          IModelReadRpcInterface,
          IModelTileRpcInterface,
          SnapshotIModelRpcInterface
        ]
      );
      demoIModel && await openDemoIModel(demoIModel);
      await props.onInitialize?.();
      for (const provider of props.itemProviders ?? []) {
        UiItemsManager.register(provider);
      }
      const frontstages = getFrontstages(props.frontstages);
      for (const frontstage of frontstages) {
        UiFramework.frontstages.addFrontstage(frontstage);
      }
      if (ignore) return;
      setInitialized(true);
    };
    const shutdown = async () => {
      await UiFramework.getIModelConnection()?.close();
      await UiFramework.frontstages.setActiveFrontstageDef(void 0);
      UiFramework.frontstages.clearFrontstageProviders();
      for (const provider of props.itemProviders ?? []) {
        UiItemsManager.unregister(provider.id);
      }
      UiFramework.terminate();
      await IModelApp.shutdown();
    };
    const cleanup = appInitializer.initialize(startup, shutdown);
    return () => {
      ignore = true;
      setInitialized(false);
      cleanup();
    };
  }, [props, demoIModel]);
  if (!initialized) return /* @__PURE__ */ jsxRuntimeExports.jsx(Initializer, {});
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Initialized, { ...props });
}
function Initialized(props) {
  const { frontstages: frontstagesGetter, onFrontstageActivated } = props;
  e.useEffect(() => {
    let ignore = false;
    const frontstages = getFrontstages(frontstagesGetter);
    const frontstage = frontstages[0];
    (async function() {
      if (!frontstage) return;
      await UiFramework.frontstages.setActiveFrontstage(frontstage.id);
      if (ignore) return;
      onFrontstageActivated?.();
    })();
    return () => {
      ignore = true;
    };
  }, [frontstagesGetter, onFrontstageActivated]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Provider_default, { store: UiFramework.store, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(ThemeManager, { children: [
    props.children,
    !props.displayChildrenOnly && /* @__PURE__ */ jsxRuntimeExports.jsx(
      ConfigurableUiContent,
      {
        style: {
          height: props.layout === "fullscreen" ? "100vh" : "calc(100vh - 2rem)"
        },
        appBackstage: props.appBackstage,
        widgetIcon: true
      }
    )
  ] }) }) });
}
function Initializer() {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ProgressLinear, { indeterminate: true, labels: ["Getting things ready!"] }) });
}
function Page() {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(Title3, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Subtitle2, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(DescriptionContainer, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Primary, {}),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Controls3, {})
  ] });
}
function getFrontstages(frontstages) {
  if (!frontstages) return [createFrontstage()];
  if (Array.isArray(frontstages)) return frontstages;
  return frontstages();
}
class DemoAuthClient {
  accessToken = void 0;
  async getAccessToken() {
    this.accessToken ??= (async () => {
      const response = await fetch(
        "https://connect-itwinjscodesandbox.bentley.com/api/userToken"
      );
      const result = await response.json();
      setTimeout(
        () => this.accessToken = void 0,
        new Date(result._expiresAt).getTime() - (/* @__PURE__ */ new Date()).getTime() - 5e3
      );
      return `Bearer ${result._jwt}`;
    })();
    return this.accessToken;
  }
}
const appInitializer = /* @__PURE__ */ (() => {
  let latestStartup;
  let initializer;
  return {
    initialize: (startup, shutdown) => {
      latestStartup = startup;
      let ignore = false;
      void (async () => {
        if (initializer) {
          await initializer.cleanup();
        }
        if (ignore) return;
        if (startup !== latestStartup) return;
        let shutdownPromise;
        initializer = {
          cleanup: async () => {
            if (shutdownPromise) {
              await shutdownPromise;
              return;
            }
            await startupPromise;
            shutdownPromise = shutdown();
            await shutdownPromise;
          },
          startup
        };
        const startupPromise = startup();
        await startupPromise;
      })();
      return () => {
        ignore = true;
        if (initializer?.startup !== startup) return;
        void initializer.cleanup();
      };
    }
  };
})();
function useStoryDemoIModel(props) {
  const demoIModel = useDemoIModel();
  if (!props.demoIModel) return void 0;
  if (props.demoIModel === true) {
    return demoIModel;
  }
  return demoIModel ?? props.demoIModel?.default;
}
AppUiStory.__docgenInfo = { "description": "", "methods": [], "displayName": "AppUiStory", "props": { "appBackstage": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "children": { "required": false, "tsType": { "name": "ReactReactNode", "raw": "React.ReactNode" }, "description": "" }, "demoIModel": { "required": false, "tsType": { "name": "union", "raw": "boolean | { default: DemoIModel }", "elements": [{ "name": "boolean" }, { "name": "signature", "type": "object", "raw": "{ default: DemoIModel }", "signature": { "properties": [{ "key": "default", "value": { "name": "union", "raw": 'RemoteIModel | "blank"', "elements": [{ "name": "RemoteIModel" }, { "name": "literal", "value": '"blank"' }], "required": true } }] } }] }, "description": "" }, "frontstages": { "required": false, "tsType": { "name": "union", "raw": "Frontstage[] | (() => Frontstage[])", "elements": [{ "name": "Array", "elements": [{ "name": "Frontstage" }], "raw": "Frontstage[]" }, { "name": "unknown" }] }, "description": "" }, "itemProviders": { "required": false, "tsType": { "name": "Array", "elements": [{ "name": "UiItemsProvider" }], "raw": "UiItemsProvider[]" }, "description": "" }, "layout": { "required": false, "tsType": { "name": "literal", "value": '"fullscreen"' }, "description": "" }, "onInitialize": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "() => Promise<void>", "signature": { "arguments": [], "return": { "name": "Promise", "elements": [{ "name": "void" }], "raw": "Promise<void>" } } }, "description": "" }, "onFrontstageActivated": { "required": false, "tsType": { "name": "signature", "type": "function", "raw": "() => void", "signature": { "arguments": [], "return": { "name": "void" } } }, "description": "" }, "displayChildrenOnly": { "required": false, "tsType": { "name": "boolean" }, "description": "Only display provided children, otherwise, add ConfigurableUIContent component below children. Defaults to false;" } } };
Page.__docgenInfo = { "description": "", "methods": [], "displayName": "Page" };
export {
  AppUiStory as A,
  EditorExampleComponent as E,
  Page as P,
  ViewportContent as V
};
